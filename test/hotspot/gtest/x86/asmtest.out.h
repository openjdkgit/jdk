// BEGIN  Generated code -- do not edit
// Generated by x86-asmtest.py
    __ shldl(rcx, rdx);                                //    {load}shld ecx, edx
    __ shldl(rdx, rbx);                                //    {load}shld edx, ebx
#ifdef _LP64
    __ shldl(rbx, r8);                                 //    {load}shld ebx, r8d
    __ shldl(r8, r9);                                  //    {load}shld r8d, r9d
    __ shldl(r9, r10);                                 //    {load}shld r9d, r10d
    __ shldl(r10, r11);                                //    {load}shld r10d, r11d
    __ shldl(r11, r12);                                //    {load}shld r11d, r12d
    __ shldl(r12, r13);                                //    {load}shld r12d, r13d
    __ shldl(r13, r14);                                //    {load}shld r13d, r14d
    __ shldl(r14, r15);                                //    {load}shld r14d, r15d
    __ shldl(r15, r16);                                //    {load}shld r15d, r16d
    __ shldl(r16, r17);                                //    {load}shld r16d, r17d
    __ shldl(r17, r18);                                //    {load}shld r17d, r18d
    __ shldl(r18, r19);                                //    {load}shld r18d, r19d
    __ shldl(r19, r20);                                //    {load}shld r19d, r20d
    __ shldl(r20, r21);                                //    {load}shld r20d, r21d
    __ shldl(r21, r22);                                //    {load}shld r21d, r22d
    __ shldl(r22, r23);                                //    {load}shld r22d, r23d
    __ shldl(r23, r24);                                //    {load}shld r23d, r24d
    __ shldl(r24, r25);                                //    {load}shld r24d, r25d
    __ shldl(r25, r26);                                //    {load}shld r25d, r26d
    __ shldl(r26, r27);                                //    {load}shld r26d, r27d
    __ shldl(r27, r28);                                //    {load}shld r27d, r28d
    __ shldl(r28, r29);                                //    {load}shld r28d, r29d
    __ shldl(r29, r30);                                //    {load}shld r29d, r30d
    __ shldl(r30, r31);                                //    {load}shld r30d, r31d
    __ shldl(r31, rcx);                                //    {load}shld r31d, ecx
#endif // _LP64
    __ shrdl(rcx, rdx);                                //    {load}shrd ecx, edx
    __ shrdl(rdx, rbx);                                //    {load}shrd edx, ebx
#ifdef _LP64
    __ shrdl(rbx, r8);                                 //    {load}shrd ebx, r8d
    __ shrdl(r8, r9);                                  //    {load}shrd r8d, r9d
    __ shrdl(r9, r10);                                 //    {load}shrd r9d, r10d
    __ shrdl(r10, r11);                                //    {load}shrd r10d, r11d
    __ shrdl(r11, r12);                                //    {load}shrd r11d, r12d
    __ shrdl(r12, r13);                                //    {load}shrd r12d, r13d
    __ shrdl(r13, r14);                                //    {load}shrd r13d, r14d
    __ shrdl(r14, r15);                                //    {load}shrd r14d, r15d
    __ shrdl(r15, r16);                                //    {load}shrd r15d, r16d
    __ shrdl(r16, r17);                                //    {load}shrd r16d, r17d
    __ shrdl(r17, r18);                                //    {load}shrd r17d, r18d
    __ shrdl(r18, r19);                                //    {load}shrd r18d, r19d
    __ shrdl(r19, r20);                                //    {load}shrd r19d, r20d
    __ shrdl(r20, r21);                                //    {load}shrd r20d, r21d
    __ shrdl(r21, r22);                                //    {load}shrd r21d, r22d
    __ shrdl(r22, r23);                                //    {load}shrd r22d, r23d
    __ shrdl(r23, r24);                                //    {load}shrd r23d, r24d
    __ shrdl(r24, r25);                                //    {load}shrd r24d, r25d
    __ shrdl(r25, r26);                                //    {load}shrd r25d, r26d
    __ shrdl(r26, r27);                                //    {load}shrd r26d, r27d
    __ shrdl(r27, r28);                                //    {load}shrd r27d, r28d
    __ shrdl(r28, r29);                                //    {load}shrd r28d, r29d
    __ shrdl(r29, r30);                                //    {load}shrd r29d, r30d
    __ shrdl(r30, r31);                                //    {load}shrd r30d, r31d
    __ shrdl(r31, rcx);                                //    {load}shrd r31d, ecx
#endif // _LP64
    __ adcl(rcx, rdx);                                 //    {load}adc ecx, edx
    __ adcl(rdx, rbx);                                 //    {load}adc edx, ebx
#ifdef _LP64
    __ adcl(rbx, r8);                                  //    {load}adc ebx, r8d
    __ adcl(r8, r9);                                   //    {load}adc r8d, r9d
    __ adcl(r9, r10);                                  //    {load}adc r9d, r10d
    __ adcl(r10, r11);                                 //    {load}adc r10d, r11d
    __ adcl(r11, r12);                                 //    {load}adc r11d, r12d
    __ adcl(r12, r13);                                 //    {load}adc r12d, r13d
    __ adcl(r13, r14);                                 //    {load}adc r13d, r14d
    __ adcl(r14, r15);                                 //    {load}adc r14d, r15d
    __ adcl(r15, r16);                                 //    {load}adc r15d, r16d
    __ adcl(r16, r17);                                 //    {load}adc r16d, r17d
    __ adcl(r17, r18);                                 //    {load}adc r17d, r18d
    __ adcl(r18, r19);                                 //    {load}adc r18d, r19d
    __ adcl(r19, r20);                                 //    {load}adc r19d, r20d
    __ adcl(r20, r21);                                 //    {load}adc r20d, r21d
    __ adcl(r21, r22);                                 //    {load}adc r21d, r22d
    __ adcl(r22, r23);                                 //    {load}adc r22d, r23d
    __ adcl(r23, r24);                                 //    {load}adc r23d, r24d
    __ adcl(r24, r25);                                 //    {load}adc r24d, r25d
    __ adcl(r25, r26);                                 //    {load}adc r25d, r26d
    __ adcl(r26, r27);                                 //    {load}adc r26d, r27d
    __ adcl(r27, r28);                                 //    {load}adc r27d, r28d
    __ adcl(r28, r29);                                 //    {load}adc r28d, r29d
    __ adcl(r29, r30);                                 //    {load}adc r29d, r30d
    __ adcl(r30, r31);                                 //    {load}adc r30d, r31d
    __ adcl(r31, rcx);                                 //    {load}adc r31d, ecx
#endif // _LP64
    __ imull(rcx, rdx);                                //    {load}imul ecx, edx
    __ imull(rdx, rbx);                                //    {load}imul edx, ebx
#ifdef _LP64
    __ imull(rbx, r8);                                 //    {load}imul ebx, r8d
    __ imull(r8, r9);                                  //    {load}imul r8d, r9d
    __ imull(r9, r10);                                 //    {load}imul r9d, r10d
    __ imull(r10, r11);                                //    {load}imul r10d, r11d
    __ imull(r11, r12);                                //    {load}imul r11d, r12d
    __ imull(r12, r13);                                //    {load}imul r12d, r13d
    __ imull(r13, r14);                                //    {load}imul r13d, r14d
    __ imull(r14, r15);                                //    {load}imul r14d, r15d
    __ imull(r15, r16);                                //    {load}imul r15d, r16d
    __ imull(r16, r17);                                //    {load}imul r16d, r17d
    __ imull(r17, r18);                                //    {load}imul r17d, r18d
    __ imull(r18, r19);                                //    {load}imul r18d, r19d
    __ imull(r19, r20);                                //    {load}imul r19d, r20d
    __ imull(r20, r21);                                //    {load}imul r20d, r21d
    __ imull(r21, r22);                                //    {load}imul r21d, r22d
    __ imull(r22, r23);                                //    {load}imul r22d, r23d
    __ imull(r23, r24);                                //    {load}imul r23d, r24d
    __ imull(r24, r25);                                //    {load}imul r24d, r25d
    __ imull(r25, r26);                                //    {load}imul r25d, r26d
    __ imull(r26, r27);                                //    {load}imul r26d, r27d
    __ imull(r27, r28);                                //    {load}imul r27d, r28d
    __ imull(r28, r29);                                //    {load}imul r28d, r29d
    __ imull(r29, r30);                                //    {load}imul r29d, r30d
    __ imull(r30, r31);                                //    {load}imul r30d, r31d
    __ imull(r31, rcx);                                //    {load}imul r31d, ecx
#endif // _LP64
    __ popcntl(rcx, rdx);                              //    {load}popcnt ecx, edx
    __ popcntl(rdx, rbx);                              //    {load}popcnt edx, ebx
#ifdef _LP64
    __ popcntl(rbx, r8);                               //    {load}popcnt ebx, r8d
    __ popcntl(r8, r9);                                //    {load}popcnt r8d, r9d
    __ popcntl(r9, r10);                               //    {load}popcnt r9d, r10d
    __ popcntl(r10, r11);                              //    {load}popcnt r10d, r11d
    __ popcntl(r11, r12);                              //    {load}popcnt r11d, r12d
    __ popcntl(r12, r13);                              //    {load}popcnt r12d, r13d
    __ popcntl(r13, r14);                              //    {load}popcnt r13d, r14d
    __ popcntl(r14, r15);                              //    {load}popcnt r14d, r15d
    __ popcntl(r15, r16);                              //    {load}popcnt r15d, r16d
    __ popcntl(r16, r17);                              //    {load}popcnt r16d, r17d
    __ popcntl(r17, r18);                              //    {load}popcnt r17d, r18d
    __ popcntl(r18, r19);                              //    {load}popcnt r18d, r19d
    __ popcntl(r19, r20);                              //    {load}popcnt r19d, r20d
    __ popcntl(r20, r21);                              //    {load}popcnt r20d, r21d
    __ popcntl(r21, r22);                              //    {load}popcnt r21d, r22d
    __ popcntl(r22, r23);                              //    {load}popcnt r22d, r23d
    __ popcntl(r23, r24);                              //    {load}popcnt r23d, r24d
    __ popcntl(r24, r25);                              //    {load}popcnt r24d, r25d
    __ popcntl(r25, r26);                              //    {load}popcnt r25d, r26d
    __ popcntl(r26, r27);                              //    {load}popcnt r26d, r27d
    __ popcntl(r27, r28);                              //    {load}popcnt r27d, r28d
    __ popcntl(r28, r29);                              //    {load}popcnt r28d, r29d
    __ popcntl(r29, r30);                              //    {load}popcnt r29d, r30d
    __ popcntl(r30, r31);                              //    {load}popcnt r30d, r31d
    __ popcntl(r31, rcx);                              //    {load}popcnt r31d, ecx
#endif // _LP64
    __ sbbl(rcx, rdx);                                 //    {load}sbb ecx, edx
    __ sbbl(rdx, rbx);                                 //    {load}sbb edx, ebx
#ifdef _LP64
    __ sbbl(rbx, r8);                                  //    {load}sbb ebx, r8d
    __ sbbl(r8, r9);                                   //    {load}sbb r8d, r9d
    __ sbbl(r9, r10);                                  //    {load}sbb r9d, r10d
    __ sbbl(r10, r11);                                 //    {load}sbb r10d, r11d
    __ sbbl(r11, r12);                                 //    {load}sbb r11d, r12d
    __ sbbl(r12, r13);                                 //    {load}sbb r12d, r13d
    __ sbbl(r13, r14);                                 //    {load}sbb r13d, r14d
    __ sbbl(r14, r15);                                 //    {load}sbb r14d, r15d
    __ sbbl(r15, r16);                                 //    {load}sbb r15d, r16d
    __ sbbl(r16, r17);                                 //    {load}sbb r16d, r17d
    __ sbbl(r17, r18);                                 //    {load}sbb r17d, r18d
    __ sbbl(r18, r19);                                 //    {load}sbb r18d, r19d
    __ sbbl(r19, r20);                                 //    {load}sbb r19d, r20d
    __ sbbl(r20, r21);                                 //    {load}sbb r20d, r21d
    __ sbbl(r21, r22);                                 //    {load}sbb r21d, r22d
    __ sbbl(r22, r23);                                 //    {load}sbb r22d, r23d
    __ sbbl(r23, r24);                                 //    {load}sbb r23d, r24d
    __ sbbl(r24, r25);                                 //    {load}sbb r24d, r25d
    __ sbbl(r25, r26);                                 //    {load}sbb r25d, r26d
    __ sbbl(r26, r27);                                 //    {load}sbb r26d, r27d
    __ sbbl(r27, r28);                                 //    {load}sbb r27d, r28d
    __ sbbl(r28, r29);                                 //    {load}sbb r28d, r29d
    __ sbbl(r29, r30);                                 //    {load}sbb r29d, r30d
    __ sbbl(r30, r31);                                 //    {load}sbb r30d, r31d
    __ sbbl(r31, rcx);                                 //    {load}sbb r31d, ecx
#endif // _LP64
    __ subl(rcx, rdx);                                 //    {load}sub ecx, edx
    __ subl(rdx, rbx);                                 //    {load}sub edx, ebx
#ifdef _LP64
    __ subl(rbx, r8);                                  //    {load}sub ebx, r8d
    __ subl(r8, r9);                                   //    {load}sub r8d, r9d
    __ subl(r9, r10);                                  //    {load}sub r9d, r10d
    __ subl(r10, r11);                                 //    {load}sub r10d, r11d
    __ subl(r11, r12);                                 //    {load}sub r11d, r12d
    __ subl(r12, r13);                                 //    {load}sub r12d, r13d
    __ subl(r13, r14);                                 //    {load}sub r13d, r14d
    __ subl(r14, r15);                                 //    {load}sub r14d, r15d
    __ subl(r15, r16);                                 //    {load}sub r15d, r16d
    __ subl(r16, r17);                                 //    {load}sub r16d, r17d
    __ subl(r17, r18);                                 //    {load}sub r17d, r18d
    __ subl(r18, r19);                                 //    {load}sub r18d, r19d
    __ subl(r19, r20);                                 //    {load}sub r19d, r20d
    __ subl(r20, r21);                                 //    {load}sub r20d, r21d
    __ subl(r21, r22);                                 //    {load}sub r21d, r22d
    __ subl(r22, r23);                                 //    {load}sub r22d, r23d
    __ subl(r23, r24);                                 //    {load}sub r23d, r24d
    __ subl(r24, r25);                                 //    {load}sub r24d, r25d
    __ subl(r25, r26);                                 //    {load}sub r25d, r26d
    __ subl(r26, r27);                                 //    {load}sub r26d, r27d
    __ subl(r27, r28);                                 //    {load}sub r27d, r28d
    __ subl(r28, r29);                                 //    {load}sub r28d, r29d
    __ subl(r29, r30);                                 //    {load}sub r29d, r30d
    __ subl(r30, r31);                                 //    {load}sub r30d, r31d
    __ subl(r31, rcx);                                 //    {load}sub r31d, ecx
#endif // _LP64
    __ tzcntl(rcx, rdx);                               //    {load}tzcnt ecx, edx
    __ tzcntl(rdx, rbx);                               //    {load}tzcnt edx, ebx
#ifdef _LP64
    __ tzcntl(rbx, r8);                                //    {load}tzcnt ebx, r8d
    __ tzcntl(r8, r9);                                 //    {load}tzcnt r8d, r9d
    __ tzcntl(r9, r10);                                //    {load}tzcnt r9d, r10d
    __ tzcntl(r10, r11);                               //    {load}tzcnt r10d, r11d
    __ tzcntl(r11, r12);                               //    {load}tzcnt r11d, r12d
    __ tzcntl(r12, r13);                               //    {load}tzcnt r12d, r13d
    __ tzcntl(r13, r14);                               //    {load}tzcnt r13d, r14d
    __ tzcntl(r14, r15);                               //    {load}tzcnt r14d, r15d
    __ tzcntl(r15, r16);                               //    {load}tzcnt r15d, r16d
    __ tzcntl(r16, r17);                               //    {load}tzcnt r16d, r17d
    __ tzcntl(r17, r18);                               //    {load}tzcnt r17d, r18d
    __ tzcntl(r18, r19);                               //    {load}tzcnt r18d, r19d
    __ tzcntl(r19, r20);                               //    {load}tzcnt r19d, r20d
    __ tzcntl(r20, r21);                               //    {load}tzcnt r20d, r21d
    __ tzcntl(r21, r22);                               //    {load}tzcnt r21d, r22d
    __ tzcntl(r22, r23);                               //    {load}tzcnt r22d, r23d
    __ tzcntl(r23, r24);                               //    {load}tzcnt r23d, r24d
    __ tzcntl(r24, r25);                               //    {load}tzcnt r24d, r25d
    __ tzcntl(r25, r26);                               //    {load}tzcnt r25d, r26d
    __ tzcntl(r26, r27);                               //    {load}tzcnt r26d, r27d
    __ tzcntl(r27, r28);                               //    {load}tzcnt r27d, r28d
    __ tzcntl(r28, r29);                               //    {load}tzcnt r28d, r29d
    __ tzcntl(r29, r30);                               //    {load}tzcnt r29d, r30d
    __ tzcntl(r30, r31);                               //    {load}tzcnt r30d, r31d
    __ tzcntl(r31, rcx);                               //    {load}tzcnt r31d, ecx
#endif // _LP64
    __ lzcntl(rcx, rdx);                               //    {load}lzcnt ecx, edx
    __ lzcntl(rdx, rbx);                               //    {load}lzcnt edx, ebx
#ifdef _LP64
    __ lzcntl(rbx, r8);                                //    {load}lzcnt ebx, r8d
    __ lzcntl(r8, r9);                                 //    {load}lzcnt r8d, r9d
    __ lzcntl(r9, r10);                                //    {load}lzcnt r9d, r10d
    __ lzcntl(r10, r11);                               //    {load}lzcnt r10d, r11d
    __ lzcntl(r11, r12);                               //    {load}lzcnt r11d, r12d
    __ lzcntl(r12, r13);                               //    {load}lzcnt r12d, r13d
    __ lzcntl(r13, r14);                               //    {load}lzcnt r13d, r14d
    __ lzcntl(r14, r15);                               //    {load}lzcnt r14d, r15d
    __ lzcntl(r15, r16);                               //    {load}lzcnt r15d, r16d
    __ lzcntl(r16, r17);                               //    {load}lzcnt r16d, r17d
    __ lzcntl(r17, r18);                               //    {load}lzcnt r17d, r18d
    __ lzcntl(r18, r19);                               //    {load}lzcnt r18d, r19d
    __ lzcntl(r19, r20);                               //    {load}lzcnt r19d, r20d
    __ lzcntl(r20, r21);                               //    {load}lzcnt r20d, r21d
    __ lzcntl(r21, r22);                               //    {load}lzcnt r21d, r22d
    __ lzcntl(r22, r23);                               //    {load}lzcnt r22d, r23d
    __ lzcntl(r23, r24);                               //    {load}lzcnt r23d, r24d
    __ lzcntl(r24, r25);                               //    {load}lzcnt r24d, r25d
    __ lzcntl(r25, r26);                               //    {load}lzcnt r25d, r26d
    __ lzcntl(r26, r27);                               //    {load}lzcnt r26d, r27d
    __ lzcntl(r27, r28);                               //    {load}lzcnt r27d, r28d
    __ lzcntl(r28, r29);                               //    {load}lzcnt r28d, r29d
    __ lzcntl(r29, r30);                               //    {load}lzcnt r29d, r30d
    __ lzcntl(r30, r31);                               //    {load}lzcnt r30d, r31d
    __ lzcntl(r31, rcx);                               //    {load}lzcnt r31d, ecx
#endif // _LP64
    __ addl(rcx, rdx);                                 //    {load}add ecx, edx
    __ addl(rdx, rbx);                                 //    {load}add edx, ebx
#ifdef _LP64
    __ addl(rbx, r8);                                  //    {load}add ebx, r8d
    __ addl(r8, r9);                                   //    {load}add r8d, r9d
    __ addl(r9, r10);                                  //    {load}add r9d, r10d
    __ addl(r10, r11);                                 //    {load}add r10d, r11d
    __ addl(r11, r12);                                 //    {load}add r11d, r12d
    __ addl(r12, r13);                                 //    {load}add r12d, r13d
    __ addl(r13, r14);                                 //    {load}add r13d, r14d
    __ addl(r14, r15);                                 //    {load}add r14d, r15d
    __ addl(r15, r16);                                 //    {load}add r15d, r16d
    __ addl(r16, r17);                                 //    {load}add r16d, r17d
    __ addl(r17, r18);                                 //    {load}add r17d, r18d
    __ addl(r18, r19);                                 //    {load}add r18d, r19d
    __ addl(r19, r20);                                 //    {load}add r19d, r20d
    __ addl(r20, r21);                                 //    {load}add r20d, r21d
    __ addl(r21, r22);                                 //    {load}add r21d, r22d
    __ addl(r22, r23);                                 //    {load}add r22d, r23d
    __ addl(r23, r24);                                 //    {load}add r23d, r24d
    __ addl(r24, r25);                                 //    {load}add r24d, r25d
    __ addl(r25, r26);                                 //    {load}add r25d, r26d
    __ addl(r26, r27);                                 //    {load}add r26d, r27d
    __ addl(r27, r28);                                 //    {load}add r27d, r28d
    __ addl(r28, r29);                                 //    {load}add r28d, r29d
    __ addl(r29, r30);                                 //    {load}add r29d, r30d
    __ addl(r30, r31);                                 //    {load}add r30d, r31d
    __ addl(r31, rcx);                                 //    {load}add r31d, ecx
#endif // _LP64
    __ andl(rcx, rdx);                                 //    {load}and ecx, edx
    __ andl(rdx, rbx);                                 //    {load}and edx, ebx
#ifdef _LP64
    __ andl(rbx, r8);                                  //    {load}and ebx, r8d
    __ andl(r8, r9);                                   //    {load}and r8d, r9d
    __ andl(r9, r10);                                  //    {load}and r9d, r10d
    __ andl(r10, r11);                                 //    {load}and r10d, r11d
    __ andl(r11, r12);                                 //    {load}and r11d, r12d
    __ andl(r12, r13);                                 //    {load}and r12d, r13d
    __ andl(r13, r14);                                 //    {load}and r13d, r14d
    __ andl(r14, r15);                                 //    {load}and r14d, r15d
    __ andl(r15, r16);                                 //    {load}and r15d, r16d
    __ andl(r16, r17);                                 //    {load}and r16d, r17d
    __ andl(r17, r18);                                 //    {load}and r17d, r18d
    __ andl(r18, r19);                                 //    {load}and r18d, r19d
    __ andl(r19, r20);                                 //    {load}and r19d, r20d
    __ andl(r20, r21);                                 //    {load}and r20d, r21d
    __ andl(r21, r22);                                 //    {load}and r21d, r22d
    __ andl(r22, r23);                                 //    {load}and r22d, r23d
    __ andl(r23, r24);                                 //    {load}and r23d, r24d
    __ andl(r24, r25);                                 //    {load}and r24d, r25d
    __ andl(r25, r26);                                 //    {load}and r25d, r26d
    __ andl(r26, r27);                                 //    {load}and r26d, r27d
    __ andl(r27, r28);                                 //    {load}and r27d, r28d
    __ andl(r28, r29);                                 //    {load}and r28d, r29d
    __ andl(r29, r30);                                 //    {load}and r29d, r30d
    __ andl(r30, r31);                                 //    {load}and r30d, r31d
    __ andl(r31, rcx);                                 //    {load}and r31d, ecx
#endif // _LP64
    __ orl(rcx, rdx);                                  //    {load}or ecx, edx
    __ orl(rdx, rbx);                                  //    {load}or edx, ebx
#ifdef _LP64
    __ orl(rbx, r8);                                   //    {load}or ebx, r8d
    __ orl(r8, r9);                                    //    {load}or r8d, r9d
    __ orl(r9, r10);                                   //    {load}or r9d, r10d
    __ orl(r10, r11);                                  //    {load}or r10d, r11d
    __ orl(r11, r12);                                  //    {load}or r11d, r12d
    __ orl(r12, r13);                                  //    {load}or r12d, r13d
    __ orl(r13, r14);                                  //    {load}or r13d, r14d
    __ orl(r14, r15);                                  //    {load}or r14d, r15d
    __ orl(r15, r16);                                  //    {load}or r15d, r16d
    __ orl(r16, r17);                                  //    {load}or r16d, r17d
    __ orl(r17, r18);                                  //    {load}or r17d, r18d
    __ orl(r18, r19);                                  //    {load}or r18d, r19d
    __ orl(r19, r20);                                  //    {load}or r19d, r20d
    __ orl(r20, r21);                                  //    {load}or r20d, r21d
    __ orl(r21, r22);                                  //    {load}or r21d, r22d
    __ orl(r22, r23);                                  //    {load}or r22d, r23d
    __ orl(r23, r24);                                  //    {load}or r23d, r24d
    __ orl(r24, r25);                                  //    {load}or r24d, r25d
    __ orl(r25, r26);                                  //    {load}or r25d, r26d
    __ orl(r26, r27);                                  //    {load}or r26d, r27d
    __ orl(r27, r28);                                  //    {load}or r27d, r28d
    __ orl(r28, r29);                                  //    {load}or r28d, r29d
    __ orl(r29, r30);                                  //    {load}or r29d, r30d
    __ orl(r30, r31);                                  //    {load}or r30d, r31d
    __ orl(r31, rcx);                                  //    {load}or r31d, ecx
#endif // _LP64
    __ xorl(rcx, rdx);                                 //    {load}xor ecx, edx
    __ xorl(rdx, rbx);                                 //    {load}xor edx, ebx
#ifdef _LP64
    __ xorl(rbx, r8);                                  //    {load}xor ebx, r8d
    __ xorl(r8, r9);                                   //    {load}xor r8d, r9d
    __ xorl(r9, r10);                                  //    {load}xor r9d, r10d
    __ xorl(r10, r11);                                 //    {load}xor r10d, r11d
    __ xorl(r11, r12);                                 //    {load}xor r11d, r12d
    __ xorl(r12, r13);                                 //    {load}xor r12d, r13d
    __ xorl(r13, r14);                                 //    {load}xor r13d, r14d
    __ xorl(r14, r15);                                 //    {load}xor r14d, r15d
    __ xorl(r15, r16);                                 //    {load}xor r15d, r16d
    __ xorl(r16, r17);                                 //    {load}xor r16d, r17d
    __ xorl(r17, r18);                                 //    {load}xor r17d, r18d
    __ xorl(r18, r19);                                 //    {load}xor r18d, r19d
    __ xorl(r19, r20);                                 //    {load}xor r19d, r20d
    __ xorl(r20, r21);                                 //    {load}xor r20d, r21d
    __ xorl(r21, r22);                                 //    {load}xor r21d, r22d
    __ xorl(r22, r23);                                 //    {load}xor r22d, r23d
    __ xorl(r23, r24);                                 //    {load}xor r23d, r24d
    __ xorl(r24, r25);                                 //    {load}xor r24d, r25d
    __ xorl(r25, r26);                                 //    {load}xor r25d, r26d
    __ xorl(r26, r27);                                 //    {load}xor r26d, r27d
    __ xorl(r27, r28);                                 //    {load}xor r27d, r28d
    __ xorl(r28, r29);                                 //    {load}xor r28d, r29d
    __ xorl(r29, r30);                                 //    {load}xor r29d, r30d
    __ xorl(r30, r31);                                 //    {load}xor r30d, r31d
    __ xorl(r31, rcx);                                 //    {load}xor r31d, ecx
#endif // _LP64
    __ addb(Address(rdx, rbx), rcx);                   //    add byte ptr [rdx + rbx], cl
#ifdef _LP64
    __ addb(Address(rbx, r8), rdx);                    //    add byte ptr [rbx + r8], dl
    __ addb(Address(r8, r9), rbx);                     //    add byte ptr [r8 + r9], bl
    __ addb(Address(r9, r10), r8);                     //    add byte ptr [r9 + r10], r8b
    __ addb(Address(r10, r11), r9);                    //    add byte ptr [r10 + r11], r9b
    __ addb(Address(r11, r12), r10);                   //    add byte ptr [r11 + r12], r10b
    __ addb(Address(r12, r13), r11);                   //    add byte ptr [r12 + r13], r11b
    __ addb(Address(r13, r14), r12);                   //    add byte ptr [r13 + r14], r12b
    __ addb(Address(r14, r15), r13);                   //    add byte ptr [r14 + r15], r13b
    __ addb(Address(r15, r16), r14);                   //    add byte ptr [r15 + r16], r14b
    __ addb(Address(r16, r17), r15);                   //    add byte ptr [r16 + r17], r15b
    __ addb(Address(r17, r18), r16);                   //    add byte ptr [r17 + r18], r16b
    __ addb(Address(r18, r19), r17);                   //    add byte ptr [r18 + r19], r17b
    __ addb(Address(r19, r20), r18);                   //    add byte ptr [r19 + r20], r18b
    __ addb(Address(r20, r21), r19);                   //    add byte ptr [r20 + r21], r19b
    __ addb(Address(r21, r22), r20);                   //    add byte ptr [r21 + r22], r20b
    __ addb(Address(r22, r23), r21);                   //    add byte ptr [r22 + r23], r21b
    __ addb(Address(r23, r24), r22);                   //    add byte ptr [r23 + r24], r22b
    __ addb(Address(r24, r25), r23);                   //    add byte ptr [r24 + r25], r23b
    __ addb(Address(r25, r26), r24);                   //    add byte ptr [r25 + r26], r24b
    __ addb(Address(r26, r27), r25);                   //    add byte ptr [r26 + r27], r25b
    __ addb(Address(r27, r28), r26);                   //    add byte ptr [r27 + r28], r26b
    __ addb(Address(r28, r29), r27);                   //    add byte ptr [r28 + r29], r27b
    __ addb(Address(r29, r30), r28);                   //    add byte ptr [r29 + r30], r28b
    __ addb(Address(r30, r31), r29);                   //    add byte ptr [r30 + r31], r29b
    __ addb(Address(r31, rcx), r30);                   //    add byte ptr [r31 + rcx], r30b
    __ addb(Address(rcx, rdx), r31);                   //    add byte ptr [rcx + rdx], r31b
#endif // _LP64
    __ addw(Address(rdx, rbx), rcx);                   //    add word ptr [rdx + rbx], cx
#ifdef _LP64
    __ addw(Address(rbx, r8), rdx);                    //    add word ptr [rbx + r8], dx
    __ addw(Address(r8, r9), rbx);                     //    add word ptr [r8 + r9], bx
    __ addw(Address(r9, r10), r8);                     //    add word ptr [r9 + r10], r8w
    __ addw(Address(r10, r11), r9);                    //    add word ptr [r10 + r11], r9w
    __ addw(Address(r11, r12), r10);                   //    add word ptr [r11 + r12], r10w
    __ addw(Address(r12, r13), r11);                   //    add word ptr [r12 + r13], r11w
    __ addw(Address(r13, r14), r12);                   //    add word ptr [r13 + r14], r12w
    __ addw(Address(r14, r15), r13);                   //    add word ptr [r14 + r15], r13w
    __ addw(Address(r15, r16), r14);                   //    add word ptr [r15 + r16], r14w
    __ addw(Address(r16, r17), r15);                   //    add word ptr [r16 + r17], r15w
    __ addw(Address(r17, r18), r16);                   //    add word ptr [r17 + r18], r16w
    __ addw(Address(r18, r19), r17);                   //    add word ptr [r18 + r19], r17w
    __ addw(Address(r19, r20), r18);                   //    add word ptr [r19 + r20], r18w
    __ addw(Address(r20, r21), r19);                   //    add word ptr [r20 + r21], r19w
    __ addw(Address(r21, r22), r20);                   //    add word ptr [r21 + r22], r20w
    __ addw(Address(r22, r23), r21);                   //    add word ptr [r22 + r23], r21w
    __ addw(Address(r23, r24), r22);                   //    add word ptr [r23 + r24], r22w
    __ addw(Address(r24, r25), r23);                   //    add word ptr [r24 + r25], r23w
    __ addw(Address(r25, r26), r24);                   //    add word ptr [r25 + r26], r24w
    __ addw(Address(r26, r27), r25);                   //    add word ptr [r26 + r27], r25w
    __ addw(Address(r27, r28), r26);                   //    add word ptr [r27 + r28], r26w
    __ addw(Address(r28, r29), r27);                   //    add word ptr [r28 + r29], r27w
    __ addw(Address(r29, r30), r28);                   //    add word ptr [r29 + r30], r28w
    __ addw(Address(r30, r31), r29);                   //    add word ptr [r30 + r31], r29w
    __ addw(Address(r31, rcx), r30);                   //    add word ptr [r31 + rcx], r30w
    __ addw(Address(rcx, rdx), r31);                   //    add word ptr [rcx + rdx], r31w
#endif // _LP64
    __ addl(Address(rdx, rbx), rcx);                   //    add dword ptr [rdx + rbx], ecx
#ifdef _LP64
    __ addl(Address(rbx, r8), rdx);                    //    add dword ptr [rbx + r8], edx
    __ addl(Address(r8, r9), rbx);                     //    add dword ptr [r8 + r9], ebx
    __ addl(Address(r9, r10), r8);                     //    add dword ptr [r9 + r10], r8d
    __ addl(Address(r10, r11), r9);                    //    add dword ptr [r10 + r11], r9d
    __ addl(Address(r11, r12), r10);                   //    add dword ptr [r11 + r12], r10d
    __ addl(Address(r12, r13), r11);                   //    add dword ptr [r12 + r13], r11d
    __ addl(Address(r13, r14), r12);                   //    add dword ptr [r13 + r14], r12d
    __ addl(Address(r14, r15), r13);                   //    add dword ptr [r14 + r15], r13d
    __ addl(Address(r15, r16), r14);                   //    add dword ptr [r15 + r16], r14d
    __ addl(Address(r16, r17), r15);                   //    add dword ptr [r16 + r17], r15d
    __ addl(Address(r17, r18), r16);                   //    add dword ptr [r17 + r18], r16d
    __ addl(Address(r18, r19), r17);                   //    add dword ptr [r18 + r19], r17d
    __ addl(Address(r19, r20), r18);                   //    add dword ptr [r19 + r20], r18d
    __ addl(Address(r20, r21), r19);                   //    add dword ptr [r20 + r21], r19d
    __ addl(Address(r21, r22), r20);                   //    add dword ptr [r21 + r22], r20d
    __ addl(Address(r22, r23), r21);                   //    add dword ptr [r22 + r23], r21d
    __ addl(Address(r23, r24), r22);                   //    add dword ptr [r23 + r24], r22d
    __ addl(Address(r24, r25), r23);                   //    add dword ptr [r24 + r25], r23d
    __ addl(Address(r25, r26), r24);                   //    add dword ptr [r25 + r26], r24d
    __ addl(Address(r26, r27), r25);                   //    add dword ptr [r26 + r27], r25d
    __ addl(Address(r27, r28), r26);                   //    add dword ptr [r27 + r28], r26d
    __ addl(Address(r28, r29), r27);                   //    add dword ptr [r28 + r29], r27d
    __ addl(Address(r29, r30), r28);                   //    add dword ptr [r29 + r30], r28d
    __ addl(Address(r30, r31), r29);                   //    add dword ptr [r30 + r31], r29d
    __ addl(Address(r31, rcx), r30);                   //    add dword ptr [r31 + rcx], r30d
    __ addl(Address(rcx, rdx), r31);                   //    add dword ptr [rcx + rdx], r31d
#endif // _LP64
    __ adcl(Address(rdx, rbx), rcx);                   //    adc dword ptr [rdx + rbx], ecx
#ifdef _LP64
    __ adcl(Address(rbx, r8), rdx);                    //    adc dword ptr [rbx + r8], edx
    __ adcl(Address(r8, r9), rbx);                     //    adc dword ptr [r8 + r9], ebx
    __ adcl(Address(r9, r10), r8);                     //    adc dword ptr [r9 + r10], r8d
    __ adcl(Address(r10, r11), r9);                    //    adc dword ptr [r10 + r11], r9d
    __ adcl(Address(r11, r12), r10);                   //    adc dword ptr [r11 + r12], r10d
    __ adcl(Address(r12, r13), r11);                   //    adc dword ptr [r12 + r13], r11d
    __ adcl(Address(r13, r14), r12);                   //    adc dword ptr [r13 + r14], r12d
    __ adcl(Address(r14, r15), r13);                   //    adc dword ptr [r14 + r15], r13d
    __ adcl(Address(r15, r16), r14);                   //    adc dword ptr [r15 + r16], r14d
    __ adcl(Address(r16, r17), r15);                   //    adc dword ptr [r16 + r17], r15d
    __ adcl(Address(r17, r18), r16);                   //    adc dword ptr [r17 + r18], r16d
    __ adcl(Address(r18, r19), r17);                   //    adc dword ptr [r18 + r19], r17d
    __ adcl(Address(r19, r20), r18);                   //    adc dword ptr [r19 + r20], r18d
    __ adcl(Address(r20, r21), r19);                   //    adc dword ptr [r20 + r21], r19d
    __ adcl(Address(r21, r22), r20);                   //    adc dword ptr [r21 + r22], r20d
    __ adcl(Address(r22, r23), r21);                   //    adc dword ptr [r22 + r23], r21d
    __ adcl(Address(r23, r24), r22);                   //    adc dword ptr [r23 + r24], r22d
    __ adcl(Address(r24, r25), r23);                   //    adc dword ptr [r24 + r25], r23d
    __ adcl(Address(r25, r26), r24);                   //    adc dword ptr [r25 + r26], r24d
    __ adcl(Address(r26, r27), r25);                   //    adc dword ptr [r26 + r27], r25d
    __ adcl(Address(r27, r28), r26);                   //    adc dword ptr [r27 + r28], r26d
    __ adcl(Address(r28, r29), r27);                   //    adc dword ptr [r28 + r29], r27d
    __ adcl(Address(r29, r30), r28);                   //    adc dword ptr [r29 + r30], r28d
    __ adcl(Address(r30, r31), r29);                   //    adc dword ptr [r30 + r31], r29d
    __ adcl(Address(r31, rcx), r30);                   //    adc dword ptr [r31 + rcx], r30d
    __ adcl(Address(rcx, rdx), r31);                   //    adc dword ptr [rcx + rdx], r31d
#endif // _LP64
    __ andb(Address(rdx, rbx), rcx);                   //    and byte ptr [rdx + rbx], cl
#ifdef _LP64
    __ andb(Address(rbx, r8), rdx);                    //    and byte ptr [rbx + r8], dl
    __ andb(Address(r8, r9), rbx);                     //    and byte ptr [r8 + r9], bl
    __ andb(Address(r9, r10), r8);                     //    and byte ptr [r9 + r10], r8b
    __ andb(Address(r10, r11), r9);                    //    and byte ptr [r10 + r11], r9b
    __ andb(Address(r11, r12), r10);                   //    and byte ptr [r11 + r12], r10b
    __ andb(Address(r12, r13), r11);                   //    and byte ptr [r12 + r13], r11b
    __ andb(Address(r13, r14), r12);                   //    and byte ptr [r13 + r14], r12b
    __ andb(Address(r14, r15), r13);                   //    and byte ptr [r14 + r15], r13b
    __ andb(Address(r15, r16), r14);                   //    and byte ptr [r15 + r16], r14b
    __ andb(Address(r16, r17), r15);                   //    and byte ptr [r16 + r17], r15b
    __ andb(Address(r17, r18), r16);                   //    and byte ptr [r17 + r18], r16b
    __ andb(Address(r18, r19), r17);                   //    and byte ptr [r18 + r19], r17b
    __ andb(Address(r19, r20), r18);                   //    and byte ptr [r19 + r20], r18b
    __ andb(Address(r20, r21), r19);                   //    and byte ptr [r20 + r21], r19b
    __ andb(Address(r21, r22), r20);                   //    and byte ptr [r21 + r22], r20b
    __ andb(Address(r22, r23), r21);                   //    and byte ptr [r22 + r23], r21b
    __ andb(Address(r23, r24), r22);                   //    and byte ptr [r23 + r24], r22b
    __ andb(Address(r24, r25), r23);                   //    and byte ptr [r24 + r25], r23b
    __ andb(Address(r25, r26), r24);                   //    and byte ptr [r25 + r26], r24b
    __ andb(Address(r26, r27), r25);                   //    and byte ptr [r26 + r27], r25b
    __ andb(Address(r27, r28), r26);                   //    and byte ptr [r27 + r28], r26b
    __ andb(Address(r28, r29), r27);                   //    and byte ptr [r28 + r29], r27b
    __ andb(Address(r29, r30), r28);                   //    and byte ptr [r29 + r30], r28b
    __ andb(Address(r30, r31), r29);                   //    and byte ptr [r30 + r31], r29b
    __ andb(Address(r31, rcx), r30);                   //    and byte ptr [r31 + rcx], r30b
    __ andb(Address(rcx, rdx), r31);                   //    and byte ptr [rcx + rdx], r31b
#endif // _LP64
    __ andl(Address(rdx, rbx), rcx);                   //    and dword ptr [rdx + rbx], ecx
#ifdef _LP64
    __ andl(Address(rbx, r8), rdx);                    //    and dword ptr [rbx + r8], edx
    __ andl(Address(r8, r9), rbx);                     //    and dword ptr [r8 + r9], ebx
    __ andl(Address(r9, r10), r8);                     //    and dword ptr [r9 + r10], r8d
    __ andl(Address(r10, r11), r9);                    //    and dword ptr [r10 + r11], r9d
    __ andl(Address(r11, r12), r10);                   //    and dword ptr [r11 + r12], r10d
    __ andl(Address(r12, r13), r11);                   //    and dword ptr [r12 + r13], r11d
    __ andl(Address(r13, r14), r12);                   //    and dword ptr [r13 + r14], r12d
    __ andl(Address(r14, r15), r13);                   //    and dword ptr [r14 + r15], r13d
    __ andl(Address(r15, r16), r14);                   //    and dword ptr [r15 + r16], r14d
    __ andl(Address(r16, r17), r15);                   //    and dword ptr [r16 + r17], r15d
    __ andl(Address(r17, r18), r16);                   //    and dword ptr [r17 + r18], r16d
    __ andl(Address(r18, r19), r17);                   //    and dword ptr [r18 + r19], r17d
    __ andl(Address(r19, r20), r18);                   //    and dword ptr [r19 + r20], r18d
    __ andl(Address(r20, r21), r19);                   //    and dword ptr [r20 + r21], r19d
    __ andl(Address(r21, r22), r20);                   //    and dword ptr [r21 + r22], r20d
    __ andl(Address(r22, r23), r21);                   //    and dword ptr [r22 + r23], r21d
    __ andl(Address(r23, r24), r22);                   //    and dword ptr [r23 + r24], r22d
    __ andl(Address(r24, r25), r23);                   //    and dword ptr [r24 + r25], r23d
    __ andl(Address(r25, r26), r24);                   //    and dword ptr [r25 + r26], r24d
    __ andl(Address(r26, r27), r25);                   //    and dword ptr [r26 + r27], r25d
    __ andl(Address(r27, r28), r26);                   //    and dword ptr [r27 + r28], r26d
    __ andl(Address(r28, r29), r27);                   //    and dword ptr [r28 + r29], r27d
    __ andl(Address(r29, r30), r28);                   //    and dword ptr [r29 + r30], r28d
    __ andl(Address(r30, r31), r29);                   //    and dword ptr [r30 + r31], r29d
    __ andl(Address(r31, rcx), r30);                   //    and dword ptr [r31 + rcx], r30d
    __ andl(Address(rcx, rdx), r31);                   //    and dword ptr [rcx + rdx], r31d
#endif // _LP64
    __ orb(Address(rdx, rbx), rcx);                    //    or byte ptr [rdx + rbx], cl
#ifdef _LP64
    __ orb(Address(rbx, r8), rdx);                     //    or byte ptr [rbx + r8], dl
    __ orb(Address(r8, r9), rbx);                      //    or byte ptr [r8 + r9], bl
    __ orb(Address(r9, r10), r8);                      //    or byte ptr [r9 + r10], r8b
    __ orb(Address(r10, r11), r9);                     //    or byte ptr [r10 + r11], r9b
    __ orb(Address(r11, r12), r10);                    //    or byte ptr [r11 + r12], r10b
    __ orb(Address(r12, r13), r11);                    //    or byte ptr [r12 + r13], r11b
    __ orb(Address(r13, r14), r12);                    //    or byte ptr [r13 + r14], r12b
    __ orb(Address(r14, r15), r13);                    //    or byte ptr [r14 + r15], r13b
    __ orb(Address(r15, r16), r14);                    //    or byte ptr [r15 + r16], r14b
    __ orb(Address(r16, r17), r15);                    //    or byte ptr [r16 + r17], r15b
    __ orb(Address(r17, r18), r16);                    //    or byte ptr [r17 + r18], r16b
    __ orb(Address(r18, r19), r17);                    //    or byte ptr [r18 + r19], r17b
    __ orb(Address(r19, r20), r18);                    //    or byte ptr [r19 + r20], r18b
    __ orb(Address(r20, r21), r19);                    //    or byte ptr [r20 + r21], r19b
    __ orb(Address(r21, r22), r20);                    //    or byte ptr [r21 + r22], r20b
    __ orb(Address(r22, r23), r21);                    //    or byte ptr [r22 + r23], r21b
    __ orb(Address(r23, r24), r22);                    //    or byte ptr [r23 + r24], r22b
    __ orb(Address(r24, r25), r23);                    //    or byte ptr [r24 + r25], r23b
    __ orb(Address(r25, r26), r24);                    //    or byte ptr [r25 + r26], r24b
    __ orb(Address(r26, r27), r25);                    //    or byte ptr [r26 + r27], r25b
    __ orb(Address(r27, r28), r26);                    //    or byte ptr [r27 + r28], r26b
    __ orb(Address(r28, r29), r27);                    //    or byte ptr [r28 + r29], r27b
    __ orb(Address(r29, r30), r28);                    //    or byte ptr [r29 + r30], r28b
    __ orb(Address(r30, r31), r29);                    //    or byte ptr [r30 + r31], r29b
    __ orb(Address(r31, rcx), r30);                    //    or byte ptr [r31 + rcx], r30b
    __ orb(Address(rcx, rdx), r31);                    //    or byte ptr [rcx + rdx], r31b
#endif // _LP64
    __ orl(Address(rdx, rbx), rcx);                    //    or dword ptr [rdx + rbx], ecx
#ifdef _LP64
    __ orl(Address(rbx, r8), rdx);                     //    or dword ptr [rbx + r8], edx
    __ orl(Address(r8, r9), rbx);                      //    or dword ptr [r8 + r9], ebx
    __ orl(Address(r9, r10), r8);                      //    or dword ptr [r9 + r10], r8d
    __ orl(Address(r10, r11), r9);                     //    or dword ptr [r10 + r11], r9d
    __ orl(Address(r11, r12), r10);                    //    or dword ptr [r11 + r12], r10d
    __ orl(Address(r12, r13), r11);                    //    or dword ptr [r12 + r13], r11d
    __ orl(Address(r13, r14), r12);                    //    or dword ptr [r13 + r14], r12d
    __ orl(Address(r14, r15), r13);                    //    or dword ptr [r14 + r15], r13d
    __ orl(Address(r15, r16), r14);                    //    or dword ptr [r15 + r16], r14d
    __ orl(Address(r16, r17), r15);                    //    or dword ptr [r16 + r17], r15d
    __ orl(Address(r17, r18), r16);                    //    or dword ptr [r17 + r18], r16d
    __ orl(Address(r18, r19), r17);                    //    or dword ptr [r18 + r19], r17d
    __ orl(Address(r19, r20), r18);                    //    or dword ptr [r19 + r20], r18d
    __ orl(Address(r20, r21), r19);                    //    or dword ptr [r20 + r21], r19d
    __ orl(Address(r21, r22), r20);                    //    or dword ptr [r21 + r22], r20d
    __ orl(Address(r22, r23), r21);                    //    or dword ptr [r22 + r23], r21d
    __ orl(Address(r23, r24), r22);                    //    or dword ptr [r23 + r24], r22d
    __ orl(Address(r24, r25), r23);                    //    or dword ptr [r24 + r25], r23d
    __ orl(Address(r25, r26), r24);                    //    or dword ptr [r25 + r26], r24d
    __ orl(Address(r26, r27), r25);                    //    or dword ptr [r26 + r27], r25d
    __ orl(Address(r27, r28), r26);                    //    or dword ptr [r27 + r28], r26d
    __ orl(Address(r28, r29), r27);                    //    or dword ptr [r28 + r29], r27d
    __ orl(Address(r29, r30), r28);                    //    or dword ptr [r29 + r30], r28d
    __ orl(Address(r30, r31), r29);                    //    or dword ptr [r30 + r31], r29d
    __ orl(Address(r31, rcx), r30);                    //    or dword ptr [r31 + rcx], r30d
    __ orl(Address(rcx, rdx), r31);                    //    or dword ptr [rcx + rdx], r31d
#endif // _LP64
    __ xorb(Address(rdx, rbx), rcx);                   //    xor byte ptr [rdx + rbx], cl
#ifdef _LP64
    __ xorb(Address(rbx, r8), rdx);                    //    xor byte ptr [rbx + r8], dl
    __ xorb(Address(r8, r9), rbx);                     //    xor byte ptr [r8 + r9], bl
    __ xorb(Address(r9, r10), r8);                     //    xor byte ptr [r9 + r10], r8b
    __ xorb(Address(r10, r11), r9);                    //    xor byte ptr [r10 + r11], r9b
    __ xorb(Address(r11, r12), r10);                   //    xor byte ptr [r11 + r12], r10b
    __ xorb(Address(r12, r13), r11);                   //    xor byte ptr [r12 + r13], r11b
    __ xorb(Address(r13, r14), r12);                   //    xor byte ptr [r13 + r14], r12b
    __ xorb(Address(r14, r15), r13);                   //    xor byte ptr [r14 + r15], r13b
    __ xorb(Address(r15, r16), r14);                   //    xor byte ptr [r15 + r16], r14b
    __ xorb(Address(r16, r17), r15);                   //    xor byte ptr [r16 + r17], r15b
    __ xorb(Address(r17, r18), r16);                   //    xor byte ptr [r17 + r18], r16b
    __ xorb(Address(r18, r19), r17);                   //    xor byte ptr [r18 + r19], r17b
    __ xorb(Address(r19, r20), r18);                   //    xor byte ptr [r19 + r20], r18b
    __ xorb(Address(r20, r21), r19);                   //    xor byte ptr [r20 + r21], r19b
    __ xorb(Address(r21, r22), r20);                   //    xor byte ptr [r21 + r22], r20b
    __ xorb(Address(r22, r23), r21);                   //    xor byte ptr [r22 + r23], r21b
    __ xorb(Address(r23, r24), r22);                   //    xor byte ptr [r23 + r24], r22b
    __ xorb(Address(r24, r25), r23);                   //    xor byte ptr [r24 + r25], r23b
    __ xorb(Address(r25, r26), r24);                   //    xor byte ptr [r25 + r26], r24b
    __ xorb(Address(r26, r27), r25);                   //    xor byte ptr [r26 + r27], r25b
    __ xorb(Address(r27, r28), r26);                   //    xor byte ptr [r27 + r28], r26b
    __ xorb(Address(r28, r29), r27);                   //    xor byte ptr [r28 + r29], r27b
    __ xorb(Address(r29, r30), r28);                   //    xor byte ptr [r29 + r30], r28b
    __ xorb(Address(r30, r31), r29);                   //    xor byte ptr [r30 + r31], r29b
    __ xorb(Address(r31, rcx), r30);                   //    xor byte ptr [r31 + rcx], r30b
    __ xorb(Address(rcx, rdx), r31);                   //    xor byte ptr [rcx + rdx], r31b
#endif // _LP64
    __ xorl(Address(rdx, rbx), rcx);                   //    xor dword ptr [rdx + rbx], ecx
#ifdef _LP64
    __ xorl(Address(rbx, r8), rdx);                    //    xor dword ptr [rbx + r8], edx
    __ xorl(Address(r8, r9), rbx);                     //    xor dword ptr [r8 + r9], ebx
    __ xorl(Address(r9, r10), r8);                     //    xor dword ptr [r9 + r10], r8d
    __ xorl(Address(r10, r11), r9);                    //    xor dword ptr [r10 + r11], r9d
    __ xorl(Address(r11, r12), r10);                   //    xor dword ptr [r11 + r12], r10d
    __ xorl(Address(r12, r13), r11);                   //    xor dword ptr [r12 + r13], r11d
    __ xorl(Address(r13, r14), r12);                   //    xor dword ptr [r13 + r14], r12d
    __ xorl(Address(r14, r15), r13);                   //    xor dword ptr [r14 + r15], r13d
    __ xorl(Address(r15, r16), r14);                   //    xor dword ptr [r15 + r16], r14d
    __ xorl(Address(r16, r17), r15);                   //    xor dword ptr [r16 + r17], r15d
    __ xorl(Address(r17, r18), r16);                   //    xor dword ptr [r17 + r18], r16d
    __ xorl(Address(r18, r19), r17);                   //    xor dword ptr [r18 + r19], r17d
    __ xorl(Address(r19, r20), r18);                   //    xor dword ptr [r19 + r20], r18d
    __ xorl(Address(r20, r21), r19);                   //    xor dword ptr [r20 + r21], r19d
    __ xorl(Address(r21, r22), r20);                   //    xor dword ptr [r21 + r22], r20d
    __ xorl(Address(r22, r23), r21);                   //    xor dword ptr [r22 + r23], r21d
    __ xorl(Address(r23, r24), r22);                   //    xor dword ptr [r23 + r24], r22d
    __ xorl(Address(r24, r25), r23);                   //    xor dword ptr [r24 + r25], r23d
    __ xorl(Address(r25, r26), r24);                   //    xor dword ptr [r25 + r26], r24d
    __ xorl(Address(r26, r27), r25);                   //    xor dword ptr [r26 + r27], r25d
    __ xorl(Address(r27, r28), r26);                   //    xor dword ptr [r27 + r28], r26d
    __ xorl(Address(r28, r29), r27);                   //    xor dword ptr [r28 + r29], r27d
    __ xorl(Address(r29, r30), r28);                   //    xor dword ptr [r29 + r30], r28d
    __ xorl(Address(r30, r31), r29);                   //    xor dword ptr [r30 + r31], r29d
    __ xorl(Address(r31, rcx), r30);                   //    xor dword ptr [r31 + rcx], r30d
    __ xorl(Address(rcx, rdx), r31);                   //    xor dword ptr [rcx + rdx], r31d
#endif // _LP64
    __ subl(Address(rdx, rbx), rcx);                   //    sub dword ptr [rdx + rbx], ecx
#ifdef _LP64
    __ subl(Address(rbx, r8), rdx);                    //    sub dword ptr [rbx + r8], edx
    __ subl(Address(r8, r9), rbx);                     //    sub dword ptr [r8 + r9], ebx
    __ subl(Address(r9, r10), r8);                     //    sub dword ptr [r9 + r10], r8d
    __ subl(Address(r10, r11), r9);                    //    sub dword ptr [r10 + r11], r9d
    __ subl(Address(r11, r12), r10);                   //    sub dword ptr [r11 + r12], r10d
    __ subl(Address(r12, r13), r11);                   //    sub dword ptr [r12 + r13], r11d
    __ subl(Address(r13, r14), r12);                   //    sub dword ptr [r13 + r14], r12d
    __ subl(Address(r14, r15), r13);                   //    sub dword ptr [r14 + r15], r13d
    __ subl(Address(r15, r16), r14);                   //    sub dword ptr [r15 + r16], r14d
    __ subl(Address(r16, r17), r15);                   //    sub dword ptr [r16 + r17], r15d
    __ subl(Address(r17, r18), r16);                   //    sub dword ptr [r17 + r18], r16d
    __ subl(Address(r18, r19), r17);                   //    sub dword ptr [r18 + r19], r17d
    __ subl(Address(r19, r20), r18);                   //    sub dword ptr [r19 + r20], r18d
    __ subl(Address(r20, r21), r19);                   //    sub dword ptr [r20 + r21], r19d
    __ subl(Address(r21, r22), r20);                   //    sub dword ptr [r21 + r22], r20d
    __ subl(Address(r22, r23), r21);                   //    sub dword ptr [r22 + r23], r21d
    __ subl(Address(r23, r24), r22);                   //    sub dword ptr [r23 + r24], r22d
    __ subl(Address(r24, r25), r23);                   //    sub dword ptr [r24 + r25], r23d
    __ subl(Address(r25, r26), r24);                   //    sub dword ptr [r25 + r26], r24d
    __ subl(Address(r26, r27), r25);                   //    sub dword ptr [r26 + r27], r25d
    __ subl(Address(r27, r28), r26);                   //    sub dword ptr [r27 + r28], r26d
    __ subl(Address(r28, r29), r27);                   //    sub dword ptr [r28 + r29], r27d
    __ subl(Address(r29, r30), r28);                   //    sub dword ptr [r29 + r30], r28d
    __ subl(Address(r30, r31), r29);                   //    sub dword ptr [r30 + r31], r29d
    __ subl(Address(r31, rcx), r30);                   //    sub dword ptr [r31 + rcx], r30d
    __ subl(Address(rcx, rdx), r31);                   //    sub dword ptr [rcx + rdx], r31d
#endif // _LP64
    __ adcl(Address(rcx, rdx), 1);                     //    adc dword ptr [rcx + rdx], 1
    __ adcl(Address(rdx, rbx), 1);                     //    adc dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ adcl(Address(rbx, r8), 1);                      //    adc dword ptr [rbx + r8], 1
    __ adcl(Address(r8, r9), 1);                       //    adc dword ptr [r8 + r9], 1
    __ adcl(Address(r9, r10), 1);                      //    adc dword ptr [r9 + r10], 1
    __ adcl(Address(r10, r11), 1);                     //    adc dword ptr [r10 + r11], 1
    __ adcl(Address(r11, r12), 1);                     //    adc dword ptr [r11 + r12], 1
    __ adcl(Address(r12, r13), 1);                     //    adc dword ptr [r12 + r13], 1
    __ adcl(Address(r13, r14), 1);                     //    adc dword ptr [r13 + r14], 1
    __ adcl(Address(r14, r15), 1);                     //    adc dword ptr [r14 + r15], 1
    __ adcl(Address(r15, r16), 1);                     //    adc dword ptr [r15 + r16], 1
    __ adcl(Address(r16, r17), 1);                     //    adc dword ptr [r16 + r17], 1
    __ adcl(Address(r17, r18), 1);                     //    adc dword ptr [r17 + r18], 1
    __ adcl(Address(r18, r19), 1);                     //    adc dword ptr [r18 + r19], 1
    __ adcl(Address(r19, r20), 1);                     //    adc dword ptr [r19 + r20], 1
    __ adcl(Address(r20, r21), 1);                     //    adc dword ptr [r20 + r21], 1
    __ adcl(Address(r21, r22), 1);                     //    adc dword ptr [r21 + r22], 1
    __ adcl(Address(r22, r23), 1);                     //    adc dword ptr [r22 + r23], 1
    __ adcl(Address(r23, r24), 1);                     //    adc dword ptr [r23 + r24], 1
    __ adcl(Address(r24, r25), 1);                     //    adc dword ptr [r24 + r25], 1
    __ adcl(Address(r25, r26), 1);                     //    adc dword ptr [r25 + r26], 1
    __ adcl(Address(r26, r27), 1);                     //    adc dword ptr [r26 + r27], 1
    __ adcl(Address(r27, r28), 1);                     //    adc dword ptr [r27 + r28], 1
    __ adcl(Address(r28, r29), 1);                     //    adc dword ptr [r28 + r29], 1
    __ adcl(Address(r29, r30), 1);                     //    adc dword ptr [r29 + r30], 1
    __ adcl(Address(r30, r31), 1);                     //    adc dword ptr [r30 + r31], 1
    __ adcl(Address(r31, rcx), 1);                     //    adc dword ptr [r31 + rcx], 1
    __ adcl(Address(rcx, rdx), 16);                    //    adc dword ptr [rcx + rdx], 16
    __ adcl(Address(rdx, rbx), 16);                    //    adc dword ptr [rdx + rbx], 16
    __ adcl(Address(rbx, r8), 16);                     //    adc dword ptr [rbx + r8], 16
    __ adcl(Address(r8, r9), 16);                      //    adc dword ptr [r8 + r9], 16
    __ adcl(Address(r9, r10), 16);                     //    adc dword ptr [r9 + r10], 16
    __ adcl(Address(r10, r11), 16);                    //    adc dword ptr [r10 + r11], 16
    __ adcl(Address(r11, r12), 16);                    //    adc dword ptr [r11 + r12], 16
    __ adcl(Address(r12, r13), 16);                    //    adc dword ptr [r12 + r13], 16
    __ adcl(Address(r13, r14), 16);                    //    adc dword ptr [r13 + r14], 16
    __ adcl(Address(r14, r15), 16);                    //    adc dword ptr [r14 + r15], 16
    __ adcl(Address(r15, r16), 16);                    //    adc dword ptr [r15 + r16], 16
    __ adcl(Address(r16, r17), 16);                    //    adc dword ptr [r16 + r17], 16
    __ adcl(Address(r17, r18), 16);                    //    adc dword ptr [r17 + r18], 16
    __ adcl(Address(r18, r19), 16);                    //    adc dword ptr [r18 + r19], 16
    __ adcl(Address(r19, r20), 16);                    //    adc dword ptr [r19 + r20], 16
    __ adcl(Address(r20, r21), 16);                    //    adc dword ptr [r20 + r21], 16
    __ adcl(Address(r21, r22), 16);                    //    adc dword ptr [r21 + r22], 16
    __ adcl(Address(r22, r23), 16);                    //    adc dword ptr [r22 + r23], 16
    __ adcl(Address(r23, r24), 16);                    //    adc dword ptr [r23 + r24], 16
    __ adcl(Address(r24, r25), 16);                    //    adc dword ptr [r24 + r25], 16
    __ adcl(Address(r25, r26), 16);                    //    adc dword ptr [r25 + r26], 16
    __ adcl(Address(r26, r27), 16);                    //    adc dword ptr [r26 + r27], 16
    __ adcl(Address(r27, r28), 16);                    //    adc dword ptr [r27 + r28], 16
    __ adcl(Address(r28, r29), 16);                    //    adc dword ptr [r28 + r29], 16
    __ adcl(Address(r29, r30), 16);                    //    adc dword ptr [r29 + r30], 16
    __ adcl(Address(r30, r31), 16);                    //    adc dword ptr [r30 + r31], 16
    __ adcl(Address(r31, rcx), 16);                    //    adc dword ptr [r31 + rcx], 16
    __ adcl(Address(rcx, rdx), 256);                   //    adc dword ptr [rcx + rdx], 256
    __ adcl(Address(rdx, rbx), 256);                   //    adc dword ptr [rdx + rbx], 256
    __ adcl(Address(rbx, r8), 256);                    //    adc dword ptr [rbx + r8], 256
    __ adcl(Address(r8, r9), 256);                     //    adc dword ptr [r8 + r9], 256
    __ adcl(Address(r9, r10), 256);                    //    adc dword ptr [r9 + r10], 256
    __ adcl(Address(r10, r11), 256);                   //    adc dword ptr [r10 + r11], 256
    __ adcl(Address(r11, r12), 256);                   //    adc dword ptr [r11 + r12], 256
    __ adcl(Address(r12, r13), 256);                   //    adc dword ptr [r12 + r13], 256
    __ adcl(Address(r13, r14), 256);                   //    adc dword ptr [r13 + r14], 256
    __ adcl(Address(r14, r15), 256);                   //    adc dword ptr [r14 + r15], 256
    __ adcl(Address(r15, r16), 256);                   //    adc dword ptr [r15 + r16], 256
    __ adcl(Address(r16, r17), 256);                   //    adc dword ptr [r16 + r17], 256
    __ adcl(Address(r17, r18), 256);                   //    adc dword ptr [r17 + r18], 256
    __ adcl(Address(r18, r19), 256);                   //    adc dword ptr [r18 + r19], 256
    __ adcl(Address(r19, r20), 256);                   //    adc dword ptr [r19 + r20], 256
    __ adcl(Address(r20, r21), 256);                   //    adc dword ptr [r20 + r21], 256
    __ adcl(Address(r21, r22), 256);                   //    adc dword ptr [r21 + r22], 256
    __ adcl(Address(r22, r23), 256);                   //    adc dword ptr [r22 + r23], 256
    __ adcl(Address(r23, r24), 256);                   //    adc dword ptr [r23 + r24], 256
    __ adcl(Address(r24, r25), 256);                   //    adc dword ptr [r24 + r25], 256
    __ adcl(Address(r25, r26), 256);                   //    adc dword ptr [r25 + r26], 256
    __ adcl(Address(r26, r27), 256);                   //    adc dword ptr [r26 + r27], 256
    __ adcl(Address(r27, r28), 256);                   //    adc dword ptr [r27 + r28], 256
    __ adcl(Address(r28, r29), 256);                   //    adc dword ptr [r28 + r29], 256
    __ adcl(Address(r29, r30), 256);                   //    adc dword ptr [r29 + r30], 256
    __ adcl(Address(r30, r31), 256);                   //    adc dword ptr [r30 + r31], 256
    __ adcl(Address(r31, rcx), 256);                   //    adc dword ptr [r31 + rcx], 256
    __ adcl(Address(rcx, rdx), 4096);                  //    adc dword ptr [rcx + rdx], 4096
    __ adcl(Address(rdx, rbx), 4096);                  //    adc dword ptr [rdx + rbx], 4096
    __ adcl(Address(rbx, r8), 4096);                   //    adc dword ptr [rbx + r8], 4096
    __ adcl(Address(r8, r9), 4096);                    //    adc dword ptr [r8 + r9], 4096
    __ adcl(Address(r9, r10), 4096);                   //    adc dword ptr [r9 + r10], 4096
    __ adcl(Address(r10, r11), 4096);                  //    adc dword ptr [r10 + r11], 4096
    __ adcl(Address(r11, r12), 4096);                  //    adc dword ptr [r11 + r12], 4096
    __ adcl(Address(r12, r13), 4096);                  //    adc dword ptr [r12 + r13], 4096
    __ adcl(Address(r13, r14), 4096);                  //    adc dword ptr [r13 + r14], 4096
    __ adcl(Address(r14, r15), 4096);                  //    adc dword ptr [r14 + r15], 4096
    __ adcl(Address(r15, r16), 4096);                  //    adc dword ptr [r15 + r16], 4096
    __ adcl(Address(r16, r17), 4096);                  //    adc dword ptr [r16 + r17], 4096
    __ adcl(Address(r17, r18), 4096);                  //    adc dword ptr [r17 + r18], 4096
    __ adcl(Address(r18, r19), 4096);                  //    adc dword ptr [r18 + r19], 4096
    __ adcl(Address(r19, r20), 4096);                  //    adc dword ptr [r19 + r20], 4096
    __ adcl(Address(r20, r21), 4096);                  //    adc dword ptr [r20 + r21], 4096
    __ adcl(Address(r21, r22), 4096);                  //    adc dword ptr [r21 + r22], 4096
    __ adcl(Address(r22, r23), 4096);                  //    adc dword ptr [r22 + r23], 4096
    __ adcl(Address(r23, r24), 4096);                  //    adc dword ptr [r23 + r24], 4096
    __ adcl(Address(r24, r25), 4096);                  //    adc dword ptr [r24 + r25], 4096
    __ adcl(Address(r25, r26), 4096);                  //    adc dword ptr [r25 + r26], 4096
    __ adcl(Address(r26, r27), 4096);                  //    adc dword ptr [r26 + r27], 4096
    __ adcl(Address(r27, r28), 4096);                  //    adc dword ptr [r27 + r28], 4096
    __ adcl(Address(r28, r29), 4096);                  //    adc dword ptr [r28 + r29], 4096
    __ adcl(Address(r29, r30), 4096);                  //    adc dword ptr [r29 + r30], 4096
    __ adcl(Address(r30, r31), 4096);                  //    adc dword ptr [r30 + r31], 4096
    __ adcl(Address(r31, rcx), 4096);                  //    adc dword ptr [r31 + rcx], 4096
    __ adcl(Address(rcx, rdx), 65536);                 //    adc dword ptr [rcx + rdx], 65536
    __ adcl(Address(rdx, rbx), 65536);                 //    adc dword ptr [rdx + rbx], 65536
    __ adcl(Address(rbx, r8), 65536);                  //    adc dword ptr [rbx + r8], 65536
    __ adcl(Address(r8, r9), 65536);                   //    adc dword ptr [r8 + r9], 65536
    __ adcl(Address(r9, r10), 65536);                  //    adc dword ptr [r9 + r10], 65536
    __ adcl(Address(r10, r11), 65536);                 //    adc dword ptr [r10 + r11], 65536
    __ adcl(Address(r11, r12), 65536);                 //    adc dword ptr [r11 + r12], 65536
    __ adcl(Address(r12, r13), 65536);                 //    adc dword ptr [r12 + r13], 65536
    __ adcl(Address(r13, r14), 65536);                 //    adc dword ptr [r13 + r14], 65536
    __ adcl(Address(r14, r15), 65536);                 //    adc dword ptr [r14 + r15], 65536
    __ adcl(Address(r15, r16), 65536);                 //    adc dword ptr [r15 + r16], 65536
    __ adcl(Address(r16, r17), 65536);                 //    adc dword ptr [r16 + r17], 65536
    __ adcl(Address(r17, r18), 65536);                 //    adc dword ptr [r17 + r18], 65536
    __ adcl(Address(r18, r19), 65536);                 //    adc dword ptr [r18 + r19], 65536
    __ adcl(Address(r19, r20), 65536);                 //    adc dword ptr [r19 + r20], 65536
    __ adcl(Address(r20, r21), 65536);                 //    adc dword ptr [r20 + r21], 65536
    __ adcl(Address(r21, r22), 65536);                 //    adc dword ptr [r21 + r22], 65536
    __ adcl(Address(r22, r23), 65536);                 //    adc dword ptr [r22 + r23], 65536
    __ adcl(Address(r23, r24), 65536);                 //    adc dword ptr [r23 + r24], 65536
    __ adcl(Address(r24, r25), 65536);                 //    adc dword ptr [r24 + r25], 65536
    __ adcl(Address(r25, r26), 65536);                 //    adc dword ptr [r25 + r26], 65536
    __ adcl(Address(r26, r27), 65536);                 //    adc dword ptr [r26 + r27], 65536
    __ adcl(Address(r27, r28), 65536);                 //    adc dword ptr [r27 + r28], 65536
    __ adcl(Address(r28, r29), 65536);                 //    adc dword ptr [r28 + r29], 65536
    __ adcl(Address(r29, r30), 65536);                 //    adc dword ptr [r29 + r30], 65536
    __ adcl(Address(r30, r31), 65536);                 //    adc dword ptr [r30 + r31], 65536
    __ adcl(Address(r31, rcx), 65536);                 //    adc dword ptr [r31 + rcx], 65536
    __ adcl(Address(rcx, rdx), 1048576);               //    adc dword ptr [rcx + rdx], 1048576
    __ adcl(Address(rdx, rbx), 1048576);               //    adc dword ptr [rdx + rbx], 1048576
    __ adcl(Address(rbx, r8), 1048576);                //    adc dword ptr [rbx + r8], 1048576
    __ adcl(Address(r8, r9), 1048576);                 //    adc dword ptr [r8 + r9], 1048576
    __ adcl(Address(r9, r10), 1048576);                //    adc dword ptr [r9 + r10], 1048576
    __ adcl(Address(r10, r11), 1048576);               //    adc dword ptr [r10 + r11], 1048576
    __ adcl(Address(r11, r12), 1048576);               //    adc dword ptr [r11 + r12], 1048576
    __ adcl(Address(r12, r13), 1048576);               //    adc dword ptr [r12 + r13], 1048576
    __ adcl(Address(r13, r14), 1048576);               //    adc dword ptr [r13 + r14], 1048576
    __ adcl(Address(r14, r15), 1048576);               //    adc dword ptr [r14 + r15], 1048576
    __ adcl(Address(r15, r16), 1048576);               //    adc dword ptr [r15 + r16], 1048576
    __ adcl(Address(r16, r17), 1048576);               //    adc dword ptr [r16 + r17], 1048576
    __ adcl(Address(r17, r18), 1048576);               //    adc dword ptr [r17 + r18], 1048576
    __ adcl(Address(r18, r19), 1048576);               //    adc dword ptr [r18 + r19], 1048576
    __ adcl(Address(r19, r20), 1048576);               //    adc dword ptr [r19 + r20], 1048576
    __ adcl(Address(r20, r21), 1048576);               //    adc dword ptr [r20 + r21], 1048576
    __ adcl(Address(r21, r22), 1048576);               //    adc dword ptr [r21 + r22], 1048576
    __ adcl(Address(r22, r23), 1048576);               //    adc dword ptr [r22 + r23], 1048576
    __ adcl(Address(r23, r24), 1048576);               //    adc dword ptr [r23 + r24], 1048576
    __ adcl(Address(r24, r25), 1048576);               //    adc dword ptr [r24 + r25], 1048576
    __ adcl(Address(r25, r26), 1048576);               //    adc dword ptr [r25 + r26], 1048576
    __ adcl(Address(r26, r27), 1048576);               //    adc dword ptr [r26 + r27], 1048576
    __ adcl(Address(r27, r28), 1048576);               //    adc dword ptr [r27 + r28], 1048576
    __ adcl(Address(r28, r29), 1048576);               //    adc dword ptr [r28 + r29], 1048576
    __ adcl(Address(r29, r30), 1048576);               //    adc dword ptr [r29 + r30], 1048576
    __ adcl(Address(r30, r31), 1048576);               //    adc dword ptr [r30 + r31], 1048576
    __ adcl(Address(r31, rcx), 1048576);               //    adc dword ptr [r31 + rcx], 1048576
    __ adcl(Address(rcx, rdx), 16777216);              //    adc dword ptr [rcx + rdx], 16777216
    __ adcl(Address(rdx, rbx), 16777216);              //    adc dword ptr [rdx + rbx], 16777216
    __ adcl(Address(rbx, r8), 16777216);               //    adc dword ptr [rbx + r8], 16777216
    __ adcl(Address(r8, r9), 16777216);                //    adc dword ptr [r8 + r9], 16777216
    __ adcl(Address(r9, r10), 16777216);               //    adc dword ptr [r9 + r10], 16777216
    __ adcl(Address(r10, r11), 16777216);              //    adc dword ptr [r10 + r11], 16777216
    __ adcl(Address(r11, r12), 16777216);              //    adc dword ptr [r11 + r12], 16777216
    __ adcl(Address(r12, r13), 16777216);              //    adc dword ptr [r12 + r13], 16777216
    __ adcl(Address(r13, r14), 16777216);              //    adc dword ptr [r13 + r14], 16777216
    __ adcl(Address(r14, r15), 16777216);              //    adc dword ptr [r14 + r15], 16777216
    __ adcl(Address(r15, r16), 16777216);              //    adc dword ptr [r15 + r16], 16777216
    __ adcl(Address(r16, r17), 16777216);              //    adc dword ptr [r16 + r17], 16777216
    __ adcl(Address(r17, r18), 16777216);              //    adc dword ptr [r17 + r18], 16777216
    __ adcl(Address(r18, r19), 16777216);              //    adc dword ptr [r18 + r19], 16777216
    __ adcl(Address(r19, r20), 16777216);              //    adc dword ptr [r19 + r20], 16777216
    __ adcl(Address(r20, r21), 16777216);              //    adc dword ptr [r20 + r21], 16777216
    __ adcl(Address(r21, r22), 16777216);              //    adc dword ptr [r21 + r22], 16777216
    __ adcl(Address(r22, r23), 16777216);              //    adc dword ptr [r22 + r23], 16777216
    __ adcl(Address(r23, r24), 16777216);              //    adc dword ptr [r23 + r24], 16777216
    __ adcl(Address(r24, r25), 16777216);              //    adc dword ptr [r24 + r25], 16777216
    __ adcl(Address(r25, r26), 16777216);              //    adc dword ptr [r25 + r26], 16777216
    __ adcl(Address(r26, r27), 16777216);              //    adc dword ptr [r26 + r27], 16777216
    __ adcl(Address(r27, r28), 16777216);              //    adc dword ptr [r27 + r28], 16777216
    __ adcl(Address(r28, r29), 16777216);              //    adc dword ptr [r28 + r29], 16777216
    __ adcl(Address(r29, r30), 16777216);              //    adc dword ptr [r29 + r30], 16777216
    __ adcl(Address(r30, r31), 16777216);              //    adc dword ptr [r30 + r31], 16777216
    __ adcl(Address(r31, rcx), 16777216);              //    adc dword ptr [r31 + rcx], 16777216
    __ adcl(Address(rcx, rdx), 268435456);             //    adc dword ptr [rcx + rdx], 268435456
    __ adcl(Address(rdx, rbx), 268435456);             //    adc dword ptr [rdx + rbx], 268435456
    __ adcl(Address(rbx, r8), 268435456);              //    adc dword ptr [rbx + r8], 268435456
    __ adcl(Address(r8, r9), 268435456);               //    adc dword ptr [r8 + r9], 268435456
    __ adcl(Address(r9, r10), 268435456);              //    adc dword ptr [r9 + r10], 268435456
    __ adcl(Address(r10, r11), 268435456);             //    adc dword ptr [r10 + r11], 268435456
    __ adcl(Address(r11, r12), 268435456);             //    adc dword ptr [r11 + r12], 268435456
    __ adcl(Address(r12, r13), 268435456);             //    adc dword ptr [r12 + r13], 268435456
    __ adcl(Address(r13, r14), 268435456);             //    adc dword ptr [r13 + r14], 268435456
    __ adcl(Address(r14, r15), 268435456);             //    adc dword ptr [r14 + r15], 268435456
    __ adcl(Address(r15, r16), 268435456);             //    adc dword ptr [r15 + r16], 268435456
    __ adcl(Address(r16, r17), 268435456);             //    adc dword ptr [r16 + r17], 268435456
    __ adcl(Address(r17, r18), 268435456);             //    adc dword ptr [r17 + r18], 268435456
    __ adcl(Address(r18, r19), 268435456);             //    adc dword ptr [r18 + r19], 268435456
    __ adcl(Address(r19, r20), 268435456);             //    adc dword ptr [r19 + r20], 268435456
    __ adcl(Address(r20, r21), 268435456);             //    adc dword ptr [r20 + r21], 268435456
    __ adcl(Address(r21, r22), 268435456);             //    adc dword ptr [r21 + r22], 268435456
    __ adcl(Address(r22, r23), 268435456);             //    adc dword ptr [r22 + r23], 268435456
    __ adcl(Address(r23, r24), 268435456);             //    adc dword ptr [r23 + r24], 268435456
    __ adcl(Address(r24, r25), 268435456);             //    adc dword ptr [r24 + r25], 268435456
    __ adcl(Address(r25, r26), 268435456);             //    adc dword ptr [r25 + r26], 268435456
    __ adcl(Address(r26, r27), 268435456);             //    adc dword ptr [r26 + r27], 268435456
    __ adcl(Address(r27, r28), 268435456);             //    adc dword ptr [r27 + r28], 268435456
    __ adcl(Address(r28, r29), 268435456);             //    adc dword ptr [r28 + r29], 268435456
    __ adcl(Address(r29, r30), 268435456);             //    adc dword ptr [r29 + r30], 268435456
    __ adcl(Address(r30, r31), 268435456);             //    adc dword ptr [r30 + r31], 268435456
    __ adcl(Address(r31, rcx), 268435456);             //    adc dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ andl(Address(rcx, rdx), 1);                     //    and dword ptr [rcx + rdx], 1
    __ andl(Address(rdx, rbx), 1);                     //    and dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ andl(Address(rbx, r8), 1);                      //    and dword ptr [rbx + r8], 1
    __ andl(Address(r8, r9), 1);                       //    and dword ptr [r8 + r9], 1
    __ andl(Address(r9, r10), 1);                      //    and dword ptr [r9 + r10], 1
    __ andl(Address(r10, r11), 1);                     //    and dword ptr [r10 + r11], 1
    __ andl(Address(r11, r12), 1);                     //    and dword ptr [r11 + r12], 1
    __ andl(Address(r12, r13), 1);                     //    and dword ptr [r12 + r13], 1
    __ andl(Address(r13, r14), 1);                     //    and dword ptr [r13 + r14], 1
    __ andl(Address(r14, r15), 1);                     //    and dword ptr [r14 + r15], 1
    __ andl(Address(r15, r16), 1);                     //    and dword ptr [r15 + r16], 1
    __ andl(Address(r16, r17), 1);                     //    and dword ptr [r16 + r17], 1
    __ andl(Address(r17, r18), 1);                     //    and dword ptr [r17 + r18], 1
    __ andl(Address(r18, r19), 1);                     //    and dword ptr [r18 + r19], 1
    __ andl(Address(r19, r20), 1);                     //    and dword ptr [r19 + r20], 1
    __ andl(Address(r20, r21), 1);                     //    and dword ptr [r20 + r21], 1
    __ andl(Address(r21, r22), 1);                     //    and dword ptr [r21 + r22], 1
    __ andl(Address(r22, r23), 1);                     //    and dword ptr [r22 + r23], 1
    __ andl(Address(r23, r24), 1);                     //    and dword ptr [r23 + r24], 1
    __ andl(Address(r24, r25), 1);                     //    and dword ptr [r24 + r25], 1
    __ andl(Address(r25, r26), 1);                     //    and dword ptr [r25 + r26], 1
    __ andl(Address(r26, r27), 1);                     //    and dword ptr [r26 + r27], 1
    __ andl(Address(r27, r28), 1);                     //    and dword ptr [r27 + r28], 1
    __ andl(Address(r28, r29), 1);                     //    and dword ptr [r28 + r29], 1
    __ andl(Address(r29, r30), 1);                     //    and dword ptr [r29 + r30], 1
    __ andl(Address(r30, r31), 1);                     //    and dword ptr [r30 + r31], 1
    __ andl(Address(r31, rcx), 1);                     //    and dword ptr [r31 + rcx], 1
    __ andl(Address(rcx, rdx), 16);                    //    and dword ptr [rcx + rdx], 16
    __ andl(Address(rdx, rbx), 16);                    //    and dword ptr [rdx + rbx], 16
    __ andl(Address(rbx, r8), 16);                     //    and dword ptr [rbx + r8], 16
    __ andl(Address(r8, r9), 16);                      //    and dword ptr [r8 + r9], 16
    __ andl(Address(r9, r10), 16);                     //    and dword ptr [r9 + r10], 16
    __ andl(Address(r10, r11), 16);                    //    and dword ptr [r10 + r11], 16
    __ andl(Address(r11, r12), 16);                    //    and dword ptr [r11 + r12], 16
    __ andl(Address(r12, r13), 16);                    //    and dword ptr [r12 + r13], 16
    __ andl(Address(r13, r14), 16);                    //    and dword ptr [r13 + r14], 16
    __ andl(Address(r14, r15), 16);                    //    and dword ptr [r14 + r15], 16
    __ andl(Address(r15, r16), 16);                    //    and dword ptr [r15 + r16], 16
    __ andl(Address(r16, r17), 16);                    //    and dword ptr [r16 + r17], 16
    __ andl(Address(r17, r18), 16);                    //    and dword ptr [r17 + r18], 16
    __ andl(Address(r18, r19), 16);                    //    and dword ptr [r18 + r19], 16
    __ andl(Address(r19, r20), 16);                    //    and dword ptr [r19 + r20], 16
    __ andl(Address(r20, r21), 16);                    //    and dword ptr [r20 + r21], 16
    __ andl(Address(r21, r22), 16);                    //    and dword ptr [r21 + r22], 16
    __ andl(Address(r22, r23), 16);                    //    and dword ptr [r22 + r23], 16
    __ andl(Address(r23, r24), 16);                    //    and dword ptr [r23 + r24], 16
    __ andl(Address(r24, r25), 16);                    //    and dword ptr [r24 + r25], 16
    __ andl(Address(r25, r26), 16);                    //    and dword ptr [r25 + r26], 16
    __ andl(Address(r26, r27), 16);                    //    and dword ptr [r26 + r27], 16
    __ andl(Address(r27, r28), 16);                    //    and dword ptr [r27 + r28], 16
    __ andl(Address(r28, r29), 16);                    //    and dword ptr [r28 + r29], 16
    __ andl(Address(r29, r30), 16);                    //    and dword ptr [r29 + r30], 16
    __ andl(Address(r30, r31), 16);                    //    and dword ptr [r30 + r31], 16
    __ andl(Address(r31, rcx), 16);                    //    and dword ptr [r31 + rcx], 16
    __ andl(Address(rcx, rdx), 256);                   //    and dword ptr [rcx + rdx], 256
    __ andl(Address(rdx, rbx), 256);                   //    and dword ptr [rdx + rbx], 256
    __ andl(Address(rbx, r8), 256);                    //    and dword ptr [rbx + r8], 256
    __ andl(Address(r8, r9), 256);                     //    and dword ptr [r8 + r9], 256
    __ andl(Address(r9, r10), 256);                    //    and dword ptr [r9 + r10], 256
    __ andl(Address(r10, r11), 256);                   //    and dword ptr [r10 + r11], 256
    __ andl(Address(r11, r12), 256);                   //    and dword ptr [r11 + r12], 256
    __ andl(Address(r12, r13), 256);                   //    and dword ptr [r12 + r13], 256
    __ andl(Address(r13, r14), 256);                   //    and dword ptr [r13 + r14], 256
    __ andl(Address(r14, r15), 256);                   //    and dword ptr [r14 + r15], 256
    __ andl(Address(r15, r16), 256);                   //    and dword ptr [r15 + r16], 256
    __ andl(Address(r16, r17), 256);                   //    and dword ptr [r16 + r17], 256
    __ andl(Address(r17, r18), 256);                   //    and dword ptr [r17 + r18], 256
    __ andl(Address(r18, r19), 256);                   //    and dword ptr [r18 + r19], 256
    __ andl(Address(r19, r20), 256);                   //    and dword ptr [r19 + r20], 256
    __ andl(Address(r20, r21), 256);                   //    and dword ptr [r20 + r21], 256
    __ andl(Address(r21, r22), 256);                   //    and dword ptr [r21 + r22], 256
    __ andl(Address(r22, r23), 256);                   //    and dword ptr [r22 + r23], 256
    __ andl(Address(r23, r24), 256);                   //    and dword ptr [r23 + r24], 256
    __ andl(Address(r24, r25), 256);                   //    and dword ptr [r24 + r25], 256
    __ andl(Address(r25, r26), 256);                   //    and dword ptr [r25 + r26], 256
    __ andl(Address(r26, r27), 256);                   //    and dword ptr [r26 + r27], 256
    __ andl(Address(r27, r28), 256);                   //    and dword ptr [r27 + r28], 256
    __ andl(Address(r28, r29), 256);                   //    and dword ptr [r28 + r29], 256
    __ andl(Address(r29, r30), 256);                   //    and dword ptr [r29 + r30], 256
    __ andl(Address(r30, r31), 256);                   //    and dword ptr [r30 + r31], 256
    __ andl(Address(r31, rcx), 256);                   //    and dword ptr [r31 + rcx], 256
    __ andl(Address(rcx, rdx), 4096);                  //    and dword ptr [rcx + rdx], 4096
    __ andl(Address(rdx, rbx), 4096);                  //    and dword ptr [rdx + rbx], 4096
    __ andl(Address(rbx, r8), 4096);                   //    and dword ptr [rbx + r8], 4096
    __ andl(Address(r8, r9), 4096);                    //    and dword ptr [r8 + r9], 4096
    __ andl(Address(r9, r10), 4096);                   //    and dword ptr [r9 + r10], 4096
    __ andl(Address(r10, r11), 4096);                  //    and dword ptr [r10 + r11], 4096
    __ andl(Address(r11, r12), 4096);                  //    and dword ptr [r11 + r12], 4096
    __ andl(Address(r12, r13), 4096);                  //    and dword ptr [r12 + r13], 4096
    __ andl(Address(r13, r14), 4096);                  //    and dword ptr [r13 + r14], 4096
    __ andl(Address(r14, r15), 4096);                  //    and dword ptr [r14 + r15], 4096
    __ andl(Address(r15, r16), 4096);                  //    and dword ptr [r15 + r16], 4096
    __ andl(Address(r16, r17), 4096);                  //    and dword ptr [r16 + r17], 4096
    __ andl(Address(r17, r18), 4096);                  //    and dword ptr [r17 + r18], 4096
    __ andl(Address(r18, r19), 4096);                  //    and dword ptr [r18 + r19], 4096
    __ andl(Address(r19, r20), 4096);                  //    and dword ptr [r19 + r20], 4096
    __ andl(Address(r20, r21), 4096);                  //    and dword ptr [r20 + r21], 4096
    __ andl(Address(r21, r22), 4096);                  //    and dword ptr [r21 + r22], 4096
    __ andl(Address(r22, r23), 4096);                  //    and dword ptr [r22 + r23], 4096
    __ andl(Address(r23, r24), 4096);                  //    and dword ptr [r23 + r24], 4096
    __ andl(Address(r24, r25), 4096);                  //    and dword ptr [r24 + r25], 4096
    __ andl(Address(r25, r26), 4096);                  //    and dword ptr [r25 + r26], 4096
    __ andl(Address(r26, r27), 4096);                  //    and dword ptr [r26 + r27], 4096
    __ andl(Address(r27, r28), 4096);                  //    and dword ptr [r27 + r28], 4096
    __ andl(Address(r28, r29), 4096);                  //    and dword ptr [r28 + r29], 4096
    __ andl(Address(r29, r30), 4096);                  //    and dword ptr [r29 + r30], 4096
    __ andl(Address(r30, r31), 4096);                  //    and dword ptr [r30 + r31], 4096
    __ andl(Address(r31, rcx), 4096);                  //    and dword ptr [r31 + rcx], 4096
    __ andl(Address(rcx, rdx), 65536);                 //    and dword ptr [rcx + rdx], 65536
    __ andl(Address(rdx, rbx), 65536);                 //    and dword ptr [rdx + rbx], 65536
    __ andl(Address(rbx, r8), 65536);                  //    and dword ptr [rbx + r8], 65536
    __ andl(Address(r8, r9), 65536);                   //    and dword ptr [r8 + r9], 65536
    __ andl(Address(r9, r10), 65536);                  //    and dword ptr [r9 + r10], 65536
    __ andl(Address(r10, r11), 65536);                 //    and dword ptr [r10 + r11], 65536
    __ andl(Address(r11, r12), 65536);                 //    and dword ptr [r11 + r12], 65536
    __ andl(Address(r12, r13), 65536);                 //    and dword ptr [r12 + r13], 65536
    __ andl(Address(r13, r14), 65536);                 //    and dword ptr [r13 + r14], 65536
    __ andl(Address(r14, r15), 65536);                 //    and dword ptr [r14 + r15], 65536
    __ andl(Address(r15, r16), 65536);                 //    and dword ptr [r15 + r16], 65536
    __ andl(Address(r16, r17), 65536);                 //    and dword ptr [r16 + r17], 65536
    __ andl(Address(r17, r18), 65536);                 //    and dword ptr [r17 + r18], 65536
    __ andl(Address(r18, r19), 65536);                 //    and dword ptr [r18 + r19], 65536
    __ andl(Address(r19, r20), 65536);                 //    and dword ptr [r19 + r20], 65536
    __ andl(Address(r20, r21), 65536);                 //    and dword ptr [r20 + r21], 65536
    __ andl(Address(r21, r22), 65536);                 //    and dword ptr [r21 + r22], 65536
    __ andl(Address(r22, r23), 65536);                 //    and dword ptr [r22 + r23], 65536
    __ andl(Address(r23, r24), 65536);                 //    and dword ptr [r23 + r24], 65536
    __ andl(Address(r24, r25), 65536);                 //    and dword ptr [r24 + r25], 65536
    __ andl(Address(r25, r26), 65536);                 //    and dword ptr [r25 + r26], 65536
    __ andl(Address(r26, r27), 65536);                 //    and dword ptr [r26 + r27], 65536
    __ andl(Address(r27, r28), 65536);                 //    and dword ptr [r27 + r28], 65536
    __ andl(Address(r28, r29), 65536);                 //    and dword ptr [r28 + r29], 65536
    __ andl(Address(r29, r30), 65536);                 //    and dword ptr [r29 + r30], 65536
    __ andl(Address(r30, r31), 65536);                 //    and dword ptr [r30 + r31], 65536
    __ andl(Address(r31, rcx), 65536);                 //    and dword ptr [r31 + rcx], 65536
    __ andl(Address(rcx, rdx), 1048576);               //    and dword ptr [rcx + rdx], 1048576
    __ andl(Address(rdx, rbx), 1048576);               //    and dword ptr [rdx + rbx], 1048576
    __ andl(Address(rbx, r8), 1048576);                //    and dword ptr [rbx + r8], 1048576
    __ andl(Address(r8, r9), 1048576);                 //    and dword ptr [r8 + r9], 1048576
    __ andl(Address(r9, r10), 1048576);                //    and dword ptr [r9 + r10], 1048576
    __ andl(Address(r10, r11), 1048576);               //    and dword ptr [r10 + r11], 1048576
    __ andl(Address(r11, r12), 1048576);               //    and dword ptr [r11 + r12], 1048576
    __ andl(Address(r12, r13), 1048576);               //    and dword ptr [r12 + r13], 1048576
    __ andl(Address(r13, r14), 1048576);               //    and dword ptr [r13 + r14], 1048576
    __ andl(Address(r14, r15), 1048576);               //    and dword ptr [r14 + r15], 1048576
    __ andl(Address(r15, r16), 1048576);               //    and dword ptr [r15 + r16], 1048576
    __ andl(Address(r16, r17), 1048576);               //    and dword ptr [r16 + r17], 1048576
    __ andl(Address(r17, r18), 1048576);               //    and dword ptr [r17 + r18], 1048576
    __ andl(Address(r18, r19), 1048576);               //    and dword ptr [r18 + r19], 1048576
    __ andl(Address(r19, r20), 1048576);               //    and dword ptr [r19 + r20], 1048576
    __ andl(Address(r20, r21), 1048576);               //    and dword ptr [r20 + r21], 1048576
    __ andl(Address(r21, r22), 1048576);               //    and dword ptr [r21 + r22], 1048576
    __ andl(Address(r22, r23), 1048576);               //    and dword ptr [r22 + r23], 1048576
    __ andl(Address(r23, r24), 1048576);               //    and dword ptr [r23 + r24], 1048576
    __ andl(Address(r24, r25), 1048576);               //    and dword ptr [r24 + r25], 1048576
    __ andl(Address(r25, r26), 1048576);               //    and dword ptr [r25 + r26], 1048576
    __ andl(Address(r26, r27), 1048576);               //    and dword ptr [r26 + r27], 1048576
    __ andl(Address(r27, r28), 1048576);               //    and dword ptr [r27 + r28], 1048576
    __ andl(Address(r28, r29), 1048576);               //    and dword ptr [r28 + r29], 1048576
    __ andl(Address(r29, r30), 1048576);               //    and dword ptr [r29 + r30], 1048576
    __ andl(Address(r30, r31), 1048576);               //    and dword ptr [r30 + r31], 1048576
    __ andl(Address(r31, rcx), 1048576);               //    and dword ptr [r31 + rcx], 1048576
    __ andl(Address(rcx, rdx), 16777216);              //    and dword ptr [rcx + rdx], 16777216
    __ andl(Address(rdx, rbx), 16777216);              //    and dword ptr [rdx + rbx], 16777216
    __ andl(Address(rbx, r8), 16777216);               //    and dword ptr [rbx + r8], 16777216
    __ andl(Address(r8, r9), 16777216);                //    and dword ptr [r8 + r9], 16777216
    __ andl(Address(r9, r10), 16777216);               //    and dword ptr [r9 + r10], 16777216
    __ andl(Address(r10, r11), 16777216);              //    and dword ptr [r10 + r11], 16777216
    __ andl(Address(r11, r12), 16777216);              //    and dword ptr [r11 + r12], 16777216
    __ andl(Address(r12, r13), 16777216);              //    and dword ptr [r12 + r13], 16777216
    __ andl(Address(r13, r14), 16777216);              //    and dword ptr [r13 + r14], 16777216
    __ andl(Address(r14, r15), 16777216);              //    and dword ptr [r14 + r15], 16777216
    __ andl(Address(r15, r16), 16777216);              //    and dword ptr [r15 + r16], 16777216
    __ andl(Address(r16, r17), 16777216);              //    and dword ptr [r16 + r17], 16777216
    __ andl(Address(r17, r18), 16777216);              //    and dword ptr [r17 + r18], 16777216
    __ andl(Address(r18, r19), 16777216);              //    and dword ptr [r18 + r19], 16777216
    __ andl(Address(r19, r20), 16777216);              //    and dword ptr [r19 + r20], 16777216
    __ andl(Address(r20, r21), 16777216);              //    and dword ptr [r20 + r21], 16777216
    __ andl(Address(r21, r22), 16777216);              //    and dword ptr [r21 + r22], 16777216
    __ andl(Address(r22, r23), 16777216);              //    and dword ptr [r22 + r23], 16777216
    __ andl(Address(r23, r24), 16777216);              //    and dword ptr [r23 + r24], 16777216
    __ andl(Address(r24, r25), 16777216);              //    and dword ptr [r24 + r25], 16777216
    __ andl(Address(r25, r26), 16777216);              //    and dword ptr [r25 + r26], 16777216
    __ andl(Address(r26, r27), 16777216);              //    and dword ptr [r26 + r27], 16777216
    __ andl(Address(r27, r28), 16777216);              //    and dword ptr [r27 + r28], 16777216
    __ andl(Address(r28, r29), 16777216);              //    and dword ptr [r28 + r29], 16777216
    __ andl(Address(r29, r30), 16777216);              //    and dword ptr [r29 + r30], 16777216
    __ andl(Address(r30, r31), 16777216);              //    and dword ptr [r30 + r31], 16777216
    __ andl(Address(r31, rcx), 16777216);              //    and dword ptr [r31 + rcx], 16777216
    __ andl(Address(rcx, rdx), 268435456);             //    and dword ptr [rcx + rdx], 268435456
    __ andl(Address(rdx, rbx), 268435456);             //    and dword ptr [rdx + rbx], 268435456
    __ andl(Address(rbx, r8), 268435456);              //    and dword ptr [rbx + r8], 268435456
    __ andl(Address(r8, r9), 268435456);               //    and dword ptr [r8 + r9], 268435456
    __ andl(Address(r9, r10), 268435456);              //    and dword ptr [r9 + r10], 268435456
    __ andl(Address(r10, r11), 268435456);             //    and dword ptr [r10 + r11], 268435456
    __ andl(Address(r11, r12), 268435456);             //    and dword ptr [r11 + r12], 268435456
    __ andl(Address(r12, r13), 268435456);             //    and dword ptr [r12 + r13], 268435456
    __ andl(Address(r13, r14), 268435456);             //    and dword ptr [r13 + r14], 268435456
    __ andl(Address(r14, r15), 268435456);             //    and dword ptr [r14 + r15], 268435456
    __ andl(Address(r15, r16), 268435456);             //    and dword ptr [r15 + r16], 268435456
    __ andl(Address(r16, r17), 268435456);             //    and dword ptr [r16 + r17], 268435456
    __ andl(Address(r17, r18), 268435456);             //    and dword ptr [r17 + r18], 268435456
    __ andl(Address(r18, r19), 268435456);             //    and dword ptr [r18 + r19], 268435456
    __ andl(Address(r19, r20), 268435456);             //    and dword ptr [r19 + r20], 268435456
    __ andl(Address(r20, r21), 268435456);             //    and dword ptr [r20 + r21], 268435456
    __ andl(Address(r21, r22), 268435456);             //    and dword ptr [r21 + r22], 268435456
    __ andl(Address(r22, r23), 268435456);             //    and dword ptr [r22 + r23], 268435456
    __ andl(Address(r23, r24), 268435456);             //    and dword ptr [r23 + r24], 268435456
    __ andl(Address(r24, r25), 268435456);             //    and dword ptr [r24 + r25], 268435456
    __ andl(Address(r25, r26), 268435456);             //    and dword ptr [r25 + r26], 268435456
    __ andl(Address(r26, r27), 268435456);             //    and dword ptr [r26 + r27], 268435456
    __ andl(Address(r27, r28), 268435456);             //    and dword ptr [r27 + r28], 268435456
    __ andl(Address(r28, r29), 268435456);             //    and dword ptr [r28 + r29], 268435456
    __ andl(Address(r29, r30), 268435456);             //    and dword ptr [r29 + r30], 268435456
    __ andl(Address(r30, r31), 268435456);             //    and dword ptr [r30 + r31], 268435456
    __ andl(Address(r31, rcx), 268435456);             //    and dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ addb(Address(rcx, rdx), 1);                     //    add byte ptr [rcx + rdx], 1
    __ addb(Address(rdx, rbx), 1);                     //    add byte ptr [rdx + rbx], 1
#ifdef _LP64
    __ addb(Address(rbx, r8), 1);                      //    add byte ptr [rbx + r8], 1
    __ addb(Address(r8, r9), 1);                       //    add byte ptr [r8 + r9], 1
    __ addb(Address(r9, r10), 1);                      //    add byte ptr [r9 + r10], 1
    __ addb(Address(r10, r11), 1);                     //    add byte ptr [r10 + r11], 1
    __ addb(Address(r11, r12), 1);                     //    add byte ptr [r11 + r12], 1
    __ addb(Address(r12, r13), 1);                     //    add byte ptr [r12 + r13], 1
    __ addb(Address(r13, r14), 1);                     //    add byte ptr [r13 + r14], 1
    __ addb(Address(r14, r15), 1);                     //    add byte ptr [r14 + r15], 1
    __ addb(Address(r15, r16), 1);                     //    add byte ptr [r15 + r16], 1
    __ addb(Address(r16, r17), 1);                     //    add byte ptr [r16 + r17], 1
    __ addb(Address(r17, r18), 1);                     //    add byte ptr [r17 + r18], 1
    __ addb(Address(r18, r19), 1);                     //    add byte ptr [r18 + r19], 1
    __ addb(Address(r19, r20), 1);                     //    add byte ptr [r19 + r20], 1
    __ addb(Address(r20, r21), 1);                     //    add byte ptr [r20 + r21], 1
    __ addb(Address(r21, r22), 1);                     //    add byte ptr [r21 + r22], 1
    __ addb(Address(r22, r23), 1);                     //    add byte ptr [r22 + r23], 1
    __ addb(Address(r23, r24), 1);                     //    add byte ptr [r23 + r24], 1
    __ addb(Address(r24, r25), 1);                     //    add byte ptr [r24 + r25], 1
    __ addb(Address(r25, r26), 1);                     //    add byte ptr [r25 + r26], 1
    __ addb(Address(r26, r27), 1);                     //    add byte ptr [r26 + r27], 1
    __ addb(Address(r27, r28), 1);                     //    add byte ptr [r27 + r28], 1
    __ addb(Address(r28, r29), 1);                     //    add byte ptr [r28 + r29], 1
    __ addb(Address(r29, r30), 1);                     //    add byte ptr [r29 + r30], 1
    __ addb(Address(r30, r31), 1);                     //    add byte ptr [r30 + r31], 1
    __ addb(Address(r31, rcx), 1);                     //    add byte ptr [r31 + rcx], 1
    __ addb(Address(rcx, rdx), 4);                     //    add byte ptr [rcx + rdx], 4
    __ addb(Address(rdx, rbx), 4);                     //    add byte ptr [rdx + rbx], 4
    __ addb(Address(rbx, r8), 4);                      //    add byte ptr [rbx + r8], 4
    __ addb(Address(r8, r9), 4);                       //    add byte ptr [r8 + r9], 4
    __ addb(Address(r9, r10), 4);                      //    add byte ptr [r9 + r10], 4
    __ addb(Address(r10, r11), 4);                     //    add byte ptr [r10 + r11], 4
    __ addb(Address(r11, r12), 4);                     //    add byte ptr [r11 + r12], 4
    __ addb(Address(r12, r13), 4);                     //    add byte ptr [r12 + r13], 4
    __ addb(Address(r13, r14), 4);                     //    add byte ptr [r13 + r14], 4
    __ addb(Address(r14, r15), 4);                     //    add byte ptr [r14 + r15], 4
    __ addb(Address(r15, r16), 4);                     //    add byte ptr [r15 + r16], 4
    __ addb(Address(r16, r17), 4);                     //    add byte ptr [r16 + r17], 4
    __ addb(Address(r17, r18), 4);                     //    add byte ptr [r17 + r18], 4
    __ addb(Address(r18, r19), 4);                     //    add byte ptr [r18 + r19], 4
    __ addb(Address(r19, r20), 4);                     //    add byte ptr [r19 + r20], 4
    __ addb(Address(r20, r21), 4);                     //    add byte ptr [r20 + r21], 4
    __ addb(Address(r21, r22), 4);                     //    add byte ptr [r21 + r22], 4
    __ addb(Address(r22, r23), 4);                     //    add byte ptr [r22 + r23], 4
    __ addb(Address(r23, r24), 4);                     //    add byte ptr [r23 + r24], 4
    __ addb(Address(r24, r25), 4);                     //    add byte ptr [r24 + r25], 4
    __ addb(Address(r25, r26), 4);                     //    add byte ptr [r25 + r26], 4
    __ addb(Address(r26, r27), 4);                     //    add byte ptr [r26 + r27], 4
    __ addb(Address(r27, r28), 4);                     //    add byte ptr [r27 + r28], 4
    __ addb(Address(r28, r29), 4);                     //    add byte ptr [r28 + r29], 4
    __ addb(Address(r29, r30), 4);                     //    add byte ptr [r29 + r30], 4
    __ addb(Address(r30, r31), 4);                     //    add byte ptr [r30 + r31], 4
    __ addb(Address(r31, rcx), 4);                     //    add byte ptr [r31 + rcx], 4
    __ addb(Address(rcx, rdx), 16);                    //    add byte ptr [rcx + rdx], 16
    __ addb(Address(rdx, rbx), 16);                    //    add byte ptr [rdx + rbx], 16
    __ addb(Address(rbx, r8), 16);                     //    add byte ptr [rbx + r8], 16
    __ addb(Address(r8, r9), 16);                      //    add byte ptr [r8 + r9], 16
    __ addb(Address(r9, r10), 16);                     //    add byte ptr [r9 + r10], 16
    __ addb(Address(r10, r11), 16);                    //    add byte ptr [r10 + r11], 16
    __ addb(Address(r11, r12), 16);                    //    add byte ptr [r11 + r12], 16
    __ addb(Address(r12, r13), 16);                    //    add byte ptr [r12 + r13], 16
    __ addb(Address(r13, r14), 16);                    //    add byte ptr [r13 + r14], 16
    __ addb(Address(r14, r15), 16);                    //    add byte ptr [r14 + r15], 16
    __ addb(Address(r15, r16), 16);                    //    add byte ptr [r15 + r16], 16
    __ addb(Address(r16, r17), 16);                    //    add byte ptr [r16 + r17], 16
    __ addb(Address(r17, r18), 16);                    //    add byte ptr [r17 + r18], 16
    __ addb(Address(r18, r19), 16);                    //    add byte ptr [r18 + r19], 16
    __ addb(Address(r19, r20), 16);                    //    add byte ptr [r19 + r20], 16
    __ addb(Address(r20, r21), 16);                    //    add byte ptr [r20 + r21], 16
    __ addb(Address(r21, r22), 16);                    //    add byte ptr [r21 + r22], 16
    __ addb(Address(r22, r23), 16);                    //    add byte ptr [r22 + r23], 16
    __ addb(Address(r23, r24), 16);                    //    add byte ptr [r23 + r24], 16
    __ addb(Address(r24, r25), 16);                    //    add byte ptr [r24 + r25], 16
    __ addb(Address(r25, r26), 16);                    //    add byte ptr [r25 + r26], 16
    __ addb(Address(r26, r27), 16);                    //    add byte ptr [r26 + r27], 16
    __ addb(Address(r27, r28), 16);                    //    add byte ptr [r27 + r28], 16
    __ addb(Address(r28, r29), 16);                    //    add byte ptr [r28 + r29], 16
    __ addb(Address(r29, r30), 16);                    //    add byte ptr [r29 + r30], 16
    __ addb(Address(r30, r31), 16);                    //    add byte ptr [r30 + r31], 16
    __ addb(Address(r31, rcx), 16);                    //    add byte ptr [r31 + rcx], 16
    __ addb(Address(rcx, rdx), 64);                    //    add byte ptr [rcx + rdx], 64
    __ addb(Address(rdx, rbx), 64);                    //    add byte ptr [rdx + rbx], 64
    __ addb(Address(rbx, r8), 64);                     //    add byte ptr [rbx + r8], 64
    __ addb(Address(r8, r9), 64);                      //    add byte ptr [r8 + r9], 64
    __ addb(Address(r9, r10), 64);                     //    add byte ptr [r9 + r10], 64
    __ addb(Address(r10, r11), 64);                    //    add byte ptr [r10 + r11], 64
    __ addb(Address(r11, r12), 64);                    //    add byte ptr [r11 + r12], 64
    __ addb(Address(r12, r13), 64);                    //    add byte ptr [r12 + r13], 64
    __ addb(Address(r13, r14), 64);                    //    add byte ptr [r13 + r14], 64
    __ addb(Address(r14, r15), 64);                    //    add byte ptr [r14 + r15], 64
    __ addb(Address(r15, r16), 64);                    //    add byte ptr [r15 + r16], 64
    __ addb(Address(r16, r17), 64);                    //    add byte ptr [r16 + r17], 64
    __ addb(Address(r17, r18), 64);                    //    add byte ptr [r17 + r18], 64
    __ addb(Address(r18, r19), 64);                    //    add byte ptr [r18 + r19], 64
    __ addb(Address(r19, r20), 64);                    //    add byte ptr [r19 + r20], 64
    __ addb(Address(r20, r21), 64);                    //    add byte ptr [r20 + r21], 64
    __ addb(Address(r21, r22), 64);                    //    add byte ptr [r21 + r22], 64
    __ addb(Address(r22, r23), 64);                    //    add byte ptr [r22 + r23], 64
    __ addb(Address(r23, r24), 64);                    //    add byte ptr [r23 + r24], 64
    __ addb(Address(r24, r25), 64);                    //    add byte ptr [r24 + r25], 64
    __ addb(Address(r25, r26), 64);                    //    add byte ptr [r25 + r26], 64
    __ addb(Address(r26, r27), 64);                    //    add byte ptr [r26 + r27], 64
    __ addb(Address(r27, r28), 64);                    //    add byte ptr [r27 + r28], 64
    __ addb(Address(r28, r29), 64);                    //    add byte ptr [r28 + r29], 64
    __ addb(Address(r29, r30), 64);                    //    add byte ptr [r29 + r30], 64
    __ addb(Address(r30, r31), 64);                    //    add byte ptr [r30 + r31], 64
    __ addb(Address(r31, rcx), 64);                    //    add byte ptr [r31 + rcx], 64
#endif // _LP64
    __ addw(Address(rcx, rdx), 256);                   //    add word ptr [rcx + rdx], 256
    __ addw(Address(rdx, rbx), 256);                   //    add word ptr [rdx + rbx], 256
#ifdef _LP64
    __ addw(Address(rbx, r8), 256);                    //    add word ptr [rbx + r8], 256
    __ addw(Address(r8, r9), 256);                     //    add word ptr [r8 + r9], 256
    __ addw(Address(r9, r10), 256);                    //    add word ptr [r9 + r10], 256
    __ addw(Address(r10, r11), 256);                   //    add word ptr [r10 + r11], 256
    __ addw(Address(r11, r12), 256);                   //    add word ptr [r11 + r12], 256
    __ addw(Address(r12, r13), 256);                   //    add word ptr [r12 + r13], 256
    __ addw(Address(r13, r14), 256);                   //    add word ptr [r13 + r14], 256
    __ addw(Address(r14, r15), 256);                   //    add word ptr [r14 + r15], 256
    __ addw(Address(r15, r16), 256);                   //    add word ptr [r15 + r16], 256
    __ addw(Address(r16, r17), 256);                   //    add word ptr [r16 + r17], 256
    __ addw(Address(r17, r18), 256);                   //    add word ptr [r17 + r18], 256
    __ addw(Address(r18, r19), 256);                   //    add word ptr [r18 + r19], 256
    __ addw(Address(r19, r20), 256);                   //    add word ptr [r19 + r20], 256
    __ addw(Address(r20, r21), 256);                   //    add word ptr [r20 + r21], 256
    __ addw(Address(r21, r22), 256);                   //    add word ptr [r21 + r22], 256
    __ addw(Address(r22, r23), 256);                   //    add word ptr [r22 + r23], 256
    __ addw(Address(r23, r24), 256);                   //    add word ptr [r23 + r24], 256
    __ addw(Address(r24, r25), 256);                   //    add word ptr [r24 + r25], 256
    __ addw(Address(r25, r26), 256);                   //    add word ptr [r25 + r26], 256
    __ addw(Address(r26, r27), 256);                   //    add word ptr [r26 + r27], 256
    __ addw(Address(r27, r28), 256);                   //    add word ptr [r27 + r28], 256
    __ addw(Address(r28, r29), 256);                   //    add word ptr [r28 + r29], 256
    __ addw(Address(r29, r30), 256);                   //    add word ptr [r29 + r30], 256
    __ addw(Address(r30, r31), 256);                   //    add word ptr [r30 + r31], 256
    __ addw(Address(r31, rcx), 256);                   //    add word ptr [r31 + rcx], 256
    __ addw(Address(rcx, rdx), 1024);                  //    add word ptr [rcx + rdx], 1024
    __ addw(Address(rdx, rbx), 1024);                  //    add word ptr [rdx + rbx], 1024
    __ addw(Address(rbx, r8), 1024);                   //    add word ptr [rbx + r8], 1024
    __ addw(Address(r8, r9), 1024);                    //    add word ptr [r8 + r9], 1024
    __ addw(Address(r9, r10), 1024);                   //    add word ptr [r9 + r10], 1024
    __ addw(Address(r10, r11), 1024);                  //    add word ptr [r10 + r11], 1024
    __ addw(Address(r11, r12), 1024);                  //    add word ptr [r11 + r12], 1024
    __ addw(Address(r12, r13), 1024);                  //    add word ptr [r12 + r13], 1024
    __ addw(Address(r13, r14), 1024);                  //    add word ptr [r13 + r14], 1024
    __ addw(Address(r14, r15), 1024);                  //    add word ptr [r14 + r15], 1024
    __ addw(Address(r15, r16), 1024);                  //    add word ptr [r15 + r16], 1024
    __ addw(Address(r16, r17), 1024);                  //    add word ptr [r16 + r17], 1024
    __ addw(Address(r17, r18), 1024);                  //    add word ptr [r17 + r18], 1024
    __ addw(Address(r18, r19), 1024);                  //    add word ptr [r18 + r19], 1024
    __ addw(Address(r19, r20), 1024);                  //    add word ptr [r19 + r20], 1024
    __ addw(Address(r20, r21), 1024);                  //    add word ptr [r20 + r21], 1024
    __ addw(Address(r21, r22), 1024);                  //    add word ptr [r21 + r22], 1024
    __ addw(Address(r22, r23), 1024);                  //    add word ptr [r22 + r23], 1024
    __ addw(Address(r23, r24), 1024);                  //    add word ptr [r23 + r24], 1024
    __ addw(Address(r24, r25), 1024);                  //    add word ptr [r24 + r25], 1024
    __ addw(Address(r25, r26), 1024);                  //    add word ptr [r25 + r26], 1024
    __ addw(Address(r26, r27), 1024);                  //    add word ptr [r26 + r27], 1024
    __ addw(Address(r27, r28), 1024);                  //    add word ptr [r27 + r28], 1024
    __ addw(Address(r28, r29), 1024);                  //    add word ptr [r28 + r29], 1024
    __ addw(Address(r29, r30), 1024);                  //    add word ptr [r29 + r30], 1024
    __ addw(Address(r30, r31), 1024);                  //    add word ptr [r30 + r31], 1024
    __ addw(Address(r31, rcx), 1024);                  //    add word ptr [r31 + rcx], 1024
    __ addw(Address(rcx, rdx), 4096);                  //    add word ptr [rcx + rdx], 4096
    __ addw(Address(rdx, rbx), 4096);                  //    add word ptr [rdx + rbx], 4096
    __ addw(Address(rbx, r8), 4096);                   //    add word ptr [rbx + r8], 4096
    __ addw(Address(r8, r9), 4096);                    //    add word ptr [r8 + r9], 4096
    __ addw(Address(r9, r10), 4096);                   //    add word ptr [r9 + r10], 4096
    __ addw(Address(r10, r11), 4096);                  //    add word ptr [r10 + r11], 4096
    __ addw(Address(r11, r12), 4096);                  //    add word ptr [r11 + r12], 4096
    __ addw(Address(r12, r13), 4096);                  //    add word ptr [r12 + r13], 4096
    __ addw(Address(r13, r14), 4096);                  //    add word ptr [r13 + r14], 4096
    __ addw(Address(r14, r15), 4096);                  //    add word ptr [r14 + r15], 4096
    __ addw(Address(r15, r16), 4096);                  //    add word ptr [r15 + r16], 4096
    __ addw(Address(r16, r17), 4096);                  //    add word ptr [r16 + r17], 4096
    __ addw(Address(r17, r18), 4096);                  //    add word ptr [r17 + r18], 4096
    __ addw(Address(r18, r19), 4096);                  //    add word ptr [r18 + r19], 4096
    __ addw(Address(r19, r20), 4096);                  //    add word ptr [r19 + r20], 4096
    __ addw(Address(r20, r21), 4096);                  //    add word ptr [r20 + r21], 4096
    __ addw(Address(r21, r22), 4096);                  //    add word ptr [r21 + r22], 4096
    __ addw(Address(r22, r23), 4096);                  //    add word ptr [r22 + r23], 4096
    __ addw(Address(r23, r24), 4096);                  //    add word ptr [r23 + r24], 4096
    __ addw(Address(r24, r25), 4096);                  //    add word ptr [r24 + r25], 4096
    __ addw(Address(r25, r26), 4096);                  //    add word ptr [r25 + r26], 4096
    __ addw(Address(r26, r27), 4096);                  //    add word ptr [r26 + r27], 4096
    __ addw(Address(r27, r28), 4096);                  //    add word ptr [r27 + r28], 4096
    __ addw(Address(r28, r29), 4096);                  //    add word ptr [r28 + r29], 4096
    __ addw(Address(r29, r30), 4096);                  //    add word ptr [r29 + r30], 4096
    __ addw(Address(r30, r31), 4096);                  //    add word ptr [r30 + r31], 4096
    __ addw(Address(r31, rcx), 4096);                  //    add word ptr [r31 + rcx], 4096
    __ addw(Address(rcx, rdx), 16384);                 //    add word ptr [rcx + rdx], 16384
    __ addw(Address(rdx, rbx), 16384);                 //    add word ptr [rdx + rbx], 16384
    __ addw(Address(rbx, r8), 16384);                  //    add word ptr [rbx + r8], 16384
    __ addw(Address(r8, r9), 16384);                   //    add word ptr [r8 + r9], 16384
    __ addw(Address(r9, r10), 16384);                  //    add word ptr [r9 + r10], 16384
    __ addw(Address(r10, r11), 16384);                 //    add word ptr [r10 + r11], 16384
    __ addw(Address(r11, r12), 16384);                 //    add word ptr [r11 + r12], 16384
    __ addw(Address(r12, r13), 16384);                 //    add word ptr [r12 + r13], 16384
    __ addw(Address(r13, r14), 16384);                 //    add word ptr [r13 + r14], 16384
    __ addw(Address(r14, r15), 16384);                 //    add word ptr [r14 + r15], 16384
    __ addw(Address(r15, r16), 16384);                 //    add word ptr [r15 + r16], 16384
    __ addw(Address(r16, r17), 16384);                 //    add word ptr [r16 + r17], 16384
    __ addw(Address(r17, r18), 16384);                 //    add word ptr [r17 + r18], 16384
    __ addw(Address(r18, r19), 16384);                 //    add word ptr [r18 + r19], 16384
    __ addw(Address(r19, r20), 16384);                 //    add word ptr [r19 + r20], 16384
    __ addw(Address(r20, r21), 16384);                 //    add word ptr [r20 + r21], 16384
    __ addw(Address(r21, r22), 16384);                 //    add word ptr [r21 + r22], 16384
    __ addw(Address(r22, r23), 16384);                 //    add word ptr [r22 + r23], 16384
    __ addw(Address(r23, r24), 16384);                 //    add word ptr [r23 + r24], 16384
    __ addw(Address(r24, r25), 16384);                 //    add word ptr [r24 + r25], 16384
    __ addw(Address(r25, r26), 16384);                 //    add word ptr [r25 + r26], 16384
    __ addw(Address(r26, r27), 16384);                 //    add word ptr [r26 + r27], 16384
    __ addw(Address(r27, r28), 16384);                 //    add word ptr [r27 + r28], 16384
    __ addw(Address(r28, r29), 16384);                 //    add word ptr [r28 + r29], 16384
    __ addw(Address(r29, r30), 16384);                 //    add word ptr [r29 + r30], 16384
    __ addw(Address(r30, r31), 16384);                 //    add word ptr [r30 + r31], 16384
    __ addw(Address(r31, rcx), 16384);                 //    add word ptr [r31 + rcx], 16384
#endif // _LP64
    __ addl(Address(rcx, rdx), 1);                     //    add dword ptr [rcx + rdx], 1
    __ addl(Address(rdx, rbx), 1);                     //    add dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ addl(Address(rbx, r8), 1);                      //    add dword ptr [rbx + r8], 1
    __ addl(Address(r8, r9), 1);                       //    add dword ptr [r8 + r9], 1
    __ addl(Address(r9, r10), 1);                      //    add dword ptr [r9 + r10], 1
    __ addl(Address(r10, r11), 1);                     //    add dword ptr [r10 + r11], 1
    __ addl(Address(r11, r12), 1);                     //    add dword ptr [r11 + r12], 1
    __ addl(Address(r12, r13), 1);                     //    add dword ptr [r12 + r13], 1
    __ addl(Address(r13, r14), 1);                     //    add dword ptr [r13 + r14], 1
    __ addl(Address(r14, r15), 1);                     //    add dword ptr [r14 + r15], 1
    __ addl(Address(r15, r16), 1);                     //    add dword ptr [r15 + r16], 1
    __ addl(Address(r16, r17), 1);                     //    add dword ptr [r16 + r17], 1
    __ addl(Address(r17, r18), 1);                     //    add dword ptr [r17 + r18], 1
    __ addl(Address(r18, r19), 1);                     //    add dword ptr [r18 + r19], 1
    __ addl(Address(r19, r20), 1);                     //    add dword ptr [r19 + r20], 1
    __ addl(Address(r20, r21), 1);                     //    add dword ptr [r20 + r21], 1
    __ addl(Address(r21, r22), 1);                     //    add dword ptr [r21 + r22], 1
    __ addl(Address(r22, r23), 1);                     //    add dword ptr [r22 + r23], 1
    __ addl(Address(r23, r24), 1);                     //    add dword ptr [r23 + r24], 1
    __ addl(Address(r24, r25), 1);                     //    add dword ptr [r24 + r25], 1
    __ addl(Address(r25, r26), 1);                     //    add dword ptr [r25 + r26], 1
    __ addl(Address(r26, r27), 1);                     //    add dword ptr [r26 + r27], 1
    __ addl(Address(r27, r28), 1);                     //    add dword ptr [r27 + r28], 1
    __ addl(Address(r28, r29), 1);                     //    add dword ptr [r28 + r29], 1
    __ addl(Address(r29, r30), 1);                     //    add dword ptr [r29 + r30], 1
    __ addl(Address(r30, r31), 1);                     //    add dword ptr [r30 + r31], 1
    __ addl(Address(r31, rcx), 1);                     //    add dword ptr [r31 + rcx], 1
    __ addl(Address(rcx, rdx), 16);                    //    add dword ptr [rcx + rdx], 16
    __ addl(Address(rdx, rbx), 16);                    //    add dword ptr [rdx + rbx], 16
    __ addl(Address(rbx, r8), 16);                     //    add dword ptr [rbx + r8], 16
    __ addl(Address(r8, r9), 16);                      //    add dword ptr [r8 + r9], 16
    __ addl(Address(r9, r10), 16);                     //    add dword ptr [r9 + r10], 16
    __ addl(Address(r10, r11), 16);                    //    add dword ptr [r10 + r11], 16
    __ addl(Address(r11, r12), 16);                    //    add dword ptr [r11 + r12], 16
    __ addl(Address(r12, r13), 16);                    //    add dword ptr [r12 + r13], 16
    __ addl(Address(r13, r14), 16);                    //    add dword ptr [r13 + r14], 16
    __ addl(Address(r14, r15), 16);                    //    add dword ptr [r14 + r15], 16
    __ addl(Address(r15, r16), 16);                    //    add dword ptr [r15 + r16], 16
    __ addl(Address(r16, r17), 16);                    //    add dword ptr [r16 + r17], 16
    __ addl(Address(r17, r18), 16);                    //    add dword ptr [r17 + r18], 16
    __ addl(Address(r18, r19), 16);                    //    add dword ptr [r18 + r19], 16
    __ addl(Address(r19, r20), 16);                    //    add dword ptr [r19 + r20], 16
    __ addl(Address(r20, r21), 16);                    //    add dword ptr [r20 + r21], 16
    __ addl(Address(r21, r22), 16);                    //    add dword ptr [r21 + r22], 16
    __ addl(Address(r22, r23), 16);                    //    add dword ptr [r22 + r23], 16
    __ addl(Address(r23, r24), 16);                    //    add dword ptr [r23 + r24], 16
    __ addl(Address(r24, r25), 16);                    //    add dword ptr [r24 + r25], 16
    __ addl(Address(r25, r26), 16);                    //    add dword ptr [r25 + r26], 16
    __ addl(Address(r26, r27), 16);                    //    add dword ptr [r26 + r27], 16
    __ addl(Address(r27, r28), 16);                    //    add dword ptr [r27 + r28], 16
    __ addl(Address(r28, r29), 16);                    //    add dword ptr [r28 + r29], 16
    __ addl(Address(r29, r30), 16);                    //    add dword ptr [r29 + r30], 16
    __ addl(Address(r30, r31), 16);                    //    add dword ptr [r30 + r31], 16
    __ addl(Address(r31, rcx), 16);                    //    add dword ptr [r31 + rcx], 16
    __ addl(Address(rcx, rdx), 256);                   //    add dword ptr [rcx + rdx], 256
    __ addl(Address(rdx, rbx), 256);                   //    add dword ptr [rdx + rbx], 256
    __ addl(Address(rbx, r8), 256);                    //    add dword ptr [rbx + r8], 256
    __ addl(Address(r8, r9), 256);                     //    add dword ptr [r8 + r9], 256
    __ addl(Address(r9, r10), 256);                    //    add dword ptr [r9 + r10], 256
    __ addl(Address(r10, r11), 256);                   //    add dword ptr [r10 + r11], 256
    __ addl(Address(r11, r12), 256);                   //    add dword ptr [r11 + r12], 256
    __ addl(Address(r12, r13), 256);                   //    add dword ptr [r12 + r13], 256
    __ addl(Address(r13, r14), 256);                   //    add dword ptr [r13 + r14], 256
    __ addl(Address(r14, r15), 256);                   //    add dword ptr [r14 + r15], 256
    __ addl(Address(r15, r16), 256);                   //    add dword ptr [r15 + r16], 256
    __ addl(Address(r16, r17), 256);                   //    add dword ptr [r16 + r17], 256
    __ addl(Address(r17, r18), 256);                   //    add dword ptr [r17 + r18], 256
    __ addl(Address(r18, r19), 256);                   //    add dword ptr [r18 + r19], 256
    __ addl(Address(r19, r20), 256);                   //    add dword ptr [r19 + r20], 256
    __ addl(Address(r20, r21), 256);                   //    add dword ptr [r20 + r21], 256
    __ addl(Address(r21, r22), 256);                   //    add dword ptr [r21 + r22], 256
    __ addl(Address(r22, r23), 256);                   //    add dword ptr [r22 + r23], 256
    __ addl(Address(r23, r24), 256);                   //    add dword ptr [r23 + r24], 256
    __ addl(Address(r24, r25), 256);                   //    add dword ptr [r24 + r25], 256
    __ addl(Address(r25, r26), 256);                   //    add dword ptr [r25 + r26], 256
    __ addl(Address(r26, r27), 256);                   //    add dword ptr [r26 + r27], 256
    __ addl(Address(r27, r28), 256);                   //    add dword ptr [r27 + r28], 256
    __ addl(Address(r28, r29), 256);                   //    add dword ptr [r28 + r29], 256
    __ addl(Address(r29, r30), 256);                   //    add dword ptr [r29 + r30], 256
    __ addl(Address(r30, r31), 256);                   //    add dword ptr [r30 + r31], 256
    __ addl(Address(r31, rcx), 256);                   //    add dword ptr [r31 + rcx], 256
    __ addl(Address(rcx, rdx), 4096);                  //    add dword ptr [rcx + rdx], 4096
    __ addl(Address(rdx, rbx), 4096);                  //    add dword ptr [rdx + rbx], 4096
    __ addl(Address(rbx, r8), 4096);                   //    add dword ptr [rbx + r8], 4096
    __ addl(Address(r8, r9), 4096);                    //    add dword ptr [r8 + r9], 4096
    __ addl(Address(r9, r10), 4096);                   //    add dword ptr [r9 + r10], 4096
    __ addl(Address(r10, r11), 4096);                  //    add dword ptr [r10 + r11], 4096
    __ addl(Address(r11, r12), 4096);                  //    add dword ptr [r11 + r12], 4096
    __ addl(Address(r12, r13), 4096);                  //    add dword ptr [r12 + r13], 4096
    __ addl(Address(r13, r14), 4096);                  //    add dword ptr [r13 + r14], 4096
    __ addl(Address(r14, r15), 4096);                  //    add dword ptr [r14 + r15], 4096
    __ addl(Address(r15, r16), 4096);                  //    add dword ptr [r15 + r16], 4096
    __ addl(Address(r16, r17), 4096);                  //    add dword ptr [r16 + r17], 4096
    __ addl(Address(r17, r18), 4096);                  //    add dword ptr [r17 + r18], 4096
    __ addl(Address(r18, r19), 4096);                  //    add dword ptr [r18 + r19], 4096
    __ addl(Address(r19, r20), 4096);                  //    add dword ptr [r19 + r20], 4096
    __ addl(Address(r20, r21), 4096);                  //    add dword ptr [r20 + r21], 4096
    __ addl(Address(r21, r22), 4096);                  //    add dword ptr [r21 + r22], 4096
    __ addl(Address(r22, r23), 4096);                  //    add dword ptr [r22 + r23], 4096
    __ addl(Address(r23, r24), 4096);                  //    add dword ptr [r23 + r24], 4096
    __ addl(Address(r24, r25), 4096);                  //    add dword ptr [r24 + r25], 4096
    __ addl(Address(r25, r26), 4096);                  //    add dword ptr [r25 + r26], 4096
    __ addl(Address(r26, r27), 4096);                  //    add dword ptr [r26 + r27], 4096
    __ addl(Address(r27, r28), 4096);                  //    add dword ptr [r27 + r28], 4096
    __ addl(Address(r28, r29), 4096);                  //    add dword ptr [r28 + r29], 4096
    __ addl(Address(r29, r30), 4096);                  //    add dword ptr [r29 + r30], 4096
    __ addl(Address(r30, r31), 4096);                  //    add dword ptr [r30 + r31], 4096
    __ addl(Address(r31, rcx), 4096);                  //    add dword ptr [r31 + rcx], 4096
    __ addl(Address(rcx, rdx), 65536);                 //    add dword ptr [rcx + rdx], 65536
    __ addl(Address(rdx, rbx), 65536);                 //    add dword ptr [rdx + rbx], 65536
    __ addl(Address(rbx, r8), 65536);                  //    add dword ptr [rbx + r8], 65536
    __ addl(Address(r8, r9), 65536);                   //    add dword ptr [r8 + r9], 65536
    __ addl(Address(r9, r10), 65536);                  //    add dword ptr [r9 + r10], 65536
    __ addl(Address(r10, r11), 65536);                 //    add dword ptr [r10 + r11], 65536
    __ addl(Address(r11, r12), 65536);                 //    add dword ptr [r11 + r12], 65536
    __ addl(Address(r12, r13), 65536);                 //    add dword ptr [r12 + r13], 65536
    __ addl(Address(r13, r14), 65536);                 //    add dword ptr [r13 + r14], 65536
    __ addl(Address(r14, r15), 65536);                 //    add dword ptr [r14 + r15], 65536
    __ addl(Address(r15, r16), 65536);                 //    add dword ptr [r15 + r16], 65536
    __ addl(Address(r16, r17), 65536);                 //    add dword ptr [r16 + r17], 65536
    __ addl(Address(r17, r18), 65536);                 //    add dword ptr [r17 + r18], 65536
    __ addl(Address(r18, r19), 65536);                 //    add dword ptr [r18 + r19], 65536
    __ addl(Address(r19, r20), 65536);                 //    add dword ptr [r19 + r20], 65536
    __ addl(Address(r20, r21), 65536);                 //    add dword ptr [r20 + r21], 65536
    __ addl(Address(r21, r22), 65536);                 //    add dword ptr [r21 + r22], 65536
    __ addl(Address(r22, r23), 65536);                 //    add dword ptr [r22 + r23], 65536
    __ addl(Address(r23, r24), 65536);                 //    add dword ptr [r23 + r24], 65536
    __ addl(Address(r24, r25), 65536);                 //    add dword ptr [r24 + r25], 65536
    __ addl(Address(r25, r26), 65536);                 //    add dword ptr [r25 + r26], 65536
    __ addl(Address(r26, r27), 65536);                 //    add dword ptr [r26 + r27], 65536
    __ addl(Address(r27, r28), 65536);                 //    add dword ptr [r27 + r28], 65536
    __ addl(Address(r28, r29), 65536);                 //    add dword ptr [r28 + r29], 65536
    __ addl(Address(r29, r30), 65536);                 //    add dword ptr [r29 + r30], 65536
    __ addl(Address(r30, r31), 65536);                 //    add dword ptr [r30 + r31], 65536
    __ addl(Address(r31, rcx), 65536);                 //    add dword ptr [r31 + rcx], 65536
    __ addl(Address(rcx, rdx), 1048576);               //    add dword ptr [rcx + rdx], 1048576
    __ addl(Address(rdx, rbx), 1048576);               //    add dword ptr [rdx + rbx], 1048576
    __ addl(Address(rbx, r8), 1048576);                //    add dword ptr [rbx + r8], 1048576
    __ addl(Address(r8, r9), 1048576);                 //    add dword ptr [r8 + r9], 1048576
    __ addl(Address(r9, r10), 1048576);                //    add dword ptr [r9 + r10], 1048576
    __ addl(Address(r10, r11), 1048576);               //    add dword ptr [r10 + r11], 1048576
    __ addl(Address(r11, r12), 1048576);               //    add dword ptr [r11 + r12], 1048576
    __ addl(Address(r12, r13), 1048576);               //    add dword ptr [r12 + r13], 1048576
    __ addl(Address(r13, r14), 1048576);               //    add dword ptr [r13 + r14], 1048576
    __ addl(Address(r14, r15), 1048576);               //    add dword ptr [r14 + r15], 1048576
    __ addl(Address(r15, r16), 1048576);               //    add dword ptr [r15 + r16], 1048576
    __ addl(Address(r16, r17), 1048576);               //    add dword ptr [r16 + r17], 1048576
    __ addl(Address(r17, r18), 1048576);               //    add dword ptr [r17 + r18], 1048576
    __ addl(Address(r18, r19), 1048576);               //    add dword ptr [r18 + r19], 1048576
    __ addl(Address(r19, r20), 1048576);               //    add dword ptr [r19 + r20], 1048576
    __ addl(Address(r20, r21), 1048576);               //    add dword ptr [r20 + r21], 1048576
    __ addl(Address(r21, r22), 1048576);               //    add dword ptr [r21 + r22], 1048576
    __ addl(Address(r22, r23), 1048576);               //    add dword ptr [r22 + r23], 1048576
    __ addl(Address(r23, r24), 1048576);               //    add dword ptr [r23 + r24], 1048576
    __ addl(Address(r24, r25), 1048576);               //    add dword ptr [r24 + r25], 1048576
    __ addl(Address(r25, r26), 1048576);               //    add dword ptr [r25 + r26], 1048576
    __ addl(Address(r26, r27), 1048576);               //    add dword ptr [r26 + r27], 1048576
    __ addl(Address(r27, r28), 1048576);               //    add dword ptr [r27 + r28], 1048576
    __ addl(Address(r28, r29), 1048576);               //    add dword ptr [r28 + r29], 1048576
    __ addl(Address(r29, r30), 1048576);               //    add dword ptr [r29 + r30], 1048576
    __ addl(Address(r30, r31), 1048576);               //    add dword ptr [r30 + r31], 1048576
    __ addl(Address(r31, rcx), 1048576);               //    add dword ptr [r31 + rcx], 1048576
    __ addl(Address(rcx, rdx), 16777216);              //    add dword ptr [rcx + rdx], 16777216
    __ addl(Address(rdx, rbx), 16777216);              //    add dword ptr [rdx + rbx], 16777216
    __ addl(Address(rbx, r8), 16777216);               //    add dword ptr [rbx + r8], 16777216
    __ addl(Address(r8, r9), 16777216);                //    add dword ptr [r8 + r9], 16777216
    __ addl(Address(r9, r10), 16777216);               //    add dword ptr [r9 + r10], 16777216
    __ addl(Address(r10, r11), 16777216);              //    add dword ptr [r10 + r11], 16777216
    __ addl(Address(r11, r12), 16777216);              //    add dword ptr [r11 + r12], 16777216
    __ addl(Address(r12, r13), 16777216);              //    add dword ptr [r12 + r13], 16777216
    __ addl(Address(r13, r14), 16777216);              //    add dword ptr [r13 + r14], 16777216
    __ addl(Address(r14, r15), 16777216);              //    add dword ptr [r14 + r15], 16777216
    __ addl(Address(r15, r16), 16777216);              //    add dword ptr [r15 + r16], 16777216
    __ addl(Address(r16, r17), 16777216);              //    add dword ptr [r16 + r17], 16777216
    __ addl(Address(r17, r18), 16777216);              //    add dword ptr [r17 + r18], 16777216
    __ addl(Address(r18, r19), 16777216);              //    add dword ptr [r18 + r19], 16777216
    __ addl(Address(r19, r20), 16777216);              //    add dword ptr [r19 + r20], 16777216
    __ addl(Address(r20, r21), 16777216);              //    add dword ptr [r20 + r21], 16777216
    __ addl(Address(r21, r22), 16777216);              //    add dword ptr [r21 + r22], 16777216
    __ addl(Address(r22, r23), 16777216);              //    add dword ptr [r22 + r23], 16777216
    __ addl(Address(r23, r24), 16777216);              //    add dword ptr [r23 + r24], 16777216
    __ addl(Address(r24, r25), 16777216);              //    add dword ptr [r24 + r25], 16777216
    __ addl(Address(r25, r26), 16777216);              //    add dword ptr [r25 + r26], 16777216
    __ addl(Address(r26, r27), 16777216);              //    add dword ptr [r26 + r27], 16777216
    __ addl(Address(r27, r28), 16777216);              //    add dword ptr [r27 + r28], 16777216
    __ addl(Address(r28, r29), 16777216);              //    add dword ptr [r28 + r29], 16777216
    __ addl(Address(r29, r30), 16777216);              //    add dword ptr [r29 + r30], 16777216
    __ addl(Address(r30, r31), 16777216);              //    add dword ptr [r30 + r31], 16777216
    __ addl(Address(r31, rcx), 16777216);              //    add dword ptr [r31 + rcx], 16777216
    __ addl(Address(rcx, rdx), 268435456);             //    add dword ptr [rcx + rdx], 268435456
    __ addl(Address(rdx, rbx), 268435456);             //    add dword ptr [rdx + rbx], 268435456
    __ addl(Address(rbx, r8), 268435456);              //    add dword ptr [rbx + r8], 268435456
    __ addl(Address(r8, r9), 268435456);               //    add dword ptr [r8 + r9], 268435456
    __ addl(Address(r9, r10), 268435456);              //    add dword ptr [r9 + r10], 268435456
    __ addl(Address(r10, r11), 268435456);             //    add dword ptr [r10 + r11], 268435456
    __ addl(Address(r11, r12), 268435456);             //    add dword ptr [r11 + r12], 268435456
    __ addl(Address(r12, r13), 268435456);             //    add dword ptr [r12 + r13], 268435456
    __ addl(Address(r13, r14), 268435456);             //    add dword ptr [r13 + r14], 268435456
    __ addl(Address(r14, r15), 268435456);             //    add dword ptr [r14 + r15], 268435456
    __ addl(Address(r15, r16), 268435456);             //    add dword ptr [r15 + r16], 268435456
    __ addl(Address(r16, r17), 268435456);             //    add dword ptr [r16 + r17], 268435456
    __ addl(Address(r17, r18), 268435456);             //    add dword ptr [r17 + r18], 268435456
    __ addl(Address(r18, r19), 268435456);             //    add dword ptr [r18 + r19], 268435456
    __ addl(Address(r19, r20), 268435456);             //    add dword ptr [r19 + r20], 268435456
    __ addl(Address(r20, r21), 268435456);             //    add dword ptr [r20 + r21], 268435456
    __ addl(Address(r21, r22), 268435456);             //    add dword ptr [r21 + r22], 268435456
    __ addl(Address(r22, r23), 268435456);             //    add dword ptr [r22 + r23], 268435456
    __ addl(Address(r23, r24), 268435456);             //    add dword ptr [r23 + r24], 268435456
    __ addl(Address(r24, r25), 268435456);             //    add dword ptr [r24 + r25], 268435456
    __ addl(Address(r25, r26), 268435456);             //    add dword ptr [r25 + r26], 268435456
    __ addl(Address(r26, r27), 268435456);             //    add dword ptr [r26 + r27], 268435456
    __ addl(Address(r27, r28), 268435456);             //    add dword ptr [r27 + r28], 268435456
    __ addl(Address(r28, r29), 268435456);             //    add dword ptr [r28 + r29], 268435456
    __ addl(Address(r29, r30), 268435456);             //    add dword ptr [r29 + r30], 268435456
    __ addl(Address(r30, r31), 268435456);             //    add dword ptr [r30 + r31], 268435456
    __ addl(Address(r31, rcx), 268435456);             //    add dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ sarl(Address(rcx, rdx), 1);                     //    sar dword ptr [rcx + rdx], 1
    __ sarl(Address(rdx, rbx), 1);                     //    sar dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ sarl(Address(rbx, r8), 1);                      //    sar dword ptr [rbx + r8], 1
    __ sarl(Address(r8, r9), 1);                       //    sar dword ptr [r8 + r9], 1
    __ sarl(Address(r9, r10), 1);                      //    sar dword ptr [r9 + r10], 1
    __ sarl(Address(r10, r11), 1);                     //    sar dword ptr [r10 + r11], 1
    __ sarl(Address(r11, r12), 1);                     //    sar dword ptr [r11 + r12], 1
    __ sarl(Address(r12, r13), 1);                     //    sar dword ptr [r12 + r13], 1
    __ sarl(Address(r13, r14), 1);                     //    sar dword ptr [r13 + r14], 1
    __ sarl(Address(r14, r15), 1);                     //    sar dword ptr [r14 + r15], 1
    __ sarl(Address(r15, r16), 1);                     //    sar dword ptr [r15 + r16], 1
    __ sarl(Address(r16, r17), 1);                     //    sar dword ptr [r16 + r17], 1
    __ sarl(Address(r17, r18), 1);                     //    sar dword ptr [r17 + r18], 1
    __ sarl(Address(r18, r19), 1);                     //    sar dword ptr [r18 + r19], 1
    __ sarl(Address(r19, r20), 1);                     //    sar dword ptr [r19 + r20], 1
    __ sarl(Address(r20, r21), 1);                     //    sar dword ptr [r20 + r21], 1
    __ sarl(Address(r21, r22), 1);                     //    sar dword ptr [r21 + r22], 1
    __ sarl(Address(r22, r23), 1);                     //    sar dword ptr [r22 + r23], 1
    __ sarl(Address(r23, r24), 1);                     //    sar dword ptr [r23 + r24], 1
    __ sarl(Address(r24, r25), 1);                     //    sar dword ptr [r24 + r25], 1
    __ sarl(Address(r25, r26), 1);                     //    sar dword ptr [r25 + r26], 1
    __ sarl(Address(r26, r27), 1);                     //    sar dword ptr [r26 + r27], 1
    __ sarl(Address(r27, r28), 1);                     //    sar dword ptr [r27 + r28], 1
    __ sarl(Address(r28, r29), 1);                     //    sar dword ptr [r28 + r29], 1
    __ sarl(Address(r29, r30), 1);                     //    sar dword ptr [r29 + r30], 1
    __ sarl(Address(r30, r31), 1);                     //    sar dword ptr [r30 + r31], 1
    __ sarl(Address(r31, rcx), 1);                     //    sar dword ptr [r31 + rcx], 1
    __ sarl(Address(rcx, rdx), 2);                     //    sar dword ptr [rcx + rdx], 2
    __ sarl(Address(rdx, rbx), 2);                     //    sar dword ptr [rdx + rbx], 2
    __ sarl(Address(rbx, r8), 2);                      //    sar dword ptr [rbx + r8], 2
    __ sarl(Address(r8, r9), 2);                       //    sar dword ptr [r8 + r9], 2
    __ sarl(Address(r9, r10), 2);                      //    sar dword ptr [r9 + r10], 2
    __ sarl(Address(r10, r11), 2);                     //    sar dword ptr [r10 + r11], 2
    __ sarl(Address(r11, r12), 2);                     //    sar dword ptr [r11 + r12], 2
    __ sarl(Address(r12, r13), 2);                     //    sar dword ptr [r12 + r13], 2
    __ sarl(Address(r13, r14), 2);                     //    sar dword ptr [r13 + r14], 2
    __ sarl(Address(r14, r15), 2);                     //    sar dword ptr [r14 + r15], 2
    __ sarl(Address(r15, r16), 2);                     //    sar dword ptr [r15 + r16], 2
    __ sarl(Address(r16, r17), 2);                     //    sar dword ptr [r16 + r17], 2
    __ sarl(Address(r17, r18), 2);                     //    sar dword ptr [r17 + r18], 2
    __ sarl(Address(r18, r19), 2);                     //    sar dword ptr [r18 + r19], 2
    __ sarl(Address(r19, r20), 2);                     //    sar dword ptr [r19 + r20], 2
    __ sarl(Address(r20, r21), 2);                     //    sar dword ptr [r20 + r21], 2
    __ sarl(Address(r21, r22), 2);                     //    sar dword ptr [r21 + r22], 2
    __ sarl(Address(r22, r23), 2);                     //    sar dword ptr [r22 + r23], 2
    __ sarl(Address(r23, r24), 2);                     //    sar dword ptr [r23 + r24], 2
    __ sarl(Address(r24, r25), 2);                     //    sar dword ptr [r24 + r25], 2
    __ sarl(Address(r25, r26), 2);                     //    sar dword ptr [r25 + r26], 2
    __ sarl(Address(r26, r27), 2);                     //    sar dword ptr [r26 + r27], 2
    __ sarl(Address(r27, r28), 2);                     //    sar dword ptr [r27 + r28], 2
    __ sarl(Address(r28, r29), 2);                     //    sar dword ptr [r28 + r29], 2
    __ sarl(Address(r29, r30), 2);                     //    sar dword ptr [r29 + r30], 2
    __ sarl(Address(r30, r31), 2);                     //    sar dword ptr [r30 + r31], 2
    __ sarl(Address(r31, rcx), 2);                     //    sar dword ptr [r31 + rcx], 2
    __ sarl(Address(rcx, rdx), 4);                     //    sar dword ptr [rcx + rdx], 4
    __ sarl(Address(rdx, rbx), 4);                     //    sar dword ptr [rdx + rbx], 4
    __ sarl(Address(rbx, r8), 4);                      //    sar dword ptr [rbx + r8], 4
    __ sarl(Address(r8, r9), 4);                       //    sar dword ptr [r8 + r9], 4
    __ sarl(Address(r9, r10), 4);                      //    sar dword ptr [r9 + r10], 4
    __ sarl(Address(r10, r11), 4);                     //    sar dword ptr [r10 + r11], 4
    __ sarl(Address(r11, r12), 4);                     //    sar dword ptr [r11 + r12], 4
    __ sarl(Address(r12, r13), 4);                     //    sar dword ptr [r12 + r13], 4
    __ sarl(Address(r13, r14), 4);                     //    sar dword ptr [r13 + r14], 4
    __ sarl(Address(r14, r15), 4);                     //    sar dword ptr [r14 + r15], 4
    __ sarl(Address(r15, r16), 4);                     //    sar dword ptr [r15 + r16], 4
    __ sarl(Address(r16, r17), 4);                     //    sar dword ptr [r16 + r17], 4
    __ sarl(Address(r17, r18), 4);                     //    sar dword ptr [r17 + r18], 4
    __ sarl(Address(r18, r19), 4);                     //    sar dword ptr [r18 + r19], 4
    __ sarl(Address(r19, r20), 4);                     //    sar dword ptr [r19 + r20], 4
    __ sarl(Address(r20, r21), 4);                     //    sar dword ptr [r20 + r21], 4
    __ sarl(Address(r21, r22), 4);                     //    sar dword ptr [r21 + r22], 4
    __ sarl(Address(r22, r23), 4);                     //    sar dword ptr [r22 + r23], 4
    __ sarl(Address(r23, r24), 4);                     //    sar dword ptr [r23 + r24], 4
    __ sarl(Address(r24, r25), 4);                     //    sar dword ptr [r24 + r25], 4
    __ sarl(Address(r25, r26), 4);                     //    sar dword ptr [r25 + r26], 4
    __ sarl(Address(r26, r27), 4);                     //    sar dword ptr [r26 + r27], 4
    __ sarl(Address(r27, r28), 4);                     //    sar dword ptr [r27 + r28], 4
    __ sarl(Address(r28, r29), 4);                     //    sar dword ptr [r28 + r29], 4
    __ sarl(Address(r29, r30), 4);                     //    sar dword ptr [r29 + r30], 4
    __ sarl(Address(r30, r31), 4);                     //    sar dword ptr [r30 + r31], 4
    __ sarl(Address(r31, rcx), 4);                     //    sar dword ptr [r31 + rcx], 4
    __ sarl(Address(rcx, rdx), 8);                     //    sar dword ptr [rcx + rdx], 8
    __ sarl(Address(rdx, rbx), 8);                     //    sar dword ptr [rdx + rbx], 8
    __ sarl(Address(rbx, r8), 8);                      //    sar dword ptr [rbx + r8], 8
    __ sarl(Address(r8, r9), 8);                       //    sar dword ptr [r8 + r9], 8
    __ sarl(Address(r9, r10), 8);                      //    sar dword ptr [r9 + r10], 8
    __ sarl(Address(r10, r11), 8);                     //    sar dword ptr [r10 + r11], 8
    __ sarl(Address(r11, r12), 8);                     //    sar dword ptr [r11 + r12], 8
    __ sarl(Address(r12, r13), 8);                     //    sar dword ptr [r12 + r13], 8
    __ sarl(Address(r13, r14), 8);                     //    sar dword ptr [r13 + r14], 8
    __ sarl(Address(r14, r15), 8);                     //    sar dword ptr [r14 + r15], 8
    __ sarl(Address(r15, r16), 8);                     //    sar dword ptr [r15 + r16], 8
    __ sarl(Address(r16, r17), 8);                     //    sar dword ptr [r16 + r17], 8
    __ sarl(Address(r17, r18), 8);                     //    sar dword ptr [r17 + r18], 8
    __ sarl(Address(r18, r19), 8);                     //    sar dword ptr [r18 + r19], 8
    __ sarl(Address(r19, r20), 8);                     //    sar dword ptr [r19 + r20], 8
    __ sarl(Address(r20, r21), 8);                     //    sar dword ptr [r20 + r21], 8
    __ sarl(Address(r21, r22), 8);                     //    sar dword ptr [r21 + r22], 8
    __ sarl(Address(r22, r23), 8);                     //    sar dword ptr [r22 + r23], 8
    __ sarl(Address(r23, r24), 8);                     //    sar dword ptr [r23 + r24], 8
    __ sarl(Address(r24, r25), 8);                     //    sar dword ptr [r24 + r25], 8
    __ sarl(Address(r25, r26), 8);                     //    sar dword ptr [r25 + r26], 8
    __ sarl(Address(r26, r27), 8);                     //    sar dword ptr [r26 + r27], 8
    __ sarl(Address(r27, r28), 8);                     //    sar dword ptr [r27 + r28], 8
    __ sarl(Address(r28, r29), 8);                     //    sar dword ptr [r28 + r29], 8
    __ sarl(Address(r29, r30), 8);                     //    sar dword ptr [r29 + r30], 8
    __ sarl(Address(r30, r31), 8);                     //    sar dword ptr [r30 + r31], 8
    __ sarl(Address(r31, rcx), 8);                     //    sar dword ptr [r31 + rcx], 8
    __ sarl(Address(rcx, rdx), 16);                    //    sar dword ptr [rcx + rdx], 16
    __ sarl(Address(rdx, rbx), 16);                    //    sar dword ptr [rdx + rbx], 16
    __ sarl(Address(rbx, r8), 16);                     //    sar dword ptr [rbx + r8], 16
    __ sarl(Address(r8, r9), 16);                      //    sar dword ptr [r8 + r9], 16
    __ sarl(Address(r9, r10), 16);                     //    sar dword ptr [r9 + r10], 16
    __ sarl(Address(r10, r11), 16);                    //    sar dword ptr [r10 + r11], 16
    __ sarl(Address(r11, r12), 16);                    //    sar dword ptr [r11 + r12], 16
    __ sarl(Address(r12, r13), 16);                    //    sar dword ptr [r12 + r13], 16
    __ sarl(Address(r13, r14), 16);                    //    sar dword ptr [r13 + r14], 16
    __ sarl(Address(r14, r15), 16);                    //    sar dword ptr [r14 + r15], 16
    __ sarl(Address(r15, r16), 16);                    //    sar dword ptr [r15 + r16], 16
    __ sarl(Address(r16, r17), 16);                    //    sar dword ptr [r16 + r17], 16
    __ sarl(Address(r17, r18), 16);                    //    sar dword ptr [r17 + r18], 16
    __ sarl(Address(r18, r19), 16);                    //    sar dword ptr [r18 + r19], 16
    __ sarl(Address(r19, r20), 16);                    //    sar dword ptr [r19 + r20], 16
    __ sarl(Address(r20, r21), 16);                    //    sar dword ptr [r20 + r21], 16
    __ sarl(Address(r21, r22), 16);                    //    sar dword ptr [r21 + r22], 16
    __ sarl(Address(r22, r23), 16);                    //    sar dword ptr [r22 + r23], 16
    __ sarl(Address(r23, r24), 16);                    //    sar dword ptr [r23 + r24], 16
    __ sarl(Address(r24, r25), 16);                    //    sar dword ptr [r24 + r25], 16
    __ sarl(Address(r25, r26), 16);                    //    sar dword ptr [r25 + r26], 16
    __ sarl(Address(r26, r27), 16);                    //    sar dword ptr [r26 + r27], 16
    __ sarl(Address(r27, r28), 16);                    //    sar dword ptr [r27 + r28], 16
    __ sarl(Address(r28, r29), 16);                    //    sar dword ptr [r28 + r29], 16
    __ sarl(Address(r29, r30), 16);                    //    sar dword ptr [r29 + r30], 16
    __ sarl(Address(r30, r31), 16);                    //    sar dword ptr [r30 + r31], 16
    __ sarl(Address(r31, rcx), 16);                    //    sar dword ptr [r31 + rcx], 16
#endif // _LP64
    __ sbbl(Address(rcx, rdx), 1);                     //    sbb dword ptr [rcx + rdx], 1
    __ sbbl(Address(rdx, rbx), 1);                     //    sbb dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ sbbl(Address(rbx, r8), 1);                      //    sbb dword ptr [rbx + r8], 1
    __ sbbl(Address(r8, r9), 1);                       //    sbb dword ptr [r8 + r9], 1
    __ sbbl(Address(r9, r10), 1);                      //    sbb dword ptr [r9 + r10], 1
    __ sbbl(Address(r10, r11), 1);                     //    sbb dword ptr [r10 + r11], 1
    __ sbbl(Address(r11, r12), 1);                     //    sbb dword ptr [r11 + r12], 1
    __ sbbl(Address(r12, r13), 1);                     //    sbb dword ptr [r12 + r13], 1
    __ sbbl(Address(r13, r14), 1);                     //    sbb dword ptr [r13 + r14], 1
    __ sbbl(Address(r14, r15), 1);                     //    sbb dword ptr [r14 + r15], 1
    __ sbbl(Address(r15, r16), 1);                     //    sbb dword ptr [r15 + r16], 1
    __ sbbl(Address(r16, r17), 1);                     //    sbb dword ptr [r16 + r17], 1
    __ sbbl(Address(r17, r18), 1);                     //    sbb dword ptr [r17 + r18], 1
    __ sbbl(Address(r18, r19), 1);                     //    sbb dword ptr [r18 + r19], 1
    __ sbbl(Address(r19, r20), 1);                     //    sbb dword ptr [r19 + r20], 1
    __ sbbl(Address(r20, r21), 1);                     //    sbb dword ptr [r20 + r21], 1
    __ sbbl(Address(r21, r22), 1);                     //    sbb dword ptr [r21 + r22], 1
    __ sbbl(Address(r22, r23), 1);                     //    sbb dword ptr [r22 + r23], 1
    __ sbbl(Address(r23, r24), 1);                     //    sbb dword ptr [r23 + r24], 1
    __ sbbl(Address(r24, r25), 1);                     //    sbb dword ptr [r24 + r25], 1
    __ sbbl(Address(r25, r26), 1);                     //    sbb dword ptr [r25 + r26], 1
    __ sbbl(Address(r26, r27), 1);                     //    sbb dword ptr [r26 + r27], 1
    __ sbbl(Address(r27, r28), 1);                     //    sbb dword ptr [r27 + r28], 1
    __ sbbl(Address(r28, r29), 1);                     //    sbb dword ptr [r28 + r29], 1
    __ sbbl(Address(r29, r30), 1);                     //    sbb dword ptr [r29 + r30], 1
    __ sbbl(Address(r30, r31), 1);                     //    sbb dword ptr [r30 + r31], 1
    __ sbbl(Address(r31, rcx), 1);                     //    sbb dword ptr [r31 + rcx], 1
    __ sbbl(Address(rcx, rdx), 16);                    //    sbb dword ptr [rcx + rdx], 16
    __ sbbl(Address(rdx, rbx), 16);                    //    sbb dword ptr [rdx + rbx], 16
    __ sbbl(Address(rbx, r8), 16);                     //    sbb dword ptr [rbx + r8], 16
    __ sbbl(Address(r8, r9), 16);                      //    sbb dword ptr [r8 + r9], 16
    __ sbbl(Address(r9, r10), 16);                     //    sbb dword ptr [r9 + r10], 16
    __ sbbl(Address(r10, r11), 16);                    //    sbb dword ptr [r10 + r11], 16
    __ sbbl(Address(r11, r12), 16);                    //    sbb dword ptr [r11 + r12], 16
    __ sbbl(Address(r12, r13), 16);                    //    sbb dword ptr [r12 + r13], 16
    __ sbbl(Address(r13, r14), 16);                    //    sbb dword ptr [r13 + r14], 16
    __ sbbl(Address(r14, r15), 16);                    //    sbb dword ptr [r14 + r15], 16
    __ sbbl(Address(r15, r16), 16);                    //    sbb dword ptr [r15 + r16], 16
    __ sbbl(Address(r16, r17), 16);                    //    sbb dword ptr [r16 + r17], 16
    __ sbbl(Address(r17, r18), 16);                    //    sbb dword ptr [r17 + r18], 16
    __ sbbl(Address(r18, r19), 16);                    //    sbb dword ptr [r18 + r19], 16
    __ sbbl(Address(r19, r20), 16);                    //    sbb dword ptr [r19 + r20], 16
    __ sbbl(Address(r20, r21), 16);                    //    sbb dword ptr [r20 + r21], 16
    __ sbbl(Address(r21, r22), 16);                    //    sbb dword ptr [r21 + r22], 16
    __ sbbl(Address(r22, r23), 16);                    //    sbb dword ptr [r22 + r23], 16
    __ sbbl(Address(r23, r24), 16);                    //    sbb dword ptr [r23 + r24], 16
    __ sbbl(Address(r24, r25), 16);                    //    sbb dword ptr [r24 + r25], 16
    __ sbbl(Address(r25, r26), 16);                    //    sbb dword ptr [r25 + r26], 16
    __ sbbl(Address(r26, r27), 16);                    //    sbb dword ptr [r26 + r27], 16
    __ sbbl(Address(r27, r28), 16);                    //    sbb dword ptr [r27 + r28], 16
    __ sbbl(Address(r28, r29), 16);                    //    sbb dword ptr [r28 + r29], 16
    __ sbbl(Address(r29, r30), 16);                    //    sbb dword ptr [r29 + r30], 16
    __ sbbl(Address(r30, r31), 16);                    //    sbb dword ptr [r30 + r31], 16
    __ sbbl(Address(r31, rcx), 16);                    //    sbb dword ptr [r31 + rcx], 16
    __ sbbl(Address(rcx, rdx), 256);                   //    sbb dword ptr [rcx + rdx], 256
    __ sbbl(Address(rdx, rbx), 256);                   //    sbb dword ptr [rdx + rbx], 256
    __ sbbl(Address(rbx, r8), 256);                    //    sbb dword ptr [rbx + r8], 256
    __ sbbl(Address(r8, r9), 256);                     //    sbb dword ptr [r8 + r9], 256
    __ sbbl(Address(r9, r10), 256);                    //    sbb dword ptr [r9 + r10], 256
    __ sbbl(Address(r10, r11), 256);                   //    sbb dword ptr [r10 + r11], 256
    __ sbbl(Address(r11, r12), 256);                   //    sbb dword ptr [r11 + r12], 256
    __ sbbl(Address(r12, r13), 256);                   //    sbb dword ptr [r12 + r13], 256
    __ sbbl(Address(r13, r14), 256);                   //    sbb dword ptr [r13 + r14], 256
    __ sbbl(Address(r14, r15), 256);                   //    sbb dword ptr [r14 + r15], 256
    __ sbbl(Address(r15, r16), 256);                   //    sbb dword ptr [r15 + r16], 256
    __ sbbl(Address(r16, r17), 256);                   //    sbb dword ptr [r16 + r17], 256
    __ sbbl(Address(r17, r18), 256);                   //    sbb dword ptr [r17 + r18], 256
    __ sbbl(Address(r18, r19), 256);                   //    sbb dword ptr [r18 + r19], 256
    __ sbbl(Address(r19, r20), 256);                   //    sbb dword ptr [r19 + r20], 256
    __ sbbl(Address(r20, r21), 256);                   //    sbb dword ptr [r20 + r21], 256
    __ sbbl(Address(r21, r22), 256);                   //    sbb dword ptr [r21 + r22], 256
    __ sbbl(Address(r22, r23), 256);                   //    sbb dword ptr [r22 + r23], 256
    __ sbbl(Address(r23, r24), 256);                   //    sbb dword ptr [r23 + r24], 256
    __ sbbl(Address(r24, r25), 256);                   //    sbb dword ptr [r24 + r25], 256
    __ sbbl(Address(r25, r26), 256);                   //    sbb dword ptr [r25 + r26], 256
    __ sbbl(Address(r26, r27), 256);                   //    sbb dword ptr [r26 + r27], 256
    __ sbbl(Address(r27, r28), 256);                   //    sbb dword ptr [r27 + r28], 256
    __ sbbl(Address(r28, r29), 256);                   //    sbb dword ptr [r28 + r29], 256
    __ sbbl(Address(r29, r30), 256);                   //    sbb dword ptr [r29 + r30], 256
    __ sbbl(Address(r30, r31), 256);                   //    sbb dword ptr [r30 + r31], 256
    __ sbbl(Address(r31, rcx), 256);                   //    sbb dword ptr [r31 + rcx], 256
    __ sbbl(Address(rcx, rdx), 4096);                  //    sbb dword ptr [rcx + rdx], 4096
    __ sbbl(Address(rdx, rbx), 4096);                  //    sbb dword ptr [rdx + rbx], 4096
    __ sbbl(Address(rbx, r8), 4096);                   //    sbb dword ptr [rbx + r8], 4096
    __ sbbl(Address(r8, r9), 4096);                    //    sbb dword ptr [r8 + r9], 4096
    __ sbbl(Address(r9, r10), 4096);                   //    sbb dword ptr [r9 + r10], 4096
    __ sbbl(Address(r10, r11), 4096);                  //    sbb dword ptr [r10 + r11], 4096
    __ sbbl(Address(r11, r12), 4096);                  //    sbb dword ptr [r11 + r12], 4096
    __ sbbl(Address(r12, r13), 4096);                  //    sbb dword ptr [r12 + r13], 4096
    __ sbbl(Address(r13, r14), 4096);                  //    sbb dword ptr [r13 + r14], 4096
    __ sbbl(Address(r14, r15), 4096);                  //    sbb dword ptr [r14 + r15], 4096
    __ sbbl(Address(r15, r16), 4096);                  //    sbb dword ptr [r15 + r16], 4096
    __ sbbl(Address(r16, r17), 4096);                  //    sbb dword ptr [r16 + r17], 4096
    __ sbbl(Address(r17, r18), 4096);                  //    sbb dword ptr [r17 + r18], 4096
    __ sbbl(Address(r18, r19), 4096);                  //    sbb dword ptr [r18 + r19], 4096
    __ sbbl(Address(r19, r20), 4096);                  //    sbb dword ptr [r19 + r20], 4096
    __ sbbl(Address(r20, r21), 4096);                  //    sbb dword ptr [r20 + r21], 4096
    __ sbbl(Address(r21, r22), 4096);                  //    sbb dword ptr [r21 + r22], 4096
    __ sbbl(Address(r22, r23), 4096);                  //    sbb dword ptr [r22 + r23], 4096
    __ sbbl(Address(r23, r24), 4096);                  //    sbb dword ptr [r23 + r24], 4096
    __ sbbl(Address(r24, r25), 4096);                  //    sbb dword ptr [r24 + r25], 4096
    __ sbbl(Address(r25, r26), 4096);                  //    sbb dword ptr [r25 + r26], 4096
    __ sbbl(Address(r26, r27), 4096);                  //    sbb dword ptr [r26 + r27], 4096
    __ sbbl(Address(r27, r28), 4096);                  //    sbb dword ptr [r27 + r28], 4096
    __ sbbl(Address(r28, r29), 4096);                  //    sbb dword ptr [r28 + r29], 4096
    __ sbbl(Address(r29, r30), 4096);                  //    sbb dword ptr [r29 + r30], 4096
    __ sbbl(Address(r30, r31), 4096);                  //    sbb dword ptr [r30 + r31], 4096
    __ sbbl(Address(r31, rcx), 4096);                  //    sbb dword ptr [r31 + rcx], 4096
    __ sbbl(Address(rcx, rdx), 65536);                 //    sbb dword ptr [rcx + rdx], 65536
    __ sbbl(Address(rdx, rbx), 65536);                 //    sbb dword ptr [rdx + rbx], 65536
    __ sbbl(Address(rbx, r8), 65536);                  //    sbb dword ptr [rbx + r8], 65536
    __ sbbl(Address(r8, r9), 65536);                   //    sbb dword ptr [r8 + r9], 65536
    __ sbbl(Address(r9, r10), 65536);                  //    sbb dword ptr [r9 + r10], 65536
    __ sbbl(Address(r10, r11), 65536);                 //    sbb dword ptr [r10 + r11], 65536
    __ sbbl(Address(r11, r12), 65536);                 //    sbb dword ptr [r11 + r12], 65536
    __ sbbl(Address(r12, r13), 65536);                 //    sbb dword ptr [r12 + r13], 65536
    __ sbbl(Address(r13, r14), 65536);                 //    sbb dword ptr [r13 + r14], 65536
    __ sbbl(Address(r14, r15), 65536);                 //    sbb dword ptr [r14 + r15], 65536
    __ sbbl(Address(r15, r16), 65536);                 //    sbb dword ptr [r15 + r16], 65536
    __ sbbl(Address(r16, r17), 65536);                 //    sbb dword ptr [r16 + r17], 65536
    __ sbbl(Address(r17, r18), 65536);                 //    sbb dword ptr [r17 + r18], 65536
    __ sbbl(Address(r18, r19), 65536);                 //    sbb dword ptr [r18 + r19], 65536
    __ sbbl(Address(r19, r20), 65536);                 //    sbb dword ptr [r19 + r20], 65536
    __ sbbl(Address(r20, r21), 65536);                 //    sbb dword ptr [r20 + r21], 65536
    __ sbbl(Address(r21, r22), 65536);                 //    sbb dword ptr [r21 + r22], 65536
    __ sbbl(Address(r22, r23), 65536);                 //    sbb dword ptr [r22 + r23], 65536
    __ sbbl(Address(r23, r24), 65536);                 //    sbb dword ptr [r23 + r24], 65536
    __ sbbl(Address(r24, r25), 65536);                 //    sbb dword ptr [r24 + r25], 65536
    __ sbbl(Address(r25, r26), 65536);                 //    sbb dword ptr [r25 + r26], 65536
    __ sbbl(Address(r26, r27), 65536);                 //    sbb dword ptr [r26 + r27], 65536
    __ sbbl(Address(r27, r28), 65536);                 //    sbb dword ptr [r27 + r28], 65536
    __ sbbl(Address(r28, r29), 65536);                 //    sbb dword ptr [r28 + r29], 65536
    __ sbbl(Address(r29, r30), 65536);                 //    sbb dword ptr [r29 + r30], 65536
    __ sbbl(Address(r30, r31), 65536);                 //    sbb dword ptr [r30 + r31], 65536
    __ sbbl(Address(r31, rcx), 65536);                 //    sbb dword ptr [r31 + rcx], 65536
    __ sbbl(Address(rcx, rdx), 1048576);               //    sbb dword ptr [rcx + rdx], 1048576
    __ sbbl(Address(rdx, rbx), 1048576);               //    sbb dword ptr [rdx + rbx], 1048576
    __ sbbl(Address(rbx, r8), 1048576);                //    sbb dword ptr [rbx + r8], 1048576
    __ sbbl(Address(r8, r9), 1048576);                 //    sbb dword ptr [r8 + r9], 1048576
    __ sbbl(Address(r9, r10), 1048576);                //    sbb dword ptr [r9 + r10], 1048576
    __ sbbl(Address(r10, r11), 1048576);               //    sbb dword ptr [r10 + r11], 1048576
    __ sbbl(Address(r11, r12), 1048576);               //    sbb dword ptr [r11 + r12], 1048576
    __ sbbl(Address(r12, r13), 1048576);               //    sbb dword ptr [r12 + r13], 1048576
    __ sbbl(Address(r13, r14), 1048576);               //    sbb dword ptr [r13 + r14], 1048576
    __ sbbl(Address(r14, r15), 1048576);               //    sbb dword ptr [r14 + r15], 1048576
    __ sbbl(Address(r15, r16), 1048576);               //    sbb dword ptr [r15 + r16], 1048576
    __ sbbl(Address(r16, r17), 1048576);               //    sbb dword ptr [r16 + r17], 1048576
    __ sbbl(Address(r17, r18), 1048576);               //    sbb dword ptr [r17 + r18], 1048576
    __ sbbl(Address(r18, r19), 1048576);               //    sbb dword ptr [r18 + r19], 1048576
    __ sbbl(Address(r19, r20), 1048576);               //    sbb dword ptr [r19 + r20], 1048576
    __ sbbl(Address(r20, r21), 1048576);               //    sbb dword ptr [r20 + r21], 1048576
    __ sbbl(Address(r21, r22), 1048576);               //    sbb dword ptr [r21 + r22], 1048576
    __ sbbl(Address(r22, r23), 1048576);               //    sbb dword ptr [r22 + r23], 1048576
    __ sbbl(Address(r23, r24), 1048576);               //    sbb dword ptr [r23 + r24], 1048576
    __ sbbl(Address(r24, r25), 1048576);               //    sbb dword ptr [r24 + r25], 1048576
    __ sbbl(Address(r25, r26), 1048576);               //    sbb dword ptr [r25 + r26], 1048576
    __ sbbl(Address(r26, r27), 1048576);               //    sbb dword ptr [r26 + r27], 1048576
    __ sbbl(Address(r27, r28), 1048576);               //    sbb dword ptr [r27 + r28], 1048576
    __ sbbl(Address(r28, r29), 1048576);               //    sbb dword ptr [r28 + r29], 1048576
    __ sbbl(Address(r29, r30), 1048576);               //    sbb dword ptr [r29 + r30], 1048576
    __ sbbl(Address(r30, r31), 1048576);               //    sbb dword ptr [r30 + r31], 1048576
    __ sbbl(Address(r31, rcx), 1048576);               //    sbb dword ptr [r31 + rcx], 1048576
    __ sbbl(Address(rcx, rdx), 16777216);              //    sbb dword ptr [rcx + rdx], 16777216
    __ sbbl(Address(rdx, rbx), 16777216);              //    sbb dword ptr [rdx + rbx], 16777216
    __ sbbl(Address(rbx, r8), 16777216);               //    sbb dword ptr [rbx + r8], 16777216
    __ sbbl(Address(r8, r9), 16777216);                //    sbb dword ptr [r8 + r9], 16777216
    __ sbbl(Address(r9, r10), 16777216);               //    sbb dword ptr [r9 + r10], 16777216
    __ sbbl(Address(r10, r11), 16777216);              //    sbb dword ptr [r10 + r11], 16777216
    __ sbbl(Address(r11, r12), 16777216);              //    sbb dword ptr [r11 + r12], 16777216
    __ sbbl(Address(r12, r13), 16777216);              //    sbb dword ptr [r12 + r13], 16777216
    __ sbbl(Address(r13, r14), 16777216);              //    sbb dword ptr [r13 + r14], 16777216
    __ sbbl(Address(r14, r15), 16777216);              //    sbb dword ptr [r14 + r15], 16777216
    __ sbbl(Address(r15, r16), 16777216);              //    sbb dword ptr [r15 + r16], 16777216
    __ sbbl(Address(r16, r17), 16777216);              //    sbb dword ptr [r16 + r17], 16777216
    __ sbbl(Address(r17, r18), 16777216);              //    sbb dword ptr [r17 + r18], 16777216
    __ sbbl(Address(r18, r19), 16777216);              //    sbb dword ptr [r18 + r19], 16777216
    __ sbbl(Address(r19, r20), 16777216);              //    sbb dword ptr [r19 + r20], 16777216
    __ sbbl(Address(r20, r21), 16777216);              //    sbb dword ptr [r20 + r21], 16777216
    __ sbbl(Address(r21, r22), 16777216);              //    sbb dword ptr [r21 + r22], 16777216
    __ sbbl(Address(r22, r23), 16777216);              //    sbb dword ptr [r22 + r23], 16777216
    __ sbbl(Address(r23, r24), 16777216);              //    sbb dword ptr [r23 + r24], 16777216
    __ sbbl(Address(r24, r25), 16777216);              //    sbb dword ptr [r24 + r25], 16777216
    __ sbbl(Address(r25, r26), 16777216);              //    sbb dword ptr [r25 + r26], 16777216
    __ sbbl(Address(r26, r27), 16777216);              //    sbb dword ptr [r26 + r27], 16777216
    __ sbbl(Address(r27, r28), 16777216);              //    sbb dword ptr [r27 + r28], 16777216
    __ sbbl(Address(r28, r29), 16777216);              //    sbb dword ptr [r28 + r29], 16777216
    __ sbbl(Address(r29, r30), 16777216);              //    sbb dword ptr [r29 + r30], 16777216
    __ sbbl(Address(r30, r31), 16777216);              //    sbb dword ptr [r30 + r31], 16777216
    __ sbbl(Address(r31, rcx), 16777216);              //    sbb dword ptr [r31 + rcx], 16777216
    __ sbbl(Address(rcx, rdx), 268435456);             //    sbb dword ptr [rcx + rdx], 268435456
    __ sbbl(Address(rdx, rbx), 268435456);             //    sbb dword ptr [rdx + rbx], 268435456
    __ sbbl(Address(rbx, r8), 268435456);              //    sbb dword ptr [rbx + r8], 268435456
    __ sbbl(Address(r8, r9), 268435456);               //    sbb dword ptr [r8 + r9], 268435456
    __ sbbl(Address(r9, r10), 268435456);              //    sbb dword ptr [r9 + r10], 268435456
    __ sbbl(Address(r10, r11), 268435456);             //    sbb dword ptr [r10 + r11], 268435456
    __ sbbl(Address(r11, r12), 268435456);             //    sbb dword ptr [r11 + r12], 268435456
    __ sbbl(Address(r12, r13), 268435456);             //    sbb dword ptr [r12 + r13], 268435456
    __ sbbl(Address(r13, r14), 268435456);             //    sbb dword ptr [r13 + r14], 268435456
    __ sbbl(Address(r14, r15), 268435456);             //    sbb dword ptr [r14 + r15], 268435456
    __ sbbl(Address(r15, r16), 268435456);             //    sbb dword ptr [r15 + r16], 268435456
    __ sbbl(Address(r16, r17), 268435456);             //    sbb dword ptr [r16 + r17], 268435456
    __ sbbl(Address(r17, r18), 268435456);             //    sbb dword ptr [r17 + r18], 268435456
    __ sbbl(Address(r18, r19), 268435456);             //    sbb dword ptr [r18 + r19], 268435456
    __ sbbl(Address(r19, r20), 268435456);             //    sbb dword ptr [r19 + r20], 268435456
    __ sbbl(Address(r20, r21), 268435456);             //    sbb dword ptr [r20 + r21], 268435456
    __ sbbl(Address(r21, r22), 268435456);             //    sbb dword ptr [r21 + r22], 268435456
    __ sbbl(Address(r22, r23), 268435456);             //    sbb dword ptr [r22 + r23], 268435456
    __ sbbl(Address(r23, r24), 268435456);             //    sbb dword ptr [r23 + r24], 268435456
    __ sbbl(Address(r24, r25), 268435456);             //    sbb dword ptr [r24 + r25], 268435456
    __ sbbl(Address(r25, r26), 268435456);             //    sbb dword ptr [r25 + r26], 268435456
    __ sbbl(Address(r26, r27), 268435456);             //    sbb dword ptr [r26 + r27], 268435456
    __ sbbl(Address(r27, r28), 268435456);             //    sbb dword ptr [r27 + r28], 268435456
    __ sbbl(Address(r28, r29), 268435456);             //    sbb dword ptr [r28 + r29], 268435456
    __ sbbl(Address(r29, r30), 268435456);             //    sbb dword ptr [r29 + r30], 268435456
    __ sbbl(Address(r30, r31), 268435456);             //    sbb dword ptr [r30 + r31], 268435456
    __ sbbl(Address(r31, rcx), 268435456);             //    sbb dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ shrl(Address(rcx, rdx), 1);                     //    shr dword ptr [rcx + rdx], 1
    __ shrl(Address(rdx, rbx), 1);                     //    shr dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ shrl(Address(rbx, r8), 1);                      //    shr dword ptr [rbx + r8], 1
    __ shrl(Address(r8, r9), 1);                       //    shr dword ptr [r8 + r9], 1
    __ shrl(Address(r9, r10), 1);                      //    shr dword ptr [r9 + r10], 1
    __ shrl(Address(r10, r11), 1);                     //    shr dword ptr [r10 + r11], 1
    __ shrl(Address(r11, r12), 1);                     //    shr dword ptr [r11 + r12], 1
    __ shrl(Address(r12, r13), 1);                     //    shr dword ptr [r12 + r13], 1
    __ shrl(Address(r13, r14), 1);                     //    shr dword ptr [r13 + r14], 1
    __ shrl(Address(r14, r15), 1);                     //    shr dword ptr [r14 + r15], 1
    __ shrl(Address(r15, r16), 1);                     //    shr dword ptr [r15 + r16], 1
    __ shrl(Address(r16, r17), 1);                     //    shr dword ptr [r16 + r17], 1
    __ shrl(Address(r17, r18), 1);                     //    shr dword ptr [r17 + r18], 1
    __ shrl(Address(r18, r19), 1);                     //    shr dword ptr [r18 + r19], 1
    __ shrl(Address(r19, r20), 1);                     //    shr dword ptr [r19 + r20], 1
    __ shrl(Address(r20, r21), 1);                     //    shr dword ptr [r20 + r21], 1
    __ shrl(Address(r21, r22), 1);                     //    shr dword ptr [r21 + r22], 1
    __ shrl(Address(r22, r23), 1);                     //    shr dword ptr [r22 + r23], 1
    __ shrl(Address(r23, r24), 1);                     //    shr dword ptr [r23 + r24], 1
    __ shrl(Address(r24, r25), 1);                     //    shr dword ptr [r24 + r25], 1
    __ shrl(Address(r25, r26), 1);                     //    shr dword ptr [r25 + r26], 1
    __ shrl(Address(r26, r27), 1);                     //    shr dword ptr [r26 + r27], 1
    __ shrl(Address(r27, r28), 1);                     //    shr dword ptr [r27 + r28], 1
    __ shrl(Address(r28, r29), 1);                     //    shr dword ptr [r28 + r29], 1
    __ shrl(Address(r29, r30), 1);                     //    shr dword ptr [r29 + r30], 1
    __ shrl(Address(r30, r31), 1);                     //    shr dword ptr [r30 + r31], 1
    __ shrl(Address(r31, rcx), 1);                     //    shr dword ptr [r31 + rcx], 1
    __ shrl(Address(rcx, rdx), 2);                     //    shr dword ptr [rcx + rdx], 2
    __ shrl(Address(rdx, rbx), 2);                     //    shr dword ptr [rdx + rbx], 2
    __ shrl(Address(rbx, r8), 2);                      //    shr dword ptr [rbx + r8], 2
    __ shrl(Address(r8, r9), 2);                       //    shr dword ptr [r8 + r9], 2
    __ shrl(Address(r9, r10), 2);                      //    shr dword ptr [r9 + r10], 2
    __ shrl(Address(r10, r11), 2);                     //    shr dword ptr [r10 + r11], 2
    __ shrl(Address(r11, r12), 2);                     //    shr dword ptr [r11 + r12], 2
    __ shrl(Address(r12, r13), 2);                     //    shr dword ptr [r12 + r13], 2
    __ shrl(Address(r13, r14), 2);                     //    shr dword ptr [r13 + r14], 2
    __ shrl(Address(r14, r15), 2);                     //    shr dword ptr [r14 + r15], 2
    __ shrl(Address(r15, r16), 2);                     //    shr dword ptr [r15 + r16], 2
    __ shrl(Address(r16, r17), 2);                     //    shr dword ptr [r16 + r17], 2
    __ shrl(Address(r17, r18), 2);                     //    shr dword ptr [r17 + r18], 2
    __ shrl(Address(r18, r19), 2);                     //    shr dword ptr [r18 + r19], 2
    __ shrl(Address(r19, r20), 2);                     //    shr dword ptr [r19 + r20], 2
    __ shrl(Address(r20, r21), 2);                     //    shr dword ptr [r20 + r21], 2
    __ shrl(Address(r21, r22), 2);                     //    shr dword ptr [r21 + r22], 2
    __ shrl(Address(r22, r23), 2);                     //    shr dword ptr [r22 + r23], 2
    __ shrl(Address(r23, r24), 2);                     //    shr dword ptr [r23 + r24], 2
    __ shrl(Address(r24, r25), 2);                     //    shr dword ptr [r24 + r25], 2
    __ shrl(Address(r25, r26), 2);                     //    shr dword ptr [r25 + r26], 2
    __ shrl(Address(r26, r27), 2);                     //    shr dword ptr [r26 + r27], 2
    __ shrl(Address(r27, r28), 2);                     //    shr dword ptr [r27 + r28], 2
    __ shrl(Address(r28, r29), 2);                     //    shr dword ptr [r28 + r29], 2
    __ shrl(Address(r29, r30), 2);                     //    shr dword ptr [r29 + r30], 2
    __ shrl(Address(r30, r31), 2);                     //    shr dword ptr [r30 + r31], 2
    __ shrl(Address(r31, rcx), 2);                     //    shr dword ptr [r31 + rcx], 2
    __ shrl(Address(rcx, rdx), 4);                     //    shr dword ptr [rcx + rdx], 4
    __ shrl(Address(rdx, rbx), 4);                     //    shr dword ptr [rdx + rbx], 4
    __ shrl(Address(rbx, r8), 4);                      //    shr dword ptr [rbx + r8], 4
    __ shrl(Address(r8, r9), 4);                       //    shr dword ptr [r8 + r9], 4
    __ shrl(Address(r9, r10), 4);                      //    shr dword ptr [r9 + r10], 4
    __ shrl(Address(r10, r11), 4);                     //    shr dword ptr [r10 + r11], 4
    __ shrl(Address(r11, r12), 4);                     //    shr dword ptr [r11 + r12], 4
    __ shrl(Address(r12, r13), 4);                     //    shr dword ptr [r12 + r13], 4
    __ shrl(Address(r13, r14), 4);                     //    shr dword ptr [r13 + r14], 4
    __ shrl(Address(r14, r15), 4);                     //    shr dword ptr [r14 + r15], 4
    __ shrl(Address(r15, r16), 4);                     //    shr dword ptr [r15 + r16], 4
    __ shrl(Address(r16, r17), 4);                     //    shr dword ptr [r16 + r17], 4
    __ shrl(Address(r17, r18), 4);                     //    shr dword ptr [r17 + r18], 4
    __ shrl(Address(r18, r19), 4);                     //    shr dword ptr [r18 + r19], 4
    __ shrl(Address(r19, r20), 4);                     //    shr dword ptr [r19 + r20], 4
    __ shrl(Address(r20, r21), 4);                     //    shr dword ptr [r20 + r21], 4
    __ shrl(Address(r21, r22), 4);                     //    shr dword ptr [r21 + r22], 4
    __ shrl(Address(r22, r23), 4);                     //    shr dword ptr [r22 + r23], 4
    __ shrl(Address(r23, r24), 4);                     //    shr dword ptr [r23 + r24], 4
    __ shrl(Address(r24, r25), 4);                     //    shr dword ptr [r24 + r25], 4
    __ shrl(Address(r25, r26), 4);                     //    shr dword ptr [r25 + r26], 4
    __ shrl(Address(r26, r27), 4);                     //    shr dword ptr [r26 + r27], 4
    __ shrl(Address(r27, r28), 4);                     //    shr dword ptr [r27 + r28], 4
    __ shrl(Address(r28, r29), 4);                     //    shr dword ptr [r28 + r29], 4
    __ shrl(Address(r29, r30), 4);                     //    shr dword ptr [r29 + r30], 4
    __ shrl(Address(r30, r31), 4);                     //    shr dword ptr [r30 + r31], 4
    __ shrl(Address(r31, rcx), 4);                     //    shr dword ptr [r31 + rcx], 4
    __ shrl(Address(rcx, rdx), 8);                     //    shr dword ptr [rcx + rdx], 8
    __ shrl(Address(rdx, rbx), 8);                     //    shr dword ptr [rdx + rbx], 8
    __ shrl(Address(rbx, r8), 8);                      //    shr dword ptr [rbx + r8], 8
    __ shrl(Address(r8, r9), 8);                       //    shr dword ptr [r8 + r9], 8
    __ shrl(Address(r9, r10), 8);                      //    shr dword ptr [r9 + r10], 8
    __ shrl(Address(r10, r11), 8);                     //    shr dword ptr [r10 + r11], 8
    __ shrl(Address(r11, r12), 8);                     //    shr dword ptr [r11 + r12], 8
    __ shrl(Address(r12, r13), 8);                     //    shr dword ptr [r12 + r13], 8
    __ shrl(Address(r13, r14), 8);                     //    shr dword ptr [r13 + r14], 8
    __ shrl(Address(r14, r15), 8);                     //    shr dword ptr [r14 + r15], 8
    __ shrl(Address(r15, r16), 8);                     //    shr dword ptr [r15 + r16], 8
    __ shrl(Address(r16, r17), 8);                     //    shr dword ptr [r16 + r17], 8
    __ shrl(Address(r17, r18), 8);                     //    shr dword ptr [r17 + r18], 8
    __ shrl(Address(r18, r19), 8);                     //    shr dword ptr [r18 + r19], 8
    __ shrl(Address(r19, r20), 8);                     //    shr dword ptr [r19 + r20], 8
    __ shrl(Address(r20, r21), 8);                     //    shr dword ptr [r20 + r21], 8
    __ shrl(Address(r21, r22), 8);                     //    shr dword ptr [r21 + r22], 8
    __ shrl(Address(r22, r23), 8);                     //    shr dword ptr [r22 + r23], 8
    __ shrl(Address(r23, r24), 8);                     //    shr dword ptr [r23 + r24], 8
    __ shrl(Address(r24, r25), 8);                     //    shr dword ptr [r24 + r25], 8
    __ shrl(Address(r25, r26), 8);                     //    shr dword ptr [r25 + r26], 8
    __ shrl(Address(r26, r27), 8);                     //    shr dword ptr [r26 + r27], 8
    __ shrl(Address(r27, r28), 8);                     //    shr dword ptr [r27 + r28], 8
    __ shrl(Address(r28, r29), 8);                     //    shr dword ptr [r28 + r29], 8
    __ shrl(Address(r29, r30), 8);                     //    shr dword ptr [r29 + r30], 8
    __ shrl(Address(r30, r31), 8);                     //    shr dword ptr [r30 + r31], 8
    __ shrl(Address(r31, rcx), 8);                     //    shr dword ptr [r31 + rcx], 8
    __ shrl(Address(rcx, rdx), 16);                    //    shr dword ptr [rcx + rdx], 16
    __ shrl(Address(rdx, rbx), 16);                    //    shr dword ptr [rdx + rbx], 16
    __ shrl(Address(rbx, r8), 16);                     //    shr dword ptr [rbx + r8], 16
    __ shrl(Address(r8, r9), 16);                      //    shr dword ptr [r8 + r9], 16
    __ shrl(Address(r9, r10), 16);                     //    shr dword ptr [r9 + r10], 16
    __ shrl(Address(r10, r11), 16);                    //    shr dword ptr [r10 + r11], 16
    __ shrl(Address(r11, r12), 16);                    //    shr dword ptr [r11 + r12], 16
    __ shrl(Address(r12, r13), 16);                    //    shr dword ptr [r12 + r13], 16
    __ shrl(Address(r13, r14), 16);                    //    shr dword ptr [r13 + r14], 16
    __ shrl(Address(r14, r15), 16);                    //    shr dword ptr [r14 + r15], 16
    __ shrl(Address(r15, r16), 16);                    //    shr dword ptr [r15 + r16], 16
    __ shrl(Address(r16, r17), 16);                    //    shr dword ptr [r16 + r17], 16
    __ shrl(Address(r17, r18), 16);                    //    shr dword ptr [r17 + r18], 16
    __ shrl(Address(r18, r19), 16);                    //    shr dword ptr [r18 + r19], 16
    __ shrl(Address(r19, r20), 16);                    //    shr dword ptr [r19 + r20], 16
    __ shrl(Address(r20, r21), 16);                    //    shr dword ptr [r20 + r21], 16
    __ shrl(Address(r21, r22), 16);                    //    shr dword ptr [r21 + r22], 16
    __ shrl(Address(r22, r23), 16);                    //    shr dword ptr [r22 + r23], 16
    __ shrl(Address(r23, r24), 16);                    //    shr dword ptr [r23 + r24], 16
    __ shrl(Address(r24, r25), 16);                    //    shr dword ptr [r24 + r25], 16
    __ shrl(Address(r25, r26), 16);                    //    shr dword ptr [r25 + r26], 16
    __ shrl(Address(r26, r27), 16);                    //    shr dword ptr [r26 + r27], 16
    __ shrl(Address(r27, r28), 16);                    //    shr dword ptr [r27 + r28], 16
    __ shrl(Address(r28, r29), 16);                    //    shr dword ptr [r28 + r29], 16
    __ shrl(Address(r29, r30), 16);                    //    shr dword ptr [r29 + r30], 16
    __ shrl(Address(r30, r31), 16);                    //    shr dword ptr [r30 + r31], 16
    __ shrl(Address(r31, rcx), 16);                    //    shr dword ptr [r31 + rcx], 16
#endif // _LP64
    __ subl(Address(rcx, rdx), 1);                     //    sub dword ptr [rcx + rdx], 1
    __ subl(Address(rdx, rbx), 1);                     //    sub dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ subl(Address(rbx, r8), 1);                      //    sub dword ptr [rbx + r8], 1
    __ subl(Address(r8, r9), 1);                       //    sub dword ptr [r8 + r9], 1
    __ subl(Address(r9, r10), 1);                      //    sub dword ptr [r9 + r10], 1
    __ subl(Address(r10, r11), 1);                     //    sub dword ptr [r10 + r11], 1
    __ subl(Address(r11, r12), 1);                     //    sub dword ptr [r11 + r12], 1
    __ subl(Address(r12, r13), 1);                     //    sub dword ptr [r12 + r13], 1
    __ subl(Address(r13, r14), 1);                     //    sub dword ptr [r13 + r14], 1
    __ subl(Address(r14, r15), 1);                     //    sub dword ptr [r14 + r15], 1
    __ subl(Address(r15, r16), 1);                     //    sub dword ptr [r15 + r16], 1
    __ subl(Address(r16, r17), 1);                     //    sub dword ptr [r16 + r17], 1
    __ subl(Address(r17, r18), 1);                     //    sub dword ptr [r17 + r18], 1
    __ subl(Address(r18, r19), 1);                     //    sub dword ptr [r18 + r19], 1
    __ subl(Address(r19, r20), 1);                     //    sub dword ptr [r19 + r20], 1
    __ subl(Address(r20, r21), 1);                     //    sub dword ptr [r20 + r21], 1
    __ subl(Address(r21, r22), 1);                     //    sub dword ptr [r21 + r22], 1
    __ subl(Address(r22, r23), 1);                     //    sub dword ptr [r22 + r23], 1
    __ subl(Address(r23, r24), 1);                     //    sub dword ptr [r23 + r24], 1
    __ subl(Address(r24, r25), 1);                     //    sub dword ptr [r24 + r25], 1
    __ subl(Address(r25, r26), 1);                     //    sub dword ptr [r25 + r26], 1
    __ subl(Address(r26, r27), 1);                     //    sub dword ptr [r26 + r27], 1
    __ subl(Address(r27, r28), 1);                     //    sub dword ptr [r27 + r28], 1
    __ subl(Address(r28, r29), 1);                     //    sub dword ptr [r28 + r29], 1
    __ subl(Address(r29, r30), 1);                     //    sub dword ptr [r29 + r30], 1
    __ subl(Address(r30, r31), 1);                     //    sub dword ptr [r30 + r31], 1
    __ subl(Address(r31, rcx), 1);                     //    sub dword ptr [r31 + rcx], 1
    __ subl(Address(rcx, rdx), 16);                    //    sub dword ptr [rcx + rdx], 16
    __ subl(Address(rdx, rbx), 16);                    //    sub dword ptr [rdx + rbx], 16
    __ subl(Address(rbx, r8), 16);                     //    sub dword ptr [rbx + r8], 16
    __ subl(Address(r8, r9), 16);                      //    sub dword ptr [r8 + r9], 16
    __ subl(Address(r9, r10), 16);                     //    sub dword ptr [r9 + r10], 16
    __ subl(Address(r10, r11), 16);                    //    sub dword ptr [r10 + r11], 16
    __ subl(Address(r11, r12), 16);                    //    sub dword ptr [r11 + r12], 16
    __ subl(Address(r12, r13), 16);                    //    sub dword ptr [r12 + r13], 16
    __ subl(Address(r13, r14), 16);                    //    sub dword ptr [r13 + r14], 16
    __ subl(Address(r14, r15), 16);                    //    sub dword ptr [r14 + r15], 16
    __ subl(Address(r15, r16), 16);                    //    sub dword ptr [r15 + r16], 16
    __ subl(Address(r16, r17), 16);                    //    sub dword ptr [r16 + r17], 16
    __ subl(Address(r17, r18), 16);                    //    sub dword ptr [r17 + r18], 16
    __ subl(Address(r18, r19), 16);                    //    sub dword ptr [r18 + r19], 16
    __ subl(Address(r19, r20), 16);                    //    sub dword ptr [r19 + r20], 16
    __ subl(Address(r20, r21), 16);                    //    sub dword ptr [r20 + r21], 16
    __ subl(Address(r21, r22), 16);                    //    sub dword ptr [r21 + r22], 16
    __ subl(Address(r22, r23), 16);                    //    sub dword ptr [r22 + r23], 16
    __ subl(Address(r23, r24), 16);                    //    sub dword ptr [r23 + r24], 16
    __ subl(Address(r24, r25), 16);                    //    sub dword ptr [r24 + r25], 16
    __ subl(Address(r25, r26), 16);                    //    sub dword ptr [r25 + r26], 16
    __ subl(Address(r26, r27), 16);                    //    sub dword ptr [r26 + r27], 16
    __ subl(Address(r27, r28), 16);                    //    sub dword ptr [r27 + r28], 16
    __ subl(Address(r28, r29), 16);                    //    sub dword ptr [r28 + r29], 16
    __ subl(Address(r29, r30), 16);                    //    sub dword ptr [r29 + r30], 16
    __ subl(Address(r30, r31), 16);                    //    sub dword ptr [r30 + r31], 16
    __ subl(Address(r31, rcx), 16);                    //    sub dword ptr [r31 + rcx], 16
    __ subl(Address(rcx, rdx), 256);                   //    sub dword ptr [rcx + rdx], 256
    __ subl(Address(rdx, rbx), 256);                   //    sub dword ptr [rdx + rbx], 256
    __ subl(Address(rbx, r8), 256);                    //    sub dword ptr [rbx + r8], 256
    __ subl(Address(r8, r9), 256);                     //    sub dword ptr [r8 + r9], 256
    __ subl(Address(r9, r10), 256);                    //    sub dword ptr [r9 + r10], 256
    __ subl(Address(r10, r11), 256);                   //    sub dword ptr [r10 + r11], 256
    __ subl(Address(r11, r12), 256);                   //    sub dword ptr [r11 + r12], 256
    __ subl(Address(r12, r13), 256);                   //    sub dword ptr [r12 + r13], 256
    __ subl(Address(r13, r14), 256);                   //    sub dword ptr [r13 + r14], 256
    __ subl(Address(r14, r15), 256);                   //    sub dword ptr [r14 + r15], 256
    __ subl(Address(r15, r16), 256);                   //    sub dword ptr [r15 + r16], 256
    __ subl(Address(r16, r17), 256);                   //    sub dword ptr [r16 + r17], 256
    __ subl(Address(r17, r18), 256);                   //    sub dword ptr [r17 + r18], 256
    __ subl(Address(r18, r19), 256);                   //    sub dword ptr [r18 + r19], 256
    __ subl(Address(r19, r20), 256);                   //    sub dword ptr [r19 + r20], 256
    __ subl(Address(r20, r21), 256);                   //    sub dword ptr [r20 + r21], 256
    __ subl(Address(r21, r22), 256);                   //    sub dword ptr [r21 + r22], 256
    __ subl(Address(r22, r23), 256);                   //    sub dword ptr [r22 + r23], 256
    __ subl(Address(r23, r24), 256);                   //    sub dword ptr [r23 + r24], 256
    __ subl(Address(r24, r25), 256);                   //    sub dword ptr [r24 + r25], 256
    __ subl(Address(r25, r26), 256);                   //    sub dword ptr [r25 + r26], 256
    __ subl(Address(r26, r27), 256);                   //    sub dword ptr [r26 + r27], 256
    __ subl(Address(r27, r28), 256);                   //    sub dword ptr [r27 + r28], 256
    __ subl(Address(r28, r29), 256);                   //    sub dword ptr [r28 + r29], 256
    __ subl(Address(r29, r30), 256);                   //    sub dword ptr [r29 + r30], 256
    __ subl(Address(r30, r31), 256);                   //    sub dword ptr [r30 + r31], 256
    __ subl(Address(r31, rcx), 256);                   //    sub dword ptr [r31 + rcx], 256
    __ subl(Address(rcx, rdx), 4096);                  //    sub dword ptr [rcx + rdx], 4096
    __ subl(Address(rdx, rbx), 4096);                  //    sub dword ptr [rdx + rbx], 4096
    __ subl(Address(rbx, r8), 4096);                   //    sub dword ptr [rbx + r8], 4096
    __ subl(Address(r8, r9), 4096);                    //    sub dword ptr [r8 + r9], 4096
    __ subl(Address(r9, r10), 4096);                   //    sub dword ptr [r9 + r10], 4096
    __ subl(Address(r10, r11), 4096);                  //    sub dword ptr [r10 + r11], 4096
    __ subl(Address(r11, r12), 4096);                  //    sub dword ptr [r11 + r12], 4096
    __ subl(Address(r12, r13), 4096);                  //    sub dword ptr [r12 + r13], 4096
    __ subl(Address(r13, r14), 4096);                  //    sub dword ptr [r13 + r14], 4096
    __ subl(Address(r14, r15), 4096);                  //    sub dword ptr [r14 + r15], 4096
    __ subl(Address(r15, r16), 4096);                  //    sub dword ptr [r15 + r16], 4096
    __ subl(Address(r16, r17), 4096);                  //    sub dword ptr [r16 + r17], 4096
    __ subl(Address(r17, r18), 4096);                  //    sub dword ptr [r17 + r18], 4096
    __ subl(Address(r18, r19), 4096);                  //    sub dword ptr [r18 + r19], 4096
    __ subl(Address(r19, r20), 4096);                  //    sub dword ptr [r19 + r20], 4096
    __ subl(Address(r20, r21), 4096);                  //    sub dword ptr [r20 + r21], 4096
    __ subl(Address(r21, r22), 4096);                  //    sub dword ptr [r21 + r22], 4096
    __ subl(Address(r22, r23), 4096);                  //    sub dword ptr [r22 + r23], 4096
    __ subl(Address(r23, r24), 4096);                  //    sub dword ptr [r23 + r24], 4096
    __ subl(Address(r24, r25), 4096);                  //    sub dword ptr [r24 + r25], 4096
    __ subl(Address(r25, r26), 4096);                  //    sub dword ptr [r25 + r26], 4096
    __ subl(Address(r26, r27), 4096);                  //    sub dword ptr [r26 + r27], 4096
    __ subl(Address(r27, r28), 4096);                  //    sub dword ptr [r27 + r28], 4096
    __ subl(Address(r28, r29), 4096);                  //    sub dword ptr [r28 + r29], 4096
    __ subl(Address(r29, r30), 4096);                  //    sub dword ptr [r29 + r30], 4096
    __ subl(Address(r30, r31), 4096);                  //    sub dword ptr [r30 + r31], 4096
    __ subl(Address(r31, rcx), 4096);                  //    sub dword ptr [r31 + rcx], 4096
    __ subl(Address(rcx, rdx), 65536);                 //    sub dword ptr [rcx + rdx], 65536
    __ subl(Address(rdx, rbx), 65536);                 //    sub dword ptr [rdx + rbx], 65536
    __ subl(Address(rbx, r8), 65536);                  //    sub dword ptr [rbx + r8], 65536
    __ subl(Address(r8, r9), 65536);                   //    sub dword ptr [r8 + r9], 65536
    __ subl(Address(r9, r10), 65536);                  //    sub dword ptr [r9 + r10], 65536
    __ subl(Address(r10, r11), 65536);                 //    sub dword ptr [r10 + r11], 65536
    __ subl(Address(r11, r12), 65536);                 //    sub dword ptr [r11 + r12], 65536
    __ subl(Address(r12, r13), 65536);                 //    sub dword ptr [r12 + r13], 65536
    __ subl(Address(r13, r14), 65536);                 //    sub dword ptr [r13 + r14], 65536
    __ subl(Address(r14, r15), 65536);                 //    sub dword ptr [r14 + r15], 65536
    __ subl(Address(r15, r16), 65536);                 //    sub dword ptr [r15 + r16], 65536
    __ subl(Address(r16, r17), 65536);                 //    sub dword ptr [r16 + r17], 65536
    __ subl(Address(r17, r18), 65536);                 //    sub dword ptr [r17 + r18], 65536
    __ subl(Address(r18, r19), 65536);                 //    sub dword ptr [r18 + r19], 65536
    __ subl(Address(r19, r20), 65536);                 //    sub dword ptr [r19 + r20], 65536
    __ subl(Address(r20, r21), 65536);                 //    sub dword ptr [r20 + r21], 65536
    __ subl(Address(r21, r22), 65536);                 //    sub dword ptr [r21 + r22], 65536
    __ subl(Address(r22, r23), 65536);                 //    sub dword ptr [r22 + r23], 65536
    __ subl(Address(r23, r24), 65536);                 //    sub dword ptr [r23 + r24], 65536
    __ subl(Address(r24, r25), 65536);                 //    sub dword ptr [r24 + r25], 65536
    __ subl(Address(r25, r26), 65536);                 //    sub dword ptr [r25 + r26], 65536
    __ subl(Address(r26, r27), 65536);                 //    sub dword ptr [r26 + r27], 65536
    __ subl(Address(r27, r28), 65536);                 //    sub dword ptr [r27 + r28], 65536
    __ subl(Address(r28, r29), 65536);                 //    sub dword ptr [r28 + r29], 65536
    __ subl(Address(r29, r30), 65536);                 //    sub dword ptr [r29 + r30], 65536
    __ subl(Address(r30, r31), 65536);                 //    sub dword ptr [r30 + r31], 65536
    __ subl(Address(r31, rcx), 65536);                 //    sub dword ptr [r31 + rcx], 65536
    __ subl(Address(rcx, rdx), 1048576);               //    sub dword ptr [rcx + rdx], 1048576
    __ subl(Address(rdx, rbx), 1048576);               //    sub dword ptr [rdx + rbx], 1048576
    __ subl(Address(rbx, r8), 1048576);                //    sub dword ptr [rbx + r8], 1048576
    __ subl(Address(r8, r9), 1048576);                 //    sub dword ptr [r8 + r9], 1048576
    __ subl(Address(r9, r10), 1048576);                //    sub dword ptr [r9 + r10], 1048576
    __ subl(Address(r10, r11), 1048576);               //    sub dword ptr [r10 + r11], 1048576
    __ subl(Address(r11, r12), 1048576);               //    sub dword ptr [r11 + r12], 1048576
    __ subl(Address(r12, r13), 1048576);               //    sub dword ptr [r12 + r13], 1048576
    __ subl(Address(r13, r14), 1048576);               //    sub dword ptr [r13 + r14], 1048576
    __ subl(Address(r14, r15), 1048576);               //    sub dword ptr [r14 + r15], 1048576
    __ subl(Address(r15, r16), 1048576);               //    sub dword ptr [r15 + r16], 1048576
    __ subl(Address(r16, r17), 1048576);               //    sub dword ptr [r16 + r17], 1048576
    __ subl(Address(r17, r18), 1048576);               //    sub dword ptr [r17 + r18], 1048576
    __ subl(Address(r18, r19), 1048576);               //    sub dword ptr [r18 + r19], 1048576
    __ subl(Address(r19, r20), 1048576);               //    sub dword ptr [r19 + r20], 1048576
    __ subl(Address(r20, r21), 1048576);               //    sub dword ptr [r20 + r21], 1048576
    __ subl(Address(r21, r22), 1048576);               //    sub dword ptr [r21 + r22], 1048576
    __ subl(Address(r22, r23), 1048576);               //    sub dword ptr [r22 + r23], 1048576
    __ subl(Address(r23, r24), 1048576);               //    sub dword ptr [r23 + r24], 1048576
    __ subl(Address(r24, r25), 1048576);               //    sub dword ptr [r24 + r25], 1048576
    __ subl(Address(r25, r26), 1048576);               //    sub dword ptr [r25 + r26], 1048576
    __ subl(Address(r26, r27), 1048576);               //    sub dword ptr [r26 + r27], 1048576
    __ subl(Address(r27, r28), 1048576);               //    sub dword ptr [r27 + r28], 1048576
    __ subl(Address(r28, r29), 1048576);               //    sub dword ptr [r28 + r29], 1048576
    __ subl(Address(r29, r30), 1048576);               //    sub dword ptr [r29 + r30], 1048576
    __ subl(Address(r30, r31), 1048576);               //    sub dword ptr [r30 + r31], 1048576
    __ subl(Address(r31, rcx), 1048576);               //    sub dword ptr [r31 + rcx], 1048576
    __ subl(Address(rcx, rdx), 16777216);              //    sub dword ptr [rcx + rdx], 16777216
    __ subl(Address(rdx, rbx), 16777216);              //    sub dword ptr [rdx + rbx], 16777216
    __ subl(Address(rbx, r8), 16777216);               //    sub dword ptr [rbx + r8], 16777216
    __ subl(Address(r8, r9), 16777216);                //    sub dword ptr [r8 + r9], 16777216
    __ subl(Address(r9, r10), 16777216);               //    sub dword ptr [r9 + r10], 16777216
    __ subl(Address(r10, r11), 16777216);              //    sub dword ptr [r10 + r11], 16777216
    __ subl(Address(r11, r12), 16777216);              //    sub dword ptr [r11 + r12], 16777216
    __ subl(Address(r12, r13), 16777216);              //    sub dword ptr [r12 + r13], 16777216
    __ subl(Address(r13, r14), 16777216);              //    sub dword ptr [r13 + r14], 16777216
    __ subl(Address(r14, r15), 16777216);              //    sub dword ptr [r14 + r15], 16777216
    __ subl(Address(r15, r16), 16777216);              //    sub dword ptr [r15 + r16], 16777216
    __ subl(Address(r16, r17), 16777216);              //    sub dword ptr [r16 + r17], 16777216
    __ subl(Address(r17, r18), 16777216);              //    sub dword ptr [r17 + r18], 16777216
    __ subl(Address(r18, r19), 16777216);              //    sub dword ptr [r18 + r19], 16777216
    __ subl(Address(r19, r20), 16777216);              //    sub dword ptr [r19 + r20], 16777216
    __ subl(Address(r20, r21), 16777216);              //    sub dword ptr [r20 + r21], 16777216
    __ subl(Address(r21, r22), 16777216);              //    sub dword ptr [r21 + r22], 16777216
    __ subl(Address(r22, r23), 16777216);              //    sub dword ptr [r22 + r23], 16777216
    __ subl(Address(r23, r24), 16777216);              //    sub dword ptr [r23 + r24], 16777216
    __ subl(Address(r24, r25), 16777216);              //    sub dword ptr [r24 + r25], 16777216
    __ subl(Address(r25, r26), 16777216);              //    sub dword ptr [r25 + r26], 16777216
    __ subl(Address(r26, r27), 16777216);              //    sub dword ptr [r26 + r27], 16777216
    __ subl(Address(r27, r28), 16777216);              //    sub dword ptr [r27 + r28], 16777216
    __ subl(Address(r28, r29), 16777216);              //    sub dword ptr [r28 + r29], 16777216
    __ subl(Address(r29, r30), 16777216);              //    sub dword ptr [r29 + r30], 16777216
    __ subl(Address(r30, r31), 16777216);              //    sub dword ptr [r30 + r31], 16777216
    __ subl(Address(r31, rcx), 16777216);              //    sub dword ptr [r31 + rcx], 16777216
    __ subl(Address(rcx, rdx), 268435456);             //    sub dword ptr [rcx + rdx], 268435456
    __ subl(Address(rdx, rbx), 268435456);             //    sub dword ptr [rdx + rbx], 268435456
    __ subl(Address(rbx, r8), 268435456);              //    sub dword ptr [rbx + r8], 268435456
    __ subl(Address(r8, r9), 268435456);               //    sub dword ptr [r8 + r9], 268435456
    __ subl(Address(r9, r10), 268435456);              //    sub dword ptr [r9 + r10], 268435456
    __ subl(Address(r10, r11), 268435456);             //    sub dword ptr [r10 + r11], 268435456
    __ subl(Address(r11, r12), 268435456);             //    sub dword ptr [r11 + r12], 268435456
    __ subl(Address(r12, r13), 268435456);             //    sub dword ptr [r12 + r13], 268435456
    __ subl(Address(r13, r14), 268435456);             //    sub dword ptr [r13 + r14], 268435456
    __ subl(Address(r14, r15), 268435456);             //    sub dword ptr [r14 + r15], 268435456
    __ subl(Address(r15, r16), 268435456);             //    sub dword ptr [r15 + r16], 268435456
    __ subl(Address(r16, r17), 268435456);             //    sub dword ptr [r16 + r17], 268435456
    __ subl(Address(r17, r18), 268435456);             //    sub dword ptr [r17 + r18], 268435456
    __ subl(Address(r18, r19), 268435456);             //    sub dword ptr [r18 + r19], 268435456
    __ subl(Address(r19, r20), 268435456);             //    sub dword ptr [r19 + r20], 268435456
    __ subl(Address(r20, r21), 268435456);             //    sub dword ptr [r20 + r21], 268435456
    __ subl(Address(r21, r22), 268435456);             //    sub dword ptr [r21 + r22], 268435456
    __ subl(Address(r22, r23), 268435456);             //    sub dword ptr [r22 + r23], 268435456
    __ subl(Address(r23, r24), 268435456);             //    sub dword ptr [r23 + r24], 268435456
    __ subl(Address(r24, r25), 268435456);             //    sub dword ptr [r24 + r25], 268435456
    __ subl(Address(r25, r26), 268435456);             //    sub dword ptr [r25 + r26], 268435456
    __ subl(Address(r26, r27), 268435456);             //    sub dword ptr [r26 + r27], 268435456
    __ subl(Address(r27, r28), 268435456);             //    sub dword ptr [r27 + r28], 268435456
    __ subl(Address(r28, r29), 268435456);             //    sub dword ptr [r28 + r29], 268435456
    __ subl(Address(r29, r30), 268435456);             //    sub dword ptr [r29 + r30], 268435456
    __ subl(Address(r30, r31), 268435456);             //    sub dword ptr [r30 + r31], 268435456
    __ subl(Address(r31, rcx), 268435456);             //    sub dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ xorl(Address(rcx, rdx), 1);                     //    xor dword ptr [rcx + rdx], 1
    __ xorl(Address(rdx, rbx), 1);                     //    xor dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ xorl(Address(rbx, r8), 1);                      //    xor dword ptr [rbx + r8], 1
    __ xorl(Address(r8, r9), 1);                       //    xor dword ptr [r8 + r9], 1
    __ xorl(Address(r9, r10), 1);                      //    xor dword ptr [r9 + r10], 1
    __ xorl(Address(r10, r11), 1);                     //    xor dword ptr [r10 + r11], 1
    __ xorl(Address(r11, r12), 1);                     //    xor dword ptr [r11 + r12], 1
    __ xorl(Address(r12, r13), 1);                     //    xor dword ptr [r12 + r13], 1
    __ xorl(Address(r13, r14), 1);                     //    xor dword ptr [r13 + r14], 1
    __ xorl(Address(r14, r15), 1);                     //    xor dword ptr [r14 + r15], 1
    __ xorl(Address(r15, r16), 1);                     //    xor dword ptr [r15 + r16], 1
    __ xorl(Address(r16, r17), 1);                     //    xor dword ptr [r16 + r17], 1
    __ xorl(Address(r17, r18), 1);                     //    xor dword ptr [r17 + r18], 1
    __ xorl(Address(r18, r19), 1);                     //    xor dword ptr [r18 + r19], 1
    __ xorl(Address(r19, r20), 1);                     //    xor dword ptr [r19 + r20], 1
    __ xorl(Address(r20, r21), 1);                     //    xor dword ptr [r20 + r21], 1
    __ xorl(Address(r21, r22), 1);                     //    xor dword ptr [r21 + r22], 1
    __ xorl(Address(r22, r23), 1);                     //    xor dword ptr [r22 + r23], 1
    __ xorl(Address(r23, r24), 1);                     //    xor dword ptr [r23 + r24], 1
    __ xorl(Address(r24, r25), 1);                     //    xor dword ptr [r24 + r25], 1
    __ xorl(Address(r25, r26), 1);                     //    xor dword ptr [r25 + r26], 1
    __ xorl(Address(r26, r27), 1);                     //    xor dword ptr [r26 + r27], 1
    __ xorl(Address(r27, r28), 1);                     //    xor dword ptr [r27 + r28], 1
    __ xorl(Address(r28, r29), 1);                     //    xor dword ptr [r28 + r29], 1
    __ xorl(Address(r29, r30), 1);                     //    xor dword ptr [r29 + r30], 1
    __ xorl(Address(r30, r31), 1);                     //    xor dword ptr [r30 + r31], 1
    __ xorl(Address(r31, rcx), 1);                     //    xor dword ptr [r31 + rcx], 1
    __ xorl(Address(rcx, rdx), 16);                    //    xor dword ptr [rcx + rdx], 16
    __ xorl(Address(rdx, rbx), 16);                    //    xor dword ptr [rdx + rbx], 16
    __ xorl(Address(rbx, r8), 16);                     //    xor dword ptr [rbx + r8], 16
    __ xorl(Address(r8, r9), 16);                      //    xor dword ptr [r8 + r9], 16
    __ xorl(Address(r9, r10), 16);                     //    xor dword ptr [r9 + r10], 16
    __ xorl(Address(r10, r11), 16);                    //    xor dword ptr [r10 + r11], 16
    __ xorl(Address(r11, r12), 16);                    //    xor dword ptr [r11 + r12], 16
    __ xorl(Address(r12, r13), 16);                    //    xor dword ptr [r12 + r13], 16
    __ xorl(Address(r13, r14), 16);                    //    xor dword ptr [r13 + r14], 16
    __ xorl(Address(r14, r15), 16);                    //    xor dword ptr [r14 + r15], 16
    __ xorl(Address(r15, r16), 16);                    //    xor dword ptr [r15 + r16], 16
    __ xorl(Address(r16, r17), 16);                    //    xor dword ptr [r16 + r17], 16
    __ xorl(Address(r17, r18), 16);                    //    xor dword ptr [r17 + r18], 16
    __ xorl(Address(r18, r19), 16);                    //    xor dword ptr [r18 + r19], 16
    __ xorl(Address(r19, r20), 16);                    //    xor dword ptr [r19 + r20], 16
    __ xorl(Address(r20, r21), 16);                    //    xor dword ptr [r20 + r21], 16
    __ xorl(Address(r21, r22), 16);                    //    xor dword ptr [r21 + r22], 16
    __ xorl(Address(r22, r23), 16);                    //    xor dword ptr [r22 + r23], 16
    __ xorl(Address(r23, r24), 16);                    //    xor dword ptr [r23 + r24], 16
    __ xorl(Address(r24, r25), 16);                    //    xor dword ptr [r24 + r25], 16
    __ xorl(Address(r25, r26), 16);                    //    xor dword ptr [r25 + r26], 16
    __ xorl(Address(r26, r27), 16);                    //    xor dword ptr [r26 + r27], 16
    __ xorl(Address(r27, r28), 16);                    //    xor dword ptr [r27 + r28], 16
    __ xorl(Address(r28, r29), 16);                    //    xor dword ptr [r28 + r29], 16
    __ xorl(Address(r29, r30), 16);                    //    xor dword ptr [r29 + r30], 16
    __ xorl(Address(r30, r31), 16);                    //    xor dword ptr [r30 + r31], 16
    __ xorl(Address(r31, rcx), 16);                    //    xor dword ptr [r31 + rcx], 16
    __ xorl(Address(rcx, rdx), 256);                   //    xor dword ptr [rcx + rdx], 256
    __ xorl(Address(rdx, rbx), 256);                   //    xor dword ptr [rdx + rbx], 256
    __ xorl(Address(rbx, r8), 256);                    //    xor dword ptr [rbx + r8], 256
    __ xorl(Address(r8, r9), 256);                     //    xor dword ptr [r8 + r9], 256
    __ xorl(Address(r9, r10), 256);                    //    xor dword ptr [r9 + r10], 256
    __ xorl(Address(r10, r11), 256);                   //    xor dword ptr [r10 + r11], 256
    __ xorl(Address(r11, r12), 256);                   //    xor dword ptr [r11 + r12], 256
    __ xorl(Address(r12, r13), 256);                   //    xor dword ptr [r12 + r13], 256
    __ xorl(Address(r13, r14), 256);                   //    xor dword ptr [r13 + r14], 256
    __ xorl(Address(r14, r15), 256);                   //    xor dword ptr [r14 + r15], 256
    __ xorl(Address(r15, r16), 256);                   //    xor dword ptr [r15 + r16], 256
    __ xorl(Address(r16, r17), 256);                   //    xor dword ptr [r16 + r17], 256
    __ xorl(Address(r17, r18), 256);                   //    xor dword ptr [r17 + r18], 256
    __ xorl(Address(r18, r19), 256);                   //    xor dword ptr [r18 + r19], 256
    __ xorl(Address(r19, r20), 256);                   //    xor dword ptr [r19 + r20], 256
    __ xorl(Address(r20, r21), 256);                   //    xor dword ptr [r20 + r21], 256
    __ xorl(Address(r21, r22), 256);                   //    xor dword ptr [r21 + r22], 256
    __ xorl(Address(r22, r23), 256);                   //    xor dword ptr [r22 + r23], 256
    __ xorl(Address(r23, r24), 256);                   //    xor dword ptr [r23 + r24], 256
    __ xorl(Address(r24, r25), 256);                   //    xor dword ptr [r24 + r25], 256
    __ xorl(Address(r25, r26), 256);                   //    xor dword ptr [r25 + r26], 256
    __ xorl(Address(r26, r27), 256);                   //    xor dword ptr [r26 + r27], 256
    __ xorl(Address(r27, r28), 256);                   //    xor dword ptr [r27 + r28], 256
    __ xorl(Address(r28, r29), 256);                   //    xor dword ptr [r28 + r29], 256
    __ xorl(Address(r29, r30), 256);                   //    xor dword ptr [r29 + r30], 256
    __ xorl(Address(r30, r31), 256);                   //    xor dword ptr [r30 + r31], 256
    __ xorl(Address(r31, rcx), 256);                   //    xor dword ptr [r31 + rcx], 256
    __ xorl(Address(rcx, rdx), 4096);                  //    xor dword ptr [rcx + rdx], 4096
    __ xorl(Address(rdx, rbx), 4096);                  //    xor dword ptr [rdx + rbx], 4096
    __ xorl(Address(rbx, r8), 4096);                   //    xor dword ptr [rbx + r8], 4096
    __ xorl(Address(r8, r9), 4096);                    //    xor dword ptr [r8 + r9], 4096
    __ xorl(Address(r9, r10), 4096);                   //    xor dword ptr [r9 + r10], 4096
    __ xorl(Address(r10, r11), 4096);                  //    xor dword ptr [r10 + r11], 4096
    __ xorl(Address(r11, r12), 4096);                  //    xor dword ptr [r11 + r12], 4096
    __ xorl(Address(r12, r13), 4096);                  //    xor dword ptr [r12 + r13], 4096
    __ xorl(Address(r13, r14), 4096);                  //    xor dword ptr [r13 + r14], 4096
    __ xorl(Address(r14, r15), 4096);                  //    xor dword ptr [r14 + r15], 4096
    __ xorl(Address(r15, r16), 4096);                  //    xor dword ptr [r15 + r16], 4096
    __ xorl(Address(r16, r17), 4096);                  //    xor dword ptr [r16 + r17], 4096
    __ xorl(Address(r17, r18), 4096);                  //    xor dword ptr [r17 + r18], 4096
    __ xorl(Address(r18, r19), 4096);                  //    xor dword ptr [r18 + r19], 4096
    __ xorl(Address(r19, r20), 4096);                  //    xor dword ptr [r19 + r20], 4096
    __ xorl(Address(r20, r21), 4096);                  //    xor dword ptr [r20 + r21], 4096
    __ xorl(Address(r21, r22), 4096);                  //    xor dword ptr [r21 + r22], 4096
    __ xorl(Address(r22, r23), 4096);                  //    xor dword ptr [r22 + r23], 4096
    __ xorl(Address(r23, r24), 4096);                  //    xor dword ptr [r23 + r24], 4096
    __ xorl(Address(r24, r25), 4096);                  //    xor dword ptr [r24 + r25], 4096
    __ xorl(Address(r25, r26), 4096);                  //    xor dword ptr [r25 + r26], 4096
    __ xorl(Address(r26, r27), 4096);                  //    xor dword ptr [r26 + r27], 4096
    __ xorl(Address(r27, r28), 4096);                  //    xor dword ptr [r27 + r28], 4096
    __ xorl(Address(r28, r29), 4096);                  //    xor dword ptr [r28 + r29], 4096
    __ xorl(Address(r29, r30), 4096);                  //    xor dword ptr [r29 + r30], 4096
    __ xorl(Address(r30, r31), 4096);                  //    xor dword ptr [r30 + r31], 4096
    __ xorl(Address(r31, rcx), 4096);                  //    xor dword ptr [r31 + rcx], 4096
    __ xorl(Address(rcx, rdx), 65536);                 //    xor dword ptr [rcx + rdx], 65536
    __ xorl(Address(rdx, rbx), 65536);                 //    xor dword ptr [rdx + rbx], 65536
    __ xorl(Address(rbx, r8), 65536);                  //    xor dword ptr [rbx + r8], 65536
    __ xorl(Address(r8, r9), 65536);                   //    xor dword ptr [r8 + r9], 65536
    __ xorl(Address(r9, r10), 65536);                  //    xor dword ptr [r9 + r10], 65536
    __ xorl(Address(r10, r11), 65536);                 //    xor dword ptr [r10 + r11], 65536
    __ xorl(Address(r11, r12), 65536);                 //    xor dword ptr [r11 + r12], 65536
    __ xorl(Address(r12, r13), 65536);                 //    xor dword ptr [r12 + r13], 65536
    __ xorl(Address(r13, r14), 65536);                 //    xor dword ptr [r13 + r14], 65536
    __ xorl(Address(r14, r15), 65536);                 //    xor dword ptr [r14 + r15], 65536
    __ xorl(Address(r15, r16), 65536);                 //    xor dword ptr [r15 + r16], 65536
    __ xorl(Address(r16, r17), 65536);                 //    xor dword ptr [r16 + r17], 65536
    __ xorl(Address(r17, r18), 65536);                 //    xor dword ptr [r17 + r18], 65536
    __ xorl(Address(r18, r19), 65536);                 //    xor dword ptr [r18 + r19], 65536
    __ xorl(Address(r19, r20), 65536);                 //    xor dword ptr [r19 + r20], 65536
    __ xorl(Address(r20, r21), 65536);                 //    xor dword ptr [r20 + r21], 65536
    __ xorl(Address(r21, r22), 65536);                 //    xor dword ptr [r21 + r22], 65536
    __ xorl(Address(r22, r23), 65536);                 //    xor dword ptr [r22 + r23], 65536
    __ xorl(Address(r23, r24), 65536);                 //    xor dword ptr [r23 + r24], 65536
    __ xorl(Address(r24, r25), 65536);                 //    xor dword ptr [r24 + r25], 65536
    __ xorl(Address(r25, r26), 65536);                 //    xor dword ptr [r25 + r26], 65536
    __ xorl(Address(r26, r27), 65536);                 //    xor dword ptr [r26 + r27], 65536
    __ xorl(Address(r27, r28), 65536);                 //    xor dword ptr [r27 + r28], 65536
    __ xorl(Address(r28, r29), 65536);                 //    xor dword ptr [r28 + r29], 65536
    __ xorl(Address(r29, r30), 65536);                 //    xor dword ptr [r29 + r30], 65536
    __ xorl(Address(r30, r31), 65536);                 //    xor dword ptr [r30 + r31], 65536
    __ xorl(Address(r31, rcx), 65536);                 //    xor dword ptr [r31 + rcx], 65536
    __ xorl(Address(rcx, rdx), 1048576);               //    xor dword ptr [rcx + rdx], 1048576
    __ xorl(Address(rdx, rbx), 1048576);               //    xor dword ptr [rdx + rbx], 1048576
    __ xorl(Address(rbx, r8), 1048576);                //    xor dword ptr [rbx + r8], 1048576
    __ xorl(Address(r8, r9), 1048576);                 //    xor dword ptr [r8 + r9], 1048576
    __ xorl(Address(r9, r10), 1048576);                //    xor dword ptr [r9 + r10], 1048576
    __ xorl(Address(r10, r11), 1048576);               //    xor dword ptr [r10 + r11], 1048576
    __ xorl(Address(r11, r12), 1048576);               //    xor dword ptr [r11 + r12], 1048576
    __ xorl(Address(r12, r13), 1048576);               //    xor dword ptr [r12 + r13], 1048576
    __ xorl(Address(r13, r14), 1048576);               //    xor dword ptr [r13 + r14], 1048576
    __ xorl(Address(r14, r15), 1048576);               //    xor dword ptr [r14 + r15], 1048576
    __ xorl(Address(r15, r16), 1048576);               //    xor dword ptr [r15 + r16], 1048576
    __ xorl(Address(r16, r17), 1048576);               //    xor dword ptr [r16 + r17], 1048576
    __ xorl(Address(r17, r18), 1048576);               //    xor dword ptr [r17 + r18], 1048576
    __ xorl(Address(r18, r19), 1048576);               //    xor dword ptr [r18 + r19], 1048576
    __ xorl(Address(r19, r20), 1048576);               //    xor dword ptr [r19 + r20], 1048576
    __ xorl(Address(r20, r21), 1048576);               //    xor dword ptr [r20 + r21], 1048576
    __ xorl(Address(r21, r22), 1048576);               //    xor dword ptr [r21 + r22], 1048576
    __ xorl(Address(r22, r23), 1048576);               //    xor dword ptr [r22 + r23], 1048576
    __ xorl(Address(r23, r24), 1048576);               //    xor dword ptr [r23 + r24], 1048576
    __ xorl(Address(r24, r25), 1048576);               //    xor dword ptr [r24 + r25], 1048576
    __ xorl(Address(r25, r26), 1048576);               //    xor dword ptr [r25 + r26], 1048576
    __ xorl(Address(r26, r27), 1048576);               //    xor dword ptr [r26 + r27], 1048576
    __ xorl(Address(r27, r28), 1048576);               //    xor dword ptr [r27 + r28], 1048576
    __ xorl(Address(r28, r29), 1048576);               //    xor dword ptr [r28 + r29], 1048576
    __ xorl(Address(r29, r30), 1048576);               //    xor dword ptr [r29 + r30], 1048576
    __ xorl(Address(r30, r31), 1048576);               //    xor dword ptr [r30 + r31], 1048576
    __ xorl(Address(r31, rcx), 1048576);               //    xor dword ptr [r31 + rcx], 1048576
    __ xorl(Address(rcx, rdx), 16777216);              //    xor dword ptr [rcx + rdx], 16777216
    __ xorl(Address(rdx, rbx), 16777216);              //    xor dword ptr [rdx + rbx], 16777216
    __ xorl(Address(rbx, r8), 16777216);               //    xor dword ptr [rbx + r8], 16777216
    __ xorl(Address(r8, r9), 16777216);                //    xor dword ptr [r8 + r9], 16777216
    __ xorl(Address(r9, r10), 16777216);               //    xor dword ptr [r9 + r10], 16777216
    __ xorl(Address(r10, r11), 16777216);              //    xor dword ptr [r10 + r11], 16777216
    __ xorl(Address(r11, r12), 16777216);              //    xor dword ptr [r11 + r12], 16777216
    __ xorl(Address(r12, r13), 16777216);              //    xor dword ptr [r12 + r13], 16777216
    __ xorl(Address(r13, r14), 16777216);              //    xor dword ptr [r13 + r14], 16777216
    __ xorl(Address(r14, r15), 16777216);              //    xor dword ptr [r14 + r15], 16777216
    __ xorl(Address(r15, r16), 16777216);              //    xor dword ptr [r15 + r16], 16777216
    __ xorl(Address(r16, r17), 16777216);              //    xor dword ptr [r16 + r17], 16777216
    __ xorl(Address(r17, r18), 16777216);              //    xor dword ptr [r17 + r18], 16777216
    __ xorl(Address(r18, r19), 16777216);              //    xor dword ptr [r18 + r19], 16777216
    __ xorl(Address(r19, r20), 16777216);              //    xor dword ptr [r19 + r20], 16777216
    __ xorl(Address(r20, r21), 16777216);              //    xor dword ptr [r20 + r21], 16777216
    __ xorl(Address(r21, r22), 16777216);              //    xor dword ptr [r21 + r22], 16777216
    __ xorl(Address(r22, r23), 16777216);              //    xor dword ptr [r22 + r23], 16777216
    __ xorl(Address(r23, r24), 16777216);              //    xor dword ptr [r23 + r24], 16777216
    __ xorl(Address(r24, r25), 16777216);              //    xor dword ptr [r24 + r25], 16777216
    __ xorl(Address(r25, r26), 16777216);              //    xor dword ptr [r25 + r26], 16777216
    __ xorl(Address(r26, r27), 16777216);              //    xor dword ptr [r26 + r27], 16777216
    __ xorl(Address(r27, r28), 16777216);              //    xor dword ptr [r27 + r28], 16777216
    __ xorl(Address(r28, r29), 16777216);              //    xor dword ptr [r28 + r29], 16777216
    __ xorl(Address(r29, r30), 16777216);              //    xor dword ptr [r29 + r30], 16777216
    __ xorl(Address(r30, r31), 16777216);              //    xor dword ptr [r30 + r31], 16777216
    __ xorl(Address(r31, rcx), 16777216);              //    xor dword ptr [r31 + rcx], 16777216
    __ xorl(Address(rcx, rdx), 268435456);             //    xor dword ptr [rcx + rdx], 268435456
    __ xorl(Address(rdx, rbx), 268435456);             //    xor dword ptr [rdx + rbx], 268435456
    __ xorl(Address(rbx, r8), 268435456);              //    xor dword ptr [rbx + r8], 268435456
    __ xorl(Address(r8, r9), 268435456);               //    xor dword ptr [r8 + r9], 268435456
    __ xorl(Address(r9, r10), 268435456);              //    xor dword ptr [r9 + r10], 268435456
    __ xorl(Address(r10, r11), 268435456);             //    xor dword ptr [r10 + r11], 268435456
    __ xorl(Address(r11, r12), 268435456);             //    xor dword ptr [r11 + r12], 268435456
    __ xorl(Address(r12, r13), 268435456);             //    xor dword ptr [r12 + r13], 268435456
    __ xorl(Address(r13, r14), 268435456);             //    xor dword ptr [r13 + r14], 268435456
    __ xorl(Address(r14, r15), 268435456);             //    xor dword ptr [r14 + r15], 268435456
    __ xorl(Address(r15, r16), 268435456);             //    xor dword ptr [r15 + r16], 268435456
    __ xorl(Address(r16, r17), 268435456);             //    xor dword ptr [r16 + r17], 268435456
    __ xorl(Address(r17, r18), 268435456);             //    xor dword ptr [r17 + r18], 268435456
    __ xorl(Address(r18, r19), 268435456);             //    xor dword ptr [r18 + r19], 268435456
    __ xorl(Address(r19, r20), 268435456);             //    xor dword ptr [r19 + r20], 268435456
    __ xorl(Address(r20, r21), 268435456);             //    xor dword ptr [r20 + r21], 268435456
    __ xorl(Address(r21, r22), 268435456);             //    xor dword ptr [r21 + r22], 268435456
    __ xorl(Address(r22, r23), 268435456);             //    xor dword ptr [r22 + r23], 268435456
    __ xorl(Address(r23, r24), 268435456);             //    xor dword ptr [r23 + r24], 268435456
    __ xorl(Address(r24, r25), 268435456);             //    xor dword ptr [r24 + r25], 268435456
    __ xorl(Address(r25, r26), 268435456);             //    xor dword ptr [r25 + r26], 268435456
    __ xorl(Address(r26, r27), 268435456);             //    xor dword ptr [r26 + r27], 268435456
    __ xorl(Address(r27, r28), 268435456);             //    xor dword ptr [r27 + r28], 268435456
    __ xorl(Address(r28, r29), 268435456);             //    xor dword ptr [r28 + r29], 268435456
    __ xorl(Address(r29, r30), 268435456);             //    xor dword ptr [r29 + r30], 268435456
    __ xorl(Address(r30, r31), 268435456);             //    xor dword ptr [r30 + r31], 268435456
    __ xorl(Address(r31, rcx), 268435456);             //    xor dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ orb(Address(rcx, rdx), 1);                      //    or byte ptr [rcx + rdx], 1
    __ orb(Address(rdx, rbx), 1);                      //    or byte ptr [rdx + rbx], 1
#ifdef _LP64
    __ orb(Address(rbx, r8), 1);                       //    or byte ptr [rbx + r8], 1
    __ orb(Address(r8, r9), 1);                        //    or byte ptr [r8 + r9], 1
    __ orb(Address(r9, r10), 1);                       //    or byte ptr [r9 + r10], 1
    __ orb(Address(r10, r11), 1);                      //    or byte ptr [r10 + r11], 1
    __ orb(Address(r11, r12), 1);                      //    or byte ptr [r11 + r12], 1
    __ orb(Address(r12, r13), 1);                      //    or byte ptr [r12 + r13], 1
    __ orb(Address(r13, r14), 1);                      //    or byte ptr [r13 + r14], 1
    __ orb(Address(r14, r15), 1);                      //    or byte ptr [r14 + r15], 1
    __ orb(Address(r15, r16), 1);                      //    or byte ptr [r15 + r16], 1
    __ orb(Address(r16, r17), 1);                      //    or byte ptr [r16 + r17], 1
    __ orb(Address(r17, r18), 1);                      //    or byte ptr [r17 + r18], 1
    __ orb(Address(r18, r19), 1);                      //    or byte ptr [r18 + r19], 1
    __ orb(Address(r19, r20), 1);                      //    or byte ptr [r19 + r20], 1
    __ orb(Address(r20, r21), 1);                      //    or byte ptr [r20 + r21], 1
    __ orb(Address(r21, r22), 1);                      //    or byte ptr [r21 + r22], 1
    __ orb(Address(r22, r23), 1);                      //    or byte ptr [r22 + r23], 1
    __ orb(Address(r23, r24), 1);                      //    or byte ptr [r23 + r24], 1
    __ orb(Address(r24, r25), 1);                      //    or byte ptr [r24 + r25], 1
    __ orb(Address(r25, r26), 1);                      //    or byte ptr [r25 + r26], 1
    __ orb(Address(r26, r27), 1);                      //    or byte ptr [r26 + r27], 1
    __ orb(Address(r27, r28), 1);                      //    or byte ptr [r27 + r28], 1
    __ orb(Address(r28, r29), 1);                      //    or byte ptr [r28 + r29], 1
    __ orb(Address(r29, r30), 1);                      //    or byte ptr [r29 + r30], 1
    __ orb(Address(r30, r31), 1);                      //    or byte ptr [r30 + r31], 1
    __ orb(Address(r31, rcx), 1);                      //    or byte ptr [r31 + rcx], 1
    __ orb(Address(rcx, rdx), 4);                      //    or byte ptr [rcx + rdx], 4
    __ orb(Address(rdx, rbx), 4);                      //    or byte ptr [rdx + rbx], 4
    __ orb(Address(rbx, r8), 4);                       //    or byte ptr [rbx + r8], 4
    __ orb(Address(r8, r9), 4);                        //    or byte ptr [r8 + r9], 4
    __ orb(Address(r9, r10), 4);                       //    or byte ptr [r9 + r10], 4
    __ orb(Address(r10, r11), 4);                      //    or byte ptr [r10 + r11], 4
    __ orb(Address(r11, r12), 4);                      //    or byte ptr [r11 + r12], 4
    __ orb(Address(r12, r13), 4);                      //    or byte ptr [r12 + r13], 4
    __ orb(Address(r13, r14), 4);                      //    or byte ptr [r13 + r14], 4
    __ orb(Address(r14, r15), 4);                      //    or byte ptr [r14 + r15], 4
    __ orb(Address(r15, r16), 4);                      //    or byte ptr [r15 + r16], 4
    __ orb(Address(r16, r17), 4);                      //    or byte ptr [r16 + r17], 4
    __ orb(Address(r17, r18), 4);                      //    or byte ptr [r17 + r18], 4
    __ orb(Address(r18, r19), 4);                      //    or byte ptr [r18 + r19], 4
    __ orb(Address(r19, r20), 4);                      //    or byte ptr [r19 + r20], 4
    __ orb(Address(r20, r21), 4);                      //    or byte ptr [r20 + r21], 4
    __ orb(Address(r21, r22), 4);                      //    or byte ptr [r21 + r22], 4
    __ orb(Address(r22, r23), 4);                      //    or byte ptr [r22 + r23], 4
    __ orb(Address(r23, r24), 4);                      //    or byte ptr [r23 + r24], 4
    __ orb(Address(r24, r25), 4);                      //    or byte ptr [r24 + r25], 4
    __ orb(Address(r25, r26), 4);                      //    or byte ptr [r25 + r26], 4
    __ orb(Address(r26, r27), 4);                      //    or byte ptr [r26 + r27], 4
    __ orb(Address(r27, r28), 4);                      //    or byte ptr [r27 + r28], 4
    __ orb(Address(r28, r29), 4);                      //    or byte ptr [r28 + r29], 4
    __ orb(Address(r29, r30), 4);                      //    or byte ptr [r29 + r30], 4
    __ orb(Address(r30, r31), 4);                      //    or byte ptr [r30 + r31], 4
    __ orb(Address(r31, rcx), 4);                      //    or byte ptr [r31 + rcx], 4
    __ orb(Address(rcx, rdx), 16);                     //    or byte ptr [rcx + rdx], 16
    __ orb(Address(rdx, rbx), 16);                     //    or byte ptr [rdx + rbx], 16
    __ orb(Address(rbx, r8), 16);                      //    or byte ptr [rbx + r8], 16
    __ orb(Address(r8, r9), 16);                       //    or byte ptr [r8 + r9], 16
    __ orb(Address(r9, r10), 16);                      //    or byte ptr [r9 + r10], 16
    __ orb(Address(r10, r11), 16);                     //    or byte ptr [r10 + r11], 16
    __ orb(Address(r11, r12), 16);                     //    or byte ptr [r11 + r12], 16
    __ orb(Address(r12, r13), 16);                     //    or byte ptr [r12 + r13], 16
    __ orb(Address(r13, r14), 16);                     //    or byte ptr [r13 + r14], 16
    __ orb(Address(r14, r15), 16);                     //    or byte ptr [r14 + r15], 16
    __ orb(Address(r15, r16), 16);                     //    or byte ptr [r15 + r16], 16
    __ orb(Address(r16, r17), 16);                     //    or byte ptr [r16 + r17], 16
    __ orb(Address(r17, r18), 16);                     //    or byte ptr [r17 + r18], 16
    __ orb(Address(r18, r19), 16);                     //    or byte ptr [r18 + r19], 16
    __ orb(Address(r19, r20), 16);                     //    or byte ptr [r19 + r20], 16
    __ orb(Address(r20, r21), 16);                     //    or byte ptr [r20 + r21], 16
    __ orb(Address(r21, r22), 16);                     //    or byte ptr [r21 + r22], 16
    __ orb(Address(r22, r23), 16);                     //    or byte ptr [r22 + r23], 16
    __ orb(Address(r23, r24), 16);                     //    or byte ptr [r23 + r24], 16
    __ orb(Address(r24, r25), 16);                     //    or byte ptr [r24 + r25], 16
    __ orb(Address(r25, r26), 16);                     //    or byte ptr [r25 + r26], 16
    __ orb(Address(r26, r27), 16);                     //    or byte ptr [r26 + r27], 16
    __ orb(Address(r27, r28), 16);                     //    or byte ptr [r27 + r28], 16
    __ orb(Address(r28, r29), 16);                     //    or byte ptr [r28 + r29], 16
    __ orb(Address(r29, r30), 16);                     //    or byte ptr [r29 + r30], 16
    __ orb(Address(r30, r31), 16);                     //    or byte ptr [r30 + r31], 16
    __ orb(Address(r31, rcx), 16);                     //    or byte ptr [r31 + rcx], 16
    __ orb(Address(rcx, rdx), 64);                     //    or byte ptr [rcx + rdx], 64
    __ orb(Address(rdx, rbx), 64);                     //    or byte ptr [rdx + rbx], 64
    __ orb(Address(rbx, r8), 64);                      //    or byte ptr [rbx + r8], 64
    __ orb(Address(r8, r9), 64);                       //    or byte ptr [r8 + r9], 64
    __ orb(Address(r9, r10), 64);                      //    or byte ptr [r9 + r10], 64
    __ orb(Address(r10, r11), 64);                     //    or byte ptr [r10 + r11], 64
    __ orb(Address(r11, r12), 64);                     //    or byte ptr [r11 + r12], 64
    __ orb(Address(r12, r13), 64);                     //    or byte ptr [r12 + r13], 64
    __ orb(Address(r13, r14), 64);                     //    or byte ptr [r13 + r14], 64
    __ orb(Address(r14, r15), 64);                     //    or byte ptr [r14 + r15], 64
    __ orb(Address(r15, r16), 64);                     //    or byte ptr [r15 + r16], 64
    __ orb(Address(r16, r17), 64);                     //    or byte ptr [r16 + r17], 64
    __ orb(Address(r17, r18), 64);                     //    or byte ptr [r17 + r18], 64
    __ orb(Address(r18, r19), 64);                     //    or byte ptr [r18 + r19], 64
    __ orb(Address(r19, r20), 64);                     //    or byte ptr [r19 + r20], 64
    __ orb(Address(r20, r21), 64);                     //    or byte ptr [r20 + r21], 64
    __ orb(Address(r21, r22), 64);                     //    or byte ptr [r21 + r22], 64
    __ orb(Address(r22, r23), 64);                     //    or byte ptr [r22 + r23], 64
    __ orb(Address(r23, r24), 64);                     //    or byte ptr [r23 + r24], 64
    __ orb(Address(r24, r25), 64);                     //    or byte ptr [r24 + r25], 64
    __ orb(Address(r25, r26), 64);                     //    or byte ptr [r25 + r26], 64
    __ orb(Address(r26, r27), 64);                     //    or byte ptr [r26 + r27], 64
    __ orb(Address(r27, r28), 64);                     //    or byte ptr [r27 + r28], 64
    __ orb(Address(r28, r29), 64);                     //    or byte ptr [r28 + r29], 64
    __ orb(Address(r29, r30), 64);                     //    or byte ptr [r29 + r30], 64
    __ orb(Address(r30, r31), 64);                     //    or byte ptr [r30 + r31], 64
    __ orb(Address(r31, rcx), 64);                     //    or byte ptr [r31 + rcx], 64
#endif // _LP64
    __ orl(Address(rcx, rdx), 1);                      //    or dword ptr [rcx + rdx], 1
    __ orl(Address(rdx, rbx), 1);                      //    or dword ptr [rdx + rbx], 1
#ifdef _LP64
    __ orl(Address(rbx, r8), 1);                       //    or dword ptr [rbx + r8], 1
    __ orl(Address(r8, r9), 1);                        //    or dword ptr [r8 + r9], 1
    __ orl(Address(r9, r10), 1);                       //    or dword ptr [r9 + r10], 1
    __ orl(Address(r10, r11), 1);                      //    or dword ptr [r10 + r11], 1
    __ orl(Address(r11, r12), 1);                      //    or dword ptr [r11 + r12], 1
    __ orl(Address(r12, r13), 1);                      //    or dword ptr [r12 + r13], 1
    __ orl(Address(r13, r14), 1);                      //    or dword ptr [r13 + r14], 1
    __ orl(Address(r14, r15), 1);                      //    or dword ptr [r14 + r15], 1
    __ orl(Address(r15, r16), 1);                      //    or dword ptr [r15 + r16], 1
    __ orl(Address(r16, r17), 1);                      //    or dword ptr [r16 + r17], 1
    __ orl(Address(r17, r18), 1);                      //    or dword ptr [r17 + r18], 1
    __ orl(Address(r18, r19), 1);                      //    or dword ptr [r18 + r19], 1
    __ orl(Address(r19, r20), 1);                      //    or dword ptr [r19 + r20], 1
    __ orl(Address(r20, r21), 1);                      //    or dword ptr [r20 + r21], 1
    __ orl(Address(r21, r22), 1);                      //    or dword ptr [r21 + r22], 1
    __ orl(Address(r22, r23), 1);                      //    or dword ptr [r22 + r23], 1
    __ orl(Address(r23, r24), 1);                      //    or dword ptr [r23 + r24], 1
    __ orl(Address(r24, r25), 1);                      //    or dword ptr [r24 + r25], 1
    __ orl(Address(r25, r26), 1);                      //    or dword ptr [r25 + r26], 1
    __ orl(Address(r26, r27), 1);                      //    or dword ptr [r26 + r27], 1
    __ orl(Address(r27, r28), 1);                      //    or dword ptr [r27 + r28], 1
    __ orl(Address(r28, r29), 1);                      //    or dword ptr [r28 + r29], 1
    __ orl(Address(r29, r30), 1);                      //    or dword ptr [r29 + r30], 1
    __ orl(Address(r30, r31), 1);                      //    or dword ptr [r30 + r31], 1
    __ orl(Address(r31, rcx), 1);                      //    or dword ptr [r31 + rcx], 1
    __ orl(Address(rcx, rdx), 16);                     //    or dword ptr [rcx + rdx], 16
    __ orl(Address(rdx, rbx), 16);                     //    or dword ptr [rdx + rbx], 16
    __ orl(Address(rbx, r8), 16);                      //    or dword ptr [rbx + r8], 16
    __ orl(Address(r8, r9), 16);                       //    or dword ptr [r8 + r9], 16
    __ orl(Address(r9, r10), 16);                      //    or dword ptr [r9 + r10], 16
    __ orl(Address(r10, r11), 16);                     //    or dword ptr [r10 + r11], 16
    __ orl(Address(r11, r12), 16);                     //    or dword ptr [r11 + r12], 16
    __ orl(Address(r12, r13), 16);                     //    or dword ptr [r12 + r13], 16
    __ orl(Address(r13, r14), 16);                     //    or dword ptr [r13 + r14], 16
    __ orl(Address(r14, r15), 16);                     //    or dword ptr [r14 + r15], 16
    __ orl(Address(r15, r16), 16);                     //    or dword ptr [r15 + r16], 16
    __ orl(Address(r16, r17), 16);                     //    or dword ptr [r16 + r17], 16
    __ orl(Address(r17, r18), 16);                     //    or dword ptr [r17 + r18], 16
    __ orl(Address(r18, r19), 16);                     //    or dword ptr [r18 + r19], 16
    __ orl(Address(r19, r20), 16);                     //    or dword ptr [r19 + r20], 16
    __ orl(Address(r20, r21), 16);                     //    or dword ptr [r20 + r21], 16
    __ orl(Address(r21, r22), 16);                     //    or dword ptr [r21 + r22], 16
    __ orl(Address(r22, r23), 16);                     //    or dword ptr [r22 + r23], 16
    __ orl(Address(r23, r24), 16);                     //    or dword ptr [r23 + r24], 16
    __ orl(Address(r24, r25), 16);                     //    or dword ptr [r24 + r25], 16
    __ orl(Address(r25, r26), 16);                     //    or dword ptr [r25 + r26], 16
    __ orl(Address(r26, r27), 16);                     //    or dword ptr [r26 + r27], 16
    __ orl(Address(r27, r28), 16);                     //    or dword ptr [r27 + r28], 16
    __ orl(Address(r28, r29), 16);                     //    or dword ptr [r28 + r29], 16
    __ orl(Address(r29, r30), 16);                     //    or dword ptr [r29 + r30], 16
    __ orl(Address(r30, r31), 16);                     //    or dword ptr [r30 + r31], 16
    __ orl(Address(r31, rcx), 16);                     //    or dword ptr [r31 + rcx], 16
    __ orl(Address(rcx, rdx), 256);                    //    or dword ptr [rcx + rdx], 256
    __ orl(Address(rdx, rbx), 256);                    //    or dword ptr [rdx + rbx], 256
    __ orl(Address(rbx, r8), 256);                     //    or dword ptr [rbx + r8], 256
    __ orl(Address(r8, r9), 256);                      //    or dword ptr [r8 + r9], 256
    __ orl(Address(r9, r10), 256);                     //    or dword ptr [r9 + r10], 256
    __ orl(Address(r10, r11), 256);                    //    or dword ptr [r10 + r11], 256
    __ orl(Address(r11, r12), 256);                    //    or dword ptr [r11 + r12], 256
    __ orl(Address(r12, r13), 256);                    //    or dword ptr [r12 + r13], 256
    __ orl(Address(r13, r14), 256);                    //    or dword ptr [r13 + r14], 256
    __ orl(Address(r14, r15), 256);                    //    or dword ptr [r14 + r15], 256
    __ orl(Address(r15, r16), 256);                    //    or dword ptr [r15 + r16], 256
    __ orl(Address(r16, r17), 256);                    //    or dword ptr [r16 + r17], 256
    __ orl(Address(r17, r18), 256);                    //    or dword ptr [r17 + r18], 256
    __ orl(Address(r18, r19), 256);                    //    or dword ptr [r18 + r19], 256
    __ orl(Address(r19, r20), 256);                    //    or dword ptr [r19 + r20], 256
    __ orl(Address(r20, r21), 256);                    //    or dword ptr [r20 + r21], 256
    __ orl(Address(r21, r22), 256);                    //    or dword ptr [r21 + r22], 256
    __ orl(Address(r22, r23), 256);                    //    or dword ptr [r22 + r23], 256
    __ orl(Address(r23, r24), 256);                    //    or dword ptr [r23 + r24], 256
    __ orl(Address(r24, r25), 256);                    //    or dword ptr [r24 + r25], 256
    __ orl(Address(r25, r26), 256);                    //    or dword ptr [r25 + r26], 256
    __ orl(Address(r26, r27), 256);                    //    or dword ptr [r26 + r27], 256
    __ orl(Address(r27, r28), 256);                    //    or dword ptr [r27 + r28], 256
    __ orl(Address(r28, r29), 256);                    //    or dword ptr [r28 + r29], 256
    __ orl(Address(r29, r30), 256);                    //    or dword ptr [r29 + r30], 256
    __ orl(Address(r30, r31), 256);                    //    or dword ptr [r30 + r31], 256
    __ orl(Address(r31, rcx), 256);                    //    or dword ptr [r31 + rcx], 256
    __ orl(Address(rcx, rdx), 4096);                   //    or dword ptr [rcx + rdx], 4096
    __ orl(Address(rdx, rbx), 4096);                   //    or dword ptr [rdx + rbx], 4096
    __ orl(Address(rbx, r8), 4096);                    //    or dword ptr [rbx + r8], 4096
    __ orl(Address(r8, r9), 4096);                     //    or dword ptr [r8 + r9], 4096
    __ orl(Address(r9, r10), 4096);                    //    or dword ptr [r9 + r10], 4096
    __ orl(Address(r10, r11), 4096);                   //    or dword ptr [r10 + r11], 4096
    __ orl(Address(r11, r12), 4096);                   //    or dword ptr [r11 + r12], 4096
    __ orl(Address(r12, r13), 4096);                   //    or dword ptr [r12 + r13], 4096
    __ orl(Address(r13, r14), 4096);                   //    or dword ptr [r13 + r14], 4096
    __ orl(Address(r14, r15), 4096);                   //    or dword ptr [r14 + r15], 4096
    __ orl(Address(r15, r16), 4096);                   //    or dword ptr [r15 + r16], 4096
    __ orl(Address(r16, r17), 4096);                   //    or dword ptr [r16 + r17], 4096
    __ orl(Address(r17, r18), 4096);                   //    or dword ptr [r17 + r18], 4096
    __ orl(Address(r18, r19), 4096);                   //    or dword ptr [r18 + r19], 4096
    __ orl(Address(r19, r20), 4096);                   //    or dword ptr [r19 + r20], 4096
    __ orl(Address(r20, r21), 4096);                   //    or dword ptr [r20 + r21], 4096
    __ orl(Address(r21, r22), 4096);                   //    or dword ptr [r21 + r22], 4096
    __ orl(Address(r22, r23), 4096);                   //    or dword ptr [r22 + r23], 4096
    __ orl(Address(r23, r24), 4096);                   //    or dword ptr [r23 + r24], 4096
    __ orl(Address(r24, r25), 4096);                   //    or dword ptr [r24 + r25], 4096
    __ orl(Address(r25, r26), 4096);                   //    or dword ptr [r25 + r26], 4096
    __ orl(Address(r26, r27), 4096);                   //    or dword ptr [r26 + r27], 4096
    __ orl(Address(r27, r28), 4096);                   //    or dword ptr [r27 + r28], 4096
    __ orl(Address(r28, r29), 4096);                   //    or dword ptr [r28 + r29], 4096
    __ orl(Address(r29, r30), 4096);                   //    or dword ptr [r29 + r30], 4096
    __ orl(Address(r30, r31), 4096);                   //    or dword ptr [r30 + r31], 4096
    __ orl(Address(r31, rcx), 4096);                   //    or dword ptr [r31 + rcx], 4096
    __ orl(Address(rcx, rdx), 65536);                  //    or dword ptr [rcx + rdx], 65536
    __ orl(Address(rdx, rbx), 65536);                  //    or dword ptr [rdx + rbx], 65536
    __ orl(Address(rbx, r8), 65536);                   //    or dword ptr [rbx + r8], 65536
    __ orl(Address(r8, r9), 65536);                    //    or dword ptr [r8 + r9], 65536
    __ orl(Address(r9, r10), 65536);                   //    or dword ptr [r9 + r10], 65536
    __ orl(Address(r10, r11), 65536);                  //    or dword ptr [r10 + r11], 65536
    __ orl(Address(r11, r12), 65536);                  //    or dword ptr [r11 + r12], 65536
    __ orl(Address(r12, r13), 65536);                  //    or dword ptr [r12 + r13], 65536
    __ orl(Address(r13, r14), 65536);                  //    or dword ptr [r13 + r14], 65536
    __ orl(Address(r14, r15), 65536);                  //    or dword ptr [r14 + r15], 65536
    __ orl(Address(r15, r16), 65536);                  //    or dword ptr [r15 + r16], 65536
    __ orl(Address(r16, r17), 65536);                  //    or dword ptr [r16 + r17], 65536
    __ orl(Address(r17, r18), 65536);                  //    or dword ptr [r17 + r18], 65536
    __ orl(Address(r18, r19), 65536);                  //    or dword ptr [r18 + r19], 65536
    __ orl(Address(r19, r20), 65536);                  //    or dword ptr [r19 + r20], 65536
    __ orl(Address(r20, r21), 65536);                  //    or dword ptr [r20 + r21], 65536
    __ orl(Address(r21, r22), 65536);                  //    or dword ptr [r21 + r22], 65536
    __ orl(Address(r22, r23), 65536);                  //    or dword ptr [r22 + r23], 65536
    __ orl(Address(r23, r24), 65536);                  //    or dword ptr [r23 + r24], 65536
    __ orl(Address(r24, r25), 65536);                  //    or dword ptr [r24 + r25], 65536
    __ orl(Address(r25, r26), 65536);                  //    or dword ptr [r25 + r26], 65536
    __ orl(Address(r26, r27), 65536);                  //    or dword ptr [r26 + r27], 65536
    __ orl(Address(r27, r28), 65536);                  //    or dword ptr [r27 + r28], 65536
    __ orl(Address(r28, r29), 65536);                  //    or dword ptr [r28 + r29], 65536
    __ orl(Address(r29, r30), 65536);                  //    or dword ptr [r29 + r30], 65536
    __ orl(Address(r30, r31), 65536);                  //    or dword ptr [r30 + r31], 65536
    __ orl(Address(r31, rcx), 65536);                  //    or dword ptr [r31 + rcx], 65536
    __ orl(Address(rcx, rdx), 1048576);                //    or dword ptr [rcx + rdx], 1048576
    __ orl(Address(rdx, rbx), 1048576);                //    or dword ptr [rdx + rbx], 1048576
    __ orl(Address(rbx, r8), 1048576);                 //    or dword ptr [rbx + r8], 1048576
    __ orl(Address(r8, r9), 1048576);                  //    or dword ptr [r8 + r9], 1048576
    __ orl(Address(r9, r10), 1048576);                 //    or dword ptr [r9 + r10], 1048576
    __ orl(Address(r10, r11), 1048576);                //    or dword ptr [r10 + r11], 1048576
    __ orl(Address(r11, r12), 1048576);                //    or dword ptr [r11 + r12], 1048576
    __ orl(Address(r12, r13), 1048576);                //    or dword ptr [r12 + r13], 1048576
    __ orl(Address(r13, r14), 1048576);                //    or dword ptr [r13 + r14], 1048576
    __ orl(Address(r14, r15), 1048576);                //    or dword ptr [r14 + r15], 1048576
    __ orl(Address(r15, r16), 1048576);                //    or dword ptr [r15 + r16], 1048576
    __ orl(Address(r16, r17), 1048576);                //    or dword ptr [r16 + r17], 1048576
    __ orl(Address(r17, r18), 1048576);                //    or dword ptr [r17 + r18], 1048576
    __ orl(Address(r18, r19), 1048576);                //    or dword ptr [r18 + r19], 1048576
    __ orl(Address(r19, r20), 1048576);                //    or dword ptr [r19 + r20], 1048576
    __ orl(Address(r20, r21), 1048576);                //    or dword ptr [r20 + r21], 1048576
    __ orl(Address(r21, r22), 1048576);                //    or dword ptr [r21 + r22], 1048576
    __ orl(Address(r22, r23), 1048576);                //    or dword ptr [r22 + r23], 1048576
    __ orl(Address(r23, r24), 1048576);                //    or dword ptr [r23 + r24], 1048576
    __ orl(Address(r24, r25), 1048576);                //    or dword ptr [r24 + r25], 1048576
    __ orl(Address(r25, r26), 1048576);                //    or dword ptr [r25 + r26], 1048576
    __ orl(Address(r26, r27), 1048576);                //    or dword ptr [r26 + r27], 1048576
    __ orl(Address(r27, r28), 1048576);                //    or dword ptr [r27 + r28], 1048576
    __ orl(Address(r28, r29), 1048576);                //    or dword ptr [r28 + r29], 1048576
    __ orl(Address(r29, r30), 1048576);                //    or dword ptr [r29 + r30], 1048576
    __ orl(Address(r30, r31), 1048576);                //    or dword ptr [r30 + r31], 1048576
    __ orl(Address(r31, rcx), 1048576);                //    or dword ptr [r31 + rcx], 1048576
    __ orl(Address(rcx, rdx), 16777216);               //    or dword ptr [rcx + rdx], 16777216
    __ orl(Address(rdx, rbx), 16777216);               //    or dword ptr [rdx + rbx], 16777216
    __ orl(Address(rbx, r8), 16777216);                //    or dword ptr [rbx + r8], 16777216
    __ orl(Address(r8, r9), 16777216);                 //    or dword ptr [r8 + r9], 16777216
    __ orl(Address(r9, r10), 16777216);                //    or dword ptr [r9 + r10], 16777216
    __ orl(Address(r10, r11), 16777216);               //    or dword ptr [r10 + r11], 16777216
    __ orl(Address(r11, r12), 16777216);               //    or dword ptr [r11 + r12], 16777216
    __ orl(Address(r12, r13), 16777216);               //    or dword ptr [r12 + r13], 16777216
    __ orl(Address(r13, r14), 16777216);               //    or dword ptr [r13 + r14], 16777216
    __ orl(Address(r14, r15), 16777216);               //    or dword ptr [r14 + r15], 16777216
    __ orl(Address(r15, r16), 16777216);               //    or dword ptr [r15 + r16], 16777216
    __ orl(Address(r16, r17), 16777216);               //    or dword ptr [r16 + r17], 16777216
    __ orl(Address(r17, r18), 16777216);               //    or dword ptr [r17 + r18], 16777216
    __ orl(Address(r18, r19), 16777216);               //    or dword ptr [r18 + r19], 16777216
    __ orl(Address(r19, r20), 16777216);               //    or dword ptr [r19 + r20], 16777216
    __ orl(Address(r20, r21), 16777216);               //    or dword ptr [r20 + r21], 16777216
    __ orl(Address(r21, r22), 16777216);               //    or dword ptr [r21 + r22], 16777216
    __ orl(Address(r22, r23), 16777216);               //    or dword ptr [r22 + r23], 16777216
    __ orl(Address(r23, r24), 16777216);               //    or dword ptr [r23 + r24], 16777216
    __ orl(Address(r24, r25), 16777216);               //    or dword ptr [r24 + r25], 16777216
    __ orl(Address(r25, r26), 16777216);               //    or dword ptr [r25 + r26], 16777216
    __ orl(Address(r26, r27), 16777216);               //    or dword ptr [r26 + r27], 16777216
    __ orl(Address(r27, r28), 16777216);               //    or dword ptr [r27 + r28], 16777216
    __ orl(Address(r28, r29), 16777216);               //    or dword ptr [r28 + r29], 16777216
    __ orl(Address(r29, r30), 16777216);               //    or dword ptr [r29 + r30], 16777216
    __ orl(Address(r30, r31), 16777216);               //    or dword ptr [r30 + r31], 16777216
    __ orl(Address(r31, rcx), 16777216);               //    or dword ptr [r31 + rcx], 16777216
    __ orl(Address(rcx, rdx), 268435456);              //    or dword ptr [rcx + rdx], 268435456
    __ orl(Address(rdx, rbx), 268435456);              //    or dword ptr [rdx + rbx], 268435456
    __ orl(Address(rbx, r8), 268435456);               //    or dword ptr [rbx + r8], 268435456
    __ orl(Address(r8, r9), 268435456);                //    or dword ptr [r8 + r9], 268435456
    __ orl(Address(r9, r10), 268435456);               //    or dword ptr [r9 + r10], 268435456
    __ orl(Address(r10, r11), 268435456);              //    or dword ptr [r10 + r11], 268435456
    __ orl(Address(r11, r12), 268435456);              //    or dword ptr [r11 + r12], 268435456
    __ orl(Address(r12, r13), 268435456);              //    or dword ptr [r12 + r13], 268435456
    __ orl(Address(r13, r14), 268435456);              //    or dword ptr [r13 + r14], 268435456
    __ orl(Address(r14, r15), 268435456);              //    or dword ptr [r14 + r15], 268435456
    __ orl(Address(r15, r16), 268435456);              //    or dword ptr [r15 + r16], 268435456
    __ orl(Address(r16, r17), 268435456);              //    or dword ptr [r16 + r17], 268435456
    __ orl(Address(r17, r18), 268435456);              //    or dword ptr [r17 + r18], 268435456
    __ orl(Address(r18, r19), 268435456);              //    or dword ptr [r18 + r19], 268435456
    __ orl(Address(r19, r20), 268435456);              //    or dword ptr [r19 + r20], 268435456
    __ orl(Address(r20, r21), 268435456);              //    or dword ptr [r20 + r21], 268435456
    __ orl(Address(r21, r22), 268435456);              //    or dword ptr [r21 + r22], 268435456
    __ orl(Address(r22, r23), 268435456);              //    or dword ptr [r22 + r23], 268435456
    __ orl(Address(r23, r24), 268435456);              //    or dword ptr [r23 + r24], 268435456
    __ orl(Address(r24, r25), 268435456);              //    or dword ptr [r24 + r25], 268435456
    __ orl(Address(r25, r26), 268435456);              //    or dword ptr [r25 + r26], 268435456
    __ orl(Address(r26, r27), 268435456);              //    or dword ptr [r26 + r27], 268435456
    __ orl(Address(r27, r28), 268435456);              //    or dword ptr [r27 + r28], 268435456
    __ orl(Address(r28, r29), 268435456);              //    or dword ptr [r28 + r29], 268435456
    __ orl(Address(r29, r30), 268435456);              //    or dword ptr [r29 + r30], 268435456
    __ orl(Address(r30, r31), 268435456);              //    or dword ptr [r30 + r31], 268435456
    __ orl(Address(r31, rcx), 268435456);              //    or dword ptr [r31 + rcx], 268435456
#endif // _LP64
    __ addl(rcx, Address(rdx, rbx));                   //    add ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ addl(rdx, Address(rbx, r8));                    //    add edx, dword ptr [rbx + r8]
    __ addl(rbx, Address(r8, r9));                     //    add ebx, dword ptr [r8 + r9]
    __ addl(r8, Address(r9, r10));                     //    add r8d, dword ptr [r9 + r10]
    __ addl(r9, Address(r10, r11));                    //    add r9d, dword ptr [r10 + r11]
    __ addl(r10, Address(r11, r12));                   //    add r10d, dword ptr [r11 + r12]
    __ addl(r11, Address(r12, r13));                   //    add r11d, dword ptr [r12 + r13]
    __ addl(r12, Address(r13, r14));                   //    add r12d, dword ptr [r13 + r14]
    __ addl(r13, Address(r14, r15));                   //    add r13d, dword ptr [r14 + r15]
    __ addl(r14, Address(r15, r16));                   //    add r14d, dword ptr [r15 + r16]
    __ addl(r15, Address(r16, r17));                   //    add r15d, dword ptr [r16 + r17]
    __ addl(r16, Address(r17, r18));                   //    add r16d, dword ptr [r17 + r18]
    __ addl(r17, Address(r18, r19));                   //    add r17d, dword ptr [r18 + r19]
    __ addl(r18, Address(r19, r20));                   //    add r18d, dword ptr [r19 + r20]
    __ addl(r19, Address(r20, r21));                   //    add r19d, dword ptr [r20 + r21]
    __ addl(r20, Address(r21, r22));                   //    add r20d, dword ptr [r21 + r22]
    __ addl(r21, Address(r22, r23));                   //    add r21d, dword ptr [r22 + r23]
    __ addl(r22, Address(r23, r24));                   //    add r22d, dword ptr [r23 + r24]
    __ addl(r23, Address(r24, r25));                   //    add r23d, dword ptr [r24 + r25]
    __ addl(r24, Address(r25, r26));                   //    add r24d, dword ptr [r25 + r26]
    __ addl(r25, Address(r26, r27));                   //    add r25d, dword ptr [r26 + r27]
    __ addl(r26, Address(r27, r28));                   //    add r26d, dword ptr [r27 + r28]
    __ addl(r27, Address(r28, r29));                   //    add r27d, dword ptr [r28 + r29]
    __ addl(r28, Address(r29, r30));                   //    add r28d, dword ptr [r29 + r30]
    __ addl(r29, Address(r30, r31));                   //    add r29d, dword ptr [r30 + r31]
    __ addl(r30, Address(r31, rcx));                   //    add r30d, dword ptr [r31 + rcx]
    __ addl(r31, Address(rcx, rdx));                   //    add r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ andl(rcx, Address(rdx, rbx));                   //    and ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ andl(rdx, Address(rbx, r8));                    //    and edx, dword ptr [rbx + r8]
    __ andl(rbx, Address(r8, r9));                     //    and ebx, dword ptr [r8 + r9]
    __ andl(r8, Address(r9, r10));                     //    and r8d, dword ptr [r9 + r10]
    __ andl(r9, Address(r10, r11));                    //    and r9d, dword ptr [r10 + r11]
    __ andl(r10, Address(r11, r12));                   //    and r10d, dword ptr [r11 + r12]
    __ andl(r11, Address(r12, r13));                   //    and r11d, dword ptr [r12 + r13]
    __ andl(r12, Address(r13, r14));                   //    and r12d, dword ptr [r13 + r14]
    __ andl(r13, Address(r14, r15));                   //    and r13d, dword ptr [r14 + r15]
    __ andl(r14, Address(r15, r16));                   //    and r14d, dword ptr [r15 + r16]
    __ andl(r15, Address(r16, r17));                   //    and r15d, dword ptr [r16 + r17]
    __ andl(r16, Address(r17, r18));                   //    and r16d, dword ptr [r17 + r18]
    __ andl(r17, Address(r18, r19));                   //    and r17d, dword ptr [r18 + r19]
    __ andl(r18, Address(r19, r20));                   //    and r18d, dword ptr [r19 + r20]
    __ andl(r19, Address(r20, r21));                   //    and r19d, dword ptr [r20 + r21]
    __ andl(r20, Address(r21, r22));                   //    and r20d, dword ptr [r21 + r22]
    __ andl(r21, Address(r22, r23));                   //    and r21d, dword ptr [r22 + r23]
    __ andl(r22, Address(r23, r24));                   //    and r22d, dword ptr [r23 + r24]
    __ andl(r23, Address(r24, r25));                   //    and r23d, dword ptr [r24 + r25]
    __ andl(r24, Address(r25, r26));                   //    and r24d, dword ptr [r25 + r26]
    __ andl(r25, Address(r26, r27));                   //    and r25d, dword ptr [r26 + r27]
    __ andl(r26, Address(r27, r28));                   //    and r26d, dword ptr [r27 + r28]
    __ andl(r27, Address(r28, r29));                   //    and r27d, dword ptr [r28 + r29]
    __ andl(r28, Address(r29, r30));                   //    and r28d, dword ptr [r29 + r30]
    __ andl(r29, Address(r30, r31));                   //    and r29d, dword ptr [r30 + r31]
    __ andl(r30, Address(r31, rcx));                   //    and r30d, dword ptr [r31 + rcx]
    __ andl(r31, Address(rcx, rdx));                   //    and r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ lzcntl(rcx, Address(rdx, rbx));                 //    lzcnt ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ lzcntl(rdx, Address(rbx, r8));                  //    lzcnt edx, dword ptr [rbx + r8]
    __ lzcntl(rbx, Address(r8, r9));                   //    lzcnt ebx, dword ptr [r8 + r9]
    __ lzcntl(r8, Address(r9, r10));                   //    lzcnt r8d, dword ptr [r9 + r10]
    __ lzcntl(r9, Address(r10, r11));                  //    lzcnt r9d, dword ptr [r10 + r11]
    __ lzcntl(r10, Address(r11, r12));                 //    lzcnt r10d, dword ptr [r11 + r12]
    __ lzcntl(r11, Address(r12, r13));                 //    lzcnt r11d, dword ptr [r12 + r13]
    __ lzcntl(r12, Address(r13, r14));                 //    lzcnt r12d, dword ptr [r13 + r14]
    __ lzcntl(r13, Address(r14, r15));                 //    lzcnt r13d, dword ptr [r14 + r15]
    __ lzcntl(r14, Address(r15, r16));                 //    lzcnt r14d, dword ptr [r15 + r16]
    __ lzcntl(r15, Address(r16, r17));                 //    lzcnt r15d, dword ptr [r16 + r17]
    __ lzcntl(r16, Address(r17, r18));                 //    lzcnt r16d, dword ptr [r17 + r18]
    __ lzcntl(r17, Address(r18, r19));                 //    lzcnt r17d, dword ptr [r18 + r19]
    __ lzcntl(r18, Address(r19, r20));                 //    lzcnt r18d, dword ptr [r19 + r20]
    __ lzcntl(r19, Address(r20, r21));                 //    lzcnt r19d, dword ptr [r20 + r21]
    __ lzcntl(r20, Address(r21, r22));                 //    lzcnt r20d, dword ptr [r21 + r22]
    __ lzcntl(r21, Address(r22, r23));                 //    lzcnt r21d, dword ptr [r22 + r23]
    __ lzcntl(r22, Address(r23, r24));                 //    lzcnt r22d, dword ptr [r23 + r24]
    __ lzcntl(r23, Address(r24, r25));                 //    lzcnt r23d, dword ptr [r24 + r25]
    __ lzcntl(r24, Address(r25, r26));                 //    lzcnt r24d, dword ptr [r25 + r26]
    __ lzcntl(r25, Address(r26, r27));                 //    lzcnt r25d, dword ptr [r26 + r27]
    __ lzcntl(r26, Address(r27, r28));                 //    lzcnt r26d, dword ptr [r27 + r28]
    __ lzcntl(r27, Address(r28, r29));                 //    lzcnt r27d, dword ptr [r28 + r29]
    __ lzcntl(r28, Address(r29, r30));                 //    lzcnt r28d, dword ptr [r29 + r30]
    __ lzcntl(r29, Address(r30, r31));                 //    lzcnt r29d, dword ptr [r30 + r31]
    __ lzcntl(r30, Address(r31, rcx));                 //    lzcnt r30d, dword ptr [r31 + rcx]
    __ lzcntl(r31, Address(rcx, rdx));                 //    lzcnt r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ orl(rcx, Address(rdx, rbx));                    //    or ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ orl(rdx, Address(rbx, r8));                     //    or edx, dword ptr [rbx + r8]
    __ orl(rbx, Address(r8, r9));                      //    or ebx, dword ptr [r8 + r9]
    __ orl(r8, Address(r9, r10));                      //    or r8d, dword ptr [r9 + r10]
    __ orl(r9, Address(r10, r11));                     //    or r9d, dword ptr [r10 + r11]
    __ orl(r10, Address(r11, r12));                    //    or r10d, dword ptr [r11 + r12]
    __ orl(r11, Address(r12, r13));                    //    or r11d, dword ptr [r12 + r13]
    __ orl(r12, Address(r13, r14));                    //    or r12d, dword ptr [r13 + r14]
    __ orl(r13, Address(r14, r15));                    //    or r13d, dword ptr [r14 + r15]
    __ orl(r14, Address(r15, r16));                    //    or r14d, dword ptr [r15 + r16]
    __ orl(r15, Address(r16, r17));                    //    or r15d, dword ptr [r16 + r17]
    __ orl(r16, Address(r17, r18));                    //    or r16d, dword ptr [r17 + r18]
    __ orl(r17, Address(r18, r19));                    //    or r17d, dword ptr [r18 + r19]
    __ orl(r18, Address(r19, r20));                    //    or r18d, dword ptr [r19 + r20]
    __ orl(r19, Address(r20, r21));                    //    or r19d, dword ptr [r20 + r21]
    __ orl(r20, Address(r21, r22));                    //    or r20d, dword ptr [r21 + r22]
    __ orl(r21, Address(r22, r23));                    //    or r21d, dword ptr [r22 + r23]
    __ orl(r22, Address(r23, r24));                    //    or r22d, dword ptr [r23 + r24]
    __ orl(r23, Address(r24, r25));                    //    or r23d, dword ptr [r24 + r25]
    __ orl(r24, Address(r25, r26));                    //    or r24d, dword ptr [r25 + r26]
    __ orl(r25, Address(r26, r27));                    //    or r25d, dword ptr [r26 + r27]
    __ orl(r26, Address(r27, r28));                    //    or r26d, dword ptr [r27 + r28]
    __ orl(r27, Address(r28, r29));                    //    or r27d, dword ptr [r28 + r29]
    __ orl(r28, Address(r29, r30));                    //    or r28d, dword ptr [r29 + r30]
    __ orl(r29, Address(r30, r31));                    //    or r29d, dword ptr [r30 + r31]
    __ orl(r30, Address(r31, rcx));                    //    or r30d, dword ptr [r31 + rcx]
    __ orl(r31, Address(rcx, rdx));                    //    or r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ adcl(rcx, Address(rdx, rbx));                   //    adc ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ adcl(rdx, Address(rbx, r8));                    //    adc edx, dword ptr [rbx + r8]
    __ adcl(rbx, Address(r8, r9));                     //    adc ebx, dword ptr [r8 + r9]
    __ adcl(r8, Address(r9, r10));                     //    adc r8d, dword ptr [r9 + r10]
    __ adcl(r9, Address(r10, r11));                    //    adc r9d, dword ptr [r10 + r11]
    __ adcl(r10, Address(r11, r12));                   //    adc r10d, dword ptr [r11 + r12]
    __ adcl(r11, Address(r12, r13));                   //    adc r11d, dword ptr [r12 + r13]
    __ adcl(r12, Address(r13, r14));                   //    adc r12d, dword ptr [r13 + r14]
    __ adcl(r13, Address(r14, r15));                   //    adc r13d, dword ptr [r14 + r15]
    __ adcl(r14, Address(r15, r16));                   //    adc r14d, dword ptr [r15 + r16]
    __ adcl(r15, Address(r16, r17));                   //    adc r15d, dword ptr [r16 + r17]
    __ adcl(r16, Address(r17, r18));                   //    adc r16d, dword ptr [r17 + r18]
    __ adcl(r17, Address(r18, r19));                   //    adc r17d, dword ptr [r18 + r19]
    __ adcl(r18, Address(r19, r20));                   //    adc r18d, dword ptr [r19 + r20]
    __ adcl(r19, Address(r20, r21));                   //    adc r19d, dword ptr [r20 + r21]
    __ adcl(r20, Address(r21, r22));                   //    adc r20d, dword ptr [r21 + r22]
    __ adcl(r21, Address(r22, r23));                   //    adc r21d, dword ptr [r22 + r23]
    __ adcl(r22, Address(r23, r24));                   //    adc r22d, dword ptr [r23 + r24]
    __ adcl(r23, Address(r24, r25));                   //    adc r23d, dword ptr [r24 + r25]
    __ adcl(r24, Address(r25, r26));                   //    adc r24d, dword ptr [r25 + r26]
    __ adcl(r25, Address(r26, r27));                   //    adc r25d, dword ptr [r26 + r27]
    __ adcl(r26, Address(r27, r28));                   //    adc r26d, dword ptr [r27 + r28]
    __ adcl(r27, Address(r28, r29));                   //    adc r27d, dword ptr [r28 + r29]
    __ adcl(r28, Address(r29, r30));                   //    adc r28d, dword ptr [r29 + r30]
    __ adcl(r29, Address(r30, r31));                   //    adc r29d, dword ptr [r30 + r31]
    __ adcl(r30, Address(r31, rcx));                   //    adc r30d, dword ptr [r31 + rcx]
    __ adcl(r31, Address(rcx, rdx));                   //    adc r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ imull(rcx, Address(rdx, rbx));                  //    imul ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ imull(rdx, Address(rbx, r8));                   //    imul edx, dword ptr [rbx + r8]
    __ imull(rbx, Address(r8, r9));                    //    imul ebx, dword ptr [r8 + r9]
    __ imull(r8, Address(r9, r10));                    //    imul r8d, dword ptr [r9 + r10]
    __ imull(r9, Address(r10, r11));                   //    imul r9d, dword ptr [r10 + r11]
    __ imull(r10, Address(r11, r12));                  //    imul r10d, dword ptr [r11 + r12]
    __ imull(r11, Address(r12, r13));                  //    imul r11d, dword ptr [r12 + r13]
    __ imull(r12, Address(r13, r14));                  //    imul r12d, dword ptr [r13 + r14]
    __ imull(r13, Address(r14, r15));                  //    imul r13d, dword ptr [r14 + r15]
    __ imull(r14, Address(r15, r16));                  //    imul r14d, dword ptr [r15 + r16]
    __ imull(r15, Address(r16, r17));                  //    imul r15d, dword ptr [r16 + r17]
    __ imull(r16, Address(r17, r18));                  //    imul r16d, dword ptr [r17 + r18]
    __ imull(r17, Address(r18, r19));                  //    imul r17d, dword ptr [r18 + r19]
    __ imull(r18, Address(r19, r20));                  //    imul r18d, dword ptr [r19 + r20]
    __ imull(r19, Address(r20, r21));                  //    imul r19d, dword ptr [r20 + r21]
    __ imull(r20, Address(r21, r22));                  //    imul r20d, dword ptr [r21 + r22]
    __ imull(r21, Address(r22, r23));                  //    imul r21d, dword ptr [r22 + r23]
    __ imull(r22, Address(r23, r24));                  //    imul r22d, dword ptr [r23 + r24]
    __ imull(r23, Address(r24, r25));                  //    imul r23d, dword ptr [r24 + r25]
    __ imull(r24, Address(r25, r26));                  //    imul r24d, dword ptr [r25 + r26]
    __ imull(r25, Address(r26, r27));                  //    imul r25d, dword ptr [r26 + r27]
    __ imull(r26, Address(r27, r28));                  //    imul r26d, dword ptr [r27 + r28]
    __ imull(r27, Address(r28, r29));                  //    imul r27d, dword ptr [r28 + r29]
    __ imull(r28, Address(r29, r30));                  //    imul r28d, dword ptr [r29 + r30]
    __ imull(r29, Address(r30, r31));                  //    imul r29d, dword ptr [r30 + r31]
    __ imull(r30, Address(r31, rcx));                  //    imul r30d, dword ptr [r31 + rcx]
    __ imull(r31, Address(rcx, rdx));                  //    imul r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ popcntl(rcx, Address(rdx, rbx));                //    popcnt ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ popcntl(rdx, Address(rbx, r8));                 //    popcnt edx, dword ptr [rbx + r8]
    __ popcntl(rbx, Address(r8, r9));                  //    popcnt ebx, dword ptr [r8 + r9]
    __ popcntl(r8, Address(r9, r10));                  //    popcnt r8d, dword ptr [r9 + r10]
    __ popcntl(r9, Address(r10, r11));                 //    popcnt r9d, dword ptr [r10 + r11]
    __ popcntl(r10, Address(r11, r12));                //    popcnt r10d, dword ptr [r11 + r12]
    __ popcntl(r11, Address(r12, r13));                //    popcnt r11d, dword ptr [r12 + r13]
    __ popcntl(r12, Address(r13, r14));                //    popcnt r12d, dword ptr [r13 + r14]
    __ popcntl(r13, Address(r14, r15));                //    popcnt r13d, dword ptr [r14 + r15]
    __ popcntl(r14, Address(r15, r16));                //    popcnt r14d, dword ptr [r15 + r16]
    __ popcntl(r15, Address(r16, r17));                //    popcnt r15d, dword ptr [r16 + r17]
    __ popcntl(r16, Address(r17, r18));                //    popcnt r16d, dword ptr [r17 + r18]
    __ popcntl(r17, Address(r18, r19));                //    popcnt r17d, dword ptr [r18 + r19]
    __ popcntl(r18, Address(r19, r20));                //    popcnt r18d, dword ptr [r19 + r20]
    __ popcntl(r19, Address(r20, r21));                //    popcnt r19d, dword ptr [r20 + r21]
    __ popcntl(r20, Address(r21, r22));                //    popcnt r20d, dword ptr [r21 + r22]
    __ popcntl(r21, Address(r22, r23));                //    popcnt r21d, dword ptr [r22 + r23]
    __ popcntl(r22, Address(r23, r24));                //    popcnt r22d, dword ptr [r23 + r24]
    __ popcntl(r23, Address(r24, r25));                //    popcnt r23d, dword ptr [r24 + r25]
    __ popcntl(r24, Address(r25, r26));                //    popcnt r24d, dword ptr [r25 + r26]
    __ popcntl(r25, Address(r26, r27));                //    popcnt r25d, dword ptr [r26 + r27]
    __ popcntl(r26, Address(r27, r28));                //    popcnt r26d, dword ptr [r27 + r28]
    __ popcntl(r27, Address(r28, r29));                //    popcnt r27d, dword ptr [r28 + r29]
    __ popcntl(r28, Address(r29, r30));                //    popcnt r28d, dword ptr [r29 + r30]
    __ popcntl(r29, Address(r30, r31));                //    popcnt r29d, dword ptr [r30 + r31]
    __ popcntl(r30, Address(r31, rcx));                //    popcnt r30d, dword ptr [r31 + rcx]
    __ popcntl(r31, Address(rcx, rdx));                //    popcnt r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ sbbl(rcx, Address(rdx, rbx));                   //    sbb ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ sbbl(rdx, Address(rbx, r8));                    //    sbb edx, dword ptr [rbx + r8]
    __ sbbl(rbx, Address(r8, r9));                     //    sbb ebx, dword ptr [r8 + r9]
    __ sbbl(r8, Address(r9, r10));                     //    sbb r8d, dword ptr [r9 + r10]
    __ sbbl(r9, Address(r10, r11));                    //    sbb r9d, dword ptr [r10 + r11]
    __ sbbl(r10, Address(r11, r12));                   //    sbb r10d, dword ptr [r11 + r12]
    __ sbbl(r11, Address(r12, r13));                   //    sbb r11d, dword ptr [r12 + r13]
    __ sbbl(r12, Address(r13, r14));                   //    sbb r12d, dword ptr [r13 + r14]
    __ sbbl(r13, Address(r14, r15));                   //    sbb r13d, dword ptr [r14 + r15]
    __ sbbl(r14, Address(r15, r16));                   //    sbb r14d, dword ptr [r15 + r16]
    __ sbbl(r15, Address(r16, r17));                   //    sbb r15d, dword ptr [r16 + r17]
    __ sbbl(r16, Address(r17, r18));                   //    sbb r16d, dword ptr [r17 + r18]
    __ sbbl(r17, Address(r18, r19));                   //    sbb r17d, dword ptr [r18 + r19]
    __ sbbl(r18, Address(r19, r20));                   //    sbb r18d, dword ptr [r19 + r20]
    __ sbbl(r19, Address(r20, r21));                   //    sbb r19d, dword ptr [r20 + r21]
    __ sbbl(r20, Address(r21, r22));                   //    sbb r20d, dword ptr [r21 + r22]
    __ sbbl(r21, Address(r22, r23));                   //    sbb r21d, dword ptr [r22 + r23]
    __ sbbl(r22, Address(r23, r24));                   //    sbb r22d, dword ptr [r23 + r24]
    __ sbbl(r23, Address(r24, r25));                   //    sbb r23d, dword ptr [r24 + r25]
    __ sbbl(r24, Address(r25, r26));                   //    sbb r24d, dword ptr [r25 + r26]
    __ sbbl(r25, Address(r26, r27));                   //    sbb r25d, dword ptr [r26 + r27]
    __ sbbl(r26, Address(r27, r28));                   //    sbb r26d, dword ptr [r27 + r28]
    __ sbbl(r27, Address(r28, r29));                   //    sbb r27d, dword ptr [r28 + r29]
    __ sbbl(r28, Address(r29, r30));                   //    sbb r28d, dword ptr [r29 + r30]
    __ sbbl(r29, Address(r30, r31));                   //    sbb r29d, dword ptr [r30 + r31]
    __ sbbl(r30, Address(r31, rcx));                   //    sbb r30d, dword ptr [r31 + rcx]
    __ sbbl(r31, Address(rcx, rdx));                   //    sbb r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ subl(rcx, Address(rdx, rbx));                   //    sub ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ subl(rdx, Address(rbx, r8));                    //    sub edx, dword ptr [rbx + r8]
    __ subl(rbx, Address(r8, r9));                     //    sub ebx, dword ptr [r8 + r9]
    __ subl(r8, Address(r9, r10));                     //    sub r8d, dword ptr [r9 + r10]
    __ subl(r9, Address(r10, r11));                    //    sub r9d, dword ptr [r10 + r11]
    __ subl(r10, Address(r11, r12));                   //    sub r10d, dword ptr [r11 + r12]
    __ subl(r11, Address(r12, r13));                   //    sub r11d, dword ptr [r12 + r13]
    __ subl(r12, Address(r13, r14));                   //    sub r12d, dword ptr [r13 + r14]
    __ subl(r13, Address(r14, r15));                   //    sub r13d, dword ptr [r14 + r15]
    __ subl(r14, Address(r15, r16));                   //    sub r14d, dword ptr [r15 + r16]
    __ subl(r15, Address(r16, r17));                   //    sub r15d, dword ptr [r16 + r17]
    __ subl(r16, Address(r17, r18));                   //    sub r16d, dword ptr [r17 + r18]
    __ subl(r17, Address(r18, r19));                   //    sub r17d, dword ptr [r18 + r19]
    __ subl(r18, Address(r19, r20));                   //    sub r18d, dword ptr [r19 + r20]
    __ subl(r19, Address(r20, r21));                   //    sub r19d, dword ptr [r20 + r21]
    __ subl(r20, Address(r21, r22));                   //    sub r20d, dword ptr [r21 + r22]
    __ subl(r21, Address(r22, r23));                   //    sub r21d, dword ptr [r22 + r23]
    __ subl(r22, Address(r23, r24));                   //    sub r22d, dword ptr [r23 + r24]
    __ subl(r23, Address(r24, r25));                   //    sub r23d, dword ptr [r24 + r25]
    __ subl(r24, Address(r25, r26));                   //    sub r24d, dword ptr [r25 + r26]
    __ subl(r25, Address(r26, r27));                   //    sub r25d, dword ptr [r26 + r27]
    __ subl(r26, Address(r27, r28));                   //    sub r26d, dword ptr [r27 + r28]
    __ subl(r27, Address(r28, r29));                   //    sub r27d, dword ptr [r28 + r29]
    __ subl(r28, Address(r29, r30));                   //    sub r28d, dword ptr [r29 + r30]
    __ subl(r29, Address(r30, r31));                   //    sub r29d, dword ptr [r30 + r31]
    __ subl(r30, Address(r31, rcx));                   //    sub r30d, dword ptr [r31 + rcx]
    __ subl(r31, Address(rcx, rdx));                   //    sub r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ tzcntl(rcx, Address(rdx, rbx));                 //    tzcnt ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ tzcntl(rdx, Address(rbx, r8));                  //    tzcnt edx, dword ptr [rbx + r8]
    __ tzcntl(rbx, Address(r8, r9));                   //    tzcnt ebx, dword ptr [r8 + r9]
    __ tzcntl(r8, Address(r9, r10));                   //    tzcnt r8d, dword ptr [r9 + r10]
    __ tzcntl(r9, Address(r10, r11));                  //    tzcnt r9d, dword ptr [r10 + r11]
    __ tzcntl(r10, Address(r11, r12));                 //    tzcnt r10d, dword ptr [r11 + r12]
    __ tzcntl(r11, Address(r12, r13));                 //    tzcnt r11d, dword ptr [r12 + r13]
    __ tzcntl(r12, Address(r13, r14));                 //    tzcnt r12d, dword ptr [r13 + r14]
    __ tzcntl(r13, Address(r14, r15));                 //    tzcnt r13d, dword ptr [r14 + r15]
    __ tzcntl(r14, Address(r15, r16));                 //    tzcnt r14d, dword ptr [r15 + r16]
    __ tzcntl(r15, Address(r16, r17));                 //    tzcnt r15d, dword ptr [r16 + r17]
    __ tzcntl(r16, Address(r17, r18));                 //    tzcnt r16d, dword ptr [r17 + r18]
    __ tzcntl(r17, Address(r18, r19));                 //    tzcnt r17d, dword ptr [r18 + r19]
    __ tzcntl(r18, Address(r19, r20));                 //    tzcnt r18d, dword ptr [r19 + r20]
    __ tzcntl(r19, Address(r20, r21));                 //    tzcnt r19d, dword ptr [r20 + r21]
    __ tzcntl(r20, Address(r21, r22));                 //    tzcnt r20d, dword ptr [r21 + r22]
    __ tzcntl(r21, Address(r22, r23));                 //    tzcnt r21d, dword ptr [r22 + r23]
    __ tzcntl(r22, Address(r23, r24));                 //    tzcnt r22d, dword ptr [r23 + r24]
    __ tzcntl(r23, Address(r24, r25));                 //    tzcnt r23d, dword ptr [r24 + r25]
    __ tzcntl(r24, Address(r25, r26));                 //    tzcnt r24d, dword ptr [r25 + r26]
    __ tzcntl(r25, Address(r26, r27));                 //    tzcnt r25d, dword ptr [r26 + r27]
    __ tzcntl(r26, Address(r27, r28));                 //    tzcnt r26d, dword ptr [r27 + r28]
    __ tzcntl(r27, Address(r28, r29));                 //    tzcnt r27d, dword ptr [r28 + r29]
    __ tzcntl(r28, Address(r29, r30));                 //    tzcnt r28d, dword ptr [r29 + r30]
    __ tzcntl(r29, Address(r30, r31));                 //    tzcnt r29d, dword ptr [r30 + r31]
    __ tzcntl(r30, Address(r31, rcx));                 //    tzcnt r30d, dword ptr [r31 + rcx]
    __ tzcntl(r31, Address(rcx, rdx));                 //    tzcnt r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ xorb(rcx, Address(rdx, rbx));                   //    xor cl, byte ptr [rdx + rbx]
#ifdef _LP64
    __ xorb(rdx, Address(rbx, r8));                    //    xor dl, byte ptr [rbx + r8]
    __ xorb(rbx, Address(r8, r9));                     //    xor bl, byte ptr [r8 + r9]
    __ xorb(r8, Address(r9, r10));                     //    xor r8b, byte ptr [r9 + r10]
    __ xorb(r9, Address(r10, r11));                    //    xor r9b, byte ptr [r10 + r11]
    __ xorb(r10, Address(r11, r12));                   //    xor r10b, byte ptr [r11 + r12]
    __ xorb(r11, Address(r12, r13));                   //    xor r11b, byte ptr [r12 + r13]
    __ xorb(r12, Address(r13, r14));                   //    xor r12b, byte ptr [r13 + r14]
    __ xorb(r13, Address(r14, r15));                   //    xor r13b, byte ptr [r14 + r15]
    __ xorb(r14, Address(r15, r16));                   //    xor r14b, byte ptr [r15 + r16]
    __ xorb(r15, Address(r16, r17));                   //    xor r15b, byte ptr [r16 + r17]
    __ xorb(r16, Address(r17, r18));                   //    xor r16b, byte ptr [r17 + r18]
    __ xorb(r17, Address(r18, r19));                   //    xor r17b, byte ptr [r18 + r19]
    __ xorb(r18, Address(r19, r20));                   //    xor r18b, byte ptr [r19 + r20]
    __ xorb(r19, Address(r20, r21));                   //    xor r19b, byte ptr [r20 + r21]
    __ xorb(r20, Address(r21, r22));                   //    xor r20b, byte ptr [r21 + r22]
    __ xorb(r21, Address(r22, r23));                   //    xor r21b, byte ptr [r22 + r23]
    __ xorb(r22, Address(r23, r24));                   //    xor r22b, byte ptr [r23 + r24]
    __ xorb(r23, Address(r24, r25));                   //    xor r23b, byte ptr [r24 + r25]
    __ xorb(r24, Address(r25, r26));                   //    xor r24b, byte ptr [r25 + r26]
    __ xorb(r25, Address(r26, r27));                   //    xor r25b, byte ptr [r26 + r27]
    __ xorb(r26, Address(r27, r28));                   //    xor r26b, byte ptr [r27 + r28]
    __ xorb(r27, Address(r28, r29));                   //    xor r27b, byte ptr [r28 + r29]
    __ xorb(r28, Address(r29, r30));                   //    xor r28b, byte ptr [r29 + r30]
    __ xorb(r29, Address(r30, r31));                   //    xor r29b, byte ptr [r30 + r31]
    __ xorb(r30, Address(r31, rcx));                   //    xor r30b, byte ptr [r31 + rcx]
    __ xorb(r31, Address(rcx, rdx));                   //    xor r31b, byte ptr [rcx + rdx]
#endif // _LP64
    __ xorw(rcx, Address(rdx, rbx));                   //    xor cx, word ptr [rdx + rbx]
#ifdef _LP64
    __ xorw(rdx, Address(rbx, r8));                    //    xor dx, word ptr [rbx + r8]
    __ xorw(rbx, Address(r8, r9));                     //    xor bx, word ptr [r8 + r9]
    __ xorw(r8, Address(r9, r10));                     //    xor r8w, word ptr [r9 + r10]
    __ xorw(r9, Address(r10, r11));                    //    xor r9w, word ptr [r10 + r11]
    __ xorw(r10, Address(r11, r12));                   //    xor r10w, word ptr [r11 + r12]
    __ xorw(r11, Address(r12, r13));                   //    xor r11w, word ptr [r12 + r13]
    __ xorw(r12, Address(r13, r14));                   //    xor r12w, word ptr [r13 + r14]
    __ xorw(r13, Address(r14, r15));                   //    xor r13w, word ptr [r14 + r15]
    __ xorw(r14, Address(r15, r16));                   //    xor r14w, word ptr [r15 + r16]
    __ xorw(r15, Address(r16, r17));                   //    xor r15w, word ptr [r16 + r17]
    __ xorw(r16, Address(r17, r18));                   //    xor r16w, word ptr [r17 + r18]
    __ xorw(r17, Address(r18, r19));                   //    xor r17w, word ptr [r18 + r19]
    __ xorw(r18, Address(r19, r20));                   //    xor r18w, word ptr [r19 + r20]
    __ xorw(r19, Address(r20, r21));                   //    xor r19w, word ptr [r20 + r21]
    __ xorw(r20, Address(r21, r22));                   //    xor r20w, word ptr [r21 + r22]
    __ xorw(r21, Address(r22, r23));                   //    xor r21w, word ptr [r22 + r23]
    __ xorw(r22, Address(r23, r24));                   //    xor r22w, word ptr [r23 + r24]
    __ xorw(r23, Address(r24, r25));                   //    xor r23w, word ptr [r24 + r25]
    __ xorw(r24, Address(r25, r26));                   //    xor r24w, word ptr [r25 + r26]
    __ xorw(r25, Address(r26, r27));                   //    xor r25w, word ptr [r26 + r27]
    __ xorw(r26, Address(r27, r28));                   //    xor r26w, word ptr [r27 + r28]
    __ xorw(r27, Address(r28, r29));                   //    xor r27w, word ptr [r28 + r29]
    __ xorw(r28, Address(r29, r30));                   //    xor r28w, word ptr [r29 + r30]
    __ xorw(r29, Address(r30, r31));                   //    xor r29w, word ptr [r30 + r31]
    __ xorw(r30, Address(r31, rcx));                   //    xor r30w, word ptr [r31 + rcx]
    __ xorw(r31, Address(rcx, rdx));                   //    xor r31w, word ptr [rcx + rdx]
#endif // _LP64
    __ xorl(rcx, Address(rdx, rbx));                   //    xor ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ xorl(rdx, Address(rbx, r8));                    //    xor edx, dword ptr [rbx + r8]
    __ xorl(rbx, Address(r8, r9));                     //    xor ebx, dword ptr [r8 + r9]
    __ xorl(r8, Address(r9, r10));                     //    xor r8d, dword ptr [r9 + r10]
    __ xorl(r9, Address(r10, r11));                    //    xor r9d, dword ptr [r10 + r11]
    __ xorl(r10, Address(r11, r12));                   //    xor r10d, dword ptr [r11 + r12]
    __ xorl(r11, Address(r12, r13));                   //    xor r11d, dword ptr [r12 + r13]
    __ xorl(r12, Address(r13, r14));                   //    xor r12d, dword ptr [r13 + r14]
    __ xorl(r13, Address(r14, r15));                   //    xor r13d, dword ptr [r14 + r15]
    __ xorl(r14, Address(r15, r16));                   //    xor r14d, dword ptr [r15 + r16]
    __ xorl(r15, Address(r16, r17));                   //    xor r15d, dword ptr [r16 + r17]
    __ xorl(r16, Address(r17, r18));                   //    xor r16d, dword ptr [r17 + r18]
    __ xorl(r17, Address(r18, r19));                   //    xor r17d, dword ptr [r18 + r19]
    __ xorl(r18, Address(r19, r20));                   //    xor r18d, dword ptr [r19 + r20]
    __ xorl(r19, Address(r20, r21));                   //    xor r19d, dword ptr [r20 + r21]
    __ xorl(r20, Address(r21, r22));                   //    xor r20d, dword ptr [r21 + r22]
    __ xorl(r21, Address(r22, r23));                   //    xor r21d, dword ptr [r22 + r23]
    __ xorl(r22, Address(r23, r24));                   //    xor r22d, dword ptr [r23 + r24]
    __ xorl(r23, Address(r24, r25));                   //    xor r23d, dword ptr [r24 + r25]
    __ xorl(r24, Address(r25, r26));                   //    xor r24d, dword ptr [r25 + r26]
    __ xorl(r25, Address(r26, r27));                   //    xor r25d, dword ptr [r26 + r27]
    __ xorl(r26, Address(r27, r28));                   //    xor r26d, dword ptr [r27 + r28]
    __ xorl(r27, Address(r28, r29));                   //    xor r27d, dword ptr [r28 + r29]
    __ xorl(r28, Address(r29, r30));                   //    xor r28d, dword ptr [r29 + r30]
    __ xorl(r29, Address(r30, r31));                   //    xor r29d, dword ptr [r30 + r31]
    __ xorl(r30, Address(r31, rcx));                   //    xor r30d, dword ptr [r31 + rcx]
    __ xorl(r31, Address(rcx, rdx));                   //    xor r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ addb(rcx, 1);                                   //    add cl, 1
    __ addb(rcx, 4);                                   //    add cl, 4
    __ addb(rcx, 16);                                  //    add cl, 16
    __ addb(rcx, 64);                                  //    add cl, 64
    __ addb(rdx, 1);                                   //    add dl, 1
    __ addb(rdx, 4);                                   //    add dl, 4
    __ addb(rdx, 16);                                  //    add dl, 16
    __ addb(rdx, 64);                                  //    add dl, 64
    __ addb(rbx, 1);                                   //    add bl, 1
    __ addb(rbx, 4);                                   //    add bl, 4
    __ addb(rbx, 16);                                  //    add bl, 16
    __ addb(rbx, 64);                                  //    add bl, 64
#ifdef _LP64
    __ addb(r8, 1);                                    //    add r8b, 1
    __ addb(r8, 4);                                    //    add r8b, 4
    __ addb(r8, 16);                                   //    add r8b, 16
    __ addb(r8, 64);                                   //    add r8b, 64
    __ addb(r9, 1);                                    //    add r9b, 1
    __ addb(r9, 4);                                    //    add r9b, 4
    __ addb(r9, 16);                                   //    add r9b, 16
    __ addb(r9, 64);                                   //    add r9b, 64
    __ addb(r10, 1);                                   //    add r10b, 1
    __ addb(r10, 4);                                   //    add r10b, 4
    __ addb(r10, 16);                                  //    add r10b, 16
    __ addb(r10, 64);                                  //    add r10b, 64
    __ addb(r11, 1);                                   //    add r11b, 1
    __ addb(r11, 4);                                   //    add r11b, 4
    __ addb(r11, 16);                                  //    add r11b, 16
    __ addb(r11, 64);                                  //    add r11b, 64
    __ addb(r12, 1);                                   //    add r12b, 1
    __ addb(r12, 4);                                   //    add r12b, 4
    __ addb(r12, 16);                                  //    add r12b, 16
    __ addb(r12, 64);                                  //    add r12b, 64
    __ addb(r13, 1);                                   //    add r13b, 1
    __ addb(r13, 4);                                   //    add r13b, 4
    __ addb(r13, 16);                                  //    add r13b, 16
    __ addb(r13, 64);                                  //    add r13b, 64
    __ addb(r14, 1);                                   //    add r14b, 1
    __ addb(r14, 4);                                   //    add r14b, 4
    __ addb(r14, 16);                                  //    add r14b, 16
    __ addb(r14, 64);                                  //    add r14b, 64
    __ addb(r15, 1);                                   //    add r15b, 1
    __ addb(r15, 4);                                   //    add r15b, 4
    __ addb(r15, 16);                                  //    add r15b, 16
    __ addb(r15, 64);                                  //    add r15b, 64
    __ addb(r16, 1);                                   //    add r16b, 1
    __ addb(r16, 4);                                   //    add r16b, 4
    __ addb(r16, 16);                                  //    add r16b, 16
    __ addb(r16, 64);                                  //    add r16b, 64
    __ addb(r17, 1);                                   //    add r17b, 1
    __ addb(r17, 4);                                   //    add r17b, 4
    __ addb(r17, 16);                                  //    add r17b, 16
    __ addb(r17, 64);                                  //    add r17b, 64
    __ addb(r18, 1);                                   //    add r18b, 1
    __ addb(r18, 4);                                   //    add r18b, 4
    __ addb(r18, 16);                                  //    add r18b, 16
    __ addb(r18, 64);                                  //    add r18b, 64
    __ addb(r19, 1);                                   //    add r19b, 1
    __ addb(r19, 4);                                   //    add r19b, 4
    __ addb(r19, 16);                                  //    add r19b, 16
    __ addb(r19, 64);                                  //    add r19b, 64
    __ addb(r20, 1);                                   //    add r20b, 1
    __ addb(r20, 4);                                   //    add r20b, 4
    __ addb(r20, 16);                                  //    add r20b, 16
    __ addb(r20, 64);                                  //    add r20b, 64
    __ addb(r21, 1);                                   //    add r21b, 1
    __ addb(r21, 4);                                   //    add r21b, 4
    __ addb(r21, 16);                                  //    add r21b, 16
    __ addb(r21, 64);                                  //    add r21b, 64
    __ addb(r22, 1);                                   //    add r22b, 1
    __ addb(r22, 4);                                   //    add r22b, 4
    __ addb(r22, 16);                                  //    add r22b, 16
    __ addb(r22, 64);                                  //    add r22b, 64
    __ addb(r23, 1);                                   //    add r23b, 1
    __ addb(r23, 4);                                   //    add r23b, 4
    __ addb(r23, 16);                                  //    add r23b, 16
    __ addb(r23, 64);                                  //    add r23b, 64
    __ addb(r24, 1);                                   //    add r24b, 1
    __ addb(r24, 4);                                   //    add r24b, 4
    __ addb(r24, 16);                                  //    add r24b, 16
    __ addb(r24, 64);                                  //    add r24b, 64
    __ addb(r25, 1);                                   //    add r25b, 1
    __ addb(r25, 4);                                   //    add r25b, 4
    __ addb(r25, 16);                                  //    add r25b, 16
    __ addb(r25, 64);                                  //    add r25b, 64
    __ addb(r26, 1);                                   //    add r26b, 1
    __ addb(r26, 4);                                   //    add r26b, 4
    __ addb(r26, 16);                                  //    add r26b, 16
    __ addb(r26, 64);                                  //    add r26b, 64
    __ addb(r27, 1);                                   //    add r27b, 1
    __ addb(r27, 4);                                   //    add r27b, 4
    __ addb(r27, 16);                                  //    add r27b, 16
    __ addb(r27, 64);                                  //    add r27b, 64
    __ addb(r28, 1);                                   //    add r28b, 1
    __ addb(r28, 4);                                   //    add r28b, 4
    __ addb(r28, 16);                                  //    add r28b, 16
    __ addb(r28, 64);                                  //    add r28b, 64
    __ addb(r29, 1);                                   //    add r29b, 1
    __ addb(r29, 4);                                   //    add r29b, 4
    __ addb(r29, 16);                                  //    add r29b, 16
    __ addb(r29, 64);                                  //    add r29b, 64
    __ addb(r30, 1);                                   //    add r30b, 1
    __ addb(r30, 4);                                   //    add r30b, 4
    __ addb(r30, 16);                                  //    add r30b, 16
    __ addb(r30, 64);                                  //    add r30b, 64
    __ addb(r31, 1);                                   //    add r31b, 1
    __ addb(r31, 4);                                   //    add r31b, 4
    __ addb(r31, 16);                                  //    add r31b, 16
    __ addb(r31, 64);                                  //    add r31b, 64
#endif // _LP64
    __ addl(rcx, 1);                                   //    add ecx, 1
    __ addl(rcx, 16);                                  //    add ecx, 16
    __ addl(rcx, 256);                                 //    add ecx, 256
    __ addl(rcx, 4096);                                //    add ecx, 4096
    __ addl(rcx, 65536);                               //    add ecx, 65536
    __ addl(rcx, 1048576);                             //    add ecx, 1048576
    __ addl(rcx, 16777216);                            //    add ecx, 16777216
    __ addl(rcx, 268435456);                           //    add ecx, 268435456
    __ addl(rdx, 1);                                   //    add edx, 1
    __ addl(rdx, 16);                                  //    add edx, 16
    __ addl(rdx, 256);                                 //    add edx, 256
    __ addl(rdx, 4096);                                //    add edx, 4096
    __ addl(rdx, 65536);                               //    add edx, 65536
    __ addl(rdx, 1048576);                             //    add edx, 1048576
    __ addl(rdx, 16777216);                            //    add edx, 16777216
    __ addl(rdx, 268435456);                           //    add edx, 268435456
    __ addl(rbx, 1);                                   //    add ebx, 1
    __ addl(rbx, 16);                                  //    add ebx, 16
    __ addl(rbx, 256);                                 //    add ebx, 256
    __ addl(rbx, 4096);                                //    add ebx, 4096
    __ addl(rbx, 65536);                               //    add ebx, 65536
    __ addl(rbx, 1048576);                             //    add ebx, 1048576
    __ addl(rbx, 16777216);                            //    add ebx, 16777216
    __ addl(rbx, 268435456);                           //    add ebx, 268435456
#ifdef _LP64
    __ addl(r8, 1);                                    //    add r8d, 1
    __ addl(r8, 16);                                   //    add r8d, 16
    __ addl(r8, 256);                                  //    add r8d, 256
    __ addl(r8, 4096);                                 //    add r8d, 4096
    __ addl(r8, 65536);                                //    add r8d, 65536
    __ addl(r8, 1048576);                              //    add r8d, 1048576
    __ addl(r8, 16777216);                             //    add r8d, 16777216
    __ addl(r8, 268435456);                            //    add r8d, 268435456
    __ addl(r9, 1);                                    //    add r9d, 1
    __ addl(r9, 16);                                   //    add r9d, 16
    __ addl(r9, 256);                                  //    add r9d, 256
    __ addl(r9, 4096);                                 //    add r9d, 4096
    __ addl(r9, 65536);                                //    add r9d, 65536
    __ addl(r9, 1048576);                              //    add r9d, 1048576
    __ addl(r9, 16777216);                             //    add r9d, 16777216
    __ addl(r9, 268435456);                            //    add r9d, 268435456
    __ addl(r10, 1);                                   //    add r10d, 1
    __ addl(r10, 16);                                  //    add r10d, 16
    __ addl(r10, 256);                                 //    add r10d, 256
    __ addl(r10, 4096);                                //    add r10d, 4096
    __ addl(r10, 65536);                               //    add r10d, 65536
    __ addl(r10, 1048576);                             //    add r10d, 1048576
    __ addl(r10, 16777216);                            //    add r10d, 16777216
    __ addl(r10, 268435456);                           //    add r10d, 268435456
    __ addl(r11, 1);                                   //    add r11d, 1
    __ addl(r11, 16);                                  //    add r11d, 16
    __ addl(r11, 256);                                 //    add r11d, 256
    __ addl(r11, 4096);                                //    add r11d, 4096
    __ addl(r11, 65536);                               //    add r11d, 65536
    __ addl(r11, 1048576);                             //    add r11d, 1048576
    __ addl(r11, 16777216);                            //    add r11d, 16777216
    __ addl(r11, 268435456);                           //    add r11d, 268435456
    __ addl(r12, 1);                                   //    add r12d, 1
    __ addl(r12, 16);                                  //    add r12d, 16
    __ addl(r12, 256);                                 //    add r12d, 256
    __ addl(r12, 4096);                                //    add r12d, 4096
    __ addl(r12, 65536);                               //    add r12d, 65536
    __ addl(r12, 1048576);                             //    add r12d, 1048576
    __ addl(r12, 16777216);                            //    add r12d, 16777216
    __ addl(r12, 268435456);                           //    add r12d, 268435456
    __ addl(r13, 1);                                   //    add r13d, 1
    __ addl(r13, 16);                                  //    add r13d, 16
    __ addl(r13, 256);                                 //    add r13d, 256
    __ addl(r13, 4096);                                //    add r13d, 4096
    __ addl(r13, 65536);                               //    add r13d, 65536
    __ addl(r13, 1048576);                             //    add r13d, 1048576
    __ addl(r13, 16777216);                            //    add r13d, 16777216
    __ addl(r13, 268435456);                           //    add r13d, 268435456
    __ addl(r14, 1);                                   //    add r14d, 1
    __ addl(r14, 16);                                  //    add r14d, 16
    __ addl(r14, 256);                                 //    add r14d, 256
    __ addl(r14, 4096);                                //    add r14d, 4096
    __ addl(r14, 65536);                               //    add r14d, 65536
    __ addl(r14, 1048576);                             //    add r14d, 1048576
    __ addl(r14, 16777216);                            //    add r14d, 16777216
    __ addl(r14, 268435456);                           //    add r14d, 268435456
    __ addl(r15, 1);                                   //    add r15d, 1
    __ addl(r15, 16);                                  //    add r15d, 16
    __ addl(r15, 256);                                 //    add r15d, 256
    __ addl(r15, 4096);                                //    add r15d, 4096
    __ addl(r15, 65536);                               //    add r15d, 65536
    __ addl(r15, 1048576);                             //    add r15d, 1048576
    __ addl(r15, 16777216);                            //    add r15d, 16777216
    __ addl(r15, 268435456);                           //    add r15d, 268435456
    __ addl(r16, 1);                                   //    add r16d, 1
    __ addl(r16, 16);                                  //    add r16d, 16
    __ addl(r16, 256);                                 //    add r16d, 256
    __ addl(r16, 4096);                                //    add r16d, 4096
    __ addl(r16, 65536);                               //    add r16d, 65536
    __ addl(r16, 1048576);                             //    add r16d, 1048576
    __ addl(r16, 16777216);                            //    add r16d, 16777216
    __ addl(r16, 268435456);                           //    add r16d, 268435456
    __ addl(r17, 1);                                   //    add r17d, 1
    __ addl(r17, 16);                                  //    add r17d, 16
    __ addl(r17, 256);                                 //    add r17d, 256
    __ addl(r17, 4096);                                //    add r17d, 4096
    __ addl(r17, 65536);                               //    add r17d, 65536
    __ addl(r17, 1048576);                             //    add r17d, 1048576
    __ addl(r17, 16777216);                            //    add r17d, 16777216
    __ addl(r17, 268435456);                           //    add r17d, 268435456
    __ addl(r18, 1);                                   //    add r18d, 1
    __ addl(r18, 16);                                  //    add r18d, 16
    __ addl(r18, 256);                                 //    add r18d, 256
    __ addl(r18, 4096);                                //    add r18d, 4096
    __ addl(r18, 65536);                               //    add r18d, 65536
    __ addl(r18, 1048576);                             //    add r18d, 1048576
    __ addl(r18, 16777216);                            //    add r18d, 16777216
    __ addl(r18, 268435456);                           //    add r18d, 268435456
    __ addl(r19, 1);                                   //    add r19d, 1
    __ addl(r19, 16);                                  //    add r19d, 16
    __ addl(r19, 256);                                 //    add r19d, 256
    __ addl(r19, 4096);                                //    add r19d, 4096
    __ addl(r19, 65536);                               //    add r19d, 65536
    __ addl(r19, 1048576);                             //    add r19d, 1048576
    __ addl(r19, 16777216);                            //    add r19d, 16777216
    __ addl(r19, 268435456);                           //    add r19d, 268435456
    __ addl(r20, 1);                                   //    add r20d, 1
    __ addl(r20, 16);                                  //    add r20d, 16
    __ addl(r20, 256);                                 //    add r20d, 256
    __ addl(r20, 4096);                                //    add r20d, 4096
    __ addl(r20, 65536);                               //    add r20d, 65536
    __ addl(r20, 1048576);                             //    add r20d, 1048576
    __ addl(r20, 16777216);                            //    add r20d, 16777216
    __ addl(r20, 268435456);                           //    add r20d, 268435456
    __ addl(r21, 1);                                   //    add r21d, 1
    __ addl(r21, 16);                                  //    add r21d, 16
    __ addl(r21, 256);                                 //    add r21d, 256
    __ addl(r21, 4096);                                //    add r21d, 4096
    __ addl(r21, 65536);                               //    add r21d, 65536
    __ addl(r21, 1048576);                             //    add r21d, 1048576
    __ addl(r21, 16777216);                            //    add r21d, 16777216
    __ addl(r21, 268435456);                           //    add r21d, 268435456
    __ addl(r22, 1);                                   //    add r22d, 1
    __ addl(r22, 16);                                  //    add r22d, 16
    __ addl(r22, 256);                                 //    add r22d, 256
    __ addl(r22, 4096);                                //    add r22d, 4096
    __ addl(r22, 65536);                               //    add r22d, 65536
    __ addl(r22, 1048576);                             //    add r22d, 1048576
    __ addl(r22, 16777216);                            //    add r22d, 16777216
    __ addl(r22, 268435456);                           //    add r22d, 268435456
    __ addl(r23, 1);                                   //    add r23d, 1
    __ addl(r23, 16);                                  //    add r23d, 16
    __ addl(r23, 256);                                 //    add r23d, 256
    __ addl(r23, 4096);                                //    add r23d, 4096
    __ addl(r23, 65536);                               //    add r23d, 65536
    __ addl(r23, 1048576);                             //    add r23d, 1048576
    __ addl(r23, 16777216);                            //    add r23d, 16777216
    __ addl(r23, 268435456);                           //    add r23d, 268435456
    __ addl(r24, 1);                                   //    add r24d, 1
    __ addl(r24, 16);                                  //    add r24d, 16
    __ addl(r24, 256);                                 //    add r24d, 256
    __ addl(r24, 4096);                                //    add r24d, 4096
    __ addl(r24, 65536);                               //    add r24d, 65536
    __ addl(r24, 1048576);                             //    add r24d, 1048576
    __ addl(r24, 16777216);                            //    add r24d, 16777216
    __ addl(r24, 268435456);                           //    add r24d, 268435456
    __ addl(r25, 1);                                   //    add r25d, 1
    __ addl(r25, 16);                                  //    add r25d, 16
    __ addl(r25, 256);                                 //    add r25d, 256
    __ addl(r25, 4096);                                //    add r25d, 4096
    __ addl(r25, 65536);                               //    add r25d, 65536
    __ addl(r25, 1048576);                             //    add r25d, 1048576
    __ addl(r25, 16777216);                            //    add r25d, 16777216
    __ addl(r25, 268435456);                           //    add r25d, 268435456
    __ addl(r26, 1);                                   //    add r26d, 1
    __ addl(r26, 16);                                  //    add r26d, 16
    __ addl(r26, 256);                                 //    add r26d, 256
    __ addl(r26, 4096);                                //    add r26d, 4096
    __ addl(r26, 65536);                               //    add r26d, 65536
    __ addl(r26, 1048576);                             //    add r26d, 1048576
    __ addl(r26, 16777216);                            //    add r26d, 16777216
    __ addl(r26, 268435456);                           //    add r26d, 268435456
    __ addl(r27, 1);                                   //    add r27d, 1
    __ addl(r27, 16);                                  //    add r27d, 16
    __ addl(r27, 256);                                 //    add r27d, 256
    __ addl(r27, 4096);                                //    add r27d, 4096
    __ addl(r27, 65536);                               //    add r27d, 65536
    __ addl(r27, 1048576);                             //    add r27d, 1048576
    __ addl(r27, 16777216);                            //    add r27d, 16777216
    __ addl(r27, 268435456);                           //    add r27d, 268435456
    __ addl(r28, 1);                                   //    add r28d, 1
    __ addl(r28, 16);                                  //    add r28d, 16
    __ addl(r28, 256);                                 //    add r28d, 256
    __ addl(r28, 4096);                                //    add r28d, 4096
    __ addl(r28, 65536);                               //    add r28d, 65536
    __ addl(r28, 1048576);                             //    add r28d, 1048576
    __ addl(r28, 16777216);                            //    add r28d, 16777216
    __ addl(r28, 268435456);                           //    add r28d, 268435456
    __ addl(r29, 1);                                   //    add r29d, 1
    __ addl(r29, 16);                                  //    add r29d, 16
    __ addl(r29, 256);                                 //    add r29d, 256
    __ addl(r29, 4096);                                //    add r29d, 4096
    __ addl(r29, 65536);                               //    add r29d, 65536
    __ addl(r29, 1048576);                             //    add r29d, 1048576
    __ addl(r29, 16777216);                            //    add r29d, 16777216
    __ addl(r29, 268435456);                           //    add r29d, 268435456
    __ addl(r30, 1);                                   //    add r30d, 1
    __ addl(r30, 16);                                  //    add r30d, 16
    __ addl(r30, 256);                                 //    add r30d, 256
    __ addl(r30, 4096);                                //    add r30d, 4096
    __ addl(r30, 65536);                               //    add r30d, 65536
    __ addl(r30, 1048576);                             //    add r30d, 1048576
    __ addl(r30, 16777216);                            //    add r30d, 16777216
    __ addl(r30, 268435456);                           //    add r30d, 268435456
    __ addl(r31, 1);                                   //    add r31d, 1
    __ addl(r31, 16);                                  //    add r31d, 16
    __ addl(r31, 256);                                 //    add r31d, 256
    __ addl(r31, 4096);                                //    add r31d, 4096
    __ addl(r31, 65536);                               //    add r31d, 65536
    __ addl(r31, 1048576);                             //    add r31d, 1048576
    __ addl(r31, 16777216);                            //    add r31d, 16777216
    __ addl(r31, 268435456);                           //    add r31d, 268435456
#endif // _LP64
    __ andl(rcx, 1);                                   //    and ecx, 1
    __ andl(rcx, 16);                                  //    and ecx, 16
    __ andl(rcx, 256);                                 //    and ecx, 256
    __ andl(rcx, 4096);                                //    and ecx, 4096
    __ andl(rcx, 65536);                               //    and ecx, 65536
    __ andl(rcx, 1048576);                             //    and ecx, 1048576
    __ andl(rcx, 16777216);                            //    and ecx, 16777216
    __ andl(rcx, 268435456);                           //    and ecx, 268435456
    __ andl(rdx, 1);                                   //    and edx, 1
    __ andl(rdx, 16);                                  //    and edx, 16
    __ andl(rdx, 256);                                 //    and edx, 256
    __ andl(rdx, 4096);                                //    and edx, 4096
    __ andl(rdx, 65536);                               //    and edx, 65536
    __ andl(rdx, 1048576);                             //    and edx, 1048576
    __ andl(rdx, 16777216);                            //    and edx, 16777216
    __ andl(rdx, 268435456);                           //    and edx, 268435456
    __ andl(rbx, 1);                                   //    and ebx, 1
    __ andl(rbx, 16);                                  //    and ebx, 16
    __ andl(rbx, 256);                                 //    and ebx, 256
    __ andl(rbx, 4096);                                //    and ebx, 4096
    __ andl(rbx, 65536);                               //    and ebx, 65536
    __ andl(rbx, 1048576);                             //    and ebx, 1048576
    __ andl(rbx, 16777216);                            //    and ebx, 16777216
    __ andl(rbx, 268435456);                           //    and ebx, 268435456
#ifdef _LP64
    __ andl(r8, 1);                                    //    and r8d, 1
    __ andl(r8, 16);                                   //    and r8d, 16
    __ andl(r8, 256);                                  //    and r8d, 256
    __ andl(r8, 4096);                                 //    and r8d, 4096
    __ andl(r8, 65536);                                //    and r8d, 65536
    __ andl(r8, 1048576);                              //    and r8d, 1048576
    __ andl(r8, 16777216);                             //    and r8d, 16777216
    __ andl(r8, 268435456);                            //    and r8d, 268435456
    __ andl(r9, 1);                                    //    and r9d, 1
    __ andl(r9, 16);                                   //    and r9d, 16
    __ andl(r9, 256);                                  //    and r9d, 256
    __ andl(r9, 4096);                                 //    and r9d, 4096
    __ andl(r9, 65536);                                //    and r9d, 65536
    __ andl(r9, 1048576);                              //    and r9d, 1048576
    __ andl(r9, 16777216);                             //    and r9d, 16777216
    __ andl(r9, 268435456);                            //    and r9d, 268435456
    __ andl(r10, 1);                                   //    and r10d, 1
    __ andl(r10, 16);                                  //    and r10d, 16
    __ andl(r10, 256);                                 //    and r10d, 256
    __ andl(r10, 4096);                                //    and r10d, 4096
    __ andl(r10, 65536);                               //    and r10d, 65536
    __ andl(r10, 1048576);                             //    and r10d, 1048576
    __ andl(r10, 16777216);                            //    and r10d, 16777216
    __ andl(r10, 268435456);                           //    and r10d, 268435456
    __ andl(r11, 1);                                   //    and r11d, 1
    __ andl(r11, 16);                                  //    and r11d, 16
    __ andl(r11, 256);                                 //    and r11d, 256
    __ andl(r11, 4096);                                //    and r11d, 4096
    __ andl(r11, 65536);                               //    and r11d, 65536
    __ andl(r11, 1048576);                             //    and r11d, 1048576
    __ andl(r11, 16777216);                            //    and r11d, 16777216
    __ andl(r11, 268435456);                           //    and r11d, 268435456
    __ andl(r12, 1);                                   //    and r12d, 1
    __ andl(r12, 16);                                  //    and r12d, 16
    __ andl(r12, 256);                                 //    and r12d, 256
    __ andl(r12, 4096);                                //    and r12d, 4096
    __ andl(r12, 65536);                               //    and r12d, 65536
    __ andl(r12, 1048576);                             //    and r12d, 1048576
    __ andl(r12, 16777216);                            //    and r12d, 16777216
    __ andl(r12, 268435456);                           //    and r12d, 268435456
    __ andl(r13, 1);                                   //    and r13d, 1
    __ andl(r13, 16);                                  //    and r13d, 16
    __ andl(r13, 256);                                 //    and r13d, 256
    __ andl(r13, 4096);                                //    and r13d, 4096
    __ andl(r13, 65536);                               //    and r13d, 65536
    __ andl(r13, 1048576);                             //    and r13d, 1048576
    __ andl(r13, 16777216);                            //    and r13d, 16777216
    __ andl(r13, 268435456);                           //    and r13d, 268435456
    __ andl(r14, 1);                                   //    and r14d, 1
    __ andl(r14, 16);                                  //    and r14d, 16
    __ andl(r14, 256);                                 //    and r14d, 256
    __ andl(r14, 4096);                                //    and r14d, 4096
    __ andl(r14, 65536);                               //    and r14d, 65536
    __ andl(r14, 1048576);                             //    and r14d, 1048576
    __ andl(r14, 16777216);                            //    and r14d, 16777216
    __ andl(r14, 268435456);                           //    and r14d, 268435456
    __ andl(r15, 1);                                   //    and r15d, 1
    __ andl(r15, 16);                                  //    and r15d, 16
    __ andl(r15, 256);                                 //    and r15d, 256
    __ andl(r15, 4096);                                //    and r15d, 4096
    __ andl(r15, 65536);                               //    and r15d, 65536
    __ andl(r15, 1048576);                             //    and r15d, 1048576
    __ andl(r15, 16777216);                            //    and r15d, 16777216
    __ andl(r15, 268435456);                           //    and r15d, 268435456
    __ andl(r16, 1);                                   //    and r16d, 1
    __ andl(r16, 16);                                  //    and r16d, 16
    __ andl(r16, 256);                                 //    and r16d, 256
    __ andl(r16, 4096);                                //    and r16d, 4096
    __ andl(r16, 65536);                               //    and r16d, 65536
    __ andl(r16, 1048576);                             //    and r16d, 1048576
    __ andl(r16, 16777216);                            //    and r16d, 16777216
    __ andl(r16, 268435456);                           //    and r16d, 268435456
    __ andl(r17, 1);                                   //    and r17d, 1
    __ andl(r17, 16);                                  //    and r17d, 16
    __ andl(r17, 256);                                 //    and r17d, 256
    __ andl(r17, 4096);                                //    and r17d, 4096
    __ andl(r17, 65536);                               //    and r17d, 65536
    __ andl(r17, 1048576);                             //    and r17d, 1048576
    __ andl(r17, 16777216);                            //    and r17d, 16777216
    __ andl(r17, 268435456);                           //    and r17d, 268435456
    __ andl(r18, 1);                                   //    and r18d, 1
    __ andl(r18, 16);                                  //    and r18d, 16
    __ andl(r18, 256);                                 //    and r18d, 256
    __ andl(r18, 4096);                                //    and r18d, 4096
    __ andl(r18, 65536);                               //    and r18d, 65536
    __ andl(r18, 1048576);                             //    and r18d, 1048576
    __ andl(r18, 16777216);                            //    and r18d, 16777216
    __ andl(r18, 268435456);                           //    and r18d, 268435456
    __ andl(r19, 1);                                   //    and r19d, 1
    __ andl(r19, 16);                                  //    and r19d, 16
    __ andl(r19, 256);                                 //    and r19d, 256
    __ andl(r19, 4096);                                //    and r19d, 4096
    __ andl(r19, 65536);                               //    and r19d, 65536
    __ andl(r19, 1048576);                             //    and r19d, 1048576
    __ andl(r19, 16777216);                            //    and r19d, 16777216
    __ andl(r19, 268435456);                           //    and r19d, 268435456
    __ andl(r20, 1);                                   //    and r20d, 1
    __ andl(r20, 16);                                  //    and r20d, 16
    __ andl(r20, 256);                                 //    and r20d, 256
    __ andl(r20, 4096);                                //    and r20d, 4096
    __ andl(r20, 65536);                               //    and r20d, 65536
    __ andl(r20, 1048576);                             //    and r20d, 1048576
    __ andl(r20, 16777216);                            //    and r20d, 16777216
    __ andl(r20, 268435456);                           //    and r20d, 268435456
    __ andl(r21, 1);                                   //    and r21d, 1
    __ andl(r21, 16);                                  //    and r21d, 16
    __ andl(r21, 256);                                 //    and r21d, 256
    __ andl(r21, 4096);                                //    and r21d, 4096
    __ andl(r21, 65536);                               //    and r21d, 65536
    __ andl(r21, 1048576);                             //    and r21d, 1048576
    __ andl(r21, 16777216);                            //    and r21d, 16777216
    __ andl(r21, 268435456);                           //    and r21d, 268435456
    __ andl(r22, 1);                                   //    and r22d, 1
    __ andl(r22, 16);                                  //    and r22d, 16
    __ andl(r22, 256);                                 //    and r22d, 256
    __ andl(r22, 4096);                                //    and r22d, 4096
    __ andl(r22, 65536);                               //    and r22d, 65536
    __ andl(r22, 1048576);                             //    and r22d, 1048576
    __ andl(r22, 16777216);                            //    and r22d, 16777216
    __ andl(r22, 268435456);                           //    and r22d, 268435456
    __ andl(r23, 1);                                   //    and r23d, 1
    __ andl(r23, 16);                                  //    and r23d, 16
    __ andl(r23, 256);                                 //    and r23d, 256
    __ andl(r23, 4096);                                //    and r23d, 4096
    __ andl(r23, 65536);                               //    and r23d, 65536
    __ andl(r23, 1048576);                             //    and r23d, 1048576
    __ andl(r23, 16777216);                            //    and r23d, 16777216
    __ andl(r23, 268435456);                           //    and r23d, 268435456
    __ andl(r24, 1);                                   //    and r24d, 1
    __ andl(r24, 16);                                  //    and r24d, 16
    __ andl(r24, 256);                                 //    and r24d, 256
    __ andl(r24, 4096);                                //    and r24d, 4096
    __ andl(r24, 65536);                               //    and r24d, 65536
    __ andl(r24, 1048576);                             //    and r24d, 1048576
    __ andl(r24, 16777216);                            //    and r24d, 16777216
    __ andl(r24, 268435456);                           //    and r24d, 268435456
    __ andl(r25, 1);                                   //    and r25d, 1
    __ andl(r25, 16);                                  //    and r25d, 16
    __ andl(r25, 256);                                 //    and r25d, 256
    __ andl(r25, 4096);                                //    and r25d, 4096
    __ andl(r25, 65536);                               //    and r25d, 65536
    __ andl(r25, 1048576);                             //    and r25d, 1048576
    __ andl(r25, 16777216);                            //    and r25d, 16777216
    __ andl(r25, 268435456);                           //    and r25d, 268435456
    __ andl(r26, 1);                                   //    and r26d, 1
    __ andl(r26, 16);                                  //    and r26d, 16
    __ andl(r26, 256);                                 //    and r26d, 256
    __ andl(r26, 4096);                                //    and r26d, 4096
    __ andl(r26, 65536);                               //    and r26d, 65536
    __ andl(r26, 1048576);                             //    and r26d, 1048576
    __ andl(r26, 16777216);                            //    and r26d, 16777216
    __ andl(r26, 268435456);                           //    and r26d, 268435456
    __ andl(r27, 1);                                   //    and r27d, 1
    __ andl(r27, 16);                                  //    and r27d, 16
    __ andl(r27, 256);                                 //    and r27d, 256
    __ andl(r27, 4096);                                //    and r27d, 4096
    __ andl(r27, 65536);                               //    and r27d, 65536
    __ andl(r27, 1048576);                             //    and r27d, 1048576
    __ andl(r27, 16777216);                            //    and r27d, 16777216
    __ andl(r27, 268435456);                           //    and r27d, 268435456
    __ andl(r28, 1);                                   //    and r28d, 1
    __ andl(r28, 16);                                  //    and r28d, 16
    __ andl(r28, 256);                                 //    and r28d, 256
    __ andl(r28, 4096);                                //    and r28d, 4096
    __ andl(r28, 65536);                               //    and r28d, 65536
    __ andl(r28, 1048576);                             //    and r28d, 1048576
    __ andl(r28, 16777216);                            //    and r28d, 16777216
    __ andl(r28, 268435456);                           //    and r28d, 268435456
    __ andl(r29, 1);                                   //    and r29d, 1
    __ andl(r29, 16);                                  //    and r29d, 16
    __ andl(r29, 256);                                 //    and r29d, 256
    __ andl(r29, 4096);                                //    and r29d, 4096
    __ andl(r29, 65536);                               //    and r29d, 65536
    __ andl(r29, 1048576);                             //    and r29d, 1048576
    __ andl(r29, 16777216);                            //    and r29d, 16777216
    __ andl(r29, 268435456);                           //    and r29d, 268435456
    __ andl(r30, 1);                                   //    and r30d, 1
    __ andl(r30, 16);                                  //    and r30d, 16
    __ andl(r30, 256);                                 //    and r30d, 256
    __ andl(r30, 4096);                                //    and r30d, 4096
    __ andl(r30, 65536);                               //    and r30d, 65536
    __ andl(r30, 1048576);                             //    and r30d, 1048576
    __ andl(r30, 16777216);                            //    and r30d, 16777216
    __ andl(r30, 268435456);                           //    and r30d, 268435456
    __ andl(r31, 1);                                   //    and r31d, 1
    __ andl(r31, 16);                                  //    and r31d, 16
    __ andl(r31, 256);                                 //    and r31d, 256
    __ andl(r31, 4096);                                //    and r31d, 4096
    __ andl(r31, 65536);                               //    and r31d, 65536
    __ andl(r31, 1048576);                             //    and r31d, 1048576
    __ andl(r31, 16777216);                            //    and r31d, 16777216
    __ andl(r31, 268435456);                           //    and r31d, 268435456
#endif // _LP64
    __ adcl(rcx, 1);                                   //    adc ecx, 1
    __ adcl(rcx, 16);                                  //    adc ecx, 16
    __ adcl(rcx, 256);                                 //    adc ecx, 256
    __ adcl(rcx, 4096);                                //    adc ecx, 4096
    __ adcl(rcx, 65536);                               //    adc ecx, 65536
    __ adcl(rcx, 1048576);                             //    adc ecx, 1048576
    __ adcl(rcx, 16777216);                            //    adc ecx, 16777216
    __ adcl(rcx, 268435456);                           //    adc ecx, 268435456
    __ adcl(rdx, 1);                                   //    adc edx, 1
    __ adcl(rdx, 16);                                  //    adc edx, 16
    __ adcl(rdx, 256);                                 //    adc edx, 256
    __ adcl(rdx, 4096);                                //    adc edx, 4096
    __ adcl(rdx, 65536);                               //    adc edx, 65536
    __ adcl(rdx, 1048576);                             //    adc edx, 1048576
    __ adcl(rdx, 16777216);                            //    adc edx, 16777216
    __ adcl(rdx, 268435456);                           //    adc edx, 268435456
    __ adcl(rbx, 1);                                   //    adc ebx, 1
    __ adcl(rbx, 16);                                  //    adc ebx, 16
    __ adcl(rbx, 256);                                 //    adc ebx, 256
    __ adcl(rbx, 4096);                                //    adc ebx, 4096
    __ adcl(rbx, 65536);                               //    adc ebx, 65536
    __ adcl(rbx, 1048576);                             //    adc ebx, 1048576
    __ adcl(rbx, 16777216);                            //    adc ebx, 16777216
    __ adcl(rbx, 268435456);                           //    adc ebx, 268435456
#ifdef _LP64
    __ adcl(r8, 1);                                    //    adc r8d, 1
    __ adcl(r8, 16);                                   //    adc r8d, 16
    __ adcl(r8, 256);                                  //    adc r8d, 256
    __ adcl(r8, 4096);                                 //    adc r8d, 4096
    __ adcl(r8, 65536);                                //    adc r8d, 65536
    __ adcl(r8, 1048576);                              //    adc r8d, 1048576
    __ adcl(r8, 16777216);                             //    adc r8d, 16777216
    __ adcl(r8, 268435456);                            //    adc r8d, 268435456
    __ adcl(r9, 1);                                    //    adc r9d, 1
    __ adcl(r9, 16);                                   //    adc r9d, 16
    __ adcl(r9, 256);                                  //    adc r9d, 256
    __ adcl(r9, 4096);                                 //    adc r9d, 4096
    __ adcl(r9, 65536);                                //    adc r9d, 65536
    __ adcl(r9, 1048576);                              //    adc r9d, 1048576
    __ adcl(r9, 16777216);                             //    adc r9d, 16777216
    __ adcl(r9, 268435456);                            //    adc r9d, 268435456
    __ adcl(r10, 1);                                   //    adc r10d, 1
    __ adcl(r10, 16);                                  //    adc r10d, 16
    __ adcl(r10, 256);                                 //    adc r10d, 256
    __ adcl(r10, 4096);                                //    adc r10d, 4096
    __ adcl(r10, 65536);                               //    adc r10d, 65536
    __ adcl(r10, 1048576);                             //    adc r10d, 1048576
    __ adcl(r10, 16777216);                            //    adc r10d, 16777216
    __ adcl(r10, 268435456);                           //    adc r10d, 268435456
    __ adcl(r11, 1);                                   //    adc r11d, 1
    __ adcl(r11, 16);                                  //    adc r11d, 16
    __ adcl(r11, 256);                                 //    adc r11d, 256
    __ adcl(r11, 4096);                                //    adc r11d, 4096
    __ adcl(r11, 65536);                               //    adc r11d, 65536
    __ adcl(r11, 1048576);                             //    adc r11d, 1048576
    __ adcl(r11, 16777216);                            //    adc r11d, 16777216
    __ adcl(r11, 268435456);                           //    adc r11d, 268435456
    __ adcl(r12, 1);                                   //    adc r12d, 1
    __ adcl(r12, 16);                                  //    adc r12d, 16
    __ adcl(r12, 256);                                 //    adc r12d, 256
    __ adcl(r12, 4096);                                //    adc r12d, 4096
    __ adcl(r12, 65536);                               //    adc r12d, 65536
    __ adcl(r12, 1048576);                             //    adc r12d, 1048576
    __ adcl(r12, 16777216);                            //    adc r12d, 16777216
    __ adcl(r12, 268435456);                           //    adc r12d, 268435456
    __ adcl(r13, 1);                                   //    adc r13d, 1
    __ adcl(r13, 16);                                  //    adc r13d, 16
    __ adcl(r13, 256);                                 //    adc r13d, 256
    __ adcl(r13, 4096);                                //    adc r13d, 4096
    __ adcl(r13, 65536);                               //    adc r13d, 65536
    __ adcl(r13, 1048576);                             //    adc r13d, 1048576
    __ adcl(r13, 16777216);                            //    adc r13d, 16777216
    __ adcl(r13, 268435456);                           //    adc r13d, 268435456
    __ adcl(r14, 1);                                   //    adc r14d, 1
    __ adcl(r14, 16);                                  //    adc r14d, 16
    __ adcl(r14, 256);                                 //    adc r14d, 256
    __ adcl(r14, 4096);                                //    adc r14d, 4096
    __ adcl(r14, 65536);                               //    adc r14d, 65536
    __ adcl(r14, 1048576);                             //    adc r14d, 1048576
    __ adcl(r14, 16777216);                            //    adc r14d, 16777216
    __ adcl(r14, 268435456);                           //    adc r14d, 268435456
    __ adcl(r15, 1);                                   //    adc r15d, 1
    __ adcl(r15, 16);                                  //    adc r15d, 16
    __ adcl(r15, 256);                                 //    adc r15d, 256
    __ adcl(r15, 4096);                                //    adc r15d, 4096
    __ adcl(r15, 65536);                               //    adc r15d, 65536
    __ adcl(r15, 1048576);                             //    adc r15d, 1048576
    __ adcl(r15, 16777216);                            //    adc r15d, 16777216
    __ adcl(r15, 268435456);                           //    adc r15d, 268435456
    __ adcl(r16, 1);                                   //    adc r16d, 1
    __ adcl(r16, 16);                                  //    adc r16d, 16
    __ adcl(r16, 256);                                 //    adc r16d, 256
    __ adcl(r16, 4096);                                //    adc r16d, 4096
    __ adcl(r16, 65536);                               //    adc r16d, 65536
    __ adcl(r16, 1048576);                             //    adc r16d, 1048576
    __ adcl(r16, 16777216);                            //    adc r16d, 16777216
    __ adcl(r16, 268435456);                           //    adc r16d, 268435456
    __ adcl(r17, 1);                                   //    adc r17d, 1
    __ adcl(r17, 16);                                  //    adc r17d, 16
    __ adcl(r17, 256);                                 //    adc r17d, 256
    __ adcl(r17, 4096);                                //    adc r17d, 4096
    __ adcl(r17, 65536);                               //    adc r17d, 65536
    __ adcl(r17, 1048576);                             //    adc r17d, 1048576
    __ adcl(r17, 16777216);                            //    adc r17d, 16777216
    __ adcl(r17, 268435456);                           //    adc r17d, 268435456
    __ adcl(r18, 1);                                   //    adc r18d, 1
    __ adcl(r18, 16);                                  //    adc r18d, 16
    __ adcl(r18, 256);                                 //    adc r18d, 256
    __ adcl(r18, 4096);                                //    adc r18d, 4096
    __ adcl(r18, 65536);                               //    adc r18d, 65536
    __ adcl(r18, 1048576);                             //    adc r18d, 1048576
    __ adcl(r18, 16777216);                            //    adc r18d, 16777216
    __ adcl(r18, 268435456);                           //    adc r18d, 268435456
    __ adcl(r19, 1);                                   //    adc r19d, 1
    __ adcl(r19, 16);                                  //    adc r19d, 16
    __ adcl(r19, 256);                                 //    adc r19d, 256
    __ adcl(r19, 4096);                                //    adc r19d, 4096
    __ adcl(r19, 65536);                               //    adc r19d, 65536
    __ adcl(r19, 1048576);                             //    adc r19d, 1048576
    __ adcl(r19, 16777216);                            //    adc r19d, 16777216
    __ adcl(r19, 268435456);                           //    adc r19d, 268435456
    __ adcl(r20, 1);                                   //    adc r20d, 1
    __ adcl(r20, 16);                                  //    adc r20d, 16
    __ adcl(r20, 256);                                 //    adc r20d, 256
    __ adcl(r20, 4096);                                //    adc r20d, 4096
    __ adcl(r20, 65536);                               //    adc r20d, 65536
    __ adcl(r20, 1048576);                             //    adc r20d, 1048576
    __ adcl(r20, 16777216);                            //    adc r20d, 16777216
    __ adcl(r20, 268435456);                           //    adc r20d, 268435456
    __ adcl(r21, 1);                                   //    adc r21d, 1
    __ adcl(r21, 16);                                  //    adc r21d, 16
    __ adcl(r21, 256);                                 //    adc r21d, 256
    __ adcl(r21, 4096);                                //    adc r21d, 4096
    __ adcl(r21, 65536);                               //    adc r21d, 65536
    __ adcl(r21, 1048576);                             //    adc r21d, 1048576
    __ adcl(r21, 16777216);                            //    adc r21d, 16777216
    __ adcl(r21, 268435456);                           //    adc r21d, 268435456
    __ adcl(r22, 1);                                   //    adc r22d, 1
    __ adcl(r22, 16);                                  //    adc r22d, 16
    __ adcl(r22, 256);                                 //    adc r22d, 256
    __ adcl(r22, 4096);                                //    adc r22d, 4096
    __ adcl(r22, 65536);                               //    adc r22d, 65536
    __ adcl(r22, 1048576);                             //    adc r22d, 1048576
    __ adcl(r22, 16777216);                            //    adc r22d, 16777216
    __ adcl(r22, 268435456);                           //    adc r22d, 268435456
    __ adcl(r23, 1);                                   //    adc r23d, 1
    __ adcl(r23, 16);                                  //    adc r23d, 16
    __ adcl(r23, 256);                                 //    adc r23d, 256
    __ adcl(r23, 4096);                                //    adc r23d, 4096
    __ adcl(r23, 65536);                               //    adc r23d, 65536
    __ adcl(r23, 1048576);                             //    adc r23d, 1048576
    __ adcl(r23, 16777216);                            //    adc r23d, 16777216
    __ adcl(r23, 268435456);                           //    adc r23d, 268435456
    __ adcl(r24, 1);                                   //    adc r24d, 1
    __ adcl(r24, 16);                                  //    adc r24d, 16
    __ adcl(r24, 256);                                 //    adc r24d, 256
    __ adcl(r24, 4096);                                //    adc r24d, 4096
    __ adcl(r24, 65536);                               //    adc r24d, 65536
    __ adcl(r24, 1048576);                             //    adc r24d, 1048576
    __ adcl(r24, 16777216);                            //    adc r24d, 16777216
    __ adcl(r24, 268435456);                           //    adc r24d, 268435456
    __ adcl(r25, 1);                                   //    adc r25d, 1
    __ adcl(r25, 16);                                  //    adc r25d, 16
    __ adcl(r25, 256);                                 //    adc r25d, 256
    __ adcl(r25, 4096);                                //    adc r25d, 4096
    __ adcl(r25, 65536);                               //    adc r25d, 65536
    __ adcl(r25, 1048576);                             //    adc r25d, 1048576
    __ adcl(r25, 16777216);                            //    adc r25d, 16777216
    __ adcl(r25, 268435456);                           //    adc r25d, 268435456
    __ adcl(r26, 1);                                   //    adc r26d, 1
    __ adcl(r26, 16);                                  //    adc r26d, 16
    __ adcl(r26, 256);                                 //    adc r26d, 256
    __ adcl(r26, 4096);                                //    adc r26d, 4096
    __ adcl(r26, 65536);                               //    adc r26d, 65536
    __ adcl(r26, 1048576);                             //    adc r26d, 1048576
    __ adcl(r26, 16777216);                            //    adc r26d, 16777216
    __ adcl(r26, 268435456);                           //    adc r26d, 268435456
    __ adcl(r27, 1);                                   //    adc r27d, 1
    __ adcl(r27, 16);                                  //    adc r27d, 16
    __ adcl(r27, 256);                                 //    adc r27d, 256
    __ adcl(r27, 4096);                                //    adc r27d, 4096
    __ adcl(r27, 65536);                               //    adc r27d, 65536
    __ adcl(r27, 1048576);                             //    adc r27d, 1048576
    __ adcl(r27, 16777216);                            //    adc r27d, 16777216
    __ adcl(r27, 268435456);                           //    adc r27d, 268435456
    __ adcl(r28, 1);                                   //    adc r28d, 1
    __ adcl(r28, 16);                                  //    adc r28d, 16
    __ adcl(r28, 256);                                 //    adc r28d, 256
    __ adcl(r28, 4096);                                //    adc r28d, 4096
    __ adcl(r28, 65536);                               //    adc r28d, 65536
    __ adcl(r28, 1048576);                             //    adc r28d, 1048576
    __ adcl(r28, 16777216);                            //    adc r28d, 16777216
    __ adcl(r28, 268435456);                           //    adc r28d, 268435456
    __ adcl(r29, 1);                                   //    adc r29d, 1
    __ adcl(r29, 16);                                  //    adc r29d, 16
    __ adcl(r29, 256);                                 //    adc r29d, 256
    __ adcl(r29, 4096);                                //    adc r29d, 4096
    __ adcl(r29, 65536);                               //    adc r29d, 65536
    __ adcl(r29, 1048576);                             //    adc r29d, 1048576
    __ adcl(r29, 16777216);                            //    adc r29d, 16777216
    __ adcl(r29, 268435456);                           //    adc r29d, 268435456
    __ adcl(r30, 1);                                   //    adc r30d, 1
    __ adcl(r30, 16);                                  //    adc r30d, 16
    __ adcl(r30, 256);                                 //    adc r30d, 256
    __ adcl(r30, 4096);                                //    adc r30d, 4096
    __ adcl(r30, 65536);                               //    adc r30d, 65536
    __ adcl(r30, 1048576);                             //    adc r30d, 1048576
    __ adcl(r30, 16777216);                            //    adc r30d, 16777216
    __ adcl(r30, 268435456);                           //    adc r30d, 268435456
    __ adcl(r31, 1);                                   //    adc r31d, 1
    __ adcl(r31, 16);                                  //    adc r31d, 16
    __ adcl(r31, 256);                                 //    adc r31d, 256
    __ adcl(r31, 4096);                                //    adc r31d, 4096
    __ adcl(r31, 65536);                               //    adc r31d, 65536
    __ adcl(r31, 1048576);                             //    adc r31d, 1048576
    __ adcl(r31, 16777216);                            //    adc r31d, 16777216
    __ adcl(r31, 268435456);                           //    adc r31d, 268435456
#endif // _LP64
    __ rcll(rcx, 1);                                   //    rcl ecx, 1
    __ rcll(rcx, 2);                                   //    rcl ecx, 2
    __ rcll(rcx, 4);                                   //    rcl ecx, 4
    __ rcll(rcx, 8);                                   //    rcl ecx, 8
    __ rcll(rcx, 16);                                  //    rcl ecx, 16
    __ rcll(rdx, 1);                                   //    rcl edx, 1
    __ rcll(rdx, 2);                                   //    rcl edx, 2
    __ rcll(rdx, 4);                                   //    rcl edx, 4
    __ rcll(rdx, 8);                                   //    rcl edx, 8
    __ rcll(rdx, 16);                                  //    rcl edx, 16
    __ rcll(rbx, 1);                                   //    rcl ebx, 1
    __ rcll(rbx, 2);                                   //    rcl ebx, 2
    __ rcll(rbx, 4);                                   //    rcl ebx, 4
    __ rcll(rbx, 8);                                   //    rcl ebx, 8
    __ rcll(rbx, 16);                                  //    rcl ebx, 16
#ifdef _LP64
    __ rcll(r8, 1);                                    //    rcl r8d, 1
    __ rcll(r8, 2);                                    //    rcl r8d, 2
    __ rcll(r8, 4);                                    //    rcl r8d, 4
    __ rcll(r8, 8);                                    //    rcl r8d, 8
    __ rcll(r8, 16);                                   //    rcl r8d, 16
    __ rcll(r9, 1);                                    //    rcl r9d, 1
    __ rcll(r9, 2);                                    //    rcl r9d, 2
    __ rcll(r9, 4);                                    //    rcl r9d, 4
    __ rcll(r9, 8);                                    //    rcl r9d, 8
    __ rcll(r9, 16);                                   //    rcl r9d, 16
    __ rcll(r10, 1);                                   //    rcl r10d, 1
    __ rcll(r10, 2);                                   //    rcl r10d, 2
    __ rcll(r10, 4);                                   //    rcl r10d, 4
    __ rcll(r10, 8);                                   //    rcl r10d, 8
    __ rcll(r10, 16);                                  //    rcl r10d, 16
    __ rcll(r11, 1);                                   //    rcl r11d, 1
    __ rcll(r11, 2);                                   //    rcl r11d, 2
    __ rcll(r11, 4);                                   //    rcl r11d, 4
    __ rcll(r11, 8);                                   //    rcl r11d, 8
    __ rcll(r11, 16);                                  //    rcl r11d, 16
    __ rcll(r12, 1);                                   //    rcl r12d, 1
    __ rcll(r12, 2);                                   //    rcl r12d, 2
    __ rcll(r12, 4);                                   //    rcl r12d, 4
    __ rcll(r12, 8);                                   //    rcl r12d, 8
    __ rcll(r12, 16);                                  //    rcl r12d, 16
    __ rcll(r13, 1);                                   //    rcl r13d, 1
    __ rcll(r13, 2);                                   //    rcl r13d, 2
    __ rcll(r13, 4);                                   //    rcl r13d, 4
    __ rcll(r13, 8);                                   //    rcl r13d, 8
    __ rcll(r13, 16);                                  //    rcl r13d, 16
    __ rcll(r14, 1);                                   //    rcl r14d, 1
    __ rcll(r14, 2);                                   //    rcl r14d, 2
    __ rcll(r14, 4);                                   //    rcl r14d, 4
    __ rcll(r14, 8);                                   //    rcl r14d, 8
    __ rcll(r14, 16);                                  //    rcl r14d, 16
    __ rcll(r15, 1);                                   //    rcl r15d, 1
    __ rcll(r15, 2);                                   //    rcl r15d, 2
    __ rcll(r15, 4);                                   //    rcl r15d, 4
    __ rcll(r15, 8);                                   //    rcl r15d, 8
    __ rcll(r15, 16);                                  //    rcl r15d, 16
    __ rcll(r16, 1);                                   //    rcl r16d, 1
    __ rcll(r16, 2);                                   //    rcl r16d, 2
    __ rcll(r16, 4);                                   //    rcl r16d, 4
    __ rcll(r16, 8);                                   //    rcl r16d, 8
    __ rcll(r16, 16);                                  //    rcl r16d, 16
    __ rcll(r17, 1);                                   //    rcl r17d, 1
    __ rcll(r17, 2);                                   //    rcl r17d, 2
    __ rcll(r17, 4);                                   //    rcl r17d, 4
    __ rcll(r17, 8);                                   //    rcl r17d, 8
    __ rcll(r17, 16);                                  //    rcl r17d, 16
    __ rcll(r18, 1);                                   //    rcl r18d, 1
    __ rcll(r18, 2);                                   //    rcl r18d, 2
    __ rcll(r18, 4);                                   //    rcl r18d, 4
    __ rcll(r18, 8);                                   //    rcl r18d, 8
    __ rcll(r18, 16);                                  //    rcl r18d, 16
    __ rcll(r19, 1);                                   //    rcl r19d, 1
    __ rcll(r19, 2);                                   //    rcl r19d, 2
    __ rcll(r19, 4);                                   //    rcl r19d, 4
    __ rcll(r19, 8);                                   //    rcl r19d, 8
    __ rcll(r19, 16);                                  //    rcl r19d, 16
    __ rcll(r20, 1);                                   //    rcl r20d, 1
    __ rcll(r20, 2);                                   //    rcl r20d, 2
    __ rcll(r20, 4);                                   //    rcl r20d, 4
    __ rcll(r20, 8);                                   //    rcl r20d, 8
    __ rcll(r20, 16);                                  //    rcl r20d, 16
    __ rcll(r21, 1);                                   //    rcl r21d, 1
    __ rcll(r21, 2);                                   //    rcl r21d, 2
    __ rcll(r21, 4);                                   //    rcl r21d, 4
    __ rcll(r21, 8);                                   //    rcl r21d, 8
    __ rcll(r21, 16);                                  //    rcl r21d, 16
    __ rcll(r22, 1);                                   //    rcl r22d, 1
    __ rcll(r22, 2);                                   //    rcl r22d, 2
    __ rcll(r22, 4);                                   //    rcl r22d, 4
    __ rcll(r22, 8);                                   //    rcl r22d, 8
    __ rcll(r22, 16);                                  //    rcl r22d, 16
    __ rcll(r23, 1);                                   //    rcl r23d, 1
    __ rcll(r23, 2);                                   //    rcl r23d, 2
    __ rcll(r23, 4);                                   //    rcl r23d, 4
    __ rcll(r23, 8);                                   //    rcl r23d, 8
    __ rcll(r23, 16);                                  //    rcl r23d, 16
    __ rcll(r24, 1);                                   //    rcl r24d, 1
    __ rcll(r24, 2);                                   //    rcl r24d, 2
    __ rcll(r24, 4);                                   //    rcl r24d, 4
    __ rcll(r24, 8);                                   //    rcl r24d, 8
    __ rcll(r24, 16);                                  //    rcl r24d, 16
    __ rcll(r25, 1);                                   //    rcl r25d, 1
    __ rcll(r25, 2);                                   //    rcl r25d, 2
    __ rcll(r25, 4);                                   //    rcl r25d, 4
    __ rcll(r25, 8);                                   //    rcl r25d, 8
    __ rcll(r25, 16);                                  //    rcl r25d, 16
    __ rcll(r26, 1);                                   //    rcl r26d, 1
    __ rcll(r26, 2);                                   //    rcl r26d, 2
    __ rcll(r26, 4);                                   //    rcl r26d, 4
    __ rcll(r26, 8);                                   //    rcl r26d, 8
    __ rcll(r26, 16);                                  //    rcl r26d, 16
    __ rcll(r27, 1);                                   //    rcl r27d, 1
    __ rcll(r27, 2);                                   //    rcl r27d, 2
    __ rcll(r27, 4);                                   //    rcl r27d, 4
    __ rcll(r27, 8);                                   //    rcl r27d, 8
    __ rcll(r27, 16);                                  //    rcl r27d, 16
    __ rcll(r28, 1);                                   //    rcl r28d, 1
    __ rcll(r28, 2);                                   //    rcl r28d, 2
    __ rcll(r28, 4);                                   //    rcl r28d, 4
    __ rcll(r28, 8);                                   //    rcl r28d, 8
    __ rcll(r28, 16);                                  //    rcl r28d, 16
    __ rcll(r29, 1);                                   //    rcl r29d, 1
    __ rcll(r29, 2);                                   //    rcl r29d, 2
    __ rcll(r29, 4);                                   //    rcl r29d, 4
    __ rcll(r29, 8);                                   //    rcl r29d, 8
    __ rcll(r29, 16);                                  //    rcl r29d, 16
    __ rcll(r30, 1);                                   //    rcl r30d, 1
    __ rcll(r30, 2);                                   //    rcl r30d, 2
    __ rcll(r30, 4);                                   //    rcl r30d, 4
    __ rcll(r30, 8);                                   //    rcl r30d, 8
    __ rcll(r30, 16);                                  //    rcl r30d, 16
    __ rcll(r31, 1);                                   //    rcl r31d, 1
    __ rcll(r31, 2);                                   //    rcl r31d, 2
    __ rcll(r31, 4);                                   //    rcl r31d, 4
    __ rcll(r31, 8);                                   //    rcl r31d, 8
    __ rcll(r31, 16);                                  //    rcl r31d, 16
#endif // _LP64
    __ roll(rcx, 1);                                   //    rol ecx, 1
    __ roll(rcx, 2);                                   //    rol ecx, 2
    __ roll(rcx, 4);                                   //    rol ecx, 4
    __ roll(rcx, 8);                                   //    rol ecx, 8
    __ roll(rcx, 16);                                  //    rol ecx, 16
    __ roll(rdx, 1);                                   //    rol edx, 1
    __ roll(rdx, 2);                                   //    rol edx, 2
    __ roll(rdx, 4);                                   //    rol edx, 4
    __ roll(rdx, 8);                                   //    rol edx, 8
    __ roll(rdx, 16);                                  //    rol edx, 16
    __ roll(rbx, 1);                                   //    rol ebx, 1
    __ roll(rbx, 2);                                   //    rol ebx, 2
    __ roll(rbx, 4);                                   //    rol ebx, 4
    __ roll(rbx, 8);                                   //    rol ebx, 8
    __ roll(rbx, 16);                                  //    rol ebx, 16
#ifdef _LP64
    __ roll(r8, 1);                                    //    rol r8d, 1
    __ roll(r8, 2);                                    //    rol r8d, 2
    __ roll(r8, 4);                                    //    rol r8d, 4
    __ roll(r8, 8);                                    //    rol r8d, 8
    __ roll(r8, 16);                                   //    rol r8d, 16
    __ roll(r9, 1);                                    //    rol r9d, 1
    __ roll(r9, 2);                                    //    rol r9d, 2
    __ roll(r9, 4);                                    //    rol r9d, 4
    __ roll(r9, 8);                                    //    rol r9d, 8
    __ roll(r9, 16);                                   //    rol r9d, 16
    __ roll(r10, 1);                                   //    rol r10d, 1
    __ roll(r10, 2);                                   //    rol r10d, 2
    __ roll(r10, 4);                                   //    rol r10d, 4
    __ roll(r10, 8);                                   //    rol r10d, 8
    __ roll(r10, 16);                                  //    rol r10d, 16
    __ roll(r11, 1);                                   //    rol r11d, 1
    __ roll(r11, 2);                                   //    rol r11d, 2
    __ roll(r11, 4);                                   //    rol r11d, 4
    __ roll(r11, 8);                                   //    rol r11d, 8
    __ roll(r11, 16);                                  //    rol r11d, 16
    __ roll(r12, 1);                                   //    rol r12d, 1
    __ roll(r12, 2);                                   //    rol r12d, 2
    __ roll(r12, 4);                                   //    rol r12d, 4
    __ roll(r12, 8);                                   //    rol r12d, 8
    __ roll(r12, 16);                                  //    rol r12d, 16
    __ roll(r13, 1);                                   //    rol r13d, 1
    __ roll(r13, 2);                                   //    rol r13d, 2
    __ roll(r13, 4);                                   //    rol r13d, 4
    __ roll(r13, 8);                                   //    rol r13d, 8
    __ roll(r13, 16);                                  //    rol r13d, 16
    __ roll(r14, 1);                                   //    rol r14d, 1
    __ roll(r14, 2);                                   //    rol r14d, 2
    __ roll(r14, 4);                                   //    rol r14d, 4
    __ roll(r14, 8);                                   //    rol r14d, 8
    __ roll(r14, 16);                                  //    rol r14d, 16
    __ roll(r15, 1);                                   //    rol r15d, 1
    __ roll(r15, 2);                                   //    rol r15d, 2
    __ roll(r15, 4);                                   //    rol r15d, 4
    __ roll(r15, 8);                                   //    rol r15d, 8
    __ roll(r15, 16);                                  //    rol r15d, 16
    __ roll(r16, 1);                                   //    rol r16d, 1
    __ roll(r16, 2);                                   //    rol r16d, 2
    __ roll(r16, 4);                                   //    rol r16d, 4
    __ roll(r16, 8);                                   //    rol r16d, 8
    __ roll(r16, 16);                                  //    rol r16d, 16
    __ roll(r17, 1);                                   //    rol r17d, 1
    __ roll(r17, 2);                                   //    rol r17d, 2
    __ roll(r17, 4);                                   //    rol r17d, 4
    __ roll(r17, 8);                                   //    rol r17d, 8
    __ roll(r17, 16);                                  //    rol r17d, 16
    __ roll(r18, 1);                                   //    rol r18d, 1
    __ roll(r18, 2);                                   //    rol r18d, 2
    __ roll(r18, 4);                                   //    rol r18d, 4
    __ roll(r18, 8);                                   //    rol r18d, 8
    __ roll(r18, 16);                                  //    rol r18d, 16
    __ roll(r19, 1);                                   //    rol r19d, 1
    __ roll(r19, 2);                                   //    rol r19d, 2
    __ roll(r19, 4);                                   //    rol r19d, 4
    __ roll(r19, 8);                                   //    rol r19d, 8
    __ roll(r19, 16);                                  //    rol r19d, 16
    __ roll(r20, 1);                                   //    rol r20d, 1
    __ roll(r20, 2);                                   //    rol r20d, 2
    __ roll(r20, 4);                                   //    rol r20d, 4
    __ roll(r20, 8);                                   //    rol r20d, 8
    __ roll(r20, 16);                                  //    rol r20d, 16
    __ roll(r21, 1);                                   //    rol r21d, 1
    __ roll(r21, 2);                                   //    rol r21d, 2
    __ roll(r21, 4);                                   //    rol r21d, 4
    __ roll(r21, 8);                                   //    rol r21d, 8
    __ roll(r21, 16);                                  //    rol r21d, 16
    __ roll(r22, 1);                                   //    rol r22d, 1
    __ roll(r22, 2);                                   //    rol r22d, 2
    __ roll(r22, 4);                                   //    rol r22d, 4
    __ roll(r22, 8);                                   //    rol r22d, 8
    __ roll(r22, 16);                                  //    rol r22d, 16
    __ roll(r23, 1);                                   //    rol r23d, 1
    __ roll(r23, 2);                                   //    rol r23d, 2
    __ roll(r23, 4);                                   //    rol r23d, 4
    __ roll(r23, 8);                                   //    rol r23d, 8
    __ roll(r23, 16);                                  //    rol r23d, 16
    __ roll(r24, 1);                                   //    rol r24d, 1
    __ roll(r24, 2);                                   //    rol r24d, 2
    __ roll(r24, 4);                                   //    rol r24d, 4
    __ roll(r24, 8);                                   //    rol r24d, 8
    __ roll(r24, 16);                                  //    rol r24d, 16
    __ roll(r25, 1);                                   //    rol r25d, 1
    __ roll(r25, 2);                                   //    rol r25d, 2
    __ roll(r25, 4);                                   //    rol r25d, 4
    __ roll(r25, 8);                                   //    rol r25d, 8
    __ roll(r25, 16);                                  //    rol r25d, 16
    __ roll(r26, 1);                                   //    rol r26d, 1
    __ roll(r26, 2);                                   //    rol r26d, 2
    __ roll(r26, 4);                                   //    rol r26d, 4
    __ roll(r26, 8);                                   //    rol r26d, 8
    __ roll(r26, 16);                                  //    rol r26d, 16
    __ roll(r27, 1);                                   //    rol r27d, 1
    __ roll(r27, 2);                                   //    rol r27d, 2
    __ roll(r27, 4);                                   //    rol r27d, 4
    __ roll(r27, 8);                                   //    rol r27d, 8
    __ roll(r27, 16);                                  //    rol r27d, 16
    __ roll(r28, 1);                                   //    rol r28d, 1
    __ roll(r28, 2);                                   //    rol r28d, 2
    __ roll(r28, 4);                                   //    rol r28d, 4
    __ roll(r28, 8);                                   //    rol r28d, 8
    __ roll(r28, 16);                                  //    rol r28d, 16
    __ roll(r29, 1);                                   //    rol r29d, 1
    __ roll(r29, 2);                                   //    rol r29d, 2
    __ roll(r29, 4);                                   //    rol r29d, 4
    __ roll(r29, 8);                                   //    rol r29d, 8
    __ roll(r29, 16);                                  //    rol r29d, 16
    __ roll(r30, 1);                                   //    rol r30d, 1
    __ roll(r30, 2);                                   //    rol r30d, 2
    __ roll(r30, 4);                                   //    rol r30d, 4
    __ roll(r30, 8);                                   //    rol r30d, 8
    __ roll(r30, 16);                                  //    rol r30d, 16
    __ roll(r31, 1);                                   //    rol r31d, 1
    __ roll(r31, 2);                                   //    rol r31d, 2
    __ roll(r31, 4);                                   //    rol r31d, 4
    __ roll(r31, 8);                                   //    rol r31d, 8
    __ roll(r31, 16);                                  //    rol r31d, 16
#endif // _LP64
    __ rorl(rcx, 1);                                   //    ror ecx, 1
    __ rorl(rcx, 2);                                   //    ror ecx, 2
    __ rorl(rcx, 4);                                   //    ror ecx, 4
    __ rorl(rcx, 8);                                   //    ror ecx, 8
    __ rorl(rcx, 16);                                  //    ror ecx, 16
    __ rorl(rdx, 1);                                   //    ror edx, 1
    __ rorl(rdx, 2);                                   //    ror edx, 2
    __ rorl(rdx, 4);                                   //    ror edx, 4
    __ rorl(rdx, 8);                                   //    ror edx, 8
    __ rorl(rdx, 16);                                  //    ror edx, 16
    __ rorl(rbx, 1);                                   //    ror ebx, 1
    __ rorl(rbx, 2);                                   //    ror ebx, 2
    __ rorl(rbx, 4);                                   //    ror ebx, 4
    __ rorl(rbx, 8);                                   //    ror ebx, 8
    __ rorl(rbx, 16);                                  //    ror ebx, 16
#ifdef _LP64
    __ rorl(r8, 1);                                    //    ror r8d, 1
    __ rorl(r8, 2);                                    //    ror r8d, 2
    __ rorl(r8, 4);                                    //    ror r8d, 4
    __ rorl(r8, 8);                                    //    ror r8d, 8
    __ rorl(r8, 16);                                   //    ror r8d, 16
    __ rorl(r9, 1);                                    //    ror r9d, 1
    __ rorl(r9, 2);                                    //    ror r9d, 2
    __ rorl(r9, 4);                                    //    ror r9d, 4
    __ rorl(r9, 8);                                    //    ror r9d, 8
    __ rorl(r9, 16);                                   //    ror r9d, 16
    __ rorl(r10, 1);                                   //    ror r10d, 1
    __ rorl(r10, 2);                                   //    ror r10d, 2
    __ rorl(r10, 4);                                   //    ror r10d, 4
    __ rorl(r10, 8);                                   //    ror r10d, 8
    __ rorl(r10, 16);                                  //    ror r10d, 16
    __ rorl(r11, 1);                                   //    ror r11d, 1
    __ rorl(r11, 2);                                   //    ror r11d, 2
    __ rorl(r11, 4);                                   //    ror r11d, 4
    __ rorl(r11, 8);                                   //    ror r11d, 8
    __ rorl(r11, 16);                                  //    ror r11d, 16
    __ rorl(r12, 1);                                   //    ror r12d, 1
    __ rorl(r12, 2);                                   //    ror r12d, 2
    __ rorl(r12, 4);                                   //    ror r12d, 4
    __ rorl(r12, 8);                                   //    ror r12d, 8
    __ rorl(r12, 16);                                  //    ror r12d, 16
    __ rorl(r13, 1);                                   //    ror r13d, 1
    __ rorl(r13, 2);                                   //    ror r13d, 2
    __ rorl(r13, 4);                                   //    ror r13d, 4
    __ rorl(r13, 8);                                   //    ror r13d, 8
    __ rorl(r13, 16);                                  //    ror r13d, 16
    __ rorl(r14, 1);                                   //    ror r14d, 1
    __ rorl(r14, 2);                                   //    ror r14d, 2
    __ rorl(r14, 4);                                   //    ror r14d, 4
    __ rorl(r14, 8);                                   //    ror r14d, 8
    __ rorl(r14, 16);                                  //    ror r14d, 16
    __ rorl(r15, 1);                                   //    ror r15d, 1
    __ rorl(r15, 2);                                   //    ror r15d, 2
    __ rorl(r15, 4);                                   //    ror r15d, 4
    __ rorl(r15, 8);                                   //    ror r15d, 8
    __ rorl(r15, 16);                                  //    ror r15d, 16
    __ rorl(r16, 1);                                   //    ror r16d, 1
    __ rorl(r16, 2);                                   //    ror r16d, 2
    __ rorl(r16, 4);                                   //    ror r16d, 4
    __ rorl(r16, 8);                                   //    ror r16d, 8
    __ rorl(r16, 16);                                  //    ror r16d, 16
    __ rorl(r17, 1);                                   //    ror r17d, 1
    __ rorl(r17, 2);                                   //    ror r17d, 2
    __ rorl(r17, 4);                                   //    ror r17d, 4
    __ rorl(r17, 8);                                   //    ror r17d, 8
    __ rorl(r17, 16);                                  //    ror r17d, 16
    __ rorl(r18, 1);                                   //    ror r18d, 1
    __ rorl(r18, 2);                                   //    ror r18d, 2
    __ rorl(r18, 4);                                   //    ror r18d, 4
    __ rorl(r18, 8);                                   //    ror r18d, 8
    __ rorl(r18, 16);                                  //    ror r18d, 16
    __ rorl(r19, 1);                                   //    ror r19d, 1
    __ rorl(r19, 2);                                   //    ror r19d, 2
    __ rorl(r19, 4);                                   //    ror r19d, 4
    __ rorl(r19, 8);                                   //    ror r19d, 8
    __ rorl(r19, 16);                                  //    ror r19d, 16
    __ rorl(r20, 1);                                   //    ror r20d, 1
    __ rorl(r20, 2);                                   //    ror r20d, 2
    __ rorl(r20, 4);                                   //    ror r20d, 4
    __ rorl(r20, 8);                                   //    ror r20d, 8
    __ rorl(r20, 16);                                  //    ror r20d, 16
    __ rorl(r21, 1);                                   //    ror r21d, 1
    __ rorl(r21, 2);                                   //    ror r21d, 2
    __ rorl(r21, 4);                                   //    ror r21d, 4
    __ rorl(r21, 8);                                   //    ror r21d, 8
    __ rorl(r21, 16);                                  //    ror r21d, 16
    __ rorl(r22, 1);                                   //    ror r22d, 1
    __ rorl(r22, 2);                                   //    ror r22d, 2
    __ rorl(r22, 4);                                   //    ror r22d, 4
    __ rorl(r22, 8);                                   //    ror r22d, 8
    __ rorl(r22, 16);                                  //    ror r22d, 16
    __ rorl(r23, 1);                                   //    ror r23d, 1
    __ rorl(r23, 2);                                   //    ror r23d, 2
    __ rorl(r23, 4);                                   //    ror r23d, 4
    __ rorl(r23, 8);                                   //    ror r23d, 8
    __ rorl(r23, 16);                                  //    ror r23d, 16
    __ rorl(r24, 1);                                   //    ror r24d, 1
    __ rorl(r24, 2);                                   //    ror r24d, 2
    __ rorl(r24, 4);                                   //    ror r24d, 4
    __ rorl(r24, 8);                                   //    ror r24d, 8
    __ rorl(r24, 16);                                  //    ror r24d, 16
    __ rorl(r25, 1);                                   //    ror r25d, 1
    __ rorl(r25, 2);                                   //    ror r25d, 2
    __ rorl(r25, 4);                                   //    ror r25d, 4
    __ rorl(r25, 8);                                   //    ror r25d, 8
    __ rorl(r25, 16);                                  //    ror r25d, 16
    __ rorl(r26, 1);                                   //    ror r26d, 1
    __ rorl(r26, 2);                                   //    ror r26d, 2
    __ rorl(r26, 4);                                   //    ror r26d, 4
    __ rorl(r26, 8);                                   //    ror r26d, 8
    __ rorl(r26, 16);                                  //    ror r26d, 16
    __ rorl(r27, 1);                                   //    ror r27d, 1
    __ rorl(r27, 2);                                   //    ror r27d, 2
    __ rorl(r27, 4);                                   //    ror r27d, 4
    __ rorl(r27, 8);                                   //    ror r27d, 8
    __ rorl(r27, 16);                                  //    ror r27d, 16
    __ rorl(r28, 1);                                   //    ror r28d, 1
    __ rorl(r28, 2);                                   //    ror r28d, 2
    __ rorl(r28, 4);                                   //    ror r28d, 4
    __ rorl(r28, 8);                                   //    ror r28d, 8
    __ rorl(r28, 16);                                  //    ror r28d, 16
    __ rorl(r29, 1);                                   //    ror r29d, 1
    __ rorl(r29, 2);                                   //    ror r29d, 2
    __ rorl(r29, 4);                                   //    ror r29d, 4
    __ rorl(r29, 8);                                   //    ror r29d, 8
    __ rorl(r29, 16);                                  //    ror r29d, 16
    __ rorl(r30, 1);                                   //    ror r30d, 1
    __ rorl(r30, 2);                                   //    ror r30d, 2
    __ rorl(r30, 4);                                   //    ror r30d, 4
    __ rorl(r30, 8);                                   //    ror r30d, 8
    __ rorl(r30, 16);                                  //    ror r30d, 16
    __ rorl(r31, 1);                                   //    ror r31d, 1
    __ rorl(r31, 2);                                   //    ror r31d, 2
    __ rorl(r31, 4);                                   //    ror r31d, 4
    __ rorl(r31, 8);                                   //    ror r31d, 8
    __ rorl(r31, 16);                                  //    ror r31d, 16
#endif // _LP64
    __ sarl(rcx, 1);                                   //    sar ecx, 1
    __ sarl(rcx, 2);                                   //    sar ecx, 2
    __ sarl(rcx, 4);                                   //    sar ecx, 4
    __ sarl(rcx, 8);                                   //    sar ecx, 8
    __ sarl(rcx, 16);                                  //    sar ecx, 16
    __ sarl(rdx, 1);                                   //    sar edx, 1
    __ sarl(rdx, 2);                                   //    sar edx, 2
    __ sarl(rdx, 4);                                   //    sar edx, 4
    __ sarl(rdx, 8);                                   //    sar edx, 8
    __ sarl(rdx, 16);                                  //    sar edx, 16
    __ sarl(rbx, 1);                                   //    sar ebx, 1
    __ sarl(rbx, 2);                                   //    sar ebx, 2
    __ sarl(rbx, 4);                                   //    sar ebx, 4
    __ sarl(rbx, 8);                                   //    sar ebx, 8
    __ sarl(rbx, 16);                                  //    sar ebx, 16
#ifdef _LP64
    __ sarl(r8, 1);                                    //    sar r8d, 1
    __ sarl(r8, 2);                                    //    sar r8d, 2
    __ sarl(r8, 4);                                    //    sar r8d, 4
    __ sarl(r8, 8);                                    //    sar r8d, 8
    __ sarl(r8, 16);                                   //    sar r8d, 16
    __ sarl(r9, 1);                                    //    sar r9d, 1
    __ sarl(r9, 2);                                    //    sar r9d, 2
    __ sarl(r9, 4);                                    //    sar r9d, 4
    __ sarl(r9, 8);                                    //    sar r9d, 8
    __ sarl(r9, 16);                                   //    sar r9d, 16
    __ sarl(r10, 1);                                   //    sar r10d, 1
    __ sarl(r10, 2);                                   //    sar r10d, 2
    __ sarl(r10, 4);                                   //    sar r10d, 4
    __ sarl(r10, 8);                                   //    sar r10d, 8
    __ sarl(r10, 16);                                  //    sar r10d, 16
    __ sarl(r11, 1);                                   //    sar r11d, 1
    __ sarl(r11, 2);                                   //    sar r11d, 2
    __ sarl(r11, 4);                                   //    sar r11d, 4
    __ sarl(r11, 8);                                   //    sar r11d, 8
    __ sarl(r11, 16);                                  //    sar r11d, 16
    __ sarl(r12, 1);                                   //    sar r12d, 1
    __ sarl(r12, 2);                                   //    sar r12d, 2
    __ sarl(r12, 4);                                   //    sar r12d, 4
    __ sarl(r12, 8);                                   //    sar r12d, 8
    __ sarl(r12, 16);                                  //    sar r12d, 16
    __ sarl(r13, 1);                                   //    sar r13d, 1
    __ sarl(r13, 2);                                   //    sar r13d, 2
    __ sarl(r13, 4);                                   //    sar r13d, 4
    __ sarl(r13, 8);                                   //    sar r13d, 8
    __ sarl(r13, 16);                                  //    sar r13d, 16
    __ sarl(r14, 1);                                   //    sar r14d, 1
    __ sarl(r14, 2);                                   //    sar r14d, 2
    __ sarl(r14, 4);                                   //    sar r14d, 4
    __ sarl(r14, 8);                                   //    sar r14d, 8
    __ sarl(r14, 16);                                  //    sar r14d, 16
    __ sarl(r15, 1);                                   //    sar r15d, 1
    __ sarl(r15, 2);                                   //    sar r15d, 2
    __ sarl(r15, 4);                                   //    sar r15d, 4
    __ sarl(r15, 8);                                   //    sar r15d, 8
    __ sarl(r15, 16);                                  //    sar r15d, 16
    __ sarl(r16, 1);                                   //    sar r16d, 1
    __ sarl(r16, 2);                                   //    sar r16d, 2
    __ sarl(r16, 4);                                   //    sar r16d, 4
    __ sarl(r16, 8);                                   //    sar r16d, 8
    __ sarl(r16, 16);                                  //    sar r16d, 16
    __ sarl(r17, 1);                                   //    sar r17d, 1
    __ sarl(r17, 2);                                   //    sar r17d, 2
    __ sarl(r17, 4);                                   //    sar r17d, 4
    __ sarl(r17, 8);                                   //    sar r17d, 8
    __ sarl(r17, 16);                                  //    sar r17d, 16
    __ sarl(r18, 1);                                   //    sar r18d, 1
    __ sarl(r18, 2);                                   //    sar r18d, 2
    __ sarl(r18, 4);                                   //    sar r18d, 4
    __ sarl(r18, 8);                                   //    sar r18d, 8
    __ sarl(r18, 16);                                  //    sar r18d, 16
    __ sarl(r19, 1);                                   //    sar r19d, 1
    __ sarl(r19, 2);                                   //    sar r19d, 2
    __ sarl(r19, 4);                                   //    sar r19d, 4
    __ sarl(r19, 8);                                   //    sar r19d, 8
    __ sarl(r19, 16);                                  //    sar r19d, 16
    __ sarl(r20, 1);                                   //    sar r20d, 1
    __ sarl(r20, 2);                                   //    sar r20d, 2
    __ sarl(r20, 4);                                   //    sar r20d, 4
    __ sarl(r20, 8);                                   //    sar r20d, 8
    __ sarl(r20, 16);                                  //    sar r20d, 16
    __ sarl(r21, 1);                                   //    sar r21d, 1
    __ sarl(r21, 2);                                   //    sar r21d, 2
    __ sarl(r21, 4);                                   //    sar r21d, 4
    __ sarl(r21, 8);                                   //    sar r21d, 8
    __ sarl(r21, 16);                                  //    sar r21d, 16
    __ sarl(r22, 1);                                   //    sar r22d, 1
    __ sarl(r22, 2);                                   //    sar r22d, 2
    __ sarl(r22, 4);                                   //    sar r22d, 4
    __ sarl(r22, 8);                                   //    sar r22d, 8
    __ sarl(r22, 16);                                  //    sar r22d, 16
    __ sarl(r23, 1);                                   //    sar r23d, 1
    __ sarl(r23, 2);                                   //    sar r23d, 2
    __ sarl(r23, 4);                                   //    sar r23d, 4
    __ sarl(r23, 8);                                   //    sar r23d, 8
    __ sarl(r23, 16);                                  //    sar r23d, 16
    __ sarl(r24, 1);                                   //    sar r24d, 1
    __ sarl(r24, 2);                                   //    sar r24d, 2
    __ sarl(r24, 4);                                   //    sar r24d, 4
    __ sarl(r24, 8);                                   //    sar r24d, 8
    __ sarl(r24, 16);                                  //    sar r24d, 16
    __ sarl(r25, 1);                                   //    sar r25d, 1
    __ sarl(r25, 2);                                   //    sar r25d, 2
    __ sarl(r25, 4);                                   //    sar r25d, 4
    __ sarl(r25, 8);                                   //    sar r25d, 8
    __ sarl(r25, 16);                                  //    sar r25d, 16
    __ sarl(r26, 1);                                   //    sar r26d, 1
    __ sarl(r26, 2);                                   //    sar r26d, 2
    __ sarl(r26, 4);                                   //    sar r26d, 4
    __ sarl(r26, 8);                                   //    sar r26d, 8
    __ sarl(r26, 16);                                  //    sar r26d, 16
    __ sarl(r27, 1);                                   //    sar r27d, 1
    __ sarl(r27, 2);                                   //    sar r27d, 2
    __ sarl(r27, 4);                                   //    sar r27d, 4
    __ sarl(r27, 8);                                   //    sar r27d, 8
    __ sarl(r27, 16);                                  //    sar r27d, 16
    __ sarl(r28, 1);                                   //    sar r28d, 1
    __ sarl(r28, 2);                                   //    sar r28d, 2
    __ sarl(r28, 4);                                   //    sar r28d, 4
    __ sarl(r28, 8);                                   //    sar r28d, 8
    __ sarl(r28, 16);                                  //    sar r28d, 16
    __ sarl(r29, 1);                                   //    sar r29d, 1
    __ sarl(r29, 2);                                   //    sar r29d, 2
    __ sarl(r29, 4);                                   //    sar r29d, 4
    __ sarl(r29, 8);                                   //    sar r29d, 8
    __ sarl(r29, 16);                                  //    sar r29d, 16
    __ sarl(r30, 1);                                   //    sar r30d, 1
    __ sarl(r30, 2);                                   //    sar r30d, 2
    __ sarl(r30, 4);                                   //    sar r30d, 4
    __ sarl(r30, 8);                                   //    sar r30d, 8
    __ sarl(r30, 16);                                  //    sar r30d, 16
    __ sarl(r31, 1);                                   //    sar r31d, 1
    __ sarl(r31, 2);                                   //    sar r31d, 2
    __ sarl(r31, 4);                                   //    sar r31d, 4
    __ sarl(r31, 8);                                   //    sar r31d, 8
    __ sarl(r31, 16);                                  //    sar r31d, 16
#endif // _LP64
    __ sbbl(rcx, 1);                                   //    sbb ecx, 1
    __ sbbl(rcx, 16);                                  //    sbb ecx, 16
    __ sbbl(rcx, 256);                                 //    sbb ecx, 256
    __ sbbl(rcx, 4096);                                //    sbb ecx, 4096
    __ sbbl(rcx, 65536);                               //    sbb ecx, 65536
    __ sbbl(rcx, 1048576);                             //    sbb ecx, 1048576
    __ sbbl(rcx, 16777216);                            //    sbb ecx, 16777216
    __ sbbl(rcx, 268435456);                           //    sbb ecx, 268435456
    __ sbbl(rdx, 1);                                   //    sbb edx, 1
    __ sbbl(rdx, 16);                                  //    sbb edx, 16
    __ sbbl(rdx, 256);                                 //    sbb edx, 256
    __ sbbl(rdx, 4096);                                //    sbb edx, 4096
    __ sbbl(rdx, 65536);                               //    sbb edx, 65536
    __ sbbl(rdx, 1048576);                             //    sbb edx, 1048576
    __ sbbl(rdx, 16777216);                            //    sbb edx, 16777216
    __ sbbl(rdx, 268435456);                           //    sbb edx, 268435456
    __ sbbl(rbx, 1);                                   //    sbb ebx, 1
    __ sbbl(rbx, 16);                                  //    sbb ebx, 16
    __ sbbl(rbx, 256);                                 //    sbb ebx, 256
    __ sbbl(rbx, 4096);                                //    sbb ebx, 4096
    __ sbbl(rbx, 65536);                               //    sbb ebx, 65536
    __ sbbl(rbx, 1048576);                             //    sbb ebx, 1048576
    __ sbbl(rbx, 16777216);                            //    sbb ebx, 16777216
    __ sbbl(rbx, 268435456);                           //    sbb ebx, 268435456
#ifdef _LP64
    __ sbbl(r8, 1);                                    //    sbb r8d, 1
    __ sbbl(r8, 16);                                   //    sbb r8d, 16
    __ sbbl(r8, 256);                                  //    sbb r8d, 256
    __ sbbl(r8, 4096);                                 //    sbb r8d, 4096
    __ sbbl(r8, 65536);                                //    sbb r8d, 65536
    __ sbbl(r8, 1048576);                              //    sbb r8d, 1048576
    __ sbbl(r8, 16777216);                             //    sbb r8d, 16777216
    __ sbbl(r8, 268435456);                            //    sbb r8d, 268435456
    __ sbbl(r9, 1);                                    //    sbb r9d, 1
    __ sbbl(r9, 16);                                   //    sbb r9d, 16
    __ sbbl(r9, 256);                                  //    sbb r9d, 256
    __ sbbl(r9, 4096);                                 //    sbb r9d, 4096
    __ sbbl(r9, 65536);                                //    sbb r9d, 65536
    __ sbbl(r9, 1048576);                              //    sbb r9d, 1048576
    __ sbbl(r9, 16777216);                             //    sbb r9d, 16777216
    __ sbbl(r9, 268435456);                            //    sbb r9d, 268435456
    __ sbbl(r10, 1);                                   //    sbb r10d, 1
    __ sbbl(r10, 16);                                  //    sbb r10d, 16
    __ sbbl(r10, 256);                                 //    sbb r10d, 256
    __ sbbl(r10, 4096);                                //    sbb r10d, 4096
    __ sbbl(r10, 65536);                               //    sbb r10d, 65536
    __ sbbl(r10, 1048576);                             //    sbb r10d, 1048576
    __ sbbl(r10, 16777216);                            //    sbb r10d, 16777216
    __ sbbl(r10, 268435456);                           //    sbb r10d, 268435456
    __ sbbl(r11, 1);                                   //    sbb r11d, 1
    __ sbbl(r11, 16);                                  //    sbb r11d, 16
    __ sbbl(r11, 256);                                 //    sbb r11d, 256
    __ sbbl(r11, 4096);                                //    sbb r11d, 4096
    __ sbbl(r11, 65536);                               //    sbb r11d, 65536
    __ sbbl(r11, 1048576);                             //    sbb r11d, 1048576
    __ sbbl(r11, 16777216);                            //    sbb r11d, 16777216
    __ sbbl(r11, 268435456);                           //    sbb r11d, 268435456
    __ sbbl(r12, 1);                                   //    sbb r12d, 1
    __ sbbl(r12, 16);                                  //    sbb r12d, 16
    __ sbbl(r12, 256);                                 //    sbb r12d, 256
    __ sbbl(r12, 4096);                                //    sbb r12d, 4096
    __ sbbl(r12, 65536);                               //    sbb r12d, 65536
    __ sbbl(r12, 1048576);                             //    sbb r12d, 1048576
    __ sbbl(r12, 16777216);                            //    sbb r12d, 16777216
    __ sbbl(r12, 268435456);                           //    sbb r12d, 268435456
    __ sbbl(r13, 1);                                   //    sbb r13d, 1
    __ sbbl(r13, 16);                                  //    sbb r13d, 16
    __ sbbl(r13, 256);                                 //    sbb r13d, 256
    __ sbbl(r13, 4096);                                //    sbb r13d, 4096
    __ sbbl(r13, 65536);                               //    sbb r13d, 65536
    __ sbbl(r13, 1048576);                             //    sbb r13d, 1048576
    __ sbbl(r13, 16777216);                            //    sbb r13d, 16777216
    __ sbbl(r13, 268435456);                           //    sbb r13d, 268435456
    __ sbbl(r14, 1);                                   //    sbb r14d, 1
    __ sbbl(r14, 16);                                  //    sbb r14d, 16
    __ sbbl(r14, 256);                                 //    sbb r14d, 256
    __ sbbl(r14, 4096);                                //    sbb r14d, 4096
    __ sbbl(r14, 65536);                               //    sbb r14d, 65536
    __ sbbl(r14, 1048576);                             //    sbb r14d, 1048576
    __ sbbl(r14, 16777216);                            //    sbb r14d, 16777216
    __ sbbl(r14, 268435456);                           //    sbb r14d, 268435456
    __ sbbl(r15, 1);                                   //    sbb r15d, 1
    __ sbbl(r15, 16);                                  //    sbb r15d, 16
    __ sbbl(r15, 256);                                 //    sbb r15d, 256
    __ sbbl(r15, 4096);                                //    sbb r15d, 4096
    __ sbbl(r15, 65536);                               //    sbb r15d, 65536
    __ sbbl(r15, 1048576);                             //    sbb r15d, 1048576
    __ sbbl(r15, 16777216);                            //    sbb r15d, 16777216
    __ sbbl(r15, 268435456);                           //    sbb r15d, 268435456
    __ sbbl(r16, 1);                                   //    sbb r16d, 1
    __ sbbl(r16, 16);                                  //    sbb r16d, 16
    __ sbbl(r16, 256);                                 //    sbb r16d, 256
    __ sbbl(r16, 4096);                                //    sbb r16d, 4096
    __ sbbl(r16, 65536);                               //    sbb r16d, 65536
    __ sbbl(r16, 1048576);                             //    sbb r16d, 1048576
    __ sbbl(r16, 16777216);                            //    sbb r16d, 16777216
    __ sbbl(r16, 268435456);                           //    sbb r16d, 268435456
    __ sbbl(r17, 1);                                   //    sbb r17d, 1
    __ sbbl(r17, 16);                                  //    sbb r17d, 16
    __ sbbl(r17, 256);                                 //    sbb r17d, 256
    __ sbbl(r17, 4096);                                //    sbb r17d, 4096
    __ sbbl(r17, 65536);                               //    sbb r17d, 65536
    __ sbbl(r17, 1048576);                             //    sbb r17d, 1048576
    __ sbbl(r17, 16777216);                            //    sbb r17d, 16777216
    __ sbbl(r17, 268435456);                           //    sbb r17d, 268435456
    __ sbbl(r18, 1);                                   //    sbb r18d, 1
    __ sbbl(r18, 16);                                  //    sbb r18d, 16
    __ sbbl(r18, 256);                                 //    sbb r18d, 256
    __ sbbl(r18, 4096);                                //    sbb r18d, 4096
    __ sbbl(r18, 65536);                               //    sbb r18d, 65536
    __ sbbl(r18, 1048576);                             //    sbb r18d, 1048576
    __ sbbl(r18, 16777216);                            //    sbb r18d, 16777216
    __ sbbl(r18, 268435456);                           //    sbb r18d, 268435456
    __ sbbl(r19, 1);                                   //    sbb r19d, 1
    __ sbbl(r19, 16);                                  //    sbb r19d, 16
    __ sbbl(r19, 256);                                 //    sbb r19d, 256
    __ sbbl(r19, 4096);                                //    sbb r19d, 4096
    __ sbbl(r19, 65536);                               //    sbb r19d, 65536
    __ sbbl(r19, 1048576);                             //    sbb r19d, 1048576
    __ sbbl(r19, 16777216);                            //    sbb r19d, 16777216
    __ sbbl(r19, 268435456);                           //    sbb r19d, 268435456
    __ sbbl(r20, 1);                                   //    sbb r20d, 1
    __ sbbl(r20, 16);                                  //    sbb r20d, 16
    __ sbbl(r20, 256);                                 //    sbb r20d, 256
    __ sbbl(r20, 4096);                                //    sbb r20d, 4096
    __ sbbl(r20, 65536);                               //    sbb r20d, 65536
    __ sbbl(r20, 1048576);                             //    sbb r20d, 1048576
    __ sbbl(r20, 16777216);                            //    sbb r20d, 16777216
    __ sbbl(r20, 268435456);                           //    sbb r20d, 268435456
    __ sbbl(r21, 1);                                   //    sbb r21d, 1
    __ sbbl(r21, 16);                                  //    sbb r21d, 16
    __ sbbl(r21, 256);                                 //    sbb r21d, 256
    __ sbbl(r21, 4096);                                //    sbb r21d, 4096
    __ sbbl(r21, 65536);                               //    sbb r21d, 65536
    __ sbbl(r21, 1048576);                             //    sbb r21d, 1048576
    __ sbbl(r21, 16777216);                            //    sbb r21d, 16777216
    __ sbbl(r21, 268435456);                           //    sbb r21d, 268435456
    __ sbbl(r22, 1);                                   //    sbb r22d, 1
    __ sbbl(r22, 16);                                  //    sbb r22d, 16
    __ sbbl(r22, 256);                                 //    sbb r22d, 256
    __ sbbl(r22, 4096);                                //    sbb r22d, 4096
    __ sbbl(r22, 65536);                               //    sbb r22d, 65536
    __ sbbl(r22, 1048576);                             //    sbb r22d, 1048576
    __ sbbl(r22, 16777216);                            //    sbb r22d, 16777216
    __ sbbl(r22, 268435456);                           //    sbb r22d, 268435456
    __ sbbl(r23, 1);                                   //    sbb r23d, 1
    __ sbbl(r23, 16);                                  //    sbb r23d, 16
    __ sbbl(r23, 256);                                 //    sbb r23d, 256
    __ sbbl(r23, 4096);                                //    sbb r23d, 4096
    __ sbbl(r23, 65536);                               //    sbb r23d, 65536
    __ sbbl(r23, 1048576);                             //    sbb r23d, 1048576
    __ sbbl(r23, 16777216);                            //    sbb r23d, 16777216
    __ sbbl(r23, 268435456);                           //    sbb r23d, 268435456
    __ sbbl(r24, 1);                                   //    sbb r24d, 1
    __ sbbl(r24, 16);                                  //    sbb r24d, 16
    __ sbbl(r24, 256);                                 //    sbb r24d, 256
    __ sbbl(r24, 4096);                                //    sbb r24d, 4096
    __ sbbl(r24, 65536);                               //    sbb r24d, 65536
    __ sbbl(r24, 1048576);                             //    sbb r24d, 1048576
    __ sbbl(r24, 16777216);                            //    sbb r24d, 16777216
    __ sbbl(r24, 268435456);                           //    sbb r24d, 268435456
    __ sbbl(r25, 1);                                   //    sbb r25d, 1
    __ sbbl(r25, 16);                                  //    sbb r25d, 16
    __ sbbl(r25, 256);                                 //    sbb r25d, 256
    __ sbbl(r25, 4096);                                //    sbb r25d, 4096
    __ sbbl(r25, 65536);                               //    sbb r25d, 65536
    __ sbbl(r25, 1048576);                             //    sbb r25d, 1048576
    __ sbbl(r25, 16777216);                            //    sbb r25d, 16777216
    __ sbbl(r25, 268435456);                           //    sbb r25d, 268435456
    __ sbbl(r26, 1);                                   //    sbb r26d, 1
    __ sbbl(r26, 16);                                  //    sbb r26d, 16
    __ sbbl(r26, 256);                                 //    sbb r26d, 256
    __ sbbl(r26, 4096);                                //    sbb r26d, 4096
    __ sbbl(r26, 65536);                               //    sbb r26d, 65536
    __ sbbl(r26, 1048576);                             //    sbb r26d, 1048576
    __ sbbl(r26, 16777216);                            //    sbb r26d, 16777216
    __ sbbl(r26, 268435456);                           //    sbb r26d, 268435456
    __ sbbl(r27, 1);                                   //    sbb r27d, 1
    __ sbbl(r27, 16);                                  //    sbb r27d, 16
    __ sbbl(r27, 256);                                 //    sbb r27d, 256
    __ sbbl(r27, 4096);                                //    sbb r27d, 4096
    __ sbbl(r27, 65536);                               //    sbb r27d, 65536
    __ sbbl(r27, 1048576);                             //    sbb r27d, 1048576
    __ sbbl(r27, 16777216);                            //    sbb r27d, 16777216
    __ sbbl(r27, 268435456);                           //    sbb r27d, 268435456
    __ sbbl(r28, 1);                                   //    sbb r28d, 1
    __ sbbl(r28, 16);                                  //    sbb r28d, 16
    __ sbbl(r28, 256);                                 //    sbb r28d, 256
    __ sbbl(r28, 4096);                                //    sbb r28d, 4096
    __ sbbl(r28, 65536);                               //    sbb r28d, 65536
    __ sbbl(r28, 1048576);                             //    sbb r28d, 1048576
    __ sbbl(r28, 16777216);                            //    sbb r28d, 16777216
    __ sbbl(r28, 268435456);                           //    sbb r28d, 268435456
    __ sbbl(r29, 1);                                   //    sbb r29d, 1
    __ sbbl(r29, 16);                                  //    sbb r29d, 16
    __ sbbl(r29, 256);                                 //    sbb r29d, 256
    __ sbbl(r29, 4096);                                //    sbb r29d, 4096
    __ sbbl(r29, 65536);                               //    sbb r29d, 65536
    __ sbbl(r29, 1048576);                             //    sbb r29d, 1048576
    __ sbbl(r29, 16777216);                            //    sbb r29d, 16777216
    __ sbbl(r29, 268435456);                           //    sbb r29d, 268435456
    __ sbbl(r30, 1);                                   //    sbb r30d, 1
    __ sbbl(r30, 16);                                  //    sbb r30d, 16
    __ sbbl(r30, 256);                                 //    sbb r30d, 256
    __ sbbl(r30, 4096);                                //    sbb r30d, 4096
    __ sbbl(r30, 65536);                               //    sbb r30d, 65536
    __ sbbl(r30, 1048576);                             //    sbb r30d, 1048576
    __ sbbl(r30, 16777216);                            //    sbb r30d, 16777216
    __ sbbl(r30, 268435456);                           //    sbb r30d, 268435456
    __ sbbl(r31, 1);                                   //    sbb r31d, 1
    __ sbbl(r31, 16);                                  //    sbb r31d, 16
    __ sbbl(r31, 256);                                 //    sbb r31d, 256
    __ sbbl(r31, 4096);                                //    sbb r31d, 4096
    __ sbbl(r31, 65536);                               //    sbb r31d, 65536
    __ sbbl(r31, 1048576);                             //    sbb r31d, 1048576
    __ sbbl(r31, 16777216);                            //    sbb r31d, 16777216
    __ sbbl(r31, 268435456);                           //    sbb r31d, 268435456
#endif // _LP64
    __ shll(rcx, 1);                                   //    shl ecx, 1
    __ shll(rcx, 2);                                   //    shl ecx, 2
    __ shll(rcx, 4);                                   //    shl ecx, 4
    __ shll(rcx, 8);                                   //    shl ecx, 8
    __ shll(rcx, 16);                                  //    shl ecx, 16
    __ shll(rdx, 1);                                   //    shl edx, 1
    __ shll(rdx, 2);                                   //    shl edx, 2
    __ shll(rdx, 4);                                   //    shl edx, 4
    __ shll(rdx, 8);                                   //    shl edx, 8
    __ shll(rdx, 16);                                  //    shl edx, 16
    __ shll(rbx, 1);                                   //    shl ebx, 1
    __ shll(rbx, 2);                                   //    shl ebx, 2
    __ shll(rbx, 4);                                   //    shl ebx, 4
    __ shll(rbx, 8);                                   //    shl ebx, 8
    __ shll(rbx, 16);                                  //    shl ebx, 16
#ifdef _LP64
    __ shll(r8, 1);                                    //    shl r8d, 1
    __ shll(r8, 2);                                    //    shl r8d, 2
    __ shll(r8, 4);                                    //    shl r8d, 4
    __ shll(r8, 8);                                    //    shl r8d, 8
    __ shll(r8, 16);                                   //    shl r8d, 16
    __ shll(r9, 1);                                    //    shl r9d, 1
    __ shll(r9, 2);                                    //    shl r9d, 2
    __ shll(r9, 4);                                    //    shl r9d, 4
    __ shll(r9, 8);                                    //    shl r9d, 8
    __ shll(r9, 16);                                   //    shl r9d, 16
    __ shll(r10, 1);                                   //    shl r10d, 1
    __ shll(r10, 2);                                   //    shl r10d, 2
    __ shll(r10, 4);                                   //    shl r10d, 4
    __ shll(r10, 8);                                   //    shl r10d, 8
    __ shll(r10, 16);                                  //    shl r10d, 16
    __ shll(r11, 1);                                   //    shl r11d, 1
    __ shll(r11, 2);                                   //    shl r11d, 2
    __ shll(r11, 4);                                   //    shl r11d, 4
    __ shll(r11, 8);                                   //    shl r11d, 8
    __ shll(r11, 16);                                  //    shl r11d, 16
    __ shll(r12, 1);                                   //    shl r12d, 1
    __ shll(r12, 2);                                   //    shl r12d, 2
    __ shll(r12, 4);                                   //    shl r12d, 4
    __ shll(r12, 8);                                   //    shl r12d, 8
    __ shll(r12, 16);                                  //    shl r12d, 16
    __ shll(r13, 1);                                   //    shl r13d, 1
    __ shll(r13, 2);                                   //    shl r13d, 2
    __ shll(r13, 4);                                   //    shl r13d, 4
    __ shll(r13, 8);                                   //    shl r13d, 8
    __ shll(r13, 16);                                  //    shl r13d, 16
    __ shll(r14, 1);                                   //    shl r14d, 1
    __ shll(r14, 2);                                   //    shl r14d, 2
    __ shll(r14, 4);                                   //    shl r14d, 4
    __ shll(r14, 8);                                   //    shl r14d, 8
    __ shll(r14, 16);                                  //    shl r14d, 16
    __ shll(r15, 1);                                   //    shl r15d, 1
    __ shll(r15, 2);                                   //    shl r15d, 2
    __ shll(r15, 4);                                   //    shl r15d, 4
    __ shll(r15, 8);                                   //    shl r15d, 8
    __ shll(r15, 16);                                  //    shl r15d, 16
    __ shll(r16, 1);                                   //    shl r16d, 1
    __ shll(r16, 2);                                   //    shl r16d, 2
    __ shll(r16, 4);                                   //    shl r16d, 4
    __ shll(r16, 8);                                   //    shl r16d, 8
    __ shll(r16, 16);                                  //    shl r16d, 16
    __ shll(r17, 1);                                   //    shl r17d, 1
    __ shll(r17, 2);                                   //    shl r17d, 2
    __ shll(r17, 4);                                   //    shl r17d, 4
    __ shll(r17, 8);                                   //    shl r17d, 8
    __ shll(r17, 16);                                  //    shl r17d, 16
    __ shll(r18, 1);                                   //    shl r18d, 1
    __ shll(r18, 2);                                   //    shl r18d, 2
    __ shll(r18, 4);                                   //    shl r18d, 4
    __ shll(r18, 8);                                   //    shl r18d, 8
    __ shll(r18, 16);                                  //    shl r18d, 16
    __ shll(r19, 1);                                   //    shl r19d, 1
    __ shll(r19, 2);                                   //    shl r19d, 2
    __ shll(r19, 4);                                   //    shl r19d, 4
    __ shll(r19, 8);                                   //    shl r19d, 8
    __ shll(r19, 16);                                  //    shl r19d, 16
    __ shll(r20, 1);                                   //    shl r20d, 1
    __ shll(r20, 2);                                   //    shl r20d, 2
    __ shll(r20, 4);                                   //    shl r20d, 4
    __ shll(r20, 8);                                   //    shl r20d, 8
    __ shll(r20, 16);                                  //    shl r20d, 16
    __ shll(r21, 1);                                   //    shl r21d, 1
    __ shll(r21, 2);                                   //    shl r21d, 2
    __ shll(r21, 4);                                   //    shl r21d, 4
    __ shll(r21, 8);                                   //    shl r21d, 8
    __ shll(r21, 16);                                  //    shl r21d, 16
    __ shll(r22, 1);                                   //    shl r22d, 1
    __ shll(r22, 2);                                   //    shl r22d, 2
    __ shll(r22, 4);                                   //    shl r22d, 4
    __ shll(r22, 8);                                   //    shl r22d, 8
    __ shll(r22, 16);                                  //    shl r22d, 16
    __ shll(r23, 1);                                   //    shl r23d, 1
    __ shll(r23, 2);                                   //    shl r23d, 2
    __ shll(r23, 4);                                   //    shl r23d, 4
    __ shll(r23, 8);                                   //    shl r23d, 8
    __ shll(r23, 16);                                  //    shl r23d, 16
    __ shll(r24, 1);                                   //    shl r24d, 1
    __ shll(r24, 2);                                   //    shl r24d, 2
    __ shll(r24, 4);                                   //    shl r24d, 4
    __ shll(r24, 8);                                   //    shl r24d, 8
    __ shll(r24, 16);                                  //    shl r24d, 16
    __ shll(r25, 1);                                   //    shl r25d, 1
    __ shll(r25, 2);                                   //    shl r25d, 2
    __ shll(r25, 4);                                   //    shl r25d, 4
    __ shll(r25, 8);                                   //    shl r25d, 8
    __ shll(r25, 16);                                  //    shl r25d, 16
    __ shll(r26, 1);                                   //    shl r26d, 1
    __ shll(r26, 2);                                   //    shl r26d, 2
    __ shll(r26, 4);                                   //    shl r26d, 4
    __ shll(r26, 8);                                   //    shl r26d, 8
    __ shll(r26, 16);                                  //    shl r26d, 16
    __ shll(r27, 1);                                   //    shl r27d, 1
    __ shll(r27, 2);                                   //    shl r27d, 2
    __ shll(r27, 4);                                   //    shl r27d, 4
    __ shll(r27, 8);                                   //    shl r27d, 8
    __ shll(r27, 16);                                  //    shl r27d, 16
    __ shll(r28, 1);                                   //    shl r28d, 1
    __ shll(r28, 2);                                   //    shl r28d, 2
    __ shll(r28, 4);                                   //    shl r28d, 4
    __ shll(r28, 8);                                   //    shl r28d, 8
    __ shll(r28, 16);                                  //    shl r28d, 16
    __ shll(r29, 1);                                   //    shl r29d, 1
    __ shll(r29, 2);                                   //    shl r29d, 2
    __ shll(r29, 4);                                   //    shl r29d, 4
    __ shll(r29, 8);                                   //    shl r29d, 8
    __ shll(r29, 16);                                  //    shl r29d, 16
    __ shll(r30, 1);                                   //    shl r30d, 1
    __ shll(r30, 2);                                   //    shl r30d, 2
    __ shll(r30, 4);                                   //    shl r30d, 4
    __ shll(r30, 8);                                   //    shl r30d, 8
    __ shll(r30, 16);                                  //    shl r30d, 16
    __ shll(r31, 1);                                   //    shl r31d, 1
    __ shll(r31, 2);                                   //    shl r31d, 2
    __ shll(r31, 4);                                   //    shl r31d, 4
    __ shll(r31, 8);                                   //    shl r31d, 8
    __ shll(r31, 16);                                  //    shl r31d, 16
#endif // _LP64
    __ shrl(rcx, 1);                                   //    shr ecx, 1
    __ shrl(rcx, 2);                                   //    shr ecx, 2
    __ shrl(rcx, 4);                                   //    shr ecx, 4
    __ shrl(rcx, 8);                                   //    shr ecx, 8
    __ shrl(rcx, 16);                                  //    shr ecx, 16
    __ shrl(rdx, 1);                                   //    shr edx, 1
    __ shrl(rdx, 2);                                   //    shr edx, 2
    __ shrl(rdx, 4);                                   //    shr edx, 4
    __ shrl(rdx, 8);                                   //    shr edx, 8
    __ shrl(rdx, 16);                                  //    shr edx, 16
    __ shrl(rbx, 1);                                   //    shr ebx, 1
    __ shrl(rbx, 2);                                   //    shr ebx, 2
    __ shrl(rbx, 4);                                   //    shr ebx, 4
    __ shrl(rbx, 8);                                   //    shr ebx, 8
    __ shrl(rbx, 16);                                  //    shr ebx, 16
#ifdef _LP64
    __ shrl(r8, 1);                                    //    shr r8d, 1
    __ shrl(r8, 2);                                    //    shr r8d, 2
    __ shrl(r8, 4);                                    //    shr r8d, 4
    __ shrl(r8, 8);                                    //    shr r8d, 8
    __ shrl(r8, 16);                                   //    shr r8d, 16
    __ shrl(r9, 1);                                    //    shr r9d, 1
    __ shrl(r9, 2);                                    //    shr r9d, 2
    __ shrl(r9, 4);                                    //    shr r9d, 4
    __ shrl(r9, 8);                                    //    shr r9d, 8
    __ shrl(r9, 16);                                   //    shr r9d, 16
    __ shrl(r10, 1);                                   //    shr r10d, 1
    __ shrl(r10, 2);                                   //    shr r10d, 2
    __ shrl(r10, 4);                                   //    shr r10d, 4
    __ shrl(r10, 8);                                   //    shr r10d, 8
    __ shrl(r10, 16);                                  //    shr r10d, 16
    __ shrl(r11, 1);                                   //    shr r11d, 1
    __ shrl(r11, 2);                                   //    shr r11d, 2
    __ shrl(r11, 4);                                   //    shr r11d, 4
    __ shrl(r11, 8);                                   //    shr r11d, 8
    __ shrl(r11, 16);                                  //    shr r11d, 16
    __ shrl(r12, 1);                                   //    shr r12d, 1
    __ shrl(r12, 2);                                   //    shr r12d, 2
    __ shrl(r12, 4);                                   //    shr r12d, 4
    __ shrl(r12, 8);                                   //    shr r12d, 8
    __ shrl(r12, 16);                                  //    shr r12d, 16
    __ shrl(r13, 1);                                   //    shr r13d, 1
    __ shrl(r13, 2);                                   //    shr r13d, 2
    __ shrl(r13, 4);                                   //    shr r13d, 4
    __ shrl(r13, 8);                                   //    shr r13d, 8
    __ shrl(r13, 16);                                  //    shr r13d, 16
    __ shrl(r14, 1);                                   //    shr r14d, 1
    __ shrl(r14, 2);                                   //    shr r14d, 2
    __ shrl(r14, 4);                                   //    shr r14d, 4
    __ shrl(r14, 8);                                   //    shr r14d, 8
    __ shrl(r14, 16);                                  //    shr r14d, 16
    __ shrl(r15, 1);                                   //    shr r15d, 1
    __ shrl(r15, 2);                                   //    shr r15d, 2
    __ shrl(r15, 4);                                   //    shr r15d, 4
    __ shrl(r15, 8);                                   //    shr r15d, 8
    __ shrl(r15, 16);                                  //    shr r15d, 16
    __ shrl(r16, 1);                                   //    shr r16d, 1
    __ shrl(r16, 2);                                   //    shr r16d, 2
    __ shrl(r16, 4);                                   //    shr r16d, 4
    __ shrl(r16, 8);                                   //    shr r16d, 8
    __ shrl(r16, 16);                                  //    shr r16d, 16
    __ shrl(r17, 1);                                   //    shr r17d, 1
    __ shrl(r17, 2);                                   //    shr r17d, 2
    __ shrl(r17, 4);                                   //    shr r17d, 4
    __ shrl(r17, 8);                                   //    shr r17d, 8
    __ shrl(r17, 16);                                  //    shr r17d, 16
    __ shrl(r18, 1);                                   //    shr r18d, 1
    __ shrl(r18, 2);                                   //    shr r18d, 2
    __ shrl(r18, 4);                                   //    shr r18d, 4
    __ shrl(r18, 8);                                   //    shr r18d, 8
    __ shrl(r18, 16);                                  //    shr r18d, 16
    __ shrl(r19, 1);                                   //    shr r19d, 1
    __ shrl(r19, 2);                                   //    shr r19d, 2
    __ shrl(r19, 4);                                   //    shr r19d, 4
    __ shrl(r19, 8);                                   //    shr r19d, 8
    __ shrl(r19, 16);                                  //    shr r19d, 16
    __ shrl(r20, 1);                                   //    shr r20d, 1
    __ shrl(r20, 2);                                   //    shr r20d, 2
    __ shrl(r20, 4);                                   //    shr r20d, 4
    __ shrl(r20, 8);                                   //    shr r20d, 8
    __ shrl(r20, 16);                                  //    shr r20d, 16
    __ shrl(r21, 1);                                   //    shr r21d, 1
    __ shrl(r21, 2);                                   //    shr r21d, 2
    __ shrl(r21, 4);                                   //    shr r21d, 4
    __ shrl(r21, 8);                                   //    shr r21d, 8
    __ shrl(r21, 16);                                  //    shr r21d, 16
    __ shrl(r22, 1);                                   //    shr r22d, 1
    __ shrl(r22, 2);                                   //    shr r22d, 2
    __ shrl(r22, 4);                                   //    shr r22d, 4
    __ shrl(r22, 8);                                   //    shr r22d, 8
    __ shrl(r22, 16);                                  //    shr r22d, 16
    __ shrl(r23, 1);                                   //    shr r23d, 1
    __ shrl(r23, 2);                                   //    shr r23d, 2
    __ shrl(r23, 4);                                   //    shr r23d, 4
    __ shrl(r23, 8);                                   //    shr r23d, 8
    __ shrl(r23, 16);                                  //    shr r23d, 16
    __ shrl(r24, 1);                                   //    shr r24d, 1
    __ shrl(r24, 2);                                   //    shr r24d, 2
    __ shrl(r24, 4);                                   //    shr r24d, 4
    __ shrl(r24, 8);                                   //    shr r24d, 8
    __ shrl(r24, 16);                                  //    shr r24d, 16
    __ shrl(r25, 1);                                   //    shr r25d, 1
    __ shrl(r25, 2);                                   //    shr r25d, 2
    __ shrl(r25, 4);                                   //    shr r25d, 4
    __ shrl(r25, 8);                                   //    shr r25d, 8
    __ shrl(r25, 16);                                  //    shr r25d, 16
    __ shrl(r26, 1);                                   //    shr r26d, 1
    __ shrl(r26, 2);                                   //    shr r26d, 2
    __ shrl(r26, 4);                                   //    shr r26d, 4
    __ shrl(r26, 8);                                   //    shr r26d, 8
    __ shrl(r26, 16);                                  //    shr r26d, 16
    __ shrl(r27, 1);                                   //    shr r27d, 1
    __ shrl(r27, 2);                                   //    shr r27d, 2
    __ shrl(r27, 4);                                   //    shr r27d, 4
    __ shrl(r27, 8);                                   //    shr r27d, 8
    __ shrl(r27, 16);                                  //    shr r27d, 16
    __ shrl(r28, 1);                                   //    shr r28d, 1
    __ shrl(r28, 2);                                   //    shr r28d, 2
    __ shrl(r28, 4);                                   //    shr r28d, 4
    __ shrl(r28, 8);                                   //    shr r28d, 8
    __ shrl(r28, 16);                                  //    shr r28d, 16
    __ shrl(r29, 1);                                   //    shr r29d, 1
    __ shrl(r29, 2);                                   //    shr r29d, 2
    __ shrl(r29, 4);                                   //    shr r29d, 4
    __ shrl(r29, 8);                                   //    shr r29d, 8
    __ shrl(r29, 16);                                  //    shr r29d, 16
    __ shrl(r30, 1);                                   //    shr r30d, 1
    __ shrl(r30, 2);                                   //    shr r30d, 2
    __ shrl(r30, 4);                                   //    shr r30d, 4
    __ shrl(r30, 8);                                   //    shr r30d, 8
    __ shrl(r30, 16);                                  //    shr r30d, 16
    __ shrl(r31, 1);                                   //    shr r31d, 1
    __ shrl(r31, 2);                                   //    shr r31d, 2
    __ shrl(r31, 4);                                   //    shr r31d, 4
    __ shrl(r31, 8);                                   //    shr r31d, 8
    __ shrl(r31, 16);                                  //    shr r31d, 16
#endif // _LP64
    __ subl(rcx, 1);                                   //    sub ecx, 1
    __ subl(rcx, 16);                                  //    sub ecx, 16
    __ subl(rcx, 256);                                 //    sub ecx, 256
    __ subl(rcx, 4096);                                //    sub ecx, 4096
    __ subl(rcx, 65536);                               //    sub ecx, 65536
    __ subl(rcx, 1048576);                             //    sub ecx, 1048576
    __ subl(rcx, 16777216);                            //    sub ecx, 16777216
    __ subl(rcx, 268435456);                           //    sub ecx, 268435456
    __ subl(rdx, 1);                                   //    sub edx, 1
    __ subl(rdx, 16);                                  //    sub edx, 16
    __ subl(rdx, 256);                                 //    sub edx, 256
    __ subl(rdx, 4096);                                //    sub edx, 4096
    __ subl(rdx, 65536);                               //    sub edx, 65536
    __ subl(rdx, 1048576);                             //    sub edx, 1048576
    __ subl(rdx, 16777216);                            //    sub edx, 16777216
    __ subl(rdx, 268435456);                           //    sub edx, 268435456
    __ subl(rbx, 1);                                   //    sub ebx, 1
    __ subl(rbx, 16);                                  //    sub ebx, 16
    __ subl(rbx, 256);                                 //    sub ebx, 256
    __ subl(rbx, 4096);                                //    sub ebx, 4096
    __ subl(rbx, 65536);                               //    sub ebx, 65536
    __ subl(rbx, 1048576);                             //    sub ebx, 1048576
    __ subl(rbx, 16777216);                            //    sub ebx, 16777216
    __ subl(rbx, 268435456);                           //    sub ebx, 268435456
#ifdef _LP64
    __ subl(r8, 1);                                    //    sub r8d, 1
    __ subl(r8, 16);                                   //    sub r8d, 16
    __ subl(r8, 256);                                  //    sub r8d, 256
    __ subl(r8, 4096);                                 //    sub r8d, 4096
    __ subl(r8, 65536);                                //    sub r8d, 65536
    __ subl(r8, 1048576);                              //    sub r8d, 1048576
    __ subl(r8, 16777216);                             //    sub r8d, 16777216
    __ subl(r8, 268435456);                            //    sub r8d, 268435456
    __ subl(r9, 1);                                    //    sub r9d, 1
    __ subl(r9, 16);                                   //    sub r9d, 16
    __ subl(r9, 256);                                  //    sub r9d, 256
    __ subl(r9, 4096);                                 //    sub r9d, 4096
    __ subl(r9, 65536);                                //    sub r9d, 65536
    __ subl(r9, 1048576);                              //    sub r9d, 1048576
    __ subl(r9, 16777216);                             //    sub r9d, 16777216
    __ subl(r9, 268435456);                            //    sub r9d, 268435456
    __ subl(r10, 1);                                   //    sub r10d, 1
    __ subl(r10, 16);                                  //    sub r10d, 16
    __ subl(r10, 256);                                 //    sub r10d, 256
    __ subl(r10, 4096);                                //    sub r10d, 4096
    __ subl(r10, 65536);                               //    sub r10d, 65536
    __ subl(r10, 1048576);                             //    sub r10d, 1048576
    __ subl(r10, 16777216);                            //    sub r10d, 16777216
    __ subl(r10, 268435456);                           //    sub r10d, 268435456
    __ subl(r11, 1);                                   //    sub r11d, 1
    __ subl(r11, 16);                                  //    sub r11d, 16
    __ subl(r11, 256);                                 //    sub r11d, 256
    __ subl(r11, 4096);                                //    sub r11d, 4096
    __ subl(r11, 65536);                               //    sub r11d, 65536
    __ subl(r11, 1048576);                             //    sub r11d, 1048576
    __ subl(r11, 16777216);                            //    sub r11d, 16777216
    __ subl(r11, 268435456);                           //    sub r11d, 268435456
    __ subl(r12, 1);                                   //    sub r12d, 1
    __ subl(r12, 16);                                  //    sub r12d, 16
    __ subl(r12, 256);                                 //    sub r12d, 256
    __ subl(r12, 4096);                                //    sub r12d, 4096
    __ subl(r12, 65536);                               //    sub r12d, 65536
    __ subl(r12, 1048576);                             //    sub r12d, 1048576
    __ subl(r12, 16777216);                            //    sub r12d, 16777216
    __ subl(r12, 268435456);                           //    sub r12d, 268435456
    __ subl(r13, 1);                                   //    sub r13d, 1
    __ subl(r13, 16);                                  //    sub r13d, 16
    __ subl(r13, 256);                                 //    sub r13d, 256
    __ subl(r13, 4096);                                //    sub r13d, 4096
    __ subl(r13, 65536);                               //    sub r13d, 65536
    __ subl(r13, 1048576);                             //    sub r13d, 1048576
    __ subl(r13, 16777216);                            //    sub r13d, 16777216
    __ subl(r13, 268435456);                           //    sub r13d, 268435456
    __ subl(r14, 1);                                   //    sub r14d, 1
    __ subl(r14, 16);                                  //    sub r14d, 16
    __ subl(r14, 256);                                 //    sub r14d, 256
    __ subl(r14, 4096);                                //    sub r14d, 4096
    __ subl(r14, 65536);                               //    sub r14d, 65536
    __ subl(r14, 1048576);                             //    sub r14d, 1048576
    __ subl(r14, 16777216);                            //    sub r14d, 16777216
    __ subl(r14, 268435456);                           //    sub r14d, 268435456
    __ subl(r15, 1);                                   //    sub r15d, 1
    __ subl(r15, 16);                                  //    sub r15d, 16
    __ subl(r15, 256);                                 //    sub r15d, 256
    __ subl(r15, 4096);                                //    sub r15d, 4096
    __ subl(r15, 65536);                               //    sub r15d, 65536
    __ subl(r15, 1048576);                             //    sub r15d, 1048576
    __ subl(r15, 16777216);                            //    sub r15d, 16777216
    __ subl(r15, 268435456);                           //    sub r15d, 268435456
    __ subl(r16, 1);                                   //    sub r16d, 1
    __ subl(r16, 16);                                  //    sub r16d, 16
    __ subl(r16, 256);                                 //    sub r16d, 256
    __ subl(r16, 4096);                                //    sub r16d, 4096
    __ subl(r16, 65536);                               //    sub r16d, 65536
    __ subl(r16, 1048576);                             //    sub r16d, 1048576
    __ subl(r16, 16777216);                            //    sub r16d, 16777216
    __ subl(r16, 268435456);                           //    sub r16d, 268435456
    __ subl(r17, 1);                                   //    sub r17d, 1
    __ subl(r17, 16);                                  //    sub r17d, 16
    __ subl(r17, 256);                                 //    sub r17d, 256
    __ subl(r17, 4096);                                //    sub r17d, 4096
    __ subl(r17, 65536);                               //    sub r17d, 65536
    __ subl(r17, 1048576);                             //    sub r17d, 1048576
    __ subl(r17, 16777216);                            //    sub r17d, 16777216
    __ subl(r17, 268435456);                           //    sub r17d, 268435456
    __ subl(r18, 1);                                   //    sub r18d, 1
    __ subl(r18, 16);                                  //    sub r18d, 16
    __ subl(r18, 256);                                 //    sub r18d, 256
    __ subl(r18, 4096);                                //    sub r18d, 4096
    __ subl(r18, 65536);                               //    sub r18d, 65536
    __ subl(r18, 1048576);                             //    sub r18d, 1048576
    __ subl(r18, 16777216);                            //    sub r18d, 16777216
    __ subl(r18, 268435456);                           //    sub r18d, 268435456
    __ subl(r19, 1);                                   //    sub r19d, 1
    __ subl(r19, 16);                                  //    sub r19d, 16
    __ subl(r19, 256);                                 //    sub r19d, 256
    __ subl(r19, 4096);                                //    sub r19d, 4096
    __ subl(r19, 65536);                               //    sub r19d, 65536
    __ subl(r19, 1048576);                             //    sub r19d, 1048576
    __ subl(r19, 16777216);                            //    sub r19d, 16777216
    __ subl(r19, 268435456);                           //    sub r19d, 268435456
    __ subl(r20, 1);                                   //    sub r20d, 1
    __ subl(r20, 16);                                  //    sub r20d, 16
    __ subl(r20, 256);                                 //    sub r20d, 256
    __ subl(r20, 4096);                                //    sub r20d, 4096
    __ subl(r20, 65536);                               //    sub r20d, 65536
    __ subl(r20, 1048576);                             //    sub r20d, 1048576
    __ subl(r20, 16777216);                            //    sub r20d, 16777216
    __ subl(r20, 268435456);                           //    sub r20d, 268435456
    __ subl(r21, 1);                                   //    sub r21d, 1
    __ subl(r21, 16);                                  //    sub r21d, 16
    __ subl(r21, 256);                                 //    sub r21d, 256
    __ subl(r21, 4096);                                //    sub r21d, 4096
    __ subl(r21, 65536);                               //    sub r21d, 65536
    __ subl(r21, 1048576);                             //    sub r21d, 1048576
    __ subl(r21, 16777216);                            //    sub r21d, 16777216
    __ subl(r21, 268435456);                           //    sub r21d, 268435456
    __ subl(r22, 1);                                   //    sub r22d, 1
    __ subl(r22, 16);                                  //    sub r22d, 16
    __ subl(r22, 256);                                 //    sub r22d, 256
    __ subl(r22, 4096);                                //    sub r22d, 4096
    __ subl(r22, 65536);                               //    sub r22d, 65536
    __ subl(r22, 1048576);                             //    sub r22d, 1048576
    __ subl(r22, 16777216);                            //    sub r22d, 16777216
    __ subl(r22, 268435456);                           //    sub r22d, 268435456
    __ subl(r23, 1);                                   //    sub r23d, 1
    __ subl(r23, 16);                                  //    sub r23d, 16
    __ subl(r23, 256);                                 //    sub r23d, 256
    __ subl(r23, 4096);                                //    sub r23d, 4096
    __ subl(r23, 65536);                               //    sub r23d, 65536
    __ subl(r23, 1048576);                             //    sub r23d, 1048576
    __ subl(r23, 16777216);                            //    sub r23d, 16777216
    __ subl(r23, 268435456);                           //    sub r23d, 268435456
    __ subl(r24, 1);                                   //    sub r24d, 1
    __ subl(r24, 16);                                  //    sub r24d, 16
    __ subl(r24, 256);                                 //    sub r24d, 256
    __ subl(r24, 4096);                                //    sub r24d, 4096
    __ subl(r24, 65536);                               //    sub r24d, 65536
    __ subl(r24, 1048576);                             //    sub r24d, 1048576
    __ subl(r24, 16777216);                            //    sub r24d, 16777216
    __ subl(r24, 268435456);                           //    sub r24d, 268435456
    __ subl(r25, 1);                                   //    sub r25d, 1
    __ subl(r25, 16);                                  //    sub r25d, 16
    __ subl(r25, 256);                                 //    sub r25d, 256
    __ subl(r25, 4096);                                //    sub r25d, 4096
    __ subl(r25, 65536);                               //    sub r25d, 65536
    __ subl(r25, 1048576);                             //    sub r25d, 1048576
    __ subl(r25, 16777216);                            //    sub r25d, 16777216
    __ subl(r25, 268435456);                           //    sub r25d, 268435456
    __ subl(r26, 1);                                   //    sub r26d, 1
    __ subl(r26, 16);                                  //    sub r26d, 16
    __ subl(r26, 256);                                 //    sub r26d, 256
    __ subl(r26, 4096);                                //    sub r26d, 4096
    __ subl(r26, 65536);                               //    sub r26d, 65536
    __ subl(r26, 1048576);                             //    sub r26d, 1048576
    __ subl(r26, 16777216);                            //    sub r26d, 16777216
    __ subl(r26, 268435456);                           //    sub r26d, 268435456
    __ subl(r27, 1);                                   //    sub r27d, 1
    __ subl(r27, 16);                                  //    sub r27d, 16
    __ subl(r27, 256);                                 //    sub r27d, 256
    __ subl(r27, 4096);                                //    sub r27d, 4096
    __ subl(r27, 65536);                               //    sub r27d, 65536
    __ subl(r27, 1048576);                             //    sub r27d, 1048576
    __ subl(r27, 16777216);                            //    sub r27d, 16777216
    __ subl(r27, 268435456);                           //    sub r27d, 268435456
    __ subl(r28, 1);                                   //    sub r28d, 1
    __ subl(r28, 16);                                  //    sub r28d, 16
    __ subl(r28, 256);                                 //    sub r28d, 256
    __ subl(r28, 4096);                                //    sub r28d, 4096
    __ subl(r28, 65536);                               //    sub r28d, 65536
    __ subl(r28, 1048576);                             //    sub r28d, 1048576
    __ subl(r28, 16777216);                            //    sub r28d, 16777216
    __ subl(r28, 268435456);                           //    sub r28d, 268435456
    __ subl(r29, 1);                                   //    sub r29d, 1
    __ subl(r29, 16);                                  //    sub r29d, 16
    __ subl(r29, 256);                                 //    sub r29d, 256
    __ subl(r29, 4096);                                //    sub r29d, 4096
    __ subl(r29, 65536);                               //    sub r29d, 65536
    __ subl(r29, 1048576);                             //    sub r29d, 1048576
    __ subl(r29, 16777216);                            //    sub r29d, 16777216
    __ subl(r29, 268435456);                           //    sub r29d, 268435456
    __ subl(r30, 1);                                   //    sub r30d, 1
    __ subl(r30, 16);                                  //    sub r30d, 16
    __ subl(r30, 256);                                 //    sub r30d, 256
    __ subl(r30, 4096);                                //    sub r30d, 4096
    __ subl(r30, 65536);                               //    sub r30d, 65536
    __ subl(r30, 1048576);                             //    sub r30d, 1048576
    __ subl(r30, 16777216);                            //    sub r30d, 16777216
    __ subl(r30, 268435456);                           //    sub r30d, 268435456
    __ subl(r31, 1);                                   //    sub r31d, 1
    __ subl(r31, 16);                                  //    sub r31d, 16
    __ subl(r31, 256);                                 //    sub r31d, 256
    __ subl(r31, 4096);                                //    sub r31d, 4096
    __ subl(r31, 65536);                               //    sub r31d, 65536
    __ subl(r31, 1048576);                             //    sub r31d, 1048576
    __ subl(r31, 16777216);                            //    sub r31d, 16777216
    __ subl(r31, 268435456);                           //    sub r31d, 268435456
#endif // _LP64
    __ xorl(rcx, 1);                                   //    xor ecx, 1
    __ xorl(rcx, 16);                                  //    xor ecx, 16
    __ xorl(rcx, 256);                                 //    xor ecx, 256
    __ xorl(rcx, 4096);                                //    xor ecx, 4096
    __ xorl(rcx, 65536);                               //    xor ecx, 65536
    __ xorl(rcx, 1048576);                             //    xor ecx, 1048576
    __ xorl(rcx, 16777216);                            //    xor ecx, 16777216
    __ xorl(rcx, 268435456);                           //    xor ecx, 268435456
    __ xorl(rdx, 1);                                   //    xor edx, 1
    __ xorl(rdx, 16);                                  //    xor edx, 16
    __ xorl(rdx, 256);                                 //    xor edx, 256
    __ xorl(rdx, 4096);                                //    xor edx, 4096
    __ xorl(rdx, 65536);                               //    xor edx, 65536
    __ xorl(rdx, 1048576);                             //    xor edx, 1048576
    __ xorl(rdx, 16777216);                            //    xor edx, 16777216
    __ xorl(rdx, 268435456);                           //    xor edx, 268435456
    __ xorl(rbx, 1);                                   //    xor ebx, 1
    __ xorl(rbx, 16);                                  //    xor ebx, 16
    __ xorl(rbx, 256);                                 //    xor ebx, 256
    __ xorl(rbx, 4096);                                //    xor ebx, 4096
    __ xorl(rbx, 65536);                               //    xor ebx, 65536
    __ xorl(rbx, 1048576);                             //    xor ebx, 1048576
    __ xorl(rbx, 16777216);                            //    xor ebx, 16777216
    __ xorl(rbx, 268435456);                           //    xor ebx, 268435456
#ifdef _LP64
    __ xorl(r8, 1);                                    //    xor r8d, 1
    __ xorl(r8, 16);                                   //    xor r8d, 16
    __ xorl(r8, 256);                                  //    xor r8d, 256
    __ xorl(r8, 4096);                                 //    xor r8d, 4096
    __ xorl(r8, 65536);                                //    xor r8d, 65536
    __ xorl(r8, 1048576);                              //    xor r8d, 1048576
    __ xorl(r8, 16777216);                             //    xor r8d, 16777216
    __ xorl(r8, 268435456);                            //    xor r8d, 268435456
    __ xorl(r9, 1);                                    //    xor r9d, 1
    __ xorl(r9, 16);                                   //    xor r9d, 16
    __ xorl(r9, 256);                                  //    xor r9d, 256
    __ xorl(r9, 4096);                                 //    xor r9d, 4096
    __ xorl(r9, 65536);                                //    xor r9d, 65536
    __ xorl(r9, 1048576);                              //    xor r9d, 1048576
    __ xorl(r9, 16777216);                             //    xor r9d, 16777216
    __ xorl(r9, 268435456);                            //    xor r9d, 268435456
    __ xorl(r10, 1);                                   //    xor r10d, 1
    __ xorl(r10, 16);                                  //    xor r10d, 16
    __ xorl(r10, 256);                                 //    xor r10d, 256
    __ xorl(r10, 4096);                                //    xor r10d, 4096
    __ xorl(r10, 65536);                               //    xor r10d, 65536
    __ xorl(r10, 1048576);                             //    xor r10d, 1048576
    __ xorl(r10, 16777216);                            //    xor r10d, 16777216
    __ xorl(r10, 268435456);                           //    xor r10d, 268435456
    __ xorl(r11, 1);                                   //    xor r11d, 1
    __ xorl(r11, 16);                                  //    xor r11d, 16
    __ xorl(r11, 256);                                 //    xor r11d, 256
    __ xorl(r11, 4096);                                //    xor r11d, 4096
    __ xorl(r11, 65536);                               //    xor r11d, 65536
    __ xorl(r11, 1048576);                             //    xor r11d, 1048576
    __ xorl(r11, 16777216);                            //    xor r11d, 16777216
    __ xorl(r11, 268435456);                           //    xor r11d, 268435456
    __ xorl(r12, 1);                                   //    xor r12d, 1
    __ xorl(r12, 16);                                  //    xor r12d, 16
    __ xorl(r12, 256);                                 //    xor r12d, 256
    __ xorl(r12, 4096);                                //    xor r12d, 4096
    __ xorl(r12, 65536);                               //    xor r12d, 65536
    __ xorl(r12, 1048576);                             //    xor r12d, 1048576
    __ xorl(r12, 16777216);                            //    xor r12d, 16777216
    __ xorl(r12, 268435456);                           //    xor r12d, 268435456
    __ xorl(r13, 1);                                   //    xor r13d, 1
    __ xorl(r13, 16);                                  //    xor r13d, 16
    __ xorl(r13, 256);                                 //    xor r13d, 256
    __ xorl(r13, 4096);                                //    xor r13d, 4096
    __ xorl(r13, 65536);                               //    xor r13d, 65536
    __ xorl(r13, 1048576);                             //    xor r13d, 1048576
    __ xorl(r13, 16777216);                            //    xor r13d, 16777216
    __ xorl(r13, 268435456);                           //    xor r13d, 268435456
    __ xorl(r14, 1);                                   //    xor r14d, 1
    __ xorl(r14, 16);                                  //    xor r14d, 16
    __ xorl(r14, 256);                                 //    xor r14d, 256
    __ xorl(r14, 4096);                                //    xor r14d, 4096
    __ xorl(r14, 65536);                               //    xor r14d, 65536
    __ xorl(r14, 1048576);                             //    xor r14d, 1048576
    __ xorl(r14, 16777216);                            //    xor r14d, 16777216
    __ xorl(r14, 268435456);                           //    xor r14d, 268435456
    __ xorl(r15, 1);                                   //    xor r15d, 1
    __ xorl(r15, 16);                                  //    xor r15d, 16
    __ xorl(r15, 256);                                 //    xor r15d, 256
    __ xorl(r15, 4096);                                //    xor r15d, 4096
    __ xorl(r15, 65536);                               //    xor r15d, 65536
    __ xorl(r15, 1048576);                             //    xor r15d, 1048576
    __ xorl(r15, 16777216);                            //    xor r15d, 16777216
    __ xorl(r15, 268435456);                           //    xor r15d, 268435456
    __ xorl(r16, 1);                                   //    xor r16d, 1
    __ xorl(r16, 16);                                  //    xor r16d, 16
    __ xorl(r16, 256);                                 //    xor r16d, 256
    __ xorl(r16, 4096);                                //    xor r16d, 4096
    __ xorl(r16, 65536);                               //    xor r16d, 65536
    __ xorl(r16, 1048576);                             //    xor r16d, 1048576
    __ xorl(r16, 16777216);                            //    xor r16d, 16777216
    __ xorl(r16, 268435456);                           //    xor r16d, 268435456
    __ xorl(r17, 1);                                   //    xor r17d, 1
    __ xorl(r17, 16);                                  //    xor r17d, 16
    __ xorl(r17, 256);                                 //    xor r17d, 256
    __ xorl(r17, 4096);                                //    xor r17d, 4096
    __ xorl(r17, 65536);                               //    xor r17d, 65536
    __ xorl(r17, 1048576);                             //    xor r17d, 1048576
    __ xorl(r17, 16777216);                            //    xor r17d, 16777216
    __ xorl(r17, 268435456);                           //    xor r17d, 268435456
    __ xorl(r18, 1);                                   //    xor r18d, 1
    __ xorl(r18, 16);                                  //    xor r18d, 16
    __ xorl(r18, 256);                                 //    xor r18d, 256
    __ xorl(r18, 4096);                                //    xor r18d, 4096
    __ xorl(r18, 65536);                               //    xor r18d, 65536
    __ xorl(r18, 1048576);                             //    xor r18d, 1048576
    __ xorl(r18, 16777216);                            //    xor r18d, 16777216
    __ xorl(r18, 268435456);                           //    xor r18d, 268435456
    __ xorl(r19, 1);                                   //    xor r19d, 1
    __ xorl(r19, 16);                                  //    xor r19d, 16
    __ xorl(r19, 256);                                 //    xor r19d, 256
    __ xorl(r19, 4096);                                //    xor r19d, 4096
    __ xorl(r19, 65536);                               //    xor r19d, 65536
    __ xorl(r19, 1048576);                             //    xor r19d, 1048576
    __ xorl(r19, 16777216);                            //    xor r19d, 16777216
    __ xorl(r19, 268435456);                           //    xor r19d, 268435456
    __ xorl(r20, 1);                                   //    xor r20d, 1
    __ xorl(r20, 16);                                  //    xor r20d, 16
    __ xorl(r20, 256);                                 //    xor r20d, 256
    __ xorl(r20, 4096);                                //    xor r20d, 4096
    __ xorl(r20, 65536);                               //    xor r20d, 65536
    __ xorl(r20, 1048576);                             //    xor r20d, 1048576
    __ xorl(r20, 16777216);                            //    xor r20d, 16777216
    __ xorl(r20, 268435456);                           //    xor r20d, 268435456
    __ xorl(r21, 1);                                   //    xor r21d, 1
    __ xorl(r21, 16);                                  //    xor r21d, 16
    __ xorl(r21, 256);                                 //    xor r21d, 256
    __ xorl(r21, 4096);                                //    xor r21d, 4096
    __ xorl(r21, 65536);                               //    xor r21d, 65536
    __ xorl(r21, 1048576);                             //    xor r21d, 1048576
    __ xorl(r21, 16777216);                            //    xor r21d, 16777216
    __ xorl(r21, 268435456);                           //    xor r21d, 268435456
    __ xorl(r22, 1);                                   //    xor r22d, 1
    __ xorl(r22, 16);                                  //    xor r22d, 16
    __ xorl(r22, 256);                                 //    xor r22d, 256
    __ xorl(r22, 4096);                                //    xor r22d, 4096
    __ xorl(r22, 65536);                               //    xor r22d, 65536
    __ xorl(r22, 1048576);                             //    xor r22d, 1048576
    __ xorl(r22, 16777216);                            //    xor r22d, 16777216
    __ xorl(r22, 268435456);                           //    xor r22d, 268435456
    __ xorl(r23, 1);                                   //    xor r23d, 1
    __ xorl(r23, 16);                                  //    xor r23d, 16
    __ xorl(r23, 256);                                 //    xor r23d, 256
    __ xorl(r23, 4096);                                //    xor r23d, 4096
    __ xorl(r23, 65536);                               //    xor r23d, 65536
    __ xorl(r23, 1048576);                             //    xor r23d, 1048576
    __ xorl(r23, 16777216);                            //    xor r23d, 16777216
    __ xorl(r23, 268435456);                           //    xor r23d, 268435456
    __ xorl(r24, 1);                                   //    xor r24d, 1
    __ xorl(r24, 16);                                  //    xor r24d, 16
    __ xorl(r24, 256);                                 //    xor r24d, 256
    __ xorl(r24, 4096);                                //    xor r24d, 4096
    __ xorl(r24, 65536);                               //    xor r24d, 65536
    __ xorl(r24, 1048576);                             //    xor r24d, 1048576
    __ xorl(r24, 16777216);                            //    xor r24d, 16777216
    __ xorl(r24, 268435456);                           //    xor r24d, 268435456
    __ xorl(r25, 1);                                   //    xor r25d, 1
    __ xorl(r25, 16);                                  //    xor r25d, 16
    __ xorl(r25, 256);                                 //    xor r25d, 256
    __ xorl(r25, 4096);                                //    xor r25d, 4096
    __ xorl(r25, 65536);                               //    xor r25d, 65536
    __ xorl(r25, 1048576);                             //    xor r25d, 1048576
    __ xorl(r25, 16777216);                            //    xor r25d, 16777216
    __ xorl(r25, 268435456);                           //    xor r25d, 268435456
    __ xorl(r26, 1);                                   //    xor r26d, 1
    __ xorl(r26, 16);                                  //    xor r26d, 16
    __ xorl(r26, 256);                                 //    xor r26d, 256
    __ xorl(r26, 4096);                                //    xor r26d, 4096
    __ xorl(r26, 65536);                               //    xor r26d, 65536
    __ xorl(r26, 1048576);                             //    xor r26d, 1048576
    __ xorl(r26, 16777216);                            //    xor r26d, 16777216
    __ xorl(r26, 268435456);                           //    xor r26d, 268435456
    __ xorl(r27, 1);                                   //    xor r27d, 1
    __ xorl(r27, 16);                                  //    xor r27d, 16
    __ xorl(r27, 256);                                 //    xor r27d, 256
    __ xorl(r27, 4096);                                //    xor r27d, 4096
    __ xorl(r27, 65536);                               //    xor r27d, 65536
    __ xorl(r27, 1048576);                             //    xor r27d, 1048576
    __ xorl(r27, 16777216);                            //    xor r27d, 16777216
    __ xorl(r27, 268435456);                           //    xor r27d, 268435456
    __ xorl(r28, 1);                                   //    xor r28d, 1
    __ xorl(r28, 16);                                  //    xor r28d, 16
    __ xorl(r28, 256);                                 //    xor r28d, 256
    __ xorl(r28, 4096);                                //    xor r28d, 4096
    __ xorl(r28, 65536);                               //    xor r28d, 65536
    __ xorl(r28, 1048576);                             //    xor r28d, 1048576
    __ xorl(r28, 16777216);                            //    xor r28d, 16777216
    __ xorl(r28, 268435456);                           //    xor r28d, 268435456
    __ xorl(r29, 1);                                   //    xor r29d, 1
    __ xorl(r29, 16);                                  //    xor r29d, 16
    __ xorl(r29, 256);                                 //    xor r29d, 256
    __ xorl(r29, 4096);                                //    xor r29d, 4096
    __ xorl(r29, 65536);                               //    xor r29d, 65536
    __ xorl(r29, 1048576);                             //    xor r29d, 1048576
    __ xorl(r29, 16777216);                            //    xor r29d, 16777216
    __ xorl(r29, 268435456);                           //    xor r29d, 268435456
    __ xorl(r30, 1);                                   //    xor r30d, 1
    __ xorl(r30, 16);                                  //    xor r30d, 16
    __ xorl(r30, 256);                                 //    xor r30d, 256
    __ xorl(r30, 4096);                                //    xor r30d, 4096
    __ xorl(r30, 65536);                               //    xor r30d, 65536
    __ xorl(r30, 1048576);                             //    xor r30d, 1048576
    __ xorl(r30, 16777216);                            //    xor r30d, 16777216
    __ xorl(r30, 268435456);                           //    xor r30d, 268435456
    __ xorl(r31, 1);                                   //    xor r31d, 1
    __ xorl(r31, 16);                                  //    xor r31d, 16
    __ xorl(r31, 256);                                 //    xor r31d, 256
    __ xorl(r31, 4096);                                //    xor r31d, 4096
    __ xorl(r31, 65536);                               //    xor r31d, 65536
    __ xorl(r31, 1048576);                             //    xor r31d, 1048576
    __ xorl(r31, 16777216);                            //    xor r31d, 16777216
    __ xorl(r31, 268435456);                           //    xor r31d, 268435456
#endif // _LP64
    __ cmovl (Assembler::Condition::overflow, rcx, Address(rdx, rbx)); //    cmovo ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::overflow, rdx, Address(rbx, r8)); //    cmovo edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::overflow, rbx, Address(r8, r9)); //    cmovo ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::overflow, r8, Address(r9, r10)); //    cmovo r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::overflow, r9, Address(r10, r11)); //    cmovo r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::overflow, r10, Address(r11, r12)); //    cmovo r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::overflow, r11, Address(r12, r13)); //    cmovo r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::overflow, r12, Address(r13, r14)); //    cmovo r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::overflow, r13, Address(r14, r15)); //    cmovo r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::overflow, r14, Address(r15, r16)); //    cmovo r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::overflow, r15, Address(r16, r17)); //    cmovo r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::overflow, r16, Address(r17, r18)); //    cmovo r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::overflow, r17, Address(r18, r19)); //    cmovo r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::overflow, r18, Address(r19, r20)); //    cmovo r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::overflow, r19, Address(r20, r21)); //    cmovo r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::overflow, r20, Address(r21, r22)); //    cmovo r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::overflow, r21, Address(r22, r23)); //    cmovo r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::overflow, r22, Address(r23, r24)); //    cmovo r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::overflow, r23, Address(r24, r25)); //    cmovo r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::overflow, r24, Address(r25, r26)); //    cmovo r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::overflow, r25, Address(r26, r27)); //    cmovo r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::overflow, r26, Address(r27, r28)); //    cmovo r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::overflow, r27, Address(r28, r29)); //    cmovo r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::overflow, r28, Address(r29, r30)); //    cmovo r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::overflow, r29, Address(r30, r31)); //    cmovo r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::overflow, r30, Address(r31, rcx)); //    cmovo r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::overflow, r31, Address(rcx, rdx)); //    cmovo r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::noOverflow, rcx, Address(rdx, rbx)); //    cmovno ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::noOverflow, rdx, Address(rbx, r8)); //    cmovno edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::noOverflow, rbx, Address(r8, r9)); //    cmovno ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::noOverflow, r8, Address(r9, r10)); //    cmovno r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::noOverflow, r9, Address(r10, r11)); //    cmovno r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::noOverflow, r10, Address(r11, r12)); //    cmovno r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::noOverflow, r11, Address(r12, r13)); //    cmovno r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::noOverflow, r12, Address(r13, r14)); //    cmovno r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::noOverflow, r13, Address(r14, r15)); //    cmovno r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::noOverflow, r14, Address(r15, r16)); //    cmovno r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::noOverflow, r15, Address(r16, r17)); //    cmovno r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::noOverflow, r16, Address(r17, r18)); //    cmovno r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::noOverflow, r17, Address(r18, r19)); //    cmovno r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::noOverflow, r18, Address(r19, r20)); //    cmovno r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::noOverflow, r19, Address(r20, r21)); //    cmovno r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::noOverflow, r20, Address(r21, r22)); //    cmovno r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::noOverflow, r21, Address(r22, r23)); //    cmovno r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::noOverflow, r22, Address(r23, r24)); //    cmovno r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::noOverflow, r23, Address(r24, r25)); //    cmovno r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::noOverflow, r24, Address(r25, r26)); //    cmovno r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::noOverflow, r25, Address(r26, r27)); //    cmovno r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::noOverflow, r26, Address(r27, r28)); //    cmovno r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::noOverflow, r27, Address(r28, r29)); //    cmovno r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::noOverflow, r28, Address(r29, r30)); //    cmovno r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::noOverflow, r29, Address(r30, r31)); //    cmovno r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::noOverflow, r30, Address(r31, rcx)); //    cmovno r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::noOverflow, r31, Address(rcx, rdx)); //    cmovno r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::below, rcx, Address(rdx, rbx)); //    cmovb ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::below, rdx, Address(rbx, r8)); //    cmovb edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::below, rbx, Address(r8, r9)); //    cmovb ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::below, r8, Address(r9, r10)); //    cmovb r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::below, r9, Address(r10, r11)); //    cmovb r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::below, r10, Address(r11, r12)); //    cmovb r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::below, r11, Address(r12, r13)); //    cmovb r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::below, r12, Address(r13, r14)); //    cmovb r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::below, r13, Address(r14, r15)); //    cmovb r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::below, r14, Address(r15, r16)); //    cmovb r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::below, r15, Address(r16, r17)); //    cmovb r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::below, r16, Address(r17, r18)); //    cmovb r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::below, r17, Address(r18, r19)); //    cmovb r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::below, r18, Address(r19, r20)); //    cmovb r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::below, r19, Address(r20, r21)); //    cmovb r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::below, r20, Address(r21, r22)); //    cmovb r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::below, r21, Address(r22, r23)); //    cmovb r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::below, r22, Address(r23, r24)); //    cmovb r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::below, r23, Address(r24, r25)); //    cmovb r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::below, r24, Address(r25, r26)); //    cmovb r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::below, r25, Address(r26, r27)); //    cmovb r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::below, r26, Address(r27, r28)); //    cmovb r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::below, r27, Address(r28, r29)); //    cmovb r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::below, r28, Address(r29, r30)); //    cmovb r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::below, r29, Address(r30, r31)); //    cmovb r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::below, r30, Address(r31, rcx)); //    cmovb r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::below, r31, Address(rcx, rdx)); //    cmovb r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::aboveEqual, rcx, Address(rdx, rbx)); //    cmovae ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::aboveEqual, rdx, Address(rbx, r8)); //    cmovae edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::aboveEqual, rbx, Address(r8, r9)); //    cmovae ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::aboveEqual, r8, Address(r9, r10)); //    cmovae r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::aboveEqual, r9, Address(r10, r11)); //    cmovae r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::aboveEqual, r10, Address(r11, r12)); //    cmovae r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::aboveEqual, r11, Address(r12, r13)); //    cmovae r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::aboveEqual, r12, Address(r13, r14)); //    cmovae r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::aboveEqual, r13, Address(r14, r15)); //    cmovae r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::aboveEqual, r14, Address(r15, r16)); //    cmovae r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::aboveEqual, r15, Address(r16, r17)); //    cmovae r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::aboveEqual, r16, Address(r17, r18)); //    cmovae r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::aboveEqual, r17, Address(r18, r19)); //    cmovae r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::aboveEqual, r18, Address(r19, r20)); //    cmovae r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::aboveEqual, r19, Address(r20, r21)); //    cmovae r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::aboveEqual, r20, Address(r21, r22)); //    cmovae r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::aboveEqual, r21, Address(r22, r23)); //    cmovae r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::aboveEqual, r22, Address(r23, r24)); //    cmovae r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::aboveEqual, r23, Address(r24, r25)); //    cmovae r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::aboveEqual, r24, Address(r25, r26)); //    cmovae r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::aboveEqual, r25, Address(r26, r27)); //    cmovae r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::aboveEqual, r26, Address(r27, r28)); //    cmovae r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::aboveEqual, r27, Address(r28, r29)); //    cmovae r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::aboveEqual, r28, Address(r29, r30)); //    cmovae r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::aboveEqual, r29, Address(r30, r31)); //    cmovae r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::aboveEqual, r30, Address(r31, rcx)); //    cmovae r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::aboveEqual, r31, Address(rcx, rdx)); //    cmovae r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::zero, rcx, Address(rdx, rbx)); //    cmovz ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::zero, rdx, Address(rbx, r8)); //    cmovz edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::zero, rbx, Address(r8, r9)); //    cmovz ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::zero, r8, Address(r9, r10)); //    cmovz r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::zero, r9, Address(r10, r11)); //    cmovz r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::zero, r10, Address(r11, r12)); //    cmovz r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::zero, r11, Address(r12, r13)); //    cmovz r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::zero, r12, Address(r13, r14)); //    cmovz r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::zero, r13, Address(r14, r15)); //    cmovz r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::zero, r14, Address(r15, r16)); //    cmovz r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::zero, r15, Address(r16, r17)); //    cmovz r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::zero, r16, Address(r17, r18)); //    cmovz r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::zero, r17, Address(r18, r19)); //    cmovz r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::zero, r18, Address(r19, r20)); //    cmovz r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::zero, r19, Address(r20, r21)); //    cmovz r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::zero, r20, Address(r21, r22)); //    cmovz r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::zero, r21, Address(r22, r23)); //    cmovz r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::zero, r22, Address(r23, r24)); //    cmovz r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::zero, r23, Address(r24, r25)); //    cmovz r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::zero, r24, Address(r25, r26)); //    cmovz r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::zero, r25, Address(r26, r27)); //    cmovz r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::zero, r26, Address(r27, r28)); //    cmovz r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::zero, r27, Address(r28, r29)); //    cmovz r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::zero, r28, Address(r29, r30)); //    cmovz r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::zero, r29, Address(r30, r31)); //    cmovz r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::zero, r30, Address(r31, rcx)); //    cmovz r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::zero, r31, Address(rcx, rdx)); //    cmovz r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::notZero, rcx, Address(rdx, rbx)); //    cmovnz ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::notZero, rdx, Address(rbx, r8)); //    cmovnz edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::notZero, rbx, Address(r8, r9)); //    cmovnz ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::notZero, r8, Address(r9, r10)); //    cmovnz r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::notZero, r9, Address(r10, r11)); //    cmovnz r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::notZero, r10, Address(r11, r12)); //    cmovnz r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::notZero, r11, Address(r12, r13)); //    cmovnz r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::notZero, r12, Address(r13, r14)); //    cmovnz r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::notZero, r13, Address(r14, r15)); //    cmovnz r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::notZero, r14, Address(r15, r16)); //    cmovnz r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::notZero, r15, Address(r16, r17)); //    cmovnz r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::notZero, r16, Address(r17, r18)); //    cmovnz r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::notZero, r17, Address(r18, r19)); //    cmovnz r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::notZero, r18, Address(r19, r20)); //    cmovnz r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::notZero, r19, Address(r20, r21)); //    cmovnz r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::notZero, r20, Address(r21, r22)); //    cmovnz r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::notZero, r21, Address(r22, r23)); //    cmovnz r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::notZero, r22, Address(r23, r24)); //    cmovnz r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::notZero, r23, Address(r24, r25)); //    cmovnz r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::notZero, r24, Address(r25, r26)); //    cmovnz r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::notZero, r25, Address(r26, r27)); //    cmovnz r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::notZero, r26, Address(r27, r28)); //    cmovnz r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::notZero, r27, Address(r28, r29)); //    cmovnz r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::notZero, r28, Address(r29, r30)); //    cmovnz r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::notZero, r29, Address(r30, r31)); //    cmovnz r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::notZero, r30, Address(r31, rcx)); //    cmovnz r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::notZero, r31, Address(rcx, rdx)); //    cmovnz r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::belowEqual, rcx, Address(rdx, rbx)); //    cmovbe ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::belowEqual, rdx, Address(rbx, r8)); //    cmovbe edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::belowEqual, rbx, Address(r8, r9)); //    cmovbe ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::belowEqual, r8, Address(r9, r10)); //    cmovbe r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::belowEqual, r9, Address(r10, r11)); //    cmovbe r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::belowEqual, r10, Address(r11, r12)); //    cmovbe r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::belowEqual, r11, Address(r12, r13)); //    cmovbe r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::belowEqual, r12, Address(r13, r14)); //    cmovbe r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::belowEqual, r13, Address(r14, r15)); //    cmovbe r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::belowEqual, r14, Address(r15, r16)); //    cmovbe r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::belowEqual, r15, Address(r16, r17)); //    cmovbe r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::belowEqual, r16, Address(r17, r18)); //    cmovbe r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::belowEqual, r17, Address(r18, r19)); //    cmovbe r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::belowEqual, r18, Address(r19, r20)); //    cmovbe r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::belowEqual, r19, Address(r20, r21)); //    cmovbe r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::belowEqual, r20, Address(r21, r22)); //    cmovbe r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::belowEqual, r21, Address(r22, r23)); //    cmovbe r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::belowEqual, r22, Address(r23, r24)); //    cmovbe r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::belowEqual, r23, Address(r24, r25)); //    cmovbe r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::belowEqual, r24, Address(r25, r26)); //    cmovbe r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::belowEqual, r25, Address(r26, r27)); //    cmovbe r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::belowEqual, r26, Address(r27, r28)); //    cmovbe r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::belowEqual, r27, Address(r28, r29)); //    cmovbe r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::belowEqual, r28, Address(r29, r30)); //    cmovbe r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::belowEqual, r29, Address(r30, r31)); //    cmovbe r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::belowEqual, r30, Address(r31, rcx)); //    cmovbe r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::belowEqual, r31, Address(rcx, rdx)); //    cmovbe r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::above, rcx, Address(rdx, rbx)); //    cmova ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::above, rdx, Address(rbx, r8)); //    cmova edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::above, rbx, Address(r8, r9)); //    cmova ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::above, r8, Address(r9, r10)); //    cmova r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::above, r9, Address(r10, r11)); //    cmova r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::above, r10, Address(r11, r12)); //    cmova r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::above, r11, Address(r12, r13)); //    cmova r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::above, r12, Address(r13, r14)); //    cmova r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::above, r13, Address(r14, r15)); //    cmova r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::above, r14, Address(r15, r16)); //    cmova r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::above, r15, Address(r16, r17)); //    cmova r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::above, r16, Address(r17, r18)); //    cmova r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::above, r17, Address(r18, r19)); //    cmova r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::above, r18, Address(r19, r20)); //    cmova r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::above, r19, Address(r20, r21)); //    cmova r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::above, r20, Address(r21, r22)); //    cmova r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::above, r21, Address(r22, r23)); //    cmova r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::above, r22, Address(r23, r24)); //    cmova r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::above, r23, Address(r24, r25)); //    cmova r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::above, r24, Address(r25, r26)); //    cmova r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::above, r25, Address(r26, r27)); //    cmova r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::above, r26, Address(r27, r28)); //    cmova r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::above, r27, Address(r28, r29)); //    cmova r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::above, r28, Address(r29, r30)); //    cmova r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::above, r29, Address(r30, r31)); //    cmova r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::above, r30, Address(r31, rcx)); //    cmova r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::above, r31, Address(rcx, rdx)); //    cmova r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::negative, rcx, Address(rdx, rbx)); //    cmovs ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::negative, rdx, Address(rbx, r8)); //    cmovs edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::negative, rbx, Address(r8, r9)); //    cmovs ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::negative, r8, Address(r9, r10)); //    cmovs r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::negative, r9, Address(r10, r11)); //    cmovs r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::negative, r10, Address(r11, r12)); //    cmovs r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::negative, r11, Address(r12, r13)); //    cmovs r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::negative, r12, Address(r13, r14)); //    cmovs r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::negative, r13, Address(r14, r15)); //    cmovs r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::negative, r14, Address(r15, r16)); //    cmovs r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::negative, r15, Address(r16, r17)); //    cmovs r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::negative, r16, Address(r17, r18)); //    cmovs r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::negative, r17, Address(r18, r19)); //    cmovs r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::negative, r18, Address(r19, r20)); //    cmovs r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::negative, r19, Address(r20, r21)); //    cmovs r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::negative, r20, Address(r21, r22)); //    cmovs r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::negative, r21, Address(r22, r23)); //    cmovs r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::negative, r22, Address(r23, r24)); //    cmovs r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::negative, r23, Address(r24, r25)); //    cmovs r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::negative, r24, Address(r25, r26)); //    cmovs r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::negative, r25, Address(r26, r27)); //    cmovs r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::negative, r26, Address(r27, r28)); //    cmovs r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::negative, r27, Address(r28, r29)); //    cmovs r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::negative, r28, Address(r29, r30)); //    cmovs r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::negative, r29, Address(r30, r31)); //    cmovs r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::negative, r30, Address(r31, rcx)); //    cmovs r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::negative, r31, Address(rcx, rdx)); //    cmovs r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::positive, rcx, Address(rdx, rbx)); //    cmovns ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::positive, rdx, Address(rbx, r8)); //    cmovns edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::positive, rbx, Address(r8, r9)); //    cmovns ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::positive, r8, Address(r9, r10)); //    cmovns r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::positive, r9, Address(r10, r11)); //    cmovns r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::positive, r10, Address(r11, r12)); //    cmovns r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::positive, r11, Address(r12, r13)); //    cmovns r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::positive, r12, Address(r13, r14)); //    cmovns r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::positive, r13, Address(r14, r15)); //    cmovns r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::positive, r14, Address(r15, r16)); //    cmovns r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::positive, r15, Address(r16, r17)); //    cmovns r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::positive, r16, Address(r17, r18)); //    cmovns r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::positive, r17, Address(r18, r19)); //    cmovns r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::positive, r18, Address(r19, r20)); //    cmovns r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::positive, r19, Address(r20, r21)); //    cmovns r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::positive, r20, Address(r21, r22)); //    cmovns r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::positive, r21, Address(r22, r23)); //    cmovns r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::positive, r22, Address(r23, r24)); //    cmovns r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::positive, r23, Address(r24, r25)); //    cmovns r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::positive, r24, Address(r25, r26)); //    cmovns r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::positive, r25, Address(r26, r27)); //    cmovns r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::positive, r26, Address(r27, r28)); //    cmovns r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::positive, r27, Address(r28, r29)); //    cmovns r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::positive, r28, Address(r29, r30)); //    cmovns r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::positive, r29, Address(r30, r31)); //    cmovns r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::positive, r30, Address(r31, rcx)); //    cmovns r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::positive, r31, Address(rcx, rdx)); //    cmovns r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::parity, rcx, Address(rdx, rbx)); //    cmovp ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::parity, rdx, Address(rbx, r8)); //    cmovp edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::parity, rbx, Address(r8, r9)); //    cmovp ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::parity, r8, Address(r9, r10)); //    cmovp r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::parity, r9, Address(r10, r11)); //    cmovp r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::parity, r10, Address(r11, r12)); //    cmovp r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::parity, r11, Address(r12, r13)); //    cmovp r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::parity, r12, Address(r13, r14)); //    cmovp r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::parity, r13, Address(r14, r15)); //    cmovp r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::parity, r14, Address(r15, r16)); //    cmovp r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::parity, r15, Address(r16, r17)); //    cmovp r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::parity, r16, Address(r17, r18)); //    cmovp r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::parity, r17, Address(r18, r19)); //    cmovp r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::parity, r18, Address(r19, r20)); //    cmovp r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::parity, r19, Address(r20, r21)); //    cmovp r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::parity, r20, Address(r21, r22)); //    cmovp r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::parity, r21, Address(r22, r23)); //    cmovp r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::parity, r22, Address(r23, r24)); //    cmovp r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::parity, r23, Address(r24, r25)); //    cmovp r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::parity, r24, Address(r25, r26)); //    cmovp r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::parity, r25, Address(r26, r27)); //    cmovp r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::parity, r26, Address(r27, r28)); //    cmovp r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::parity, r27, Address(r28, r29)); //    cmovp r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::parity, r28, Address(r29, r30)); //    cmovp r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::parity, r29, Address(r30, r31)); //    cmovp r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::parity, r30, Address(r31, rcx)); //    cmovp r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::parity, r31, Address(rcx, rdx)); //    cmovp r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::noParity, rcx, Address(rdx, rbx)); //    cmovnp ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::noParity, rdx, Address(rbx, r8)); //    cmovnp edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::noParity, rbx, Address(r8, r9)); //    cmovnp ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::noParity, r8, Address(r9, r10)); //    cmovnp r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::noParity, r9, Address(r10, r11)); //    cmovnp r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::noParity, r10, Address(r11, r12)); //    cmovnp r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::noParity, r11, Address(r12, r13)); //    cmovnp r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::noParity, r12, Address(r13, r14)); //    cmovnp r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::noParity, r13, Address(r14, r15)); //    cmovnp r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::noParity, r14, Address(r15, r16)); //    cmovnp r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::noParity, r15, Address(r16, r17)); //    cmovnp r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::noParity, r16, Address(r17, r18)); //    cmovnp r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::noParity, r17, Address(r18, r19)); //    cmovnp r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::noParity, r18, Address(r19, r20)); //    cmovnp r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::noParity, r19, Address(r20, r21)); //    cmovnp r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::noParity, r20, Address(r21, r22)); //    cmovnp r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::noParity, r21, Address(r22, r23)); //    cmovnp r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::noParity, r22, Address(r23, r24)); //    cmovnp r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::noParity, r23, Address(r24, r25)); //    cmovnp r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::noParity, r24, Address(r25, r26)); //    cmovnp r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::noParity, r25, Address(r26, r27)); //    cmovnp r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::noParity, r26, Address(r27, r28)); //    cmovnp r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::noParity, r27, Address(r28, r29)); //    cmovnp r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::noParity, r28, Address(r29, r30)); //    cmovnp r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::noParity, r29, Address(r30, r31)); //    cmovnp r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::noParity, r30, Address(r31, rcx)); //    cmovnp r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::noParity, r31, Address(rcx, rdx)); //    cmovnp r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::less, rcx, Address(rdx, rbx)); //    cmovl ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::less, rdx, Address(rbx, r8)); //    cmovl edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::less, rbx, Address(r8, r9)); //    cmovl ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::less, r8, Address(r9, r10)); //    cmovl r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::less, r9, Address(r10, r11)); //    cmovl r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::less, r10, Address(r11, r12)); //    cmovl r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::less, r11, Address(r12, r13)); //    cmovl r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::less, r12, Address(r13, r14)); //    cmovl r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::less, r13, Address(r14, r15)); //    cmovl r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::less, r14, Address(r15, r16)); //    cmovl r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::less, r15, Address(r16, r17)); //    cmovl r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::less, r16, Address(r17, r18)); //    cmovl r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::less, r17, Address(r18, r19)); //    cmovl r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::less, r18, Address(r19, r20)); //    cmovl r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::less, r19, Address(r20, r21)); //    cmovl r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::less, r20, Address(r21, r22)); //    cmovl r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::less, r21, Address(r22, r23)); //    cmovl r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::less, r22, Address(r23, r24)); //    cmovl r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::less, r23, Address(r24, r25)); //    cmovl r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::less, r24, Address(r25, r26)); //    cmovl r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::less, r25, Address(r26, r27)); //    cmovl r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::less, r26, Address(r27, r28)); //    cmovl r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::less, r27, Address(r28, r29)); //    cmovl r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::less, r28, Address(r29, r30)); //    cmovl r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::less, r29, Address(r30, r31)); //    cmovl r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::less, r30, Address(r31, rcx)); //    cmovl r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::less, r31, Address(rcx, rdx)); //    cmovl r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::greaterEqual, rcx, Address(rdx, rbx)); //    cmovge ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::greaterEqual, rdx, Address(rbx, r8)); //    cmovge edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::greaterEqual, rbx, Address(r8, r9)); //    cmovge ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::greaterEqual, r8, Address(r9, r10)); //    cmovge r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::greaterEqual, r9, Address(r10, r11)); //    cmovge r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::greaterEqual, r10, Address(r11, r12)); //    cmovge r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::greaterEqual, r11, Address(r12, r13)); //    cmovge r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::greaterEqual, r12, Address(r13, r14)); //    cmovge r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::greaterEqual, r13, Address(r14, r15)); //    cmovge r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::greaterEqual, r14, Address(r15, r16)); //    cmovge r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::greaterEqual, r15, Address(r16, r17)); //    cmovge r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::greaterEqual, r16, Address(r17, r18)); //    cmovge r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::greaterEqual, r17, Address(r18, r19)); //    cmovge r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::greaterEqual, r18, Address(r19, r20)); //    cmovge r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::greaterEqual, r19, Address(r20, r21)); //    cmovge r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::greaterEqual, r20, Address(r21, r22)); //    cmovge r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::greaterEqual, r21, Address(r22, r23)); //    cmovge r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::greaterEqual, r22, Address(r23, r24)); //    cmovge r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::greaterEqual, r23, Address(r24, r25)); //    cmovge r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::greaterEqual, r24, Address(r25, r26)); //    cmovge r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::greaterEqual, r25, Address(r26, r27)); //    cmovge r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::greaterEqual, r26, Address(r27, r28)); //    cmovge r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::greaterEqual, r27, Address(r28, r29)); //    cmovge r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::greaterEqual, r28, Address(r29, r30)); //    cmovge r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::greaterEqual, r29, Address(r30, r31)); //    cmovge r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::greaterEqual, r30, Address(r31, rcx)); //    cmovge r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::greaterEqual, r31, Address(rcx, rdx)); //    cmovge r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::lessEqual, rcx, Address(rdx, rbx)); //    cmovle ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::lessEqual, rdx, Address(rbx, r8)); //    cmovle edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::lessEqual, rbx, Address(r8, r9)); //    cmovle ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::lessEqual, r8, Address(r9, r10)); //    cmovle r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::lessEqual, r9, Address(r10, r11)); //    cmovle r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::lessEqual, r10, Address(r11, r12)); //    cmovle r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::lessEqual, r11, Address(r12, r13)); //    cmovle r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::lessEqual, r12, Address(r13, r14)); //    cmovle r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::lessEqual, r13, Address(r14, r15)); //    cmovle r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::lessEqual, r14, Address(r15, r16)); //    cmovle r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::lessEqual, r15, Address(r16, r17)); //    cmovle r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::lessEqual, r16, Address(r17, r18)); //    cmovle r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::lessEqual, r17, Address(r18, r19)); //    cmovle r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::lessEqual, r18, Address(r19, r20)); //    cmovle r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::lessEqual, r19, Address(r20, r21)); //    cmovle r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::lessEqual, r20, Address(r21, r22)); //    cmovle r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::lessEqual, r21, Address(r22, r23)); //    cmovle r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::lessEqual, r22, Address(r23, r24)); //    cmovle r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::lessEqual, r23, Address(r24, r25)); //    cmovle r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::lessEqual, r24, Address(r25, r26)); //    cmovle r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::lessEqual, r25, Address(r26, r27)); //    cmovle r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::lessEqual, r26, Address(r27, r28)); //    cmovle r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::lessEqual, r27, Address(r28, r29)); //    cmovle r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::lessEqual, r28, Address(r29, r30)); //    cmovle r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::lessEqual, r29, Address(r30, r31)); //    cmovle r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::lessEqual, r30, Address(r31, rcx)); //    cmovle r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::lessEqual, r31, Address(rcx, rdx)); //    cmovle r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ cmovl (Assembler::Condition::greater, rcx, Address(rdx, rbx)); //    cmovg ecx, dword ptr [rdx + rbx]
#ifdef _LP64
    __ cmovl (Assembler::Condition::greater, rdx, Address(rbx, r8)); //    cmovg edx, dword ptr [rbx + r8]
    __ cmovl (Assembler::Condition::greater, rbx, Address(r8, r9)); //    cmovg ebx, dword ptr [r8 + r9]
    __ cmovl (Assembler::Condition::greater, r8, Address(r9, r10)); //    cmovg r8d, dword ptr [r9 + r10]
    __ cmovl (Assembler::Condition::greater, r9, Address(r10, r11)); //    cmovg r9d, dword ptr [r10 + r11]
    __ cmovl (Assembler::Condition::greater, r10, Address(r11, r12)); //    cmovg r10d, dword ptr [r11 + r12]
    __ cmovl (Assembler::Condition::greater, r11, Address(r12, r13)); //    cmovg r11d, dword ptr [r12 + r13]
    __ cmovl (Assembler::Condition::greater, r12, Address(r13, r14)); //    cmovg r12d, dword ptr [r13 + r14]
    __ cmovl (Assembler::Condition::greater, r13, Address(r14, r15)); //    cmovg r13d, dword ptr [r14 + r15]
    __ cmovl (Assembler::Condition::greater, r14, Address(r15, r16)); //    cmovg r14d, dword ptr [r15 + r16]
    __ cmovl (Assembler::Condition::greater, r15, Address(r16, r17)); //    cmovg r15d, dword ptr [r16 + r17]
    __ cmovl (Assembler::Condition::greater, r16, Address(r17, r18)); //    cmovg r16d, dword ptr [r17 + r18]
    __ cmovl (Assembler::Condition::greater, r17, Address(r18, r19)); //    cmovg r17d, dword ptr [r18 + r19]
    __ cmovl (Assembler::Condition::greater, r18, Address(r19, r20)); //    cmovg r18d, dword ptr [r19 + r20]
    __ cmovl (Assembler::Condition::greater, r19, Address(r20, r21)); //    cmovg r19d, dword ptr [r20 + r21]
    __ cmovl (Assembler::Condition::greater, r20, Address(r21, r22)); //    cmovg r20d, dword ptr [r21 + r22]
    __ cmovl (Assembler::Condition::greater, r21, Address(r22, r23)); //    cmovg r21d, dword ptr [r22 + r23]
    __ cmovl (Assembler::Condition::greater, r22, Address(r23, r24)); //    cmovg r22d, dword ptr [r23 + r24]
    __ cmovl (Assembler::Condition::greater, r23, Address(r24, r25)); //    cmovg r23d, dword ptr [r24 + r25]
    __ cmovl (Assembler::Condition::greater, r24, Address(r25, r26)); //    cmovg r24d, dword ptr [r25 + r26]
    __ cmovl (Assembler::Condition::greater, r25, Address(r26, r27)); //    cmovg r25d, dword ptr [r26 + r27]
    __ cmovl (Assembler::Condition::greater, r26, Address(r27, r28)); //    cmovg r26d, dword ptr [r27 + r28]
    __ cmovl (Assembler::Condition::greater, r27, Address(r28, r29)); //    cmovg r27d, dword ptr [r28 + r29]
    __ cmovl (Assembler::Condition::greater, r28, Address(r29, r30)); //    cmovg r28d, dword ptr [r29 + r30]
    __ cmovl (Assembler::Condition::greater, r29, Address(r30, r31)); //    cmovg r29d, dword ptr [r30 + r31]
    __ cmovl (Assembler::Condition::greater, r30, Address(r31, rcx)); //    cmovg r30d, dword ptr [r31 + rcx]
    __ cmovl (Assembler::Condition::greater, r31, Address(rcx, rdx)); //    cmovg r31d, dword ptr [rcx + rdx]
#endif // _LP64
    __ setb (Assembler::Condition::overflow, rcx);     //    seto cl
    __ setb (Assembler::Condition::overflow, rdx);     //    seto dl
    __ setb (Assembler::Condition::overflow, rbx);     //    seto bl
#ifdef _LP64
    __ setb (Assembler::Condition::overflow, r8);      //    seto r8b
    __ setb (Assembler::Condition::overflow, r9);      //    seto r9b
    __ setb (Assembler::Condition::overflow, r10);     //    seto r10b
    __ setb (Assembler::Condition::overflow, r11);     //    seto r11b
    __ setb (Assembler::Condition::overflow, r12);     //    seto r12b
    __ setb (Assembler::Condition::overflow, r13);     //    seto r13b
    __ setb (Assembler::Condition::overflow, r14);     //    seto r14b
    __ setb (Assembler::Condition::overflow, r15);     //    seto r15b
    __ setb (Assembler::Condition::overflow, r16);     //    seto r16b
    __ setb (Assembler::Condition::overflow, r17);     //    seto r17b
    __ setb (Assembler::Condition::overflow, r18);     //    seto r18b
    __ setb (Assembler::Condition::overflow, r19);     //    seto r19b
    __ setb (Assembler::Condition::overflow, r20);     //    seto r20b
    __ setb (Assembler::Condition::overflow, r21);     //    seto r21b
    __ setb (Assembler::Condition::overflow, r22);     //    seto r22b
    __ setb (Assembler::Condition::overflow, r23);     //    seto r23b
    __ setb (Assembler::Condition::overflow, r24);     //    seto r24b
    __ setb (Assembler::Condition::overflow, r25);     //    seto r25b
    __ setb (Assembler::Condition::overflow, r26);     //    seto r26b
    __ setb (Assembler::Condition::overflow, r27);     //    seto r27b
    __ setb (Assembler::Condition::overflow, r28);     //    seto r28b
    __ setb (Assembler::Condition::overflow, r29);     //    seto r29b
    __ setb (Assembler::Condition::overflow, r30);     //    seto r30b
    __ setb (Assembler::Condition::overflow, r31);     //    seto r31b
#endif // _LP64
    __ setb (Assembler::Condition::noOverflow, rcx);   //    setno cl
    __ setb (Assembler::Condition::noOverflow, rdx);   //    setno dl
    __ setb (Assembler::Condition::noOverflow, rbx);   //    setno bl
#ifdef _LP64
    __ setb (Assembler::Condition::noOverflow, r8);    //    setno r8b
    __ setb (Assembler::Condition::noOverflow, r9);    //    setno r9b
    __ setb (Assembler::Condition::noOverflow, r10);   //    setno r10b
    __ setb (Assembler::Condition::noOverflow, r11);   //    setno r11b
    __ setb (Assembler::Condition::noOverflow, r12);   //    setno r12b
    __ setb (Assembler::Condition::noOverflow, r13);   //    setno r13b
    __ setb (Assembler::Condition::noOverflow, r14);   //    setno r14b
    __ setb (Assembler::Condition::noOverflow, r15);   //    setno r15b
    __ setb (Assembler::Condition::noOverflow, r16);   //    setno r16b
    __ setb (Assembler::Condition::noOverflow, r17);   //    setno r17b
    __ setb (Assembler::Condition::noOverflow, r18);   //    setno r18b
    __ setb (Assembler::Condition::noOverflow, r19);   //    setno r19b
    __ setb (Assembler::Condition::noOverflow, r20);   //    setno r20b
    __ setb (Assembler::Condition::noOverflow, r21);   //    setno r21b
    __ setb (Assembler::Condition::noOverflow, r22);   //    setno r22b
    __ setb (Assembler::Condition::noOverflow, r23);   //    setno r23b
    __ setb (Assembler::Condition::noOverflow, r24);   //    setno r24b
    __ setb (Assembler::Condition::noOverflow, r25);   //    setno r25b
    __ setb (Assembler::Condition::noOverflow, r26);   //    setno r26b
    __ setb (Assembler::Condition::noOverflow, r27);   //    setno r27b
    __ setb (Assembler::Condition::noOverflow, r28);   //    setno r28b
    __ setb (Assembler::Condition::noOverflow, r29);   //    setno r29b
    __ setb (Assembler::Condition::noOverflow, r30);   //    setno r30b
    __ setb (Assembler::Condition::noOverflow, r31);   //    setno r31b
#endif // _LP64
    __ setb (Assembler::Condition::below, rcx);        //    setb cl
    __ setb (Assembler::Condition::below, rdx);        //    setb dl
    __ setb (Assembler::Condition::below, rbx);        //    setb bl
#ifdef _LP64
    __ setb (Assembler::Condition::below, r8);         //    setb r8b
    __ setb (Assembler::Condition::below, r9);         //    setb r9b
    __ setb (Assembler::Condition::below, r10);        //    setb r10b
    __ setb (Assembler::Condition::below, r11);        //    setb r11b
    __ setb (Assembler::Condition::below, r12);        //    setb r12b
    __ setb (Assembler::Condition::below, r13);        //    setb r13b
    __ setb (Assembler::Condition::below, r14);        //    setb r14b
    __ setb (Assembler::Condition::below, r15);        //    setb r15b
    __ setb (Assembler::Condition::below, r16);        //    setb r16b
    __ setb (Assembler::Condition::below, r17);        //    setb r17b
    __ setb (Assembler::Condition::below, r18);        //    setb r18b
    __ setb (Assembler::Condition::below, r19);        //    setb r19b
    __ setb (Assembler::Condition::below, r20);        //    setb r20b
    __ setb (Assembler::Condition::below, r21);        //    setb r21b
    __ setb (Assembler::Condition::below, r22);        //    setb r22b
    __ setb (Assembler::Condition::below, r23);        //    setb r23b
    __ setb (Assembler::Condition::below, r24);        //    setb r24b
    __ setb (Assembler::Condition::below, r25);        //    setb r25b
    __ setb (Assembler::Condition::below, r26);        //    setb r26b
    __ setb (Assembler::Condition::below, r27);        //    setb r27b
    __ setb (Assembler::Condition::below, r28);        //    setb r28b
    __ setb (Assembler::Condition::below, r29);        //    setb r29b
    __ setb (Assembler::Condition::below, r30);        //    setb r30b
    __ setb (Assembler::Condition::below, r31);        //    setb r31b
#endif // _LP64
    __ setb (Assembler::Condition::aboveEqual, rcx);   //    setae cl
    __ setb (Assembler::Condition::aboveEqual, rdx);   //    setae dl
    __ setb (Assembler::Condition::aboveEqual, rbx);   //    setae bl
#ifdef _LP64
    __ setb (Assembler::Condition::aboveEqual, r8);    //    setae r8b
    __ setb (Assembler::Condition::aboveEqual, r9);    //    setae r9b
    __ setb (Assembler::Condition::aboveEqual, r10);   //    setae r10b
    __ setb (Assembler::Condition::aboveEqual, r11);   //    setae r11b
    __ setb (Assembler::Condition::aboveEqual, r12);   //    setae r12b
    __ setb (Assembler::Condition::aboveEqual, r13);   //    setae r13b
    __ setb (Assembler::Condition::aboveEqual, r14);   //    setae r14b
    __ setb (Assembler::Condition::aboveEqual, r15);   //    setae r15b
    __ setb (Assembler::Condition::aboveEqual, r16);   //    setae r16b
    __ setb (Assembler::Condition::aboveEqual, r17);   //    setae r17b
    __ setb (Assembler::Condition::aboveEqual, r18);   //    setae r18b
    __ setb (Assembler::Condition::aboveEqual, r19);   //    setae r19b
    __ setb (Assembler::Condition::aboveEqual, r20);   //    setae r20b
    __ setb (Assembler::Condition::aboveEqual, r21);   //    setae r21b
    __ setb (Assembler::Condition::aboveEqual, r22);   //    setae r22b
    __ setb (Assembler::Condition::aboveEqual, r23);   //    setae r23b
    __ setb (Assembler::Condition::aboveEqual, r24);   //    setae r24b
    __ setb (Assembler::Condition::aboveEqual, r25);   //    setae r25b
    __ setb (Assembler::Condition::aboveEqual, r26);   //    setae r26b
    __ setb (Assembler::Condition::aboveEqual, r27);   //    setae r27b
    __ setb (Assembler::Condition::aboveEqual, r28);   //    setae r28b
    __ setb (Assembler::Condition::aboveEqual, r29);   //    setae r29b
    __ setb (Assembler::Condition::aboveEqual, r30);   //    setae r30b
    __ setb (Assembler::Condition::aboveEqual, r31);   //    setae r31b
#endif // _LP64
    __ setb (Assembler::Condition::zero, rcx);         //    setz cl
    __ setb (Assembler::Condition::zero, rdx);         //    setz dl
    __ setb (Assembler::Condition::zero, rbx);         //    setz bl
#ifdef _LP64
    __ setb (Assembler::Condition::zero, r8);          //    setz r8b
    __ setb (Assembler::Condition::zero, r9);          //    setz r9b
    __ setb (Assembler::Condition::zero, r10);         //    setz r10b
    __ setb (Assembler::Condition::zero, r11);         //    setz r11b
    __ setb (Assembler::Condition::zero, r12);         //    setz r12b
    __ setb (Assembler::Condition::zero, r13);         //    setz r13b
    __ setb (Assembler::Condition::zero, r14);         //    setz r14b
    __ setb (Assembler::Condition::zero, r15);         //    setz r15b
    __ setb (Assembler::Condition::zero, r16);         //    setz r16b
    __ setb (Assembler::Condition::zero, r17);         //    setz r17b
    __ setb (Assembler::Condition::zero, r18);         //    setz r18b
    __ setb (Assembler::Condition::zero, r19);         //    setz r19b
    __ setb (Assembler::Condition::zero, r20);         //    setz r20b
    __ setb (Assembler::Condition::zero, r21);         //    setz r21b
    __ setb (Assembler::Condition::zero, r22);         //    setz r22b
    __ setb (Assembler::Condition::zero, r23);         //    setz r23b
    __ setb (Assembler::Condition::zero, r24);         //    setz r24b
    __ setb (Assembler::Condition::zero, r25);         //    setz r25b
    __ setb (Assembler::Condition::zero, r26);         //    setz r26b
    __ setb (Assembler::Condition::zero, r27);         //    setz r27b
    __ setb (Assembler::Condition::zero, r28);         //    setz r28b
    __ setb (Assembler::Condition::zero, r29);         //    setz r29b
    __ setb (Assembler::Condition::zero, r30);         //    setz r30b
    __ setb (Assembler::Condition::zero, r31);         //    setz r31b
#endif // _LP64
    __ setb (Assembler::Condition::notZero, rcx);      //    setnz cl
    __ setb (Assembler::Condition::notZero, rdx);      //    setnz dl
    __ setb (Assembler::Condition::notZero, rbx);      //    setnz bl
#ifdef _LP64
    __ setb (Assembler::Condition::notZero, r8);       //    setnz r8b
    __ setb (Assembler::Condition::notZero, r9);       //    setnz r9b
    __ setb (Assembler::Condition::notZero, r10);      //    setnz r10b
    __ setb (Assembler::Condition::notZero, r11);      //    setnz r11b
    __ setb (Assembler::Condition::notZero, r12);      //    setnz r12b
    __ setb (Assembler::Condition::notZero, r13);      //    setnz r13b
    __ setb (Assembler::Condition::notZero, r14);      //    setnz r14b
    __ setb (Assembler::Condition::notZero, r15);      //    setnz r15b
    __ setb (Assembler::Condition::notZero, r16);      //    setnz r16b
    __ setb (Assembler::Condition::notZero, r17);      //    setnz r17b
    __ setb (Assembler::Condition::notZero, r18);      //    setnz r18b
    __ setb (Assembler::Condition::notZero, r19);      //    setnz r19b
    __ setb (Assembler::Condition::notZero, r20);      //    setnz r20b
    __ setb (Assembler::Condition::notZero, r21);      //    setnz r21b
    __ setb (Assembler::Condition::notZero, r22);      //    setnz r22b
    __ setb (Assembler::Condition::notZero, r23);      //    setnz r23b
    __ setb (Assembler::Condition::notZero, r24);      //    setnz r24b
    __ setb (Assembler::Condition::notZero, r25);      //    setnz r25b
    __ setb (Assembler::Condition::notZero, r26);      //    setnz r26b
    __ setb (Assembler::Condition::notZero, r27);      //    setnz r27b
    __ setb (Assembler::Condition::notZero, r28);      //    setnz r28b
    __ setb (Assembler::Condition::notZero, r29);      //    setnz r29b
    __ setb (Assembler::Condition::notZero, r30);      //    setnz r30b
    __ setb (Assembler::Condition::notZero, r31);      //    setnz r31b
#endif // _LP64
    __ setb (Assembler::Condition::belowEqual, rcx);   //    setbe cl
    __ setb (Assembler::Condition::belowEqual, rdx);   //    setbe dl
    __ setb (Assembler::Condition::belowEqual, rbx);   //    setbe bl
#ifdef _LP64
    __ setb (Assembler::Condition::belowEqual, r8);    //    setbe r8b
    __ setb (Assembler::Condition::belowEqual, r9);    //    setbe r9b
    __ setb (Assembler::Condition::belowEqual, r10);   //    setbe r10b
    __ setb (Assembler::Condition::belowEqual, r11);   //    setbe r11b
    __ setb (Assembler::Condition::belowEqual, r12);   //    setbe r12b
    __ setb (Assembler::Condition::belowEqual, r13);   //    setbe r13b
    __ setb (Assembler::Condition::belowEqual, r14);   //    setbe r14b
    __ setb (Assembler::Condition::belowEqual, r15);   //    setbe r15b
    __ setb (Assembler::Condition::belowEqual, r16);   //    setbe r16b
    __ setb (Assembler::Condition::belowEqual, r17);   //    setbe r17b
    __ setb (Assembler::Condition::belowEqual, r18);   //    setbe r18b
    __ setb (Assembler::Condition::belowEqual, r19);   //    setbe r19b
    __ setb (Assembler::Condition::belowEqual, r20);   //    setbe r20b
    __ setb (Assembler::Condition::belowEqual, r21);   //    setbe r21b
    __ setb (Assembler::Condition::belowEqual, r22);   //    setbe r22b
    __ setb (Assembler::Condition::belowEqual, r23);   //    setbe r23b
    __ setb (Assembler::Condition::belowEqual, r24);   //    setbe r24b
    __ setb (Assembler::Condition::belowEqual, r25);   //    setbe r25b
    __ setb (Assembler::Condition::belowEqual, r26);   //    setbe r26b
    __ setb (Assembler::Condition::belowEqual, r27);   //    setbe r27b
    __ setb (Assembler::Condition::belowEqual, r28);   //    setbe r28b
    __ setb (Assembler::Condition::belowEqual, r29);   //    setbe r29b
    __ setb (Assembler::Condition::belowEqual, r30);   //    setbe r30b
    __ setb (Assembler::Condition::belowEqual, r31);   //    setbe r31b
#endif // _LP64
    __ setb (Assembler::Condition::above, rcx);        //    seta cl
    __ setb (Assembler::Condition::above, rdx);        //    seta dl
    __ setb (Assembler::Condition::above, rbx);        //    seta bl
#ifdef _LP64
    __ setb (Assembler::Condition::above, r8);         //    seta r8b
    __ setb (Assembler::Condition::above, r9);         //    seta r9b
    __ setb (Assembler::Condition::above, r10);        //    seta r10b
    __ setb (Assembler::Condition::above, r11);        //    seta r11b
    __ setb (Assembler::Condition::above, r12);        //    seta r12b
    __ setb (Assembler::Condition::above, r13);        //    seta r13b
    __ setb (Assembler::Condition::above, r14);        //    seta r14b
    __ setb (Assembler::Condition::above, r15);        //    seta r15b
    __ setb (Assembler::Condition::above, r16);        //    seta r16b
    __ setb (Assembler::Condition::above, r17);        //    seta r17b
    __ setb (Assembler::Condition::above, r18);        //    seta r18b
    __ setb (Assembler::Condition::above, r19);        //    seta r19b
    __ setb (Assembler::Condition::above, r20);        //    seta r20b
    __ setb (Assembler::Condition::above, r21);        //    seta r21b
    __ setb (Assembler::Condition::above, r22);        //    seta r22b
    __ setb (Assembler::Condition::above, r23);        //    seta r23b
    __ setb (Assembler::Condition::above, r24);        //    seta r24b
    __ setb (Assembler::Condition::above, r25);        //    seta r25b
    __ setb (Assembler::Condition::above, r26);        //    seta r26b
    __ setb (Assembler::Condition::above, r27);        //    seta r27b
    __ setb (Assembler::Condition::above, r28);        //    seta r28b
    __ setb (Assembler::Condition::above, r29);        //    seta r29b
    __ setb (Assembler::Condition::above, r30);        //    seta r30b
    __ setb (Assembler::Condition::above, r31);        //    seta r31b
#endif // _LP64
    __ setb (Assembler::Condition::negative, rcx);     //    sets cl
    __ setb (Assembler::Condition::negative, rdx);     //    sets dl
    __ setb (Assembler::Condition::negative, rbx);     //    sets bl
#ifdef _LP64
    __ setb (Assembler::Condition::negative, r8);      //    sets r8b
    __ setb (Assembler::Condition::negative, r9);      //    sets r9b
    __ setb (Assembler::Condition::negative, r10);     //    sets r10b
    __ setb (Assembler::Condition::negative, r11);     //    sets r11b
    __ setb (Assembler::Condition::negative, r12);     //    sets r12b
    __ setb (Assembler::Condition::negative, r13);     //    sets r13b
    __ setb (Assembler::Condition::negative, r14);     //    sets r14b
    __ setb (Assembler::Condition::negative, r15);     //    sets r15b
    __ setb (Assembler::Condition::negative, r16);     //    sets r16b
    __ setb (Assembler::Condition::negative, r17);     //    sets r17b
    __ setb (Assembler::Condition::negative, r18);     //    sets r18b
    __ setb (Assembler::Condition::negative, r19);     //    sets r19b
    __ setb (Assembler::Condition::negative, r20);     //    sets r20b
    __ setb (Assembler::Condition::negative, r21);     //    sets r21b
    __ setb (Assembler::Condition::negative, r22);     //    sets r22b
    __ setb (Assembler::Condition::negative, r23);     //    sets r23b
    __ setb (Assembler::Condition::negative, r24);     //    sets r24b
    __ setb (Assembler::Condition::negative, r25);     //    sets r25b
    __ setb (Assembler::Condition::negative, r26);     //    sets r26b
    __ setb (Assembler::Condition::negative, r27);     //    sets r27b
    __ setb (Assembler::Condition::negative, r28);     //    sets r28b
    __ setb (Assembler::Condition::negative, r29);     //    sets r29b
    __ setb (Assembler::Condition::negative, r30);     //    sets r30b
    __ setb (Assembler::Condition::negative, r31);     //    sets r31b
#endif // _LP64
    __ setb (Assembler::Condition::positive, rcx);     //    setns cl
    __ setb (Assembler::Condition::positive, rdx);     //    setns dl
    __ setb (Assembler::Condition::positive, rbx);     //    setns bl
#ifdef _LP64
    __ setb (Assembler::Condition::positive, r8);      //    setns r8b
    __ setb (Assembler::Condition::positive, r9);      //    setns r9b
    __ setb (Assembler::Condition::positive, r10);     //    setns r10b
    __ setb (Assembler::Condition::positive, r11);     //    setns r11b
    __ setb (Assembler::Condition::positive, r12);     //    setns r12b
    __ setb (Assembler::Condition::positive, r13);     //    setns r13b
    __ setb (Assembler::Condition::positive, r14);     //    setns r14b
    __ setb (Assembler::Condition::positive, r15);     //    setns r15b
    __ setb (Assembler::Condition::positive, r16);     //    setns r16b
    __ setb (Assembler::Condition::positive, r17);     //    setns r17b
    __ setb (Assembler::Condition::positive, r18);     //    setns r18b
    __ setb (Assembler::Condition::positive, r19);     //    setns r19b
    __ setb (Assembler::Condition::positive, r20);     //    setns r20b
    __ setb (Assembler::Condition::positive, r21);     //    setns r21b
    __ setb (Assembler::Condition::positive, r22);     //    setns r22b
    __ setb (Assembler::Condition::positive, r23);     //    setns r23b
    __ setb (Assembler::Condition::positive, r24);     //    setns r24b
    __ setb (Assembler::Condition::positive, r25);     //    setns r25b
    __ setb (Assembler::Condition::positive, r26);     //    setns r26b
    __ setb (Assembler::Condition::positive, r27);     //    setns r27b
    __ setb (Assembler::Condition::positive, r28);     //    setns r28b
    __ setb (Assembler::Condition::positive, r29);     //    setns r29b
    __ setb (Assembler::Condition::positive, r30);     //    setns r30b
    __ setb (Assembler::Condition::positive, r31);     //    setns r31b
#endif // _LP64
    __ setb (Assembler::Condition::parity, rcx);       //    setp cl
    __ setb (Assembler::Condition::parity, rdx);       //    setp dl
    __ setb (Assembler::Condition::parity, rbx);       //    setp bl
#ifdef _LP64
    __ setb (Assembler::Condition::parity, r8);        //    setp r8b
    __ setb (Assembler::Condition::parity, r9);        //    setp r9b
    __ setb (Assembler::Condition::parity, r10);       //    setp r10b
    __ setb (Assembler::Condition::parity, r11);       //    setp r11b
    __ setb (Assembler::Condition::parity, r12);       //    setp r12b
    __ setb (Assembler::Condition::parity, r13);       //    setp r13b
    __ setb (Assembler::Condition::parity, r14);       //    setp r14b
    __ setb (Assembler::Condition::parity, r15);       //    setp r15b
    __ setb (Assembler::Condition::parity, r16);       //    setp r16b
    __ setb (Assembler::Condition::parity, r17);       //    setp r17b
    __ setb (Assembler::Condition::parity, r18);       //    setp r18b
    __ setb (Assembler::Condition::parity, r19);       //    setp r19b
    __ setb (Assembler::Condition::parity, r20);       //    setp r20b
    __ setb (Assembler::Condition::parity, r21);       //    setp r21b
    __ setb (Assembler::Condition::parity, r22);       //    setp r22b
    __ setb (Assembler::Condition::parity, r23);       //    setp r23b
    __ setb (Assembler::Condition::parity, r24);       //    setp r24b
    __ setb (Assembler::Condition::parity, r25);       //    setp r25b
    __ setb (Assembler::Condition::parity, r26);       //    setp r26b
    __ setb (Assembler::Condition::parity, r27);       //    setp r27b
    __ setb (Assembler::Condition::parity, r28);       //    setp r28b
    __ setb (Assembler::Condition::parity, r29);       //    setp r29b
    __ setb (Assembler::Condition::parity, r30);       //    setp r30b
    __ setb (Assembler::Condition::parity, r31);       //    setp r31b
#endif // _LP64
    __ setb (Assembler::Condition::noParity, rcx);     //    setnp cl
    __ setb (Assembler::Condition::noParity, rdx);     //    setnp dl
    __ setb (Assembler::Condition::noParity, rbx);     //    setnp bl
#ifdef _LP64
    __ setb (Assembler::Condition::noParity, r8);      //    setnp r8b
    __ setb (Assembler::Condition::noParity, r9);      //    setnp r9b
    __ setb (Assembler::Condition::noParity, r10);     //    setnp r10b
    __ setb (Assembler::Condition::noParity, r11);     //    setnp r11b
    __ setb (Assembler::Condition::noParity, r12);     //    setnp r12b
    __ setb (Assembler::Condition::noParity, r13);     //    setnp r13b
    __ setb (Assembler::Condition::noParity, r14);     //    setnp r14b
    __ setb (Assembler::Condition::noParity, r15);     //    setnp r15b
    __ setb (Assembler::Condition::noParity, r16);     //    setnp r16b
    __ setb (Assembler::Condition::noParity, r17);     //    setnp r17b
    __ setb (Assembler::Condition::noParity, r18);     //    setnp r18b
    __ setb (Assembler::Condition::noParity, r19);     //    setnp r19b
    __ setb (Assembler::Condition::noParity, r20);     //    setnp r20b
    __ setb (Assembler::Condition::noParity, r21);     //    setnp r21b
    __ setb (Assembler::Condition::noParity, r22);     //    setnp r22b
    __ setb (Assembler::Condition::noParity, r23);     //    setnp r23b
    __ setb (Assembler::Condition::noParity, r24);     //    setnp r24b
    __ setb (Assembler::Condition::noParity, r25);     //    setnp r25b
    __ setb (Assembler::Condition::noParity, r26);     //    setnp r26b
    __ setb (Assembler::Condition::noParity, r27);     //    setnp r27b
    __ setb (Assembler::Condition::noParity, r28);     //    setnp r28b
    __ setb (Assembler::Condition::noParity, r29);     //    setnp r29b
    __ setb (Assembler::Condition::noParity, r30);     //    setnp r30b
    __ setb (Assembler::Condition::noParity, r31);     //    setnp r31b
#endif // _LP64
    __ setb (Assembler::Condition::less, rcx);         //    setl cl
    __ setb (Assembler::Condition::less, rdx);         //    setl dl
    __ setb (Assembler::Condition::less, rbx);         //    setl bl
#ifdef _LP64
    __ setb (Assembler::Condition::less, r8);          //    setl r8b
    __ setb (Assembler::Condition::less, r9);          //    setl r9b
    __ setb (Assembler::Condition::less, r10);         //    setl r10b
    __ setb (Assembler::Condition::less, r11);         //    setl r11b
    __ setb (Assembler::Condition::less, r12);         //    setl r12b
    __ setb (Assembler::Condition::less, r13);         //    setl r13b
    __ setb (Assembler::Condition::less, r14);         //    setl r14b
    __ setb (Assembler::Condition::less, r15);         //    setl r15b
    __ setb (Assembler::Condition::less, r16);         //    setl r16b
    __ setb (Assembler::Condition::less, r17);         //    setl r17b
    __ setb (Assembler::Condition::less, r18);         //    setl r18b
    __ setb (Assembler::Condition::less, r19);         //    setl r19b
    __ setb (Assembler::Condition::less, r20);         //    setl r20b
    __ setb (Assembler::Condition::less, r21);         //    setl r21b
    __ setb (Assembler::Condition::less, r22);         //    setl r22b
    __ setb (Assembler::Condition::less, r23);         //    setl r23b
    __ setb (Assembler::Condition::less, r24);         //    setl r24b
    __ setb (Assembler::Condition::less, r25);         //    setl r25b
    __ setb (Assembler::Condition::less, r26);         //    setl r26b
    __ setb (Assembler::Condition::less, r27);         //    setl r27b
    __ setb (Assembler::Condition::less, r28);         //    setl r28b
    __ setb (Assembler::Condition::less, r29);         //    setl r29b
    __ setb (Assembler::Condition::less, r30);         //    setl r30b
    __ setb (Assembler::Condition::less, r31);         //    setl r31b
#endif // _LP64
    __ setb (Assembler::Condition::greaterEqual, rcx); //    setge cl
    __ setb (Assembler::Condition::greaterEqual, rdx); //    setge dl
    __ setb (Assembler::Condition::greaterEqual, rbx); //    setge bl
#ifdef _LP64
    __ setb (Assembler::Condition::greaterEqual, r8);  //    setge r8b
    __ setb (Assembler::Condition::greaterEqual, r9);  //    setge r9b
    __ setb (Assembler::Condition::greaterEqual, r10); //    setge r10b
    __ setb (Assembler::Condition::greaterEqual, r11); //    setge r11b
    __ setb (Assembler::Condition::greaterEqual, r12); //    setge r12b
    __ setb (Assembler::Condition::greaterEqual, r13); //    setge r13b
    __ setb (Assembler::Condition::greaterEqual, r14); //    setge r14b
    __ setb (Assembler::Condition::greaterEqual, r15); //    setge r15b
    __ setb (Assembler::Condition::greaterEqual, r16); //    setge r16b
    __ setb (Assembler::Condition::greaterEqual, r17); //    setge r17b
    __ setb (Assembler::Condition::greaterEqual, r18); //    setge r18b
    __ setb (Assembler::Condition::greaterEqual, r19); //    setge r19b
    __ setb (Assembler::Condition::greaterEqual, r20); //    setge r20b
    __ setb (Assembler::Condition::greaterEqual, r21); //    setge r21b
    __ setb (Assembler::Condition::greaterEqual, r22); //    setge r22b
    __ setb (Assembler::Condition::greaterEqual, r23); //    setge r23b
    __ setb (Assembler::Condition::greaterEqual, r24); //    setge r24b
    __ setb (Assembler::Condition::greaterEqual, r25); //    setge r25b
    __ setb (Assembler::Condition::greaterEqual, r26); //    setge r26b
    __ setb (Assembler::Condition::greaterEqual, r27); //    setge r27b
    __ setb (Assembler::Condition::greaterEqual, r28); //    setge r28b
    __ setb (Assembler::Condition::greaterEqual, r29); //    setge r29b
    __ setb (Assembler::Condition::greaterEqual, r30); //    setge r30b
    __ setb (Assembler::Condition::greaterEqual, r31); //    setge r31b
#endif // _LP64
    __ setb (Assembler::Condition::lessEqual, rcx);    //    setle cl
    __ setb (Assembler::Condition::lessEqual, rdx);    //    setle dl
    __ setb (Assembler::Condition::lessEqual, rbx);    //    setle bl
#ifdef _LP64
    __ setb (Assembler::Condition::lessEqual, r8);     //    setle r8b
    __ setb (Assembler::Condition::lessEqual, r9);     //    setle r9b
    __ setb (Assembler::Condition::lessEqual, r10);    //    setle r10b
    __ setb (Assembler::Condition::lessEqual, r11);    //    setle r11b
    __ setb (Assembler::Condition::lessEqual, r12);    //    setle r12b
    __ setb (Assembler::Condition::lessEqual, r13);    //    setle r13b
    __ setb (Assembler::Condition::lessEqual, r14);    //    setle r14b
    __ setb (Assembler::Condition::lessEqual, r15);    //    setle r15b
    __ setb (Assembler::Condition::lessEqual, r16);    //    setle r16b
    __ setb (Assembler::Condition::lessEqual, r17);    //    setle r17b
    __ setb (Assembler::Condition::lessEqual, r18);    //    setle r18b
    __ setb (Assembler::Condition::lessEqual, r19);    //    setle r19b
    __ setb (Assembler::Condition::lessEqual, r20);    //    setle r20b
    __ setb (Assembler::Condition::lessEqual, r21);    //    setle r21b
    __ setb (Assembler::Condition::lessEqual, r22);    //    setle r22b
    __ setb (Assembler::Condition::lessEqual, r23);    //    setle r23b
    __ setb (Assembler::Condition::lessEqual, r24);    //    setle r24b
    __ setb (Assembler::Condition::lessEqual, r25);    //    setle r25b
    __ setb (Assembler::Condition::lessEqual, r26);    //    setle r26b
    __ setb (Assembler::Condition::lessEqual, r27);    //    setle r27b
    __ setb (Assembler::Condition::lessEqual, r28);    //    setle r28b
    __ setb (Assembler::Condition::lessEqual, r29);    //    setle r29b
    __ setb (Assembler::Condition::lessEqual, r30);    //    setle r30b
    __ setb (Assembler::Condition::lessEqual, r31);    //    setle r31b
#endif // _LP64
    __ setb (Assembler::Condition::greater, rcx);      //    setg cl
    __ setb (Assembler::Condition::greater, rdx);      //    setg dl
    __ setb (Assembler::Condition::greater, rbx);      //    setg bl
#ifdef _LP64
    __ setb (Assembler::Condition::greater, r8);       //    setg r8b
    __ setb (Assembler::Condition::greater, r9);       //    setg r9b
    __ setb (Assembler::Condition::greater, r10);      //    setg r10b
    __ setb (Assembler::Condition::greater, r11);      //    setg r11b
    __ setb (Assembler::Condition::greater, r12);      //    setg r12b
    __ setb (Assembler::Condition::greater, r13);      //    setg r13b
    __ setb (Assembler::Condition::greater, r14);      //    setg r14b
    __ setb (Assembler::Condition::greater, r15);      //    setg r15b
    __ setb (Assembler::Condition::greater, r16);      //    setg r16b
    __ setb (Assembler::Condition::greater, r17);      //    setg r17b
    __ setb (Assembler::Condition::greater, r18);      //    setg r18b
    __ setb (Assembler::Condition::greater, r19);      //    setg r19b
    __ setb (Assembler::Condition::greater, r20);      //    setg r20b
    __ setb (Assembler::Condition::greater, r21);      //    setg r21b
    __ setb (Assembler::Condition::greater, r22);      //    setg r22b
    __ setb (Assembler::Condition::greater, r23);      //    setg r23b
    __ setb (Assembler::Condition::greater, r24);      //    setg r24b
    __ setb (Assembler::Condition::greater, r25);      //    setg r25b
    __ setb (Assembler::Condition::greater, r26);      //    setg r26b
    __ setb (Assembler::Condition::greater, r27);      //    setg r27b
    __ setb (Assembler::Condition::greater, r28);      //    setg r28b
    __ setb (Assembler::Condition::greater, r29);      //    setg r29b
    __ setb (Assembler::Condition::greater, r30);      //    setg r30b
    __ setb (Assembler::Condition::greater, r31);      //    setg r31b
#endif // _LP64
    __ divl(rcx);                                      //    div ecx
    __ divl(rdx);                                      //    div edx
    __ divl(rbx);                                      //    div ebx
#ifdef _LP64
    __ divl(r8);                                       //    div r8d
    __ divl(r9);                                       //    div r9d
    __ divl(r10);                                      //    div r10d
    __ divl(r11);                                      //    div r11d
    __ divl(r12);                                      //    div r12d
    __ divl(r13);                                      //    div r13d
    __ divl(r14);                                      //    div r14d
    __ divl(r15);                                      //    div r15d
    __ divl(r16);                                      //    div r16d
    __ divl(r17);                                      //    div r17d
    __ divl(r18);                                      //    div r18d
    __ divl(r19);                                      //    div r19d
    __ divl(r20);                                      //    div r20d
    __ divl(r21);                                      //    div r21d
    __ divl(r22);                                      //    div r22d
    __ divl(r23);                                      //    div r23d
    __ divl(r24);                                      //    div r24d
    __ divl(r25);                                      //    div r25d
    __ divl(r26);                                      //    div r26d
    __ divl(r27);                                      //    div r27d
    __ divl(r28);                                      //    div r28d
    __ divl(r29);                                      //    div r29d
    __ divl(r30);                                      //    div r30d
    __ divl(r31);                                      //    div r31d
#endif // _LP64
    __ idivl(rcx);                                     //    idiv ecx
    __ idivl(rdx);                                     //    idiv edx
    __ idivl(rbx);                                     //    idiv ebx
#ifdef _LP64
    __ idivl(r8);                                      //    idiv r8d
    __ idivl(r9);                                      //    idiv r9d
    __ idivl(r10);                                     //    idiv r10d
    __ idivl(r11);                                     //    idiv r11d
    __ idivl(r12);                                     //    idiv r12d
    __ idivl(r13);                                     //    idiv r13d
    __ idivl(r14);                                     //    idiv r14d
    __ idivl(r15);                                     //    idiv r15d
    __ idivl(r16);                                     //    idiv r16d
    __ idivl(r17);                                     //    idiv r17d
    __ idivl(r18);                                     //    idiv r18d
    __ idivl(r19);                                     //    idiv r19d
    __ idivl(r20);                                     //    idiv r20d
    __ idivl(r21);                                     //    idiv r21d
    __ idivl(r22);                                     //    idiv r22d
    __ idivl(r23);                                     //    idiv r23d
    __ idivl(r24);                                     //    idiv r24d
    __ idivl(r25);                                     //    idiv r25d
    __ idivl(r26);                                     //    idiv r26d
    __ idivl(r27);                                     //    idiv r27d
    __ idivl(r28);                                     //    idiv r28d
    __ idivl(r29);                                     //    idiv r29d
    __ idivl(r30);                                     //    idiv r30d
    __ idivl(r31);                                     //    idiv r31d
#endif // _LP64
    __ imull(rcx);                                     //    imul ecx
    __ imull(rdx);                                     //    imul edx
    __ imull(rbx);                                     //    imul ebx
#ifdef _LP64
    __ imull(r8);                                      //    imul r8d
    __ imull(r9);                                      //    imul r9d
    __ imull(r10);                                     //    imul r10d
    __ imull(r11);                                     //    imul r11d
    __ imull(r12);                                     //    imul r12d
    __ imull(r13);                                     //    imul r13d
    __ imull(r14);                                     //    imul r14d
    __ imull(r15);                                     //    imul r15d
    __ imull(r16);                                     //    imul r16d
    __ imull(r17);                                     //    imul r17d
    __ imull(r18);                                     //    imul r18d
    __ imull(r19);                                     //    imul r19d
    __ imull(r20);                                     //    imul r20d
    __ imull(r21);                                     //    imul r21d
    __ imull(r22);                                     //    imul r22d
    __ imull(r23);                                     //    imul r23d
    __ imull(r24);                                     //    imul r24d
    __ imull(r25);                                     //    imul r25d
    __ imull(r26);                                     //    imul r26d
    __ imull(r27);                                     //    imul r27d
    __ imull(r28);                                     //    imul r28d
    __ imull(r29);                                     //    imul r29d
    __ imull(r30);                                     //    imul r30d
    __ imull(r31);                                     //    imul r31d
#endif // _LP64
    __ mull(rcx);                                      //    mul ecx
    __ mull(rdx);                                      //    mul edx
    __ mull(rbx);                                      //    mul ebx
#ifdef _LP64
    __ mull(r8);                                       //    mul r8d
    __ mull(r9);                                       //    mul r9d
    __ mull(r10);                                      //    mul r10d
    __ mull(r11);                                      //    mul r11d
    __ mull(r12);                                      //    mul r12d
    __ mull(r13);                                      //    mul r13d
    __ mull(r14);                                      //    mul r14d
    __ mull(r15);                                      //    mul r15d
    __ mull(r16);                                      //    mul r16d
    __ mull(r17);                                      //    mul r17d
    __ mull(r18);                                      //    mul r18d
    __ mull(r19);                                      //    mul r19d
    __ mull(r20);                                      //    mul r20d
    __ mull(r21);                                      //    mul r21d
    __ mull(r22);                                      //    mul r22d
    __ mull(r23);                                      //    mul r23d
    __ mull(r24);                                      //    mul r24d
    __ mull(r25);                                      //    mul r25d
    __ mull(r26);                                      //    mul r26d
    __ mull(r27);                                      //    mul r27d
    __ mull(r28);                                      //    mul r28d
    __ mull(r29);                                      //    mul r29d
    __ mull(r30);                                      //    mul r30d
    __ mull(r31);                                      //    mul r31d
#endif // _LP64
    __ negl(rcx);                                      //    neg ecx
    __ negl(rdx);                                      //    neg edx
    __ negl(rbx);                                      //    neg ebx
#ifdef _LP64
    __ negl(r8);                                       //    neg r8d
    __ negl(r9);                                       //    neg r9d
    __ negl(r10);                                      //    neg r10d
    __ negl(r11);                                      //    neg r11d
    __ negl(r12);                                      //    neg r12d
    __ negl(r13);                                      //    neg r13d
    __ negl(r14);                                      //    neg r14d
    __ negl(r15);                                      //    neg r15d
    __ negl(r16);                                      //    neg r16d
    __ negl(r17);                                      //    neg r17d
    __ negl(r18);                                      //    neg r18d
    __ negl(r19);                                      //    neg r19d
    __ negl(r20);                                      //    neg r20d
    __ negl(r21);                                      //    neg r21d
    __ negl(r22);                                      //    neg r22d
    __ negl(r23);                                      //    neg r23d
    __ negl(r24);                                      //    neg r24d
    __ negl(r25);                                      //    neg r25d
    __ negl(r26);                                      //    neg r26d
    __ negl(r27);                                      //    neg r27d
    __ negl(r28);                                      //    neg r28d
    __ negl(r29);                                      //    neg r29d
    __ negl(r30);                                      //    neg r30d
    __ negl(r31);                                      //    neg r31d
#endif // _LP64
    __ notl(rcx);                                      //    not ecx
    __ notl(rdx);                                      //    not edx
    __ notl(rbx);                                      //    not ebx
#ifdef _LP64
    __ notl(r8);                                       //    not r8d
    __ notl(r9);                                       //    not r9d
    __ notl(r10);                                      //    not r10d
    __ notl(r11);                                      //    not r11d
    __ notl(r12);                                      //    not r12d
    __ notl(r13);                                      //    not r13d
    __ notl(r14);                                      //    not r14d
    __ notl(r15);                                      //    not r15d
    __ notl(r16);                                      //    not r16d
    __ notl(r17);                                      //    not r17d
    __ notl(r18);                                      //    not r18d
    __ notl(r19);                                      //    not r19d
    __ notl(r20);                                      //    not r20d
    __ notl(r21);                                      //    not r21d
    __ notl(r22);                                      //    not r22d
    __ notl(r23);                                      //    not r23d
    __ notl(r24);                                      //    not r24d
    __ notl(r25);                                      //    not r25d
    __ notl(r26);                                      //    not r26d
    __ notl(r27);                                      //    not r27d
    __ notl(r28);                                      //    not r28d
    __ notl(r29);                                      //    not r29d
    __ notl(r30);                                      //    not r30d
    __ notl(r31);                                      //    not r31d
#endif // _LP64
    __ roll(rcx);                                      //    rol ecx
    __ roll(rdx);                                      //    rol edx
    __ roll(rbx);                                      //    rol ebx
#ifdef _LP64
    __ roll(r8);                                       //    rol r8d
    __ roll(r9);                                       //    rol r9d
    __ roll(r10);                                      //    rol r10d
    __ roll(r11);                                      //    rol r11d
    __ roll(r12);                                      //    rol r12d
    __ roll(r13);                                      //    rol r13d
    __ roll(r14);                                      //    rol r14d
    __ roll(r15);                                      //    rol r15d
    __ roll(r16);                                      //    rol r16d
    __ roll(r17);                                      //    rol r17d
    __ roll(r18);                                      //    rol r18d
    __ roll(r19);                                      //    rol r19d
    __ roll(r20);                                      //    rol r20d
    __ roll(r21);                                      //    rol r21d
    __ roll(r22);                                      //    rol r22d
    __ roll(r23);                                      //    rol r23d
    __ roll(r24);                                      //    rol r24d
    __ roll(r25);                                      //    rol r25d
    __ roll(r26);                                      //    rol r26d
    __ roll(r27);                                      //    rol r27d
    __ roll(r28);                                      //    rol r28d
    __ roll(r29);                                      //    rol r29d
    __ roll(r30);                                      //    rol r30d
    __ roll(r31);                                      //    rol r31d
#endif // _LP64
    __ rorl(rcx);                                      //    ror ecx
    __ rorl(rdx);                                      //    ror edx
    __ rorl(rbx);                                      //    ror ebx
#ifdef _LP64
    __ rorl(r8);                                       //    ror r8d
    __ rorl(r9);                                       //    ror r9d
    __ rorl(r10);                                      //    ror r10d
    __ rorl(r11);                                      //    ror r11d
    __ rorl(r12);                                      //    ror r12d
    __ rorl(r13);                                      //    ror r13d
    __ rorl(r14);                                      //    ror r14d
    __ rorl(r15);                                      //    ror r15d
    __ rorl(r16);                                      //    ror r16d
    __ rorl(r17);                                      //    ror r17d
    __ rorl(r18);                                      //    ror r18d
    __ rorl(r19);                                      //    ror r19d
    __ rorl(r20);                                      //    ror r20d
    __ rorl(r21);                                      //    ror r21d
    __ rorl(r22);                                      //    ror r22d
    __ rorl(r23);                                      //    ror r23d
    __ rorl(r24);                                      //    ror r24d
    __ rorl(r25);                                      //    ror r25d
    __ rorl(r26);                                      //    ror r26d
    __ rorl(r27);                                      //    ror r27d
    __ rorl(r28);                                      //    ror r28d
    __ rorl(r29);                                      //    ror r29d
    __ rorl(r30);                                      //    ror r30d
    __ rorl(r31);                                      //    ror r31d
#endif // _LP64
    __ sarl(rcx);                                      //    sar ecx
    __ sarl(rdx);                                      //    sar edx
    __ sarl(rbx);                                      //    sar ebx
#ifdef _LP64
    __ sarl(r8);                                       //    sar r8d
    __ sarl(r9);                                       //    sar r9d
    __ sarl(r10);                                      //    sar r10d
    __ sarl(r11);                                      //    sar r11d
    __ sarl(r12);                                      //    sar r12d
    __ sarl(r13);                                      //    sar r13d
    __ sarl(r14);                                      //    sar r14d
    __ sarl(r15);                                      //    sar r15d
    __ sarl(r16);                                      //    sar r16d
    __ sarl(r17);                                      //    sar r17d
    __ sarl(r18);                                      //    sar r18d
    __ sarl(r19);                                      //    sar r19d
    __ sarl(r20);                                      //    sar r20d
    __ sarl(r21);                                      //    sar r21d
    __ sarl(r22);                                      //    sar r22d
    __ sarl(r23);                                      //    sar r23d
    __ sarl(r24);                                      //    sar r24d
    __ sarl(r25);                                      //    sar r25d
    __ sarl(r26);                                      //    sar r26d
    __ sarl(r27);                                      //    sar r27d
    __ sarl(r28);                                      //    sar r28d
    __ sarl(r29);                                      //    sar r29d
    __ sarl(r30);                                      //    sar r30d
    __ sarl(r31);                                      //    sar r31d
#endif // _LP64
    __ shll(rcx);                                      //    shl ecx
    __ shll(rdx);                                      //    shl edx
    __ shll(rbx);                                      //    shl ebx
#ifdef _LP64
    __ shll(r8);                                       //    shl r8d
    __ shll(r9);                                       //    shl r9d
    __ shll(r10);                                      //    shl r10d
    __ shll(r11);                                      //    shl r11d
    __ shll(r12);                                      //    shl r12d
    __ shll(r13);                                      //    shl r13d
    __ shll(r14);                                      //    shl r14d
    __ shll(r15);                                      //    shl r15d
    __ shll(r16);                                      //    shl r16d
    __ shll(r17);                                      //    shl r17d
    __ shll(r18);                                      //    shl r18d
    __ shll(r19);                                      //    shl r19d
    __ shll(r20);                                      //    shl r20d
    __ shll(r21);                                      //    shl r21d
    __ shll(r22);                                      //    shl r22d
    __ shll(r23);                                      //    shl r23d
    __ shll(r24);                                      //    shl r24d
    __ shll(r25);                                      //    shl r25d
    __ shll(r26);                                      //    shl r26d
    __ shll(r27);                                      //    shl r27d
    __ shll(r28);                                      //    shl r28d
    __ shll(r29);                                      //    shl r29d
    __ shll(r30);                                      //    shl r30d
    __ shll(r31);                                      //    shl r31d
#endif // _LP64
    __ shrl(rcx);                                      //    shr ecx
    __ shrl(rdx);                                      //    shr edx
    __ shrl(rbx);                                      //    shr ebx
#ifdef _LP64
    __ shrl(r8);                                       //    shr r8d
    __ shrl(r9);                                       //    shr r9d
    __ shrl(r10);                                      //    shr r10d
    __ shrl(r11);                                      //    shr r11d
    __ shrl(r12);                                      //    shr r12d
    __ shrl(r13);                                      //    shr r13d
    __ shrl(r14);                                      //    shr r14d
    __ shrl(r15);                                      //    shr r15d
    __ shrl(r16);                                      //    shr r16d
    __ shrl(r17);                                      //    shr r17d
    __ shrl(r18);                                      //    shr r18d
    __ shrl(r19);                                      //    shr r19d
    __ shrl(r20);                                      //    shr r20d
    __ shrl(r21);                                      //    shr r21d
    __ shrl(r22);                                      //    shr r22d
    __ shrl(r23);                                      //    shr r23d
    __ shrl(r24);                                      //    shr r24d
    __ shrl(r25);                                      //    shr r25d
    __ shrl(r26);                                      //    shr r26d
    __ shrl(r27);                                      //    shr r27d
    __ shrl(r28);                                      //    shr r28d
    __ shrl(r29);                                      //    shr r29d
    __ shrl(r30);                                      //    shr r30d
    __ shrl(r31);                                      //    shr r31d
#endif // _LP64
    __ incrementl(rcx);                                //    inc ecx
    __ incrementl(rdx);                                //    inc edx
    __ incrementl(rbx);                                //    inc ebx
#ifdef _LP64
    __ incrementl(r8);                                 //    inc r8d
    __ incrementl(r9);                                 //    inc r9d
    __ incrementl(r10);                                //    inc r10d
    __ incrementl(r11);                                //    inc r11d
    __ incrementl(r12);                                //    inc r12d
    __ incrementl(r13);                                //    inc r13d
    __ incrementl(r14);                                //    inc r14d
    __ incrementl(r15);                                //    inc r15d
    __ incrementl(r16);                                //    inc r16d
    __ incrementl(r17);                                //    inc r17d
    __ incrementl(r18);                                //    inc r18d
    __ incrementl(r19);                                //    inc r19d
    __ incrementl(r20);                                //    inc r20d
    __ incrementl(r21);                                //    inc r21d
    __ incrementl(r22);                                //    inc r22d
    __ incrementl(r23);                                //    inc r23d
    __ incrementl(r24);                                //    inc r24d
    __ incrementl(r25);                                //    inc r25d
    __ incrementl(r26);                                //    inc r26d
    __ incrementl(r27);                                //    inc r27d
    __ incrementl(r28);                                //    inc r28d
    __ incrementl(r29);                                //    inc r29d
    __ incrementl(r30);                                //    inc r30d
    __ incrementl(r31);                                //    inc r31d
#endif // _LP64
    __ decrementl(rcx);                                //    dec ecx
    __ decrementl(rdx);                                //    dec edx
    __ decrementl(rbx);                                //    dec ebx
#ifdef _LP64
    __ decrementl(r8);                                 //    dec r8d
    __ decrementl(r9);                                 //    dec r9d
    __ decrementl(r10);                                //    dec r10d
    __ decrementl(r11);                                //    dec r11d
    __ decrementl(r12);                                //    dec r12d
    __ decrementl(r13);                                //    dec r13d
    __ decrementl(r14);                                //    dec r14d
    __ decrementl(r15);                                //    dec r15d
    __ decrementl(r16);                                //    dec r16d
    __ decrementl(r17);                                //    dec r17d
    __ decrementl(r18);                                //    dec r18d
    __ decrementl(r19);                                //    dec r19d
    __ decrementl(r20);                                //    dec r20d
    __ decrementl(r21);                                //    dec r21d
    __ decrementl(r22);                                //    dec r22d
    __ decrementl(r23);                                //    dec r23d
    __ decrementl(r24);                                //    dec r24d
    __ decrementl(r25);                                //    dec r25d
    __ decrementl(r26);                                //    dec r26d
    __ decrementl(r27);                                //    dec r27d
    __ decrementl(r28);                                //    dec r28d
    __ decrementl(r29);                                //    dec r29d
    __ decrementl(r30);                                //    dec r30d
    __ decrementl(r31);                                //    dec r31d
#endif // _LP64
    __ mull(Address(rcx, rdx));                        //    mul dword ptr [rcx + rdx]
    __ mull(Address(rdx, rbx));                        //    mul dword ptr [rdx + rbx]
#ifdef _LP64
    __ mull(Address(rbx, r8));                         //    mul dword ptr [rbx + r8]
    __ mull(Address(r8, r9));                          //    mul dword ptr [r8 + r9]
    __ mull(Address(r9, r10));                         //    mul dword ptr [r9 + r10]
    __ mull(Address(r10, r11));                        //    mul dword ptr [r10 + r11]
    __ mull(Address(r11, r12));                        //    mul dword ptr [r11 + r12]
    __ mull(Address(r12, r13));                        //    mul dword ptr [r12 + r13]
    __ mull(Address(r13, r14));                        //    mul dword ptr [r13 + r14]
    __ mull(Address(r14, r15));                        //    mul dword ptr [r14 + r15]
    __ mull(Address(r15, r16));                        //    mul dword ptr [r15 + r16]
    __ mull(Address(r16, r17));                        //    mul dword ptr [r16 + r17]
    __ mull(Address(r17, r18));                        //    mul dword ptr [r17 + r18]
    __ mull(Address(r18, r19));                        //    mul dword ptr [r18 + r19]
    __ mull(Address(r19, r20));                        //    mul dword ptr [r19 + r20]
    __ mull(Address(r20, r21));                        //    mul dword ptr [r20 + r21]
    __ mull(Address(r21, r22));                        //    mul dword ptr [r21 + r22]
    __ mull(Address(r22, r23));                        //    mul dword ptr [r22 + r23]
    __ mull(Address(r23, r24));                        //    mul dword ptr [r23 + r24]
    __ mull(Address(r24, r25));                        //    mul dword ptr [r24 + r25]
    __ mull(Address(r25, r26));                        //    mul dword ptr [r25 + r26]
    __ mull(Address(r26, r27));                        //    mul dword ptr [r26 + r27]
    __ mull(Address(r27, r28));                        //    mul dword ptr [r27 + r28]
    __ mull(Address(r28, r29));                        //    mul dword ptr [r28 + r29]
    __ mull(Address(r29, r30));                        //    mul dword ptr [r29 + r30]
    __ mull(Address(r30, r31));                        //    mul dword ptr [r30 + r31]
    __ mull(Address(r31, rcx));                        //    mul dword ptr [r31 + rcx]
#endif // _LP64
    __ negl(Address(rcx, rdx));                        //    neg dword ptr [rcx + rdx]
    __ negl(Address(rdx, rbx));                        //    neg dword ptr [rdx + rbx]
#ifdef _LP64
    __ negl(Address(rbx, r8));                         //    neg dword ptr [rbx + r8]
    __ negl(Address(r8, r9));                          //    neg dword ptr [r8 + r9]
    __ negl(Address(r9, r10));                         //    neg dword ptr [r9 + r10]
    __ negl(Address(r10, r11));                        //    neg dword ptr [r10 + r11]
    __ negl(Address(r11, r12));                        //    neg dword ptr [r11 + r12]
    __ negl(Address(r12, r13));                        //    neg dword ptr [r12 + r13]
    __ negl(Address(r13, r14));                        //    neg dword ptr [r13 + r14]
    __ negl(Address(r14, r15));                        //    neg dword ptr [r14 + r15]
    __ negl(Address(r15, r16));                        //    neg dword ptr [r15 + r16]
    __ negl(Address(r16, r17));                        //    neg dword ptr [r16 + r17]
    __ negl(Address(r17, r18));                        //    neg dword ptr [r17 + r18]
    __ negl(Address(r18, r19));                        //    neg dword ptr [r18 + r19]
    __ negl(Address(r19, r20));                        //    neg dword ptr [r19 + r20]
    __ negl(Address(r20, r21));                        //    neg dword ptr [r20 + r21]
    __ negl(Address(r21, r22));                        //    neg dword ptr [r21 + r22]
    __ negl(Address(r22, r23));                        //    neg dword ptr [r22 + r23]
    __ negl(Address(r23, r24));                        //    neg dword ptr [r23 + r24]
    __ negl(Address(r24, r25));                        //    neg dword ptr [r24 + r25]
    __ negl(Address(r25, r26));                        //    neg dword ptr [r25 + r26]
    __ negl(Address(r26, r27));                        //    neg dword ptr [r26 + r27]
    __ negl(Address(r27, r28));                        //    neg dword ptr [r27 + r28]
    __ negl(Address(r28, r29));                        //    neg dword ptr [r28 + r29]
    __ negl(Address(r29, r30));                        //    neg dword ptr [r29 + r30]
    __ negl(Address(r30, r31));                        //    neg dword ptr [r30 + r31]
    __ negl(Address(r31, rcx));                        //    neg dword ptr [r31 + rcx]
#endif // _LP64
    __ sarl(Address(rcx, rdx));                        //    sar dword ptr [rcx + rdx]
    __ sarl(Address(rdx, rbx));                        //    sar dword ptr [rdx + rbx]
#ifdef _LP64
    __ sarl(Address(rbx, r8));                         //    sar dword ptr [rbx + r8]
    __ sarl(Address(r8, r9));                          //    sar dword ptr [r8 + r9]
    __ sarl(Address(r9, r10));                         //    sar dword ptr [r9 + r10]
    __ sarl(Address(r10, r11));                        //    sar dword ptr [r10 + r11]
    __ sarl(Address(r11, r12));                        //    sar dword ptr [r11 + r12]
    __ sarl(Address(r12, r13));                        //    sar dword ptr [r12 + r13]
    __ sarl(Address(r13, r14));                        //    sar dword ptr [r13 + r14]
    __ sarl(Address(r14, r15));                        //    sar dword ptr [r14 + r15]
    __ sarl(Address(r15, r16));                        //    sar dword ptr [r15 + r16]
    __ sarl(Address(r16, r17));                        //    sar dword ptr [r16 + r17]
    __ sarl(Address(r17, r18));                        //    sar dword ptr [r17 + r18]
    __ sarl(Address(r18, r19));                        //    sar dword ptr [r18 + r19]
    __ sarl(Address(r19, r20));                        //    sar dword ptr [r19 + r20]
    __ sarl(Address(r20, r21));                        //    sar dword ptr [r20 + r21]
    __ sarl(Address(r21, r22));                        //    sar dword ptr [r21 + r22]
    __ sarl(Address(r22, r23));                        //    sar dword ptr [r22 + r23]
    __ sarl(Address(r23, r24));                        //    sar dword ptr [r23 + r24]
    __ sarl(Address(r24, r25));                        //    sar dword ptr [r24 + r25]
    __ sarl(Address(r25, r26));                        //    sar dword ptr [r25 + r26]
    __ sarl(Address(r26, r27));                        //    sar dword ptr [r26 + r27]
    __ sarl(Address(r27, r28));                        //    sar dword ptr [r27 + r28]
    __ sarl(Address(r28, r29));                        //    sar dword ptr [r28 + r29]
    __ sarl(Address(r29, r30));                        //    sar dword ptr [r29 + r30]
    __ sarl(Address(r30, r31));                        //    sar dword ptr [r30 + r31]
    __ sarl(Address(r31, rcx));                        //    sar dword ptr [r31 + rcx]
#endif // _LP64
    __ shrl(Address(rcx, rdx));                        //    shr dword ptr [rcx + rdx]
    __ shrl(Address(rdx, rbx));                        //    shr dword ptr [rdx + rbx]
#ifdef _LP64
    __ shrl(Address(rbx, r8));                         //    shr dword ptr [rbx + r8]
    __ shrl(Address(r8, r9));                          //    shr dword ptr [r8 + r9]
    __ shrl(Address(r9, r10));                         //    shr dword ptr [r9 + r10]
    __ shrl(Address(r10, r11));                        //    shr dword ptr [r10 + r11]
    __ shrl(Address(r11, r12));                        //    shr dword ptr [r11 + r12]
    __ shrl(Address(r12, r13));                        //    shr dword ptr [r12 + r13]
    __ shrl(Address(r13, r14));                        //    shr dword ptr [r13 + r14]
    __ shrl(Address(r14, r15));                        //    shr dword ptr [r14 + r15]
    __ shrl(Address(r15, r16));                        //    shr dword ptr [r15 + r16]
    __ shrl(Address(r16, r17));                        //    shr dword ptr [r16 + r17]
    __ shrl(Address(r17, r18));                        //    shr dword ptr [r17 + r18]
    __ shrl(Address(r18, r19));                        //    shr dword ptr [r18 + r19]
    __ shrl(Address(r19, r20));                        //    shr dword ptr [r19 + r20]
    __ shrl(Address(r20, r21));                        //    shr dword ptr [r20 + r21]
    __ shrl(Address(r21, r22));                        //    shr dword ptr [r21 + r22]
    __ shrl(Address(r22, r23));                        //    shr dword ptr [r22 + r23]
    __ shrl(Address(r23, r24));                        //    shr dword ptr [r23 + r24]
    __ shrl(Address(r24, r25));                        //    shr dword ptr [r24 + r25]
    __ shrl(Address(r25, r26));                        //    shr dword ptr [r25 + r26]
    __ shrl(Address(r26, r27));                        //    shr dword ptr [r26 + r27]
    __ shrl(Address(r27, r28));                        //    shr dword ptr [r27 + r28]
    __ shrl(Address(r28, r29));                        //    shr dword ptr [r28 + r29]
    __ shrl(Address(r29, r30));                        //    shr dword ptr [r29 + r30]
    __ shrl(Address(r30, r31));                        //    shr dword ptr [r30 + r31]
    __ shrl(Address(r31, rcx));                        //    shr dword ptr [r31 + rcx]
#endif // _LP64
    __ incrementl(Address(rcx, rdx));                  //    inc dword ptr [rcx + rdx]
    __ incrementl(Address(rdx, rbx));                  //    inc dword ptr [rdx + rbx]
#ifdef _LP64
    __ incrementl(Address(rbx, r8));                   //    inc dword ptr [rbx + r8]
    __ incrementl(Address(r8, r9));                    //    inc dword ptr [r8 + r9]
    __ incrementl(Address(r9, r10));                   //    inc dword ptr [r9 + r10]
    __ incrementl(Address(r10, r11));                  //    inc dword ptr [r10 + r11]
    __ incrementl(Address(r11, r12));                  //    inc dword ptr [r11 + r12]
    __ incrementl(Address(r12, r13));                  //    inc dword ptr [r12 + r13]
    __ incrementl(Address(r13, r14));                  //    inc dword ptr [r13 + r14]
    __ incrementl(Address(r14, r15));                  //    inc dword ptr [r14 + r15]
    __ incrementl(Address(r15, r16));                  //    inc dword ptr [r15 + r16]
    __ incrementl(Address(r16, r17));                  //    inc dword ptr [r16 + r17]
    __ incrementl(Address(r17, r18));                  //    inc dword ptr [r17 + r18]
    __ incrementl(Address(r18, r19));                  //    inc dword ptr [r18 + r19]
    __ incrementl(Address(r19, r20));                  //    inc dword ptr [r19 + r20]
    __ incrementl(Address(r20, r21));                  //    inc dword ptr [r20 + r21]
    __ incrementl(Address(r21, r22));                  //    inc dword ptr [r21 + r22]
    __ incrementl(Address(r22, r23));                  //    inc dword ptr [r22 + r23]
    __ incrementl(Address(r23, r24));                  //    inc dword ptr [r23 + r24]
    __ incrementl(Address(r24, r25));                  //    inc dword ptr [r24 + r25]
    __ incrementl(Address(r25, r26));                  //    inc dword ptr [r25 + r26]
    __ incrementl(Address(r26, r27));                  //    inc dword ptr [r26 + r27]
    __ incrementl(Address(r27, r28));                  //    inc dword ptr [r27 + r28]
    __ incrementl(Address(r28, r29));                  //    inc dword ptr [r28 + r29]
    __ incrementl(Address(r29, r30));                  //    inc dword ptr [r29 + r30]
    __ incrementl(Address(r30, r31));                  //    inc dword ptr [r30 + r31]
    __ incrementl(Address(r31, rcx));                  //    inc dword ptr [r31 + rcx]
#endif // _LP64
    __ decrementl(Address(rcx, rdx));                  //    dec dword ptr [rcx + rdx]
    __ decrementl(Address(rdx, rbx));                  //    dec dword ptr [rdx + rbx]
#ifdef _LP64
    __ decrementl(Address(rbx, r8));                   //    dec dword ptr [rbx + r8]
    __ decrementl(Address(r8, r9));                    //    dec dword ptr [r8 + r9]
    __ decrementl(Address(r9, r10));                   //    dec dword ptr [r9 + r10]
    __ decrementl(Address(r10, r11));                  //    dec dword ptr [r10 + r11]
    __ decrementl(Address(r11, r12));                  //    dec dword ptr [r11 + r12]
    __ decrementl(Address(r12, r13));                  //    dec dword ptr [r12 + r13]
    __ decrementl(Address(r13, r14));                  //    dec dword ptr [r13 + r14]
    __ decrementl(Address(r14, r15));                  //    dec dword ptr [r14 + r15]
    __ decrementl(Address(r15, r16));                  //    dec dword ptr [r15 + r16]
    __ decrementl(Address(r16, r17));                  //    dec dword ptr [r16 + r17]
    __ decrementl(Address(r17, r18));                  //    dec dword ptr [r17 + r18]
    __ decrementl(Address(r18, r19));                  //    dec dword ptr [r18 + r19]
    __ decrementl(Address(r19, r20));                  //    dec dword ptr [r19 + r20]
    __ decrementl(Address(r20, r21));                  //    dec dword ptr [r20 + r21]
    __ decrementl(Address(r21, r22));                  //    dec dword ptr [r21 + r22]
    __ decrementl(Address(r22, r23));                  //    dec dword ptr [r22 + r23]
    __ decrementl(Address(r23, r24));                  //    dec dword ptr [r23 + r24]
    __ decrementl(Address(r24, r25));                  //    dec dword ptr [r24 + r25]
    __ decrementl(Address(r25, r26));                  //    dec dword ptr [r25 + r26]
    __ decrementl(Address(r26, r27));                  //    dec dword ptr [r26 + r27]
    __ decrementl(Address(r27, r28));                  //    dec dword ptr [r27 + r28]
    __ decrementl(Address(r28, r29));                  //    dec dword ptr [r28 + r29]
    __ decrementl(Address(r29, r30));                  //    dec dword ptr [r29 + r30]
    __ decrementl(Address(r30, r31));                  //    dec dword ptr [r30 + r31]
    __ decrementl(Address(r31, rcx));                  //    dec dword ptr [r31 + rcx]
#endif // _LP64
    __ imull(rcx, Address(rdx, rbx), 1);               //    imul ecx, dword ptr [rdx + rbx], 1
    __ imull(rcx, Address(rdx, rbx), 16);              //    imul ecx, dword ptr [rdx + rbx], 16
    __ imull(rcx, Address(rdx, rbx), 256);             //    imul ecx, dword ptr [rdx + rbx], 256
    __ imull(rcx, Address(rdx, rbx), 4096);            //    imul ecx, dword ptr [rdx + rbx], 4096
    __ imull(rcx, Address(rdx, rbx), 65536);           //    imul ecx, dword ptr [rdx + rbx], 65536
    __ imull(rcx, Address(rdx, rbx), 1048576);         //    imul ecx, dword ptr [rdx + rbx], 1048576
    __ imull(rcx, Address(rdx, rbx), 16777216);        //    imul ecx, dword ptr [rdx + rbx], 16777216
    __ imull(rcx, Address(rdx, rbx), 268435456);       //    imul ecx, dword ptr [rdx + rbx], 268435456
#ifdef _LP64
    __ imull(rdx, Address(rbx, r8), 1);                //    imul edx, dword ptr [rbx + r8], 1
    __ imull(rdx, Address(rbx, r8), 16);               //    imul edx, dword ptr [rbx + r8], 16
    __ imull(rdx, Address(rbx, r8), 256);              //    imul edx, dword ptr [rbx + r8], 256
    __ imull(rdx, Address(rbx, r8), 4096);             //    imul edx, dword ptr [rbx + r8], 4096
    __ imull(rdx, Address(rbx, r8), 65536);            //    imul edx, dword ptr [rbx + r8], 65536
    __ imull(rdx, Address(rbx, r8), 1048576);          //    imul edx, dword ptr [rbx + r8], 1048576
    __ imull(rdx, Address(rbx, r8), 16777216);         //    imul edx, dword ptr [rbx + r8], 16777216
    __ imull(rdx, Address(rbx, r8), 268435456);        //    imul edx, dword ptr [rbx + r8], 268435456
    __ imull(rbx, Address(r8, r9), 1);                 //    imul ebx, dword ptr [r8 + r9], 1
    __ imull(rbx, Address(r8, r9), 16);                //    imul ebx, dword ptr [r8 + r9], 16
    __ imull(rbx, Address(r8, r9), 256);               //    imul ebx, dword ptr [r8 + r9], 256
    __ imull(rbx, Address(r8, r9), 4096);              //    imul ebx, dword ptr [r8 + r9], 4096
    __ imull(rbx, Address(r8, r9), 65536);             //    imul ebx, dword ptr [r8 + r9], 65536
    __ imull(rbx, Address(r8, r9), 1048576);           //    imul ebx, dword ptr [r8 + r9], 1048576
    __ imull(rbx, Address(r8, r9), 16777216);          //    imul ebx, dword ptr [r8 + r9], 16777216
    __ imull(rbx, Address(r8, r9), 268435456);         //    imul ebx, dword ptr [r8 + r9], 268435456
    __ imull(r8, Address(r9, r10), 1);                 //    imul r8d, dword ptr [r9 + r10], 1
    __ imull(r8, Address(r9, r10), 16);                //    imul r8d, dword ptr [r9 + r10], 16
    __ imull(r8, Address(r9, r10), 256);               //    imul r8d, dword ptr [r9 + r10], 256
    __ imull(r8, Address(r9, r10), 4096);              //    imul r8d, dword ptr [r9 + r10], 4096
    __ imull(r8, Address(r9, r10), 65536);             //    imul r8d, dword ptr [r9 + r10], 65536
    __ imull(r8, Address(r9, r10), 1048576);           //    imul r8d, dword ptr [r9 + r10], 1048576
    __ imull(r8, Address(r9, r10), 16777216);          //    imul r8d, dword ptr [r9 + r10], 16777216
    __ imull(r8, Address(r9, r10), 268435456);         //    imul r8d, dword ptr [r9 + r10], 268435456
    __ imull(r9, Address(r10, r11), 1);                //    imul r9d, dword ptr [r10 + r11], 1
    __ imull(r9, Address(r10, r11), 16);               //    imul r9d, dword ptr [r10 + r11], 16
    __ imull(r9, Address(r10, r11), 256);              //    imul r9d, dword ptr [r10 + r11], 256
    __ imull(r9, Address(r10, r11), 4096);             //    imul r9d, dword ptr [r10 + r11], 4096
    __ imull(r9, Address(r10, r11), 65536);            //    imul r9d, dword ptr [r10 + r11], 65536
    __ imull(r9, Address(r10, r11), 1048576);          //    imul r9d, dword ptr [r10 + r11], 1048576
    __ imull(r9, Address(r10, r11), 16777216);         //    imul r9d, dword ptr [r10 + r11], 16777216
    __ imull(r9, Address(r10, r11), 268435456);        //    imul r9d, dword ptr [r10 + r11], 268435456
    __ imull(r10, Address(r11, r12), 1);               //    imul r10d, dword ptr [r11 + r12], 1
    __ imull(r10, Address(r11, r12), 16);              //    imul r10d, dword ptr [r11 + r12], 16
    __ imull(r10, Address(r11, r12), 256);             //    imul r10d, dword ptr [r11 + r12], 256
    __ imull(r10, Address(r11, r12), 4096);            //    imul r10d, dword ptr [r11 + r12], 4096
    __ imull(r10, Address(r11, r12), 65536);           //    imul r10d, dword ptr [r11 + r12], 65536
    __ imull(r10, Address(r11, r12), 1048576);         //    imul r10d, dword ptr [r11 + r12], 1048576
    __ imull(r10, Address(r11, r12), 16777216);        //    imul r10d, dword ptr [r11 + r12], 16777216
    __ imull(r10, Address(r11, r12), 268435456);       //    imul r10d, dword ptr [r11 + r12], 268435456
    __ imull(r11, Address(r12, r13), 1);               //    imul r11d, dword ptr [r12 + r13], 1
    __ imull(r11, Address(r12, r13), 16);              //    imul r11d, dword ptr [r12 + r13], 16
    __ imull(r11, Address(r12, r13), 256);             //    imul r11d, dword ptr [r12 + r13], 256
    __ imull(r11, Address(r12, r13), 4096);            //    imul r11d, dword ptr [r12 + r13], 4096
    __ imull(r11, Address(r12, r13), 65536);           //    imul r11d, dword ptr [r12 + r13], 65536
    __ imull(r11, Address(r12, r13), 1048576);         //    imul r11d, dword ptr [r12 + r13], 1048576
    __ imull(r11, Address(r12, r13), 16777216);        //    imul r11d, dword ptr [r12 + r13], 16777216
    __ imull(r11, Address(r12, r13), 268435456);       //    imul r11d, dword ptr [r12 + r13], 268435456
    __ imull(r12, Address(r13, r14), 1);               //    imul r12d, dword ptr [r13 + r14], 1
    __ imull(r12, Address(r13, r14), 16);              //    imul r12d, dword ptr [r13 + r14], 16
    __ imull(r12, Address(r13, r14), 256);             //    imul r12d, dword ptr [r13 + r14], 256
    __ imull(r12, Address(r13, r14), 4096);            //    imul r12d, dword ptr [r13 + r14], 4096
    __ imull(r12, Address(r13, r14), 65536);           //    imul r12d, dword ptr [r13 + r14], 65536
    __ imull(r12, Address(r13, r14), 1048576);         //    imul r12d, dword ptr [r13 + r14], 1048576
    __ imull(r12, Address(r13, r14), 16777216);        //    imul r12d, dword ptr [r13 + r14], 16777216
    __ imull(r12, Address(r13, r14), 268435456);       //    imul r12d, dword ptr [r13 + r14], 268435456
    __ imull(r13, Address(r14, r15), 1);               //    imul r13d, dword ptr [r14 + r15], 1
    __ imull(r13, Address(r14, r15), 16);              //    imul r13d, dword ptr [r14 + r15], 16
    __ imull(r13, Address(r14, r15), 256);             //    imul r13d, dword ptr [r14 + r15], 256
    __ imull(r13, Address(r14, r15), 4096);            //    imul r13d, dword ptr [r14 + r15], 4096
    __ imull(r13, Address(r14, r15), 65536);           //    imul r13d, dword ptr [r14 + r15], 65536
    __ imull(r13, Address(r14, r15), 1048576);         //    imul r13d, dword ptr [r14 + r15], 1048576
    __ imull(r13, Address(r14, r15), 16777216);        //    imul r13d, dword ptr [r14 + r15], 16777216
    __ imull(r13, Address(r14, r15), 268435456);       //    imul r13d, dword ptr [r14 + r15], 268435456
    __ imull(r14, Address(r15, r16), 1);               //    imul r14d, dword ptr [r15 + r16], 1
    __ imull(r14, Address(r15, r16), 16);              //    imul r14d, dword ptr [r15 + r16], 16
    __ imull(r14, Address(r15, r16), 256);             //    imul r14d, dword ptr [r15 + r16], 256
    __ imull(r14, Address(r15, r16), 4096);            //    imul r14d, dword ptr [r15 + r16], 4096
    __ imull(r14, Address(r15, r16), 65536);           //    imul r14d, dword ptr [r15 + r16], 65536
    __ imull(r14, Address(r15, r16), 1048576);         //    imul r14d, dword ptr [r15 + r16], 1048576
    __ imull(r14, Address(r15, r16), 16777216);        //    imul r14d, dword ptr [r15 + r16], 16777216
    __ imull(r14, Address(r15, r16), 268435456);       //    imul r14d, dword ptr [r15 + r16], 268435456
    __ imull(r15, Address(r16, r17), 1);               //    imul r15d, dword ptr [r16 + r17], 1
    __ imull(r15, Address(r16, r17), 16);              //    imul r15d, dword ptr [r16 + r17], 16
    __ imull(r15, Address(r16, r17), 256);             //    imul r15d, dword ptr [r16 + r17], 256
    __ imull(r15, Address(r16, r17), 4096);            //    imul r15d, dword ptr [r16 + r17], 4096
    __ imull(r15, Address(r16, r17), 65536);           //    imul r15d, dword ptr [r16 + r17], 65536
    __ imull(r15, Address(r16, r17), 1048576);         //    imul r15d, dword ptr [r16 + r17], 1048576
    __ imull(r15, Address(r16, r17), 16777216);        //    imul r15d, dword ptr [r16 + r17], 16777216
    __ imull(r15, Address(r16, r17), 268435456);       //    imul r15d, dword ptr [r16 + r17], 268435456
    __ imull(r16, Address(r17, r18), 1);               //    imul r16d, dword ptr [r17 + r18], 1
    __ imull(r16, Address(r17, r18), 16);              //    imul r16d, dword ptr [r17 + r18], 16
    __ imull(r16, Address(r17, r18), 256);             //    imul r16d, dword ptr [r17 + r18], 256
    __ imull(r16, Address(r17, r18), 4096);            //    imul r16d, dword ptr [r17 + r18], 4096
    __ imull(r16, Address(r17, r18), 65536);           //    imul r16d, dword ptr [r17 + r18], 65536
    __ imull(r16, Address(r17, r18), 1048576);         //    imul r16d, dword ptr [r17 + r18], 1048576
    __ imull(r16, Address(r17, r18), 16777216);        //    imul r16d, dword ptr [r17 + r18], 16777216
    __ imull(r16, Address(r17, r18), 268435456);       //    imul r16d, dword ptr [r17 + r18], 268435456
    __ imull(r17, Address(r18, r19), 1);               //    imul r17d, dword ptr [r18 + r19], 1
    __ imull(r17, Address(r18, r19), 16);              //    imul r17d, dword ptr [r18 + r19], 16
    __ imull(r17, Address(r18, r19), 256);             //    imul r17d, dword ptr [r18 + r19], 256
    __ imull(r17, Address(r18, r19), 4096);            //    imul r17d, dword ptr [r18 + r19], 4096
    __ imull(r17, Address(r18, r19), 65536);           //    imul r17d, dword ptr [r18 + r19], 65536
    __ imull(r17, Address(r18, r19), 1048576);         //    imul r17d, dword ptr [r18 + r19], 1048576
    __ imull(r17, Address(r18, r19), 16777216);        //    imul r17d, dword ptr [r18 + r19], 16777216
    __ imull(r17, Address(r18, r19), 268435456);       //    imul r17d, dword ptr [r18 + r19], 268435456
    __ imull(r18, Address(r19, r20), 1);               //    imul r18d, dword ptr [r19 + r20], 1
    __ imull(r18, Address(r19, r20), 16);              //    imul r18d, dword ptr [r19 + r20], 16
    __ imull(r18, Address(r19, r20), 256);             //    imul r18d, dword ptr [r19 + r20], 256
    __ imull(r18, Address(r19, r20), 4096);            //    imul r18d, dword ptr [r19 + r20], 4096
    __ imull(r18, Address(r19, r20), 65536);           //    imul r18d, dword ptr [r19 + r20], 65536
    __ imull(r18, Address(r19, r20), 1048576);         //    imul r18d, dword ptr [r19 + r20], 1048576
    __ imull(r18, Address(r19, r20), 16777216);        //    imul r18d, dword ptr [r19 + r20], 16777216
    __ imull(r18, Address(r19, r20), 268435456);       //    imul r18d, dword ptr [r19 + r20], 268435456
    __ imull(r19, Address(r20, r21), 1);               //    imul r19d, dword ptr [r20 + r21], 1
    __ imull(r19, Address(r20, r21), 16);              //    imul r19d, dword ptr [r20 + r21], 16
    __ imull(r19, Address(r20, r21), 256);             //    imul r19d, dword ptr [r20 + r21], 256
    __ imull(r19, Address(r20, r21), 4096);            //    imul r19d, dword ptr [r20 + r21], 4096
    __ imull(r19, Address(r20, r21), 65536);           //    imul r19d, dword ptr [r20 + r21], 65536
    __ imull(r19, Address(r20, r21), 1048576);         //    imul r19d, dword ptr [r20 + r21], 1048576
    __ imull(r19, Address(r20, r21), 16777216);        //    imul r19d, dword ptr [r20 + r21], 16777216
    __ imull(r19, Address(r20, r21), 268435456);       //    imul r19d, dword ptr [r20 + r21], 268435456
    __ imull(r20, Address(r21, r22), 1);               //    imul r20d, dword ptr [r21 + r22], 1
    __ imull(r20, Address(r21, r22), 16);              //    imul r20d, dword ptr [r21 + r22], 16
    __ imull(r20, Address(r21, r22), 256);             //    imul r20d, dword ptr [r21 + r22], 256
    __ imull(r20, Address(r21, r22), 4096);            //    imul r20d, dword ptr [r21 + r22], 4096
    __ imull(r20, Address(r21, r22), 65536);           //    imul r20d, dword ptr [r21 + r22], 65536
    __ imull(r20, Address(r21, r22), 1048576);         //    imul r20d, dword ptr [r21 + r22], 1048576
    __ imull(r20, Address(r21, r22), 16777216);        //    imul r20d, dword ptr [r21 + r22], 16777216
    __ imull(r20, Address(r21, r22), 268435456);       //    imul r20d, dword ptr [r21 + r22], 268435456
    __ imull(r21, Address(r22, r23), 1);               //    imul r21d, dword ptr [r22 + r23], 1
    __ imull(r21, Address(r22, r23), 16);              //    imul r21d, dword ptr [r22 + r23], 16
    __ imull(r21, Address(r22, r23), 256);             //    imul r21d, dword ptr [r22 + r23], 256
    __ imull(r21, Address(r22, r23), 4096);            //    imul r21d, dword ptr [r22 + r23], 4096
    __ imull(r21, Address(r22, r23), 65536);           //    imul r21d, dword ptr [r22 + r23], 65536
    __ imull(r21, Address(r22, r23), 1048576);         //    imul r21d, dword ptr [r22 + r23], 1048576
    __ imull(r21, Address(r22, r23), 16777216);        //    imul r21d, dword ptr [r22 + r23], 16777216
    __ imull(r21, Address(r22, r23), 268435456);       //    imul r21d, dword ptr [r22 + r23], 268435456
    __ imull(r22, Address(r23, r24), 1);               //    imul r22d, dword ptr [r23 + r24], 1
    __ imull(r22, Address(r23, r24), 16);              //    imul r22d, dword ptr [r23 + r24], 16
    __ imull(r22, Address(r23, r24), 256);             //    imul r22d, dword ptr [r23 + r24], 256
    __ imull(r22, Address(r23, r24), 4096);            //    imul r22d, dword ptr [r23 + r24], 4096
    __ imull(r22, Address(r23, r24), 65536);           //    imul r22d, dword ptr [r23 + r24], 65536
    __ imull(r22, Address(r23, r24), 1048576);         //    imul r22d, dword ptr [r23 + r24], 1048576
    __ imull(r22, Address(r23, r24), 16777216);        //    imul r22d, dword ptr [r23 + r24], 16777216
    __ imull(r22, Address(r23, r24), 268435456);       //    imul r22d, dword ptr [r23 + r24], 268435456
    __ imull(r23, Address(r24, r25), 1);               //    imul r23d, dword ptr [r24 + r25], 1
    __ imull(r23, Address(r24, r25), 16);              //    imul r23d, dword ptr [r24 + r25], 16
    __ imull(r23, Address(r24, r25), 256);             //    imul r23d, dword ptr [r24 + r25], 256
    __ imull(r23, Address(r24, r25), 4096);            //    imul r23d, dword ptr [r24 + r25], 4096
    __ imull(r23, Address(r24, r25), 65536);           //    imul r23d, dword ptr [r24 + r25], 65536
    __ imull(r23, Address(r24, r25), 1048576);         //    imul r23d, dword ptr [r24 + r25], 1048576
    __ imull(r23, Address(r24, r25), 16777216);        //    imul r23d, dword ptr [r24 + r25], 16777216
    __ imull(r23, Address(r24, r25), 268435456);       //    imul r23d, dword ptr [r24 + r25], 268435456
    __ imull(r24, Address(r25, r26), 1);               //    imul r24d, dword ptr [r25 + r26], 1
    __ imull(r24, Address(r25, r26), 16);              //    imul r24d, dword ptr [r25 + r26], 16
    __ imull(r24, Address(r25, r26), 256);             //    imul r24d, dword ptr [r25 + r26], 256
    __ imull(r24, Address(r25, r26), 4096);            //    imul r24d, dword ptr [r25 + r26], 4096
    __ imull(r24, Address(r25, r26), 65536);           //    imul r24d, dword ptr [r25 + r26], 65536
    __ imull(r24, Address(r25, r26), 1048576);         //    imul r24d, dword ptr [r25 + r26], 1048576
    __ imull(r24, Address(r25, r26), 16777216);        //    imul r24d, dword ptr [r25 + r26], 16777216
    __ imull(r24, Address(r25, r26), 268435456);       //    imul r24d, dword ptr [r25 + r26], 268435456
    __ imull(r25, Address(r26, r27), 1);               //    imul r25d, dword ptr [r26 + r27], 1
    __ imull(r25, Address(r26, r27), 16);              //    imul r25d, dword ptr [r26 + r27], 16
    __ imull(r25, Address(r26, r27), 256);             //    imul r25d, dword ptr [r26 + r27], 256
    __ imull(r25, Address(r26, r27), 4096);            //    imul r25d, dword ptr [r26 + r27], 4096
    __ imull(r25, Address(r26, r27), 65536);           //    imul r25d, dword ptr [r26 + r27], 65536
    __ imull(r25, Address(r26, r27), 1048576);         //    imul r25d, dword ptr [r26 + r27], 1048576
    __ imull(r25, Address(r26, r27), 16777216);        //    imul r25d, dword ptr [r26 + r27], 16777216
    __ imull(r25, Address(r26, r27), 268435456);       //    imul r25d, dword ptr [r26 + r27], 268435456
    __ imull(r26, Address(r27, r28), 1);               //    imul r26d, dword ptr [r27 + r28], 1
    __ imull(r26, Address(r27, r28), 16);              //    imul r26d, dword ptr [r27 + r28], 16
    __ imull(r26, Address(r27, r28), 256);             //    imul r26d, dword ptr [r27 + r28], 256
    __ imull(r26, Address(r27, r28), 4096);            //    imul r26d, dword ptr [r27 + r28], 4096
    __ imull(r26, Address(r27, r28), 65536);           //    imul r26d, dword ptr [r27 + r28], 65536
    __ imull(r26, Address(r27, r28), 1048576);         //    imul r26d, dword ptr [r27 + r28], 1048576
    __ imull(r26, Address(r27, r28), 16777216);        //    imul r26d, dword ptr [r27 + r28], 16777216
    __ imull(r26, Address(r27, r28), 268435456);       //    imul r26d, dword ptr [r27 + r28], 268435456
    __ imull(r27, Address(r28, r29), 1);               //    imul r27d, dword ptr [r28 + r29], 1
    __ imull(r27, Address(r28, r29), 16);              //    imul r27d, dword ptr [r28 + r29], 16
    __ imull(r27, Address(r28, r29), 256);             //    imul r27d, dword ptr [r28 + r29], 256
    __ imull(r27, Address(r28, r29), 4096);            //    imul r27d, dword ptr [r28 + r29], 4096
    __ imull(r27, Address(r28, r29), 65536);           //    imul r27d, dword ptr [r28 + r29], 65536
    __ imull(r27, Address(r28, r29), 1048576);         //    imul r27d, dword ptr [r28 + r29], 1048576
    __ imull(r27, Address(r28, r29), 16777216);        //    imul r27d, dword ptr [r28 + r29], 16777216
    __ imull(r27, Address(r28, r29), 268435456);       //    imul r27d, dword ptr [r28 + r29], 268435456
    __ imull(r28, Address(r29, r30), 1);               //    imul r28d, dword ptr [r29 + r30], 1
    __ imull(r28, Address(r29, r30), 16);              //    imul r28d, dword ptr [r29 + r30], 16
    __ imull(r28, Address(r29, r30), 256);             //    imul r28d, dword ptr [r29 + r30], 256
    __ imull(r28, Address(r29, r30), 4096);            //    imul r28d, dword ptr [r29 + r30], 4096
    __ imull(r28, Address(r29, r30), 65536);           //    imul r28d, dword ptr [r29 + r30], 65536
    __ imull(r28, Address(r29, r30), 1048576);         //    imul r28d, dword ptr [r29 + r30], 1048576
    __ imull(r28, Address(r29, r30), 16777216);        //    imul r28d, dword ptr [r29 + r30], 16777216
    __ imull(r28, Address(r29, r30), 268435456);       //    imul r28d, dword ptr [r29 + r30], 268435456
    __ imull(r29, Address(r30, r31), 1);               //    imul r29d, dword ptr [r30 + r31], 1
    __ imull(r29, Address(r30, r31), 16);              //    imul r29d, dword ptr [r30 + r31], 16
    __ imull(r29, Address(r30, r31), 256);             //    imul r29d, dword ptr [r30 + r31], 256
    __ imull(r29, Address(r30, r31), 4096);            //    imul r29d, dword ptr [r30 + r31], 4096
    __ imull(r29, Address(r30, r31), 65536);           //    imul r29d, dword ptr [r30 + r31], 65536
    __ imull(r29, Address(r30, r31), 1048576);         //    imul r29d, dword ptr [r30 + r31], 1048576
    __ imull(r29, Address(r30, r31), 16777216);        //    imul r29d, dword ptr [r30 + r31], 16777216
    __ imull(r29, Address(r30, r31), 268435456);       //    imul r29d, dword ptr [r30 + r31], 268435456
    __ imull(r30, Address(r31, rcx), 1);               //    imul r30d, dword ptr [r31 + rcx], 1
    __ imull(r30, Address(r31, rcx), 16);              //    imul r30d, dword ptr [r31 + rcx], 16
    __ imull(r30, Address(r31, rcx), 256);             //    imul r30d, dword ptr [r31 + rcx], 256
    __ imull(r30, Address(r31, rcx), 4096);            //    imul r30d, dword ptr [r31 + rcx], 4096
    __ imull(r30, Address(r31, rcx), 65536);           //    imul r30d, dword ptr [r31 + rcx], 65536
    __ imull(r30, Address(r31, rcx), 1048576);         //    imul r30d, dword ptr [r31 + rcx], 1048576
    __ imull(r30, Address(r31, rcx), 16777216);        //    imul r30d, dword ptr [r31 + rcx], 16777216
    __ imull(r30, Address(r31, rcx), 268435456);       //    imul r30d, dword ptr [r31 + rcx], 268435456
    __ imull(r31, Address(rcx, rdx), 1);               //    imul r31d, dword ptr [rcx + rdx], 1
    __ imull(r31, Address(rcx, rdx), 16);              //    imul r31d, dword ptr [rcx + rdx], 16
    __ imull(r31, Address(rcx, rdx), 256);             //    imul r31d, dword ptr [rcx + rdx], 256
    __ imull(r31, Address(rcx, rdx), 4096);            //    imul r31d, dword ptr [rcx + rdx], 4096
    __ imull(r31, Address(rcx, rdx), 65536);           //    imul r31d, dword ptr [rcx + rdx], 65536
    __ imull(r31, Address(rcx, rdx), 1048576);         //    imul r31d, dword ptr [rcx + rdx], 1048576
    __ imull(r31, Address(rcx, rdx), 16777216);        //    imul r31d, dword ptr [rcx + rdx], 16777216
    __ imull(r31, Address(rcx, rdx), 268435456);       //    imul r31d, dword ptr [rcx + rdx], 268435456
#endif // _LP64
    __ imull(rcx, rdx, 1);                             //    imul ecx, edx, 1
    __ imull(rcx, rdx, 16);                            //    imul ecx, edx, 16
    __ imull(rcx, rdx, 256);                           //    imul ecx, edx, 256
    __ imull(rcx, rdx, 4096);                          //    imul ecx, edx, 4096
    __ imull(rcx, rdx, 65536);                         //    imul ecx, edx, 65536
    __ imull(rcx, rdx, 1048576);                       //    imul ecx, edx, 1048576
    __ imull(rcx, rdx, 16777216);                      //    imul ecx, edx, 16777216
    __ imull(rcx, rdx, 268435456);                     //    imul ecx, edx, 268435456
    __ imull(rdx, rbx, 1);                             //    imul edx, ebx, 1
    __ imull(rdx, rbx, 16);                            //    imul edx, ebx, 16
    __ imull(rdx, rbx, 256);                           //    imul edx, ebx, 256
    __ imull(rdx, rbx, 4096);                          //    imul edx, ebx, 4096
    __ imull(rdx, rbx, 65536);                         //    imul edx, ebx, 65536
    __ imull(rdx, rbx, 1048576);                       //    imul edx, ebx, 1048576
    __ imull(rdx, rbx, 16777216);                      //    imul edx, ebx, 16777216
    __ imull(rdx, rbx, 268435456);                     //    imul edx, ebx, 268435456
#ifdef _LP64
    __ imull(rbx, r8, 1);                              //    imul ebx, r8d, 1
    __ imull(rbx, r8, 16);                             //    imul ebx, r8d, 16
    __ imull(rbx, r8, 256);                            //    imul ebx, r8d, 256
    __ imull(rbx, r8, 4096);                           //    imul ebx, r8d, 4096
    __ imull(rbx, r8, 65536);                          //    imul ebx, r8d, 65536
    __ imull(rbx, r8, 1048576);                        //    imul ebx, r8d, 1048576
    __ imull(rbx, r8, 16777216);                       //    imul ebx, r8d, 16777216
    __ imull(rbx, r8, 268435456);                      //    imul ebx, r8d, 268435456
    __ imull(r8, r9, 1);                               //    imul r8d, r9d, 1
    __ imull(r8, r9, 16);                              //    imul r8d, r9d, 16
    __ imull(r8, r9, 256);                             //    imul r8d, r9d, 256
    __ imull(r8, r9, 4096);                            //    imul r8d, r9d, 4096
    __ imull(r8, r9, 65536);                           //    imul r8d, r9d, 65536
    __ imull(r8, r9, 1048576);                         //    imul r8d, r9d, 1048576
    __ imull(r8, r9, 16777216);                        //    imul r8d, r9d, 16777216
    __ imull(r8, r9, 268435456);                       //    imul r8d, r9d, 268435456
    __ imull(r9, r10, 1);                              //    imul r9d, r10d, 1
    __ imull(r9, r10, 16);                             //    imul r9d, r10d, 16
    __ imull(r9, r10, 256);                            //    imul r9d, r10d, 256
    __ imull(r9, r10, 4096);                           //    imul r9d, r10d, 4096
    __ imull(r9, r10, 65536);                          //    imul r9d, r10d, 65536
    __ imull(r9, r10, 1048576);                        //    imul r9d, r10d, 1048576
    __ imull(r9, r10, 16777216);                       //    imul r9d, r10d, 16777216
    __ imull(r9, r10, 268435456);                      //    imul r9d, r10d, 268435456
    __ imull(r10, r11, 1);                             //    imul r10d, r11d, 1
    __ imull(r10, r11, 16);                            //    imul r10d, r11d, 16
    __ imull(r10, r11, 256);                           //    imul r10d, r11d, 256
    __ imull(r10, r11, 4096);                          //    imul r10d, r11d, 4096
    __ imull(r10, r11, 65536);                         //    imul r10d, r11d, 65536
    __ imull(r10, r11, 1048576);                       //    imul r10d, r11d, 1048576
    __ imull(r10, r11, 16777216);                      //    imul r10d, r11d, 16777216
    __ imull(r10, r11, 268435456);                     //    imul r10d, r11d, 268435456
    __ imull(r11, r12, 1);                             //    imul r11d, r12d, 1
    __ imull(r11, r12, 16);                            //    imul r11d, r12d, 16
    __ imull(r11, r12, 256);                           //    imul r11d, r12d, 256
    __ imull(r11, r12, 4096);                          //    imul r11d, r12d, 4096
    __ imull(r11, r12, 65536);                         //    imul r11d, r12d, 65536
    __ imull(r11, r12, 1048576);                       //    imul r11d, r12d, 1048576
    __ imull(r11, r12, 16777216);                      //    imul r11d, r12d, 16777216
    __ imull(r11, r12, 268435456);                     //    imul r11d, r12d, 268435456
    __ imull(r12, r13, 1);                             //    imul r12d, r13d, 1
    __ imull(r12, r13, 16);                            //    imul r12d, r13d, 16
    __ imull(r12, r13, 256);                           //    imul r12d, r13d, 256
    __ imull(r12, r13, 4096);                          //    imul r12d, r13d, 4096
    __ imull(r12, r13, 65536);                         //    imul r12d, r13d, 65536
    __ imull(r12, r13, 1048576);                       //    imul r12d, r13d, 1048576
    __ imull(r12, r13, 16777216);                      //    imul r12d, r13d, 16777216
    __ imull(r12, r13, 268435456);                     //    imul r12d, r13d, 268435456
    __ imull(r13, r14, 1);                             //    imul r13d, r14d, 1
    __ imull(r13, r14, 16);                            //    imul r13d, r14d, 16
    __ imull(r13, r14, 256);                           //    imul r13d, r14d, 256
    __ imull(r13, r14, 4096);                          //    imul r13d, r14d, 4096
    __ imull(r13, r14, 65536);                         //    imul r13d, r14d, 65536
    __ imull(r13, r14, 1048576);                       //    imul r13d, r14d, 1048576
    __ imull(r13, r14, 16777216);                      //    imul r13d, r14d, 16777216
    __ imull(r13, r14, 268435456);                     //    imul r13d, r14d, 268435456
    __ imull(r14, r15, 1);                             //    imul r14d, r15d, 1
    __ imull(r14, r15, 16);                            //    imul r14d, r15d, 16
    __ imull(r14, r15, 256);                           //    imul r14d, r15d, 256
    __ imull(r14, r15, 4096);                          //    imul r14d, r15d, 4096
    __ imull(r14, r15, 65536);                         //    imul r14d, r15d, 65536
    __ imull(r14, r15, 1048576);                       //    imul r14d, r15d, 1048576
    __ imull(r14, r15, 16777216);                      //    imul r14d, r15d, 16777216
    __ imull(r14, r15, 268435456);                     //    imul r14d, r15d, 268435456
    __ imull(r15, r16, 1);                             //    imul r15d, r16d, 1
    __ imull(r15, r16, 16);                            //    imul r15d, r16d, 16
    __ imull(r15, r16, 256);                           //    imul r15d, r16d, 256
    __ imull(r15, r16, 4096);                          //    imul r15d, r16d, 4096
    __ imull(r15, r16, 65536);                         //    imul r15d, r16d, 65536
    __ imull(r15, r16, 1048576);                       //    imul r15d, r16d, 1048576
    __ imull(r15, r16, 16777216);                      //    imul r15d, r16d, 16777216
    __ imull(r15, r16, 268435456);                     //    imul r15d, r16d, 268435456
    __ imull(r16, r17, 1);                             //    imul r16d, r17d, 1
    __ imull(r16, r17, 16);                            //    imul r16d, r17d, 16
    __ imull(r16, r17, 256);                           //    imul r16d, r17d, 256
    __ imull(r16, r17, 4096);                          //    imul r16d, r17d, 4096
    __ imull(r16, r17, 65536);                         //    imul r16d, r17d, 65536
    __ imull(r16, r17, 1048576);                       //    imul r16d, r17d, 1048576
    __ imull(r16, r17, 16777216);                      //    imul r16d, r17d, 16777216
    __ imull(r16, r17, 268435456);                     //    imul r16d, r17d, 268435456
    __ imull(r17, r18, 1);                             //    imul r17d, r18d, 1
    __ imull(r17, r18, 16);                            //    imul r17d, r18d, 16
    __ imull(r17, r18, 256);                           //    imul r17d, r18d, 256
    __ imull(r17, r18, 4096);                          //    imul r17d, r18d, 4096
    __ imull(r17, r18, 65536);                         //    imul r17d, r18d, 65536
    __ imull(r17, r18, 1048576);                       //    imul r17d, r18d, 1048576
    __ imull(r17, r18, 16777216);                      //    imul r17d, r18d, 16777216
    __ imull(r17, r18, 268435456);                     //    imul r17d, r18d, 268435456
    __ imull(r18, r19, 1);                             //    imul r18d, r19d, 1
    __ imull(r18, r19, 16);                            //    imul r18d, r19d, 16
    __ imull(r18, r19, 256);                           //    imul r18d, r19d, 256
    __ imull(r18, r19, 4096);                          //    imul r18d, r19d, 4096
    __ imull(r18, r19, 65536);                         //    imul r18d, r19d, 65536
    __ imull(r18, r19, 1048576);                       //    imul r18d, r19d, 1048576
    __ imull(r18, r19, 16777216);                      //    imul r18d, r19d, 16777216
    __ imull(r18, r19, 268435456);                     //    imul r18d, r19d, 268435456
    __ imull(r19, r20, 1);                             //    imul r19d, r20d, 1
    __ imull(r19, r20, 16);                            //    imul r19d, r20d, 16
    __ imull(r19, r20, 256);                           //    imul r19d, r20d, 256
    __ imull(r19, r20, 4096);                          //    imul r19d, r20d, 4096
    __ imull(r19, r20, 65536);                         //    imul r19d, r20d, 65536
    __ imull(r19, r20, 1048576);                       //    imul r19d, r20d, 1048576
    __ imull(r19, r20, 16777216);                      //    imul r19d, r20d, 16777216
    __ imull(r19, r20, 268435456);                     //    imul r19d, r20d, 268435456
    __ imull(r20, r21, 1);                             //    imul r20d, r21d, 1
    __ imull(r20, r21, 16);                            //    imul r20d, r21d, 16
    __ imull(r20, r21, 256);                           //    imul r20d, r21d, 256
    __ imull(r20, r21, 4096);                          //    imul r20d, r21d, 4096
    __ imull(r20, r21, 65536);                         //    imul r20d, r21d, 65536
    __ imull(r20, r21, 1048576);                       //    imul r20d, r21d, 1048576
    __ imull(r20, r21, 16777216);                      //    imul r20d, r21d, 16777216
    __ imull(r20, r21, 268435456);                     //    imul r20d, r21d, 268435456
    __ imull(r21, r22, 1);                             //    imul r21d, r22d, 1
    __ imull(r21, r22, 16);                            //    imul r21d, r22d, 16
    __ imull(r21, r22, 256);                           //    imul r21d, r22d, 256
    __ imull(r21, r22, 4096);                          //    imul r21d, r22d, 4096
    __ imull(r21, r22, 65536);                         //    imul r21d, r22d, 65536
    __ imull(r21, r22, 1048576);                       //    imul r21d, r22d, 1048576
    __ imull(r21, r22, 16777216);                      //    imul r21d, r22d, 16777216
    __ imull(r21, r22, 268435456);                     //    imul r21d, r22d, 268435456
    __ imull(r22, r23, 1);                             //    imul r22d, r23d, 1
    __ imull(r22, r23, 16);                            //    imul r22d, r23d, 16
    __ imull(r22, r23, 256);                           //    imul r22d, r23d, 256
    __ imull(r22, r23, 4096);                          //    imul r22d, r23d, 4096
    __ imull(r22, r23, 65536);                         //    imul r22d, r23d, 65536
    __ imull(r22, r23, 1048576);                       //    imul r22d, r23d, 1048576
    __ imull(r22, r23, 16777216);                      //    imul r22d, r23d, 16777216
    __ imull(r22, r23, 268435456);                     //    imul r22d, r23d, 268435456
    __ imull(r23, r24, 1);                             //    imul r23d, r24d, 1
    __ imull(r23, r24, 16);                            //    imul r23d, r24d, 16
    __ imull(r23, r24, 256);                           //    imul r23d, r24d, 256
    __ imull(r23, r24, 4096);                          //    imul r23d, r24d, 4096
    __ imull(r23, r24, 65536);                         //    imul r23d, r24d, 65536
    __ imull(r23, r24, 1048576);                       //    imul r23d, r24d, 1048576
    __ imull(r23, r24, 16777216);                      //    imul r23d, r24d, 16777216
    __ imull(r23, r24, 268435456);                     //    imul r23d, r24d, 268435456
    __ imull(r24, r25, 1);                             //    imul r24d, r25d, 1
    __ imull(r24, r25, 16);                            //    imul r24d, r25d, 16
    __ imull(r24, r25, 256);                           //    imul r24d, r25d, 256
    __ imull(r24, r25, 4096);                          //    imul r24d, r25d, 4096
    __ imull(r24, r25, 65536);                         //    imul r24d, r25d, 65536
    __ imull(r24, r25, 1048576);                       //    imul r24d, r25d, 1048576
    __ imull(r24, r25, 16777216);                      //    imul r24d, r25d, 16777216
    __ imull(r24, r25, 268435456);                     //    imul r24d, r25d, 268435456
    __ imull(r25, r26, 1);                             //    imul r25d, r26d, 1
    __ imull(r25, r26, 16);                            //    imul r25d, r26d, 16
    __ imull(r25, r26, 256);                           //    imul r25d, r26d, 256
    __ imull(r25, r26, 4096);                          //    imul r25d, r26d, 4096
    __ imull(r25, r26, 65536);                         //    imul r25d, r26d, 65536
    __ imull(r25, r26, 1048576);                       //    imul r25d, r26d, 1048576
    __ imull(r25, r26, 16777216);                      //    imul r25d, r26d, 16777216
    __ imull(r25, r26, 268435456);                     //    imul r25d, r26d, 268435456
    __ imull(r26, r27, 1);                             //    imul r26d, r27d, 1
    __ imull(r26, r27, 16);                            //    imul r26d, r27d, 16
    __ imull(r26, r27, 256);                           //    imul r26d, r27d, 256
    __ imull(r26, r27, 4096);                          //    imul r26d, r27d, 4096
    __ imull(r26, r27, 65536);                         //    imul r26d, r27d, 65536
    __ imull(r26, r27, 1048576);                       //    imul r26d, r27d, 1048576
    __ imull(r26, r27, 16777216);                      //    imul r26d, r27d, 16777216
    __ imull(r26, r27, 268435456);                     //    imul r26d, r27d, 268435456
    __ imull(r27, r28, 1);                             //    imul r27d, r28d, 1
    __ imull(r27, r28, 16);                            //    imul r27d, r28d, 16
    __ imull(r27, r28, 256);                           //    imul r27d, r28d, 256
    __ imull(r27, r28, 4096);                          //    imul r27d, r28d, 4096
    __ imull(r27, r28, 65536);                         //    imul r27d, r28d, 65536
    __ imull(r27, r28, 1048576);                       //    imul r27d, r28d, 1048576
    __ imull(r27, r28, 16777216);                      //    imul r27d, r28d, 16777216
    __ imull(r27, r28, 268435456);                     //    imul r27d, r28d, 268435456
    __ imull(r28, r29, 1);                             //    imul r28d, r29d, 1
    __ imull(r28, r29, 16);                            //    imul r28d, r29d, 16
    __ imull(r28, r29, 256);                           //    imul r28d, r29d, 256
    __ imull(r28, r29, 4096);                          //    imul r28d, r29d, 4096
    __ imull(r28, r29, 65536);                         //    imul r28d, r29d, 65536
    __ imull(r28, r29, 1048576);                       //    imul r28d, r29d, 1048576
    __ imull(r28, r29, 16777216);                      //    imul r28d, r29d, 16777216
    __ imull(r28, r29, 268435456);                     //    imul r28d, r29d, 268435456
    __ imull(r29, r30, 1);                             //    imul r29d, r30d, 1
    __ imull(r29, r30, 16);                            //    imul r29d, r30d, 16
    __ imull(r29, r30, 256);                           //    imul r29d, r30d, 256
    __ imull(r29, r30, 4096);                          //    imul r29d, r30d, 4096
    __ imull(r29, r30, 65536);                         //    imul r29d, r30d, 65536
    __ imull(r29, r30, 1048576);                       //    imul r29d, r30d, 1048576
    __ imull(r29, r30, 16777216);                      //    imul r29d, r30d, 16777216
    __ imull(r29, r30, 268435456);                     //    imul r29d, r30d, 268435456
    __ imull(r30, r31, 1);                             //    imul r30d, r31d, 1
    __ imull(r30, r31, 16);                            //    imul r30d, r31d, 16
    __ imull(r30, r31, 256);                           //    imul r30d, r31d, 256
    __ imull(r30, r31, 4096);                          //    imul r30d, r31d, 4096
    __ imull(r30, r31, 65536);                         //    imul r30d, r31d, 65536
    __ imull(r30, r31, 1048576);                       //    imul r30d, r31d, 1048576
    __ imull(r30, r31, 16777216);                      //    imul r30d, r31d, 16777216
    __ imull(r30, r31, 268435456);                     //    imul r30d, r31d, 268435456
    __ imull(r31, rcx, 1);                             //    imul r31d, ecx, 1
    __ imull(r31, rcx, 16);                            //    imul r31d, ecx, 16
    __ imull(r31, rcx, 256);                           //    imul r31d, ecx, 256
    __ imull(r31, rcx, 4096);                          //    imul r31d, ecx, 4096
    __ imull(r31, rcx, 65536);                         //    imul r31d, ecx, 65536
    __ imull(r31, rcx, 1048576);                       //    imul r31d, ecx, 1048576
    __ imull(r31, rcx, 16777216);                      //    imul r31d, ecx, 16777216
    __ imull(r31, rcx, 268435456);                     //    imul r31d, ecx, 268435456
#endif // _LP64
    __ shldl(rcx, rdx, 1);                             //    shld ecx, edx, 1
    __ shldl(rcx, rdx, 2);                             //    shld ecx, edx, 2
    __ shldl(rcx, rdx, 4);                             //    shld ecx, edx, 4
    __ shldl(rcx, rdx, 8);                             //    shld ecx, edx, 8
    __ shldl(rcx, rdx, 16);                            //    shld ecx, edx, 16
    __ shldl(rdx, rbx, 1);                             //    shld edx, ebx, 1
    __ shldl(rdx, rbx, 2);                             //    shld edx, ebx, 2
    __ shldl(rdx, rbx, 4);                             //    shld edx, ebx, 4
    __ shldl(rdx, rbx, 8);                             //    shld edx, ebx, 8
    __ shldl(rdx, rbx, 16);                            //    shld edx, ebx, 16
#ifdef _LP64
    __ shldl(rbx, r8, 1);                              //    shld ebx, r8d, 1
    __ shldl(rbx, r8, 2);                              //    shld ebx, r8d, 2
    __ shldl(rbx, r8, 4);                              //    shld ebx, r8d, 4
    __ shldl(rbx, r8, 8);                              //    shld ebx, r8d, 8
    __ shldl(rbx, r8, 16);                             //    shld ebx, r8d, 16
    __ shldl(r8, r9, 1);                               //    shld r8d, r9d, 1
    __ shldl(r8, r9, 2);                               //    shld r8d, r9d, 2
    __ shldl(r8, r9, 4);                               //    shld r8d, r9d, 4
    __ shldl(r8, r9, 8);                               //    shld r8d, r9d, 8
    __ shldl(r8, r9, 16);                              //    shld r8d, r9d, 16
    __ shldl(r9, r10, 1);                              //    shld r9d, r10d, 1
    __ shldl(r9, r10, 2);                              //    shld r9d, r10d, 2
    __ shldl(r9, r10, 4);                              //    shld r9d, r10d, 4
    __ shldl(r9, r10, 8);                              //    shld r9d, r10d, 8
    __ shldl(r9, r10, 16);                             //    shld r9d, r10d, 16
    __ shldl(r10, r11, 1);                             //    shld r10d, r11d, 1
    __ shldl(r10, r11, 2);                             //    shld r10d, r11d, 2
    __ shldl(r10, r11, 4);                             //    shld r10d, r11d, 4
    __ shldl(r10, r11, 8);                             //    shld r10d, r11d, 8
    __ shldl(r10, r11, 16);                            //    shld r10d, r11d, 16
    __ shldl(r11, r12, 1);                             //    shld r11d, r12d, 1
    __ shldl(r11, r12, 2);                             //    shld r11d, r12d, 2
    __ shldl(r11, r12, 4);                             //    shld r11d, r12d, 4
    __ shldl(r11, r12, 8);                             //    shld r11d, r12d, 8
    __ shldl(r11, r12, 16);                            //    shld r11d, r12d, 16
    __ shldl(r12, r13, 1);                             //    shld r12d, r13d, 1
    __ shldl(r12, r13, 2);                             //    shld r12d, r13d, 2
    __ shldl(r12, r13, 4);                             //    shld r12d, r13d, 4
    __ shldl(r12, r13, 8);                             //    shld r12d, r13d, 8
    __ shldl(r12, r13, 16);                            //    shld r12d, r13d, 16
    __ shldl(r13, r14, 1);                             //    shld r13d, r14d, 1
    __ shldl(r13, r14, 2);                             //    shld r13d, r14d, 2
    __ shldl(r13, r14, 4);                             //    shld r13d, r14d, 4
    __ shldl(r13, r14, 8);                             //    shld r13d, r14d, 8
    __ shldl(r13, r14, 16);                            //    shld r13d, r14d, 16
    __ shldl(r14, r15, 1);                             //    shld r14d, r15d, 1
    __ shldl(r14, r15, 2);                             //    shld r14d, r15d, 2
    __ shldl(r14, r15, 4);                             //    shld r14d, r15d, 4
    __ shldl(r14, r15, 8);                             //    shld r14d, r15d, 8
    __ shldl(r14, r15, 16);                            //    shld r14d, r15d, 16
    __ shldl(r15, r16, 1);                             //    shld r15d, r16d, 1
    __ shldl(r15, r16, 2);                             //    shld r15d, r16d, 2
    __ shldl(r15, r16, 4);                             //    shld r15d, r16d, 4
    __ shldl(r15, r16, 8);                             //    shld r15d, r16d, 8
    __ shldl(r15, r16, 16);                            //    shld r15d, r16d, 16
    __ shldl(r16, r17, 1);                             //    shld r16d, r17d, 1
    __ shldl(r16, r17, 2);                             //    shld r16d, r17d, 2
    __ shldl(r16, r17, 4);                             //    shld r16d, r17d, 4
    __ shldl(r16, r17, 8);                             //    shld r16d, r17d, 8
    __ shldl(r16, r17, 16);                            //    shld r16d, r17d, 16
    __ shldl(r17, r18, 1);                             //    shld r17d, r18d, 1
    __ shldl(r17, r18, 2);                             //    shld r17d, r18d, 2
    __ shldl(r17, r18, 4);                             //    shld r17d, r18d, 4
    __ shldl(r17, r18, 8);                             //    shld r17d, r18d, 8
    __ shldl(r17, r18, 16);                            //    shld r17d, r18d, 16
    __ shldl(r18, r19, 1);                             //    shld r18d, r19d, 1
    __ shldl(r18, r19, 2);                             //    shld r18d, r19d, 2
    __ shldl(r18, r19, 4);                             //    shld r18d, r19d, 4
    __ shldl(r18, r19, 8);                             //    shld r18d, r19d, 8
    __ shldl(r18, r19, 16);                            //    shld r18d, r19d, 16
    __ shldl(r19, r20, 1);                             //    shld r19d, r20d, 1
    __ shldl(r19, r20, 2);                             //    shld r19d, r20d, 2
    __ shldl(r19, r20, 4);                             //    shld r19d, r20d, 4
    __ shldl(r19, r20, 8);                             //    shld r19d, r20d, 8
    __ shldl(r19, r20, 16);                            //    shld r19d, r20d, 16
    __ shldl(r20, r21, 1);                             //    shld r20d, r21d, 1
    __ shldl(r20, r21, 2);                             //    shld r20d, r21d, 2
    __ shldl(r20, r21, 4);                             //    shld r20d, r21d, 4
    __ shldl(r20, r21, 8);                             //    shld r20d, r21d, 8
    __ shldl(r20, r21, 16);                            //    shld r20d, r21d, 16
    __ shldl(r21, r22, 1);                             //    shld r21d, r22d, 1
    __ shldl(r21, r22, 2);                             //    shld r21d, r22d, 2
    __ shldl(r21, r22, 4);                             //    shld r21d, r22d, 4
    __ shldl(r21, r22, 8);                             //    shld r21d, r22d, 8
    __ shldl(r21, r22, 16);                            //    shld r21d, r22d, 16
    __ shldl(r22, r23, 1);                             //    shld r22d, r23d, 1
    __ shldl(r22, r23, 2);                             //    shld r22d, r23d, 2
    __ shldl(r22, r23, 4);                             //    shld r22d, r23d, 4
    __ shldl(r22, r23, 8);                             //    shld r22d, r23d, 8
    __ shldl(r22, r23, 16);                            //    shld r22d, r23d, 16
    __ shldl(r23, r24, 1);                             //    shld r23d, r24d, 1
    __ shldl(r23, r24, 2);                             //    shld r23d, r24d, 2
    __ shldl(r23, r24, 4);                             //    shld r23d, r24d, 4
    __ shldl(r23, r24, 8);                             //    shld r23d, r24d, 8
    __ shldl(r23, r24, 16);                            //    shld r23d, r24d, 16
    __ shldl(r24, r25, 1);                             //    shld r24d, r25d, 1
    __ shldl(r24, r25, 2);                             //    shld r24d, r25d, 2
    __ shldl(r24, r25, 4);                             //    shld r24d, r25d, 4
    __ shldl(r24, r25, 8);                             //    shld r24d, r25d, 8
    __ shldl(r24, r25, 16);                            //    shld r24d, r25d, 16
    __ shldl(r25, r26, 1);                             //    shld r25d, r26d, 1
    __ shldl(r25, r26, 2);                             //    shld r25d, r26d, 2
    __ shldl(r25, r26, 4);                             //    shld r25d, r26d, 4
    __ shldl(r25, r26, 8);                             //    shld r25d, r26d, 8
    __ shldl(r25, r26, 16);                            //    shld r25d, r26d, 16
    __ shldl(r26, r27, 1);                             //    shld r26d, r27d, 1
    __ shldl(r26, r27, 2);                             //    shld r26d, r27d, 2
    __ shldl(r26, r27, 4);                             //    shld r26d, r27d, 4
    __ shldl(r26, r27, 8);                             //    shld r26d, r27d, 8
    __ shldl(r26, r27, 16);                            //    shld r26d, r27d, 16
    __ shldl(r27, r28, 1);                             //    shld r27d, r28d, 1
    __ shldl(r27, r28, 2);                             //    shld r27d, r28d, 2
    __ shldl(r27, r28, 4);                             //    shld r27d, r28d, 4
    __ shldl(r27, r28, 8);                             //    shld r27d, r28d, 8
    __ shldl(r27, r28, 16);                            //    shld r27d, r28d, 16
    __ shldl(r28, r29, 1);                             //    shld r28d, r29d, 1
    __ shldl(r28, r29, 2);                             //    shld r28d, r29d, 2
    __ shldl(r28, r29, 4);                             //    shld r28d, r29d, 4
    __ shldl(r28, r29, 8);                             //    shld r28d, r29d, 8
    __ shldl(r28, r29, 16);                            //    shld r28d, r29d, 16
    __ shldl(r29, r30, 1);                             //    shld r29d, r30d, 1
    __ shldl(r29, r30, 2);                             //    shld r29d, r30d, 2
    __ shldl(r29, r30, 4);                             //    shld r29d, r30d, 4
    __ shldl(r29, r30, 8);                             //    shld r29d, r30d, 8
    __ shldl(r29, r30, 16);                            //    shld r29d, r30d, 16
    __ shldl(r30, r31, 1);                             //    shld r30d, r31d, 1
    __ shldl(r30, r31, 2);                             //    shld r30d, r31d, 2
    __ shldl(r30, r31, 4);                             //    shld r30d, r31d, 4
    __ shldl(r30, r31, 8);                             //    shld r30d, r31d, 8
    __ shldl(r30, r31, 16);                            //    shld r30d, r31d, 16
    __ shldl(r31, rcx, 1);                             //    shld r31d, ecx, 1
    __ shldl(r31, rcx, 2);                             //    shld r31d, ecx, 2
    __ shldl(r31, rcx, 4);                             //    shld r31d, ecx, 4
    __ shldl(r31, rcx, 8);                             //    shld r31d, ecx, 8
    __ shldl(r31, rcx, 16);                            //    shld r31d, ecx, 16
#endif // _LP64
    __ shrdl(rcx, rdx, 1);                             //    shrd ecx, edx, 1
    __ shrdl(rcx, rdx, 2);                             //    shrd ecx, edx, 2
    __ shrdl(rcx, rdx, 4);                             //    shrd ecx, edx, 4
    __ shrdl(rcx, rdx, 8);                             //    shrd ecx, edx, 8
    __ shrdl(rcx, rdx, 16);                            //    shrd ecx, edx, 16
    __ shrdl(rdx, rbx, 1);                             //    shrd edx, ebx, 1
    __ shrdl(rdx, rbx, 2);                             //    shrd edx, ebx, 2
    __ shrdl(rdx, rbx, 4);                             //    shrd edx, ebx, 4
    __ shrdl(rdx, rbx, 8);                             //    shrd edx, ebx, 8
    __ shrdl(rdx, rbx, 16);                            //    shrd edx, ebx, 16
#ifdef _LP64
    __ shrdl(rbx, r8, 1);                              //    shrd ebx, r8d, 1
    __ shrdl(rbx, r8, 2);                              //    shrd ebx, r8d, 2
    __ shrdl(rbx, r8, 4);                              //    shrd ebx, r8d, 4
    __ shrdl(rbx, r8, 8);                              //    shrd ebx, r8d, 8
    __ shrdl(rbx, r8, 16);                             //    shrd ebx, r8d, 16
    __ shrdl(r8, r9, 1);                               //    shrd r8d, r9d, 1
    __ shrdl(r8, r9, 2);                               //    shrd r8d, r9d, 2
    __ shrdl(r8, r9, 4);                               //    shrd r8d, r9d, 4
    __ shrdl(r8, r9, 8);                               //    shrd r8d, r9d, 8
    __ shrdl(r8, r9, 16);                              //    shrd r8d, r9d, 16
    __ shrdl(r9, r10, 1);                              //    shrd r9d, r10d, 1
    __ shrdl(r9, r10, 2);                              //    shrd r9d, r10d, 2
    __ shrdl(r9, r10, 4);                              //    shrd r9d, r10d, 4
    __ shrdl(r9, r10, 8);                              //    shrd r9d, r10d, 8
    __ shrdl(r9, r10, 16);                             //    shrd r9d, r10d, 16
    __ shrdl(r10, r11, 1);                             //    shrd r10d, r11d, 1
    __ shrdl(r10, r11, 2);                             //    shrd r10d, r11d, 2
    __ shrdl(r10, r11, 4);                             //    shrd r10d, r11d, 4
    __ shrdl(r10, r11, 8);                             //    shrd r10d, r11d, 8
    __ shrdl(r10, r11, 16);                            //    shrd r10d, r11d, 16
    __ shrdl(r11, r12, 1);                             //    shrd r11d, r12d, 1
    __ shrdl(r11, r12, 2);                             //    shrd r11d, r12d, 2
    __ shrdl(r11, r12, 4);                             //    shrd r11d, r12d, 4
    __ shrdl(r11, r12, 8);                             //    shrd r11d, r12d, 8
    __ shrdl(r11, r12, 16);                            //    shrd r11d, r12d, 16
    __ shrdl(r12, r13, 1);                             //    shrd r12d, r13d, 1
    __ shrdl(r12, r13, 2);                             //    shrd r12d, r13d, 2
    __ shrdl(r12, r13, 4);                             //    shrd r12d, r13d, 4
    __ shrdl(r12, r13, 8);                             //    shrd r12d, r13d, 8
    __ shrdl(r12, r13, 16);                            //    shrd r12d, r13d, 16
    __ shrdl(r13, r14, 1);                             //    shrd r13d, r14d, 1
    __ shrdl(r13, r14, 2);                             //    shrd r13d, r14d, 2
    __ shrdl(r13, r14, 4);                             //    shrd r13d, r14d, 4
    __ shrdl(r13, r14, 8);                             //    shrd r13d, r14d, 8
    __ shrdl(r13, r14, 16);                            //    shrd r13d, r14d, 16
    __ shrdl(r14, r15, 1);                             //    shrd r14d, r15d, 1
    __ shrdl(r14, r15, 2);                             //    shrd r14d, r15d, 2
    __ shrdl(r14, r15, 4);                             //    shrd r14d, r15d, 4
    __ shrdl(r14, r15, 8);                             //    shrd r14d, r15d, 8
    __ shrdl(r14, r15, 16);                            //    shrd r14d, r15d, 16
    __ shrdl(r15, r16, 1);                             //    shrd r15d, r16d, 1
    __ shrdl(r15, r16, 2);                             //    shrd r15d, r16d, 2
    __ shrdl(r15, r16, 4);                             //    shrd r15d, r16d, 4
    __ shrdl(r15, r16, 8);                             //    shrd r15d, r16d, 8
    __ shrdl(r15, r16, 16);                            //    shrd r15d, r16d, 16
    __ shrdl(r16, r17, 1);                             //    shrd r16d, r17d, 1
    __ shrdl(r16, r17, 2);                             //    shrd r16d, r17d, 2
    __ shrdl(r16, r17, 4);                             //    shrd r16d, r17d, 4
    __ shrdl(r16, r17, 8);                             //    shrd r16d, r17d, 8
    __ shrdl(r16, r17, 16);                            //    shrd r16d, r17d, 16
    __ shrdl(r17, r18, 1);                             //    shrd r17d, r18d, 1
    __ shrdl(r17, r18, 2);                             //    shrd r17d, r18d, 2
    __ shrdl(r17, r18, 4);                             //    shrd r17d, r18d, 4
    __ shrdl(r17, r18, 8);                             //    shrd r17d, r18d, 8
    __ shrdl(r17, r18, 16);                            //    shrd r17d, r18d, 16
    __ shrdl(r18, r19, 1);                             //    shrd r18d, r19d, 1
    __ shrdl(r18, r19, 2);                             //    shrd r18d, r19d, 2
    __ shrdl(r18, r19, 4);                             //    shrd r18d, r19d, 4
    __ shrdl(r18, r19, 8);                             //    shrd r18d, r19d, 8
    __ shrdl(r18, r19, 16);                            //    shrd r18d, r19d, 16
    __ shrdl(r19, r20, 1);                             //    shrd r19d, r20d, 1
    __ shrdl(r19, r20, 2);                             //    shrd r19d, r20d, 2
    __ shrdl(r19, r20, 4);                             //    shrd r19d, r20d, 4
    __ shrdl(r19, r20, 8);                             //    shrd r19d, r20d, 8
    __ shrdl(r19, r20, 16);                            //    shrd r19d, r20d, 16
    __ shrdl(r20, r21, 1);                             //    shrd r20d, r21d, 1
    __ shrdl(r20, r21, 2);                             //    shrd r20d, r21d, 2
    __ shrdl(r20, r21, 4);                             //    shrd r20d, r21d, 4
    __ shrdl(r20, r21, 8);                             //    shrd r20d, r21d, 8
    __ shrdl(r20, r21, 16);                            //    shrd r20d, r21d, 16
    __ shrdl(r21, r22, 1);                             //    shrd r21d, r22d, 1
    __ shrdl(r21, r22, 2);                             //    shrd r21d, r22d, 2
    __ shrdl(r21, r22, 4);                             //    shrd r21d, r22d, 4
    __ shrdl(r21, r22, 8);                             //    shrd r21d, r22d, 8
    __ shrdl(r21, r22, 16);                            //    shrd r21d, r22d, 16
    __ shrdl(r22, r23, 1);                             //    shrd r22d, r23d, 1
    __ shrdl(r22, r23, 2);                             //    shrd r22d, r23d, 2
    __ shrdl(r22, r23, 4);                             //    shrd r22d, r23d, 4
    __ shrdl(r22, r23, 8);                             //    shrd r22d, r23d, 8
    __ shrdl(r22, r23, 16);                            //    shrd r22d, r23d, 16
    __ shrdl(r23, r24, 1);                             //    shrd r23d, r24d, 1
    __ shrdl(r23, r24, 2);                             //    shrd r23d, r24d, 2
    __ shrdl(r23, r24, 4);                             //    shrd r23d, r24d, 4
    __ shrdl(r23, r24, 8);                             //    shrd r23d, r24d, 8
    __ shrdl(r23, r24, 16);                            //    shrd r23d, r24d, 16
    __ shrdl(r24, r25, 1);                             //    shrd r24d, r25d, 1
    __ shrdl(r24, r25, 2);                             //    shrd r24d, r25d, 2
    __ shrdl(r24, r25, 4);                             //    shrd r24d, r25d, 4
    __ shrdl(r24, r25, 8);                             //    shrd r24d, r25d, 8
    __ shrdl(r24, r25, 16);                            //    shrd r24d, r25d, 16
    __ shrdl(r25, r26, 1);                             //    shrd r25d, r26d, 1
    __ shrdl(r25, r26, 2);                             //    shrd r25d, r26d, 2
    __ shrdl(r25, r26, 4);                             //    shrd r25d, r26d, 4
    __ shrdl(r25, r26, 8);                             //    shrd r25d, r26d, 8
    __ shrdl(r25, r26, 16);                            //    shrd r25d, r26d, 16
    __ shrdl(r26, r27, 1);                             //    shrd r26d, r27d, 1
    __ shrdl(r26, r27, 2);                             //    shrd r26d, r27d, 2
    __ shrdl(r26, r27, 4);                             //    shrd r26d, r27d, 4
    __ shrdl(r26, r27, 8);                             //    shrd r26d, r27d, 8
    __ shrdl(r26, r27, 16);                            //    shrd r26d, r27d, 16
    __ shrdl(r27, r28, 1);                             //    shrd r27d, r28d, 1
    __ shrdl(r27, r28, 2);                             //    shrd r27d, r28d, 2
    __ shrdl(r27, r28, 4);                             //    shrd r27d, r28d, 4
    __ shrdl(r27, r28, 8);                             //    shrd r27d, r28d, 8
    __ shrdl(r27, r28, 16);                            //    shrd r27d, r28d, 16
    __ shrdl(r28, r29, 1);                             //    shrd r28d, r29d, 1
    __ shrdl(r28, r29, 2);                             //    shrd r28d, r29d, 2
    __ shrdl(r28, r29, 4);                             //    shrd r28d, r29d, 4
    __ shrdl(r28, r29, 8);                             //    shrd r28d, r29d, 8
    __ shrdl(r28, r29, 16);                            //    shrd r28d, r29d, 16
    __ shrdl(r29, r30, 1);                             //    shrd r29d, r30d, 1
    __ shrdl(r29, r30, 2);                             //    shrd r29d, r30d, 2
    __ shrdl(r29, r30, 4);                             //    shrd r29d, r30d, 4
    __ shrdl(r29, r30, 8);                             //    shrd r29d, r30d, 8
    __ shrdl(r29, r30, 16);                            //    shrd r29d, r30d, 16
    __ shrdl(r30, r31, 1);                             //    shrd r30d, r31d, 1
    __ shrdl(r30, r31, 2);                             //    shrd r30d, r31d, 2
    __ shrdl(r30, r31, 4);                             //    shrd r30d, r31d, 4
    __ shrdl(r30, r31, 8);                             //    shrd r30d, r31d, 8
    __ shrdl(r30, r31, 16);                            //    shrd r30d, r31d, 16
    __ shrdl(r31, rcx, 1);                             //    shrd r31d, ecx, 1
    __ shrdl(r31, rcx, 2);                             //    shrd r31d, ecx, 2
    __ shrdl(r31, rcx, 4);                             //    shrd r31d, ecx, 4
    __ shrdl(r31, rcx, 8);                             //    shrd r31d, ecx, 8
    __ shrdl(r31, rcx, 16);                            //    shrd r31d, ecx, 16
#endif // _LP64
    __ subl_imm32 (rcx, 65536);                        //    sub ecx, 65536
    __ subl_imm32 (rcx, 262144);                       //    sub ecx, 262144
    __ subl_imm32 (rcx, 1048576);                      //    sub ecx, 1048576
    __ subl_imm32 (rcx, 4194304);                      //    sub ecx, 4194304
    __ subl_imm32 (rcx, 16777216);                     //    sub ecx, 16777216
    __ subl_imm32 (rcx, 67108864);                     //    sub ecx, 67108864
    __ subl_imm32 (rcx, 268435456);                    //    sub ecx, 268435456
    __ subl_imm32 (rcx, 1073741824);                   //    sub ecx, 1073741824
    __ subl_imm32 (rdx, 65536);                        //    sub edx, 65536
    __ subl_imm32 (rdx, 262144);                       //    sub edx, 262144
    __ subl_imm32 (rdx, 1048576);                      //    sub edx, 1048576
    __ subl_imm32 (rdx, 4194304);                      //    sub edx, 4194304
    __ subl_imm32 (rdx, 16777216);                     //    sub edx, 16777216
    __ subl_imm32 (rdx, 67108864);                     //    sub edx, 67108864
    __ subl_imm32 (rdx, 268435456);                    //    sub edx, 268435456
    __ subl_imm32 (rdx, 1073741824);                   //    sub edx, 1073741824
    __ subl_imm32 (rbx, 65536);                        //    sub ebx, 65536
    __ subl_imm32 (rbx, 262144);                       //    sub ebx, 262144
    __ subl_imm32 (rbx, 1048576);                      //    sub ebx, 1048576
    __ subl_imm32 (rbx, 4194304);                      //    sub ebx, 4194304
    __ subl_imm32 (rbx, 16777216);                     //    sub ebx, 16777216
    __ subl_imm32 (rbx, 67108864);                     //    sub ebx, 67108864
    __ subl_imm32 (rbx, 268435456);                    //    sub ebx, 268435456
    __ subl_imm32 (rbx, 1073741824);                   //    sub ebx, 1073741824
#ifdef _LP64
    __ subl_imm32 (r8, 65536);                         //    sub r8d, 65536
    __ subl_imm32 (r8, 262144);                        //    sub r8d, 262144
    __ subl_imm32 (r8, 1048576);                       //    sub r8d, 1048576
    __ subl_imm32 (r8, 4194304);                       //    sub r8d, 4194304
    __ subl_imm32 (r8, 16777216);                      //    sub r8d, 16777216
    __ subl_imm32 (r8, 67108864);                      //    sub r8d, 67108864
    __ subl_imm32 (r8, 268435456);                     //    sub r8d, 268435456
    __ subl_imm32 (r8, 1073741824);                    //    sub r8d, 1073741824
    __ subl_imm32 (r9, 65536);                         //    sub r9d, 65536
    __ subl_imm32 (r9, 262144);                        //    sub r9d, 262144
    __ subl_imm32 (r9, 1048576);                       //    sub r9d, 1048576
    __ subl_imm32 (r9, 4194304);                       //    sub r9d, 4194304
    __ subl_imm32 (r9, 16777216);                      //    sub r9d, 16777216
    __ subl_imm32 (r9, 67108864);                      //    sub r9d, 67108864
    __ subl_imm32 (r9, 268435456);                     //    sub r9d, 268435456
    __ subl_imm32 (r9, 1073741824);                    //    sub r9d, 1073741824
    __ subl_imm32 (r10, 65536);                        //    sub r10d, 65536
    __ subl_imm32 (r10, 262144);                       //    sub r10d, 262144
    __ subl_imm32 (r10, 1048576);                      //    sub r10d, 1048576
    __ subl_imm32 (r10, 4194304);                      //    sub r10d, 4194304
    __ subl_imm32 (r10, 16777216);                     //    sub r10d, 16777216
    __ subl_imm32 (r10, 67108864);                     //    sub r10d, 67108864
    __ subl_imm32 (r10, 268435456);                    //    sub r10d, 268435456
    __ subl_imm32 (r10, 1073741824);                   //    sub r10d, 1073741824
    __ subl_imm32 (r11, 65536);                        //    sub r11d, 65536
    __ subl_imm32 (r11, 262144);                       //    sub r11d, 262144
    __ subl_imm32 (r11, 1048576);                      //    sub r11d, 1048576
    __ subl_imm32 (r11, 4194304);                      //    sub r11d, 4194304
    __ subl_imm32 (r11, 16777216);                     //    sub r11d, 16777216
    __ subl_imm32 (r11, 67108864);                     //    sub r11d, 67108864
    __ subl_imm32 (r11, 268435456);                    //    sub r11d, 268435456
    __ subl_imm32 (r11, 1073741824);                   //    sub r11d, 1073741824
    __ subl_imm32 (r12, 65536);                        //    sub r12d, 65536
    __ subl_imm32 (r12, 262144);                       //    sub r12d, 262144
    __ subl_imm32 (r12, 1048576);                      //    sub r12d, 1048576
    __ subl_imm32 (r12, 4194304);                      //    sub r12d, 4194304
    __ subl_imm32 (r12, 16777216);                     //    sub r12d, 16777216
    __ subl_imm32 (r12, 67108864);                     //    sub r12d, 67108864
    __ subl_imm32 (r12, 268435456);                    //    sub r12d, 268435456
    __ subl_imm32 (r12, 1073741824);                   //    sub r12d, 1073741824
    __ subl_imm32 (r13, 65536);                        //    sub r13d, 65536
    __ subl_imm32 (r13, 262144);                       //    sub r13d, 262144
    __ subl_imm32 (r13, 1048576);                      //    sub r13d, 1048576
    __ subl_imm32 (r13, 4194304);                      //    sub r13d, 4194304
    __ subl_imm32 (r13, 16777216);                     //    sub r13d, 16777216
    __ subl_imm32 (r13, 67108864);                     //    sub r13d, 67108864
    __ subl_imm32 (r13, 268435456);                    //    sub r13d, 268435456
    __ subl_imm32 (r13, 1073741824);                   //    sub r13d, 1073741824
    __ subl_imm32 (r14, 65536);                        //    sub r14d, 65536
    __ subl_imm32 (r14, 262144);                       //    sub r14d, 262144
    __ subl_imm32 (r14, 1048576);                      //    sub r14d, 1048576
    __ subl_imm32 (r14, 4194304);                      //    sub r14d, 4194304
    __ subl_imm32 (r14, 16777216);                     //    sub r14d, 16777216
    __ subl_imm32 (r14, 67108864);                     //    sub r14d, 67108864
    __ subl_imm32 (r14, 268435456);                    //    sub r14d, 268435456
    __ subl_imm32 (r14, 1073741824);                   //    sub r14d, 1073741824
    __ subl_imm32 (r15, 65536);                        //    sub r15d, 65536
    __ subl_imm32 (r15, 262144);                       //    sub r15d, 262144
    __ subl_imm32 (r15, 1048576);                      //    sub r15d, 1048576
    __ subl_imm32 (r15, 4194304);                      //    sub r15d, 4194304
    __ subl_imm32 (r15, 16777216);                     //    sub r15d, 16777216
    __ subl_imm32 (r15, 67108864);                     //    sub r15d, 67108864
    __ subl_imm32 (r15, 268435456);                    //    sub r15d, 268435456
    __ subl_imm32 (r15, 1073741824);                   //    sub r15d, 1073741824
    __ subl_imm32 (r16, 65536);                        //    sub r16d, 65536
    __ subl_imm32 (r16, 262144);                       //    sub r16d, 262144
    __ subl_imm32 (r16, 1048576);                      //    sub r16d, 1048576
    __ subl_imm32 (r16, 4194304);                      //    sub r16d, 4194304
    __ subl_imm32 (r16, 16777216);                     //    sub r16d, 16777216
    __ subl_imm32 (r16, 67108864);                     //    sub r16d, 67108864
    __ subl_imm32 (r16, 268435456);                    //    sub r16d, 268435456
    __ subl_imm32 (r16, 1073741824);                   //    sub r16d, 1073741824
    __ subl_imm32 (r17, 65536);                        //    sub r17d, 65536
    __ subl_imm32 (r17, 262144);                       //    sub r17d, 262144
    __ subl_imm32 (r17, 1048576);                      //    sub r17d, 1048576
    __ subl_imm32 (r17, 4194304);                      //    sub r17d, 4194304
    __ subl_imm32 (r17, 16777216);                     //    sub r17d, 16777216
    __ subl_imm32 (r17, 67108864);                     //    sub r17d, 67108864
    __ subl_imm32 (r17, 268435456);                    //    sub r17d, 268435456
    __ subl_imm32 (r17, 1073741824);                   //    sub r17d, 1073741824
    __ subl_imm32 (r18, 65536);                        //    sub r18d, 65536
    __ subl_imm32 (r18, 262144);                       //    sub r18d, 262144
    __ subl_imm32 (r18, 1048576);                      //    sub r18d, 1048576
    __ subl_imm32 (r18, 4194304);                      //    sub r18d, 4194304
    __ subl_imm32 (r18, 16777216);                     //    sub r18d, 16777216
    __ subl_imm32 (r18, 67108864);                     //    sub r18d, 67108864
    __ subl_imm32 (r18, 268435456);                    //    sub r18d, 268435456
    __ subl_imm32 (r18, 1073741824);                   //    sub r18d, 1073741824
    __ subl_imm32 (r19, 65536);                        //    sub r19d, 65536
    __ subl_imm32 (r19, 262144);                       //    sub r19d, 262144
    __ subl_imm32 (r19, 1048576);                      //    sub r19d, 1048576
    __ subl_imm32 (r19, 4194304);                      //    sub r19d, 4194304
    __ subl_imm32 (r19, 16777216);                     //    sub r19d, 16777216
    __ subl_imm32 (r19, 67108864);                     //    sub r19d, 67108864
    __ subl_imm32 (r19, 268435456);                    //    sub r19d, 268435456
    __ subl_imm32 (r19, 1073741824);                   //    sub r19d, 1073741824
    __ subl_imm32 (r20, 65536);                        //    sub r20d, 65536
    __ subl_imm32 (r20, 262144);                       //    sub r20d, 262144
    __ subl_imm32 (r20, 1048576);                      //    sub r20d, 1048576
    __ subl_imm32 (r20, 4194304);                      //    sub r20d, 4194304
    __ subl_imm32 (r20, 16777216);                     //    sub r20d, 16777216
    __ subl_imm32 (r20, 67108864);                     //    sub r20d, 67108864
    __ subl_imm32 (r20, 268435456);                    //    sub r20d, 268435456
    __ subl_imm32 (r20, 1073741824);                   //    sub r20d, 1073741824
    __ subl_imm32 (r21, 65536);                        //    sub r21d, 65536
    __ subl_imm32 (r21, 262144);                       //    sub r21d, 262144
    __ subl_imm32 (r21, 1048576);                      //    sub r21d, 1048576
    __ subl_imm32 (r21, 4194304);                      //    sub r21d, 4194304
    __ subl_imm32 (r21, 16777216);                     //    sub r21d, 16777216
    __ subl_imm32 (r21, 67108864);                     //    sub r21d, 67108864
    __ subl_imm32 (r21, 268435456);                    //    sub r21d, 268435456
    __ subl_imm32 (r21, 1073741824);                   //    sub r21d, 1073741824
    __ subl_imm32 (r22, 65536);                        //    sub r22d, 65536
    __ subl_imm32 (r22, 262144);                       //    sub r22d, 262144
    __ subl_imm32 (r22, 1048576);                      //    sub r22d, 1048576
    __ subl_imm32 (r22, 4194304);                      //    sub r22d, 4194304
    __ subl_imm32 (r22, 16777216);                     //    sub r22d, 16777216
    __ subl_imm32 (r22, 67108864);                     //    sub r22d, 67108864
    __ subl_imm32 (r22, 268435456);                    //    sub r22d, 268435456
    __ subl_imm32 (r22, 1073741824);                   //    sub r22d, 1073741824
    __ subl_imm32 (r23, 65536);                        //    sub r23d, 65536
    __ subl_imm32 (r23, 262144);                       //    sub r23d, 262144
    __ subl_imm32 (r23, 1048576);                      //    sub r23d, 1048576
    __ subl_imm32 (r23, 4194304);                      //    sub r23d, 4194304
    __ subl_imm32 (r23, 16777216);                     //    sub r23d, 16777216
    __ subl_imm32 (r23, 67108864);                     //    sub r23d, 67108864
    __ subl_imm32 (r23, 268435456);                    //    sub r23d, 268435456
    __ subl_imm32 (r23, 1073741824);                   //    sub r23d, 1073741824
    __ subl_imm32 (r24, 65536);                        //    sub r24d, 65536
    __ subl_imm32 (r24, 262144);                       //    sub r24d, 262144
    __ subl_imm32 (r24, 1048576);                      //    sub r24d, 1048576
    __ subl_imm32 (r24, 4194304);                      //    sub r24d, 4194304
    __ subl_imm32 (r24, 16777216);                     //    sub r24d, 16777216
    __ subl_imm32 (r24, 67108864);                     //    sub r24d, 67108864
    __ subl_imm32 (r24, 268435456);                    //    sub r24d, 268435456
    __ subl_imm32 (r24, 1073741824);                   //    sub r24d, 1073741824
    __ subl_imm32 (r25, 65536);                        //    sub r25d, 65536
    __ subl_imm32 (r25, 262144);                       //    sub r25d, 262144
    __ subl_imm32 (r25, 1048576);                      //    sub r25d, 1048576
    __ subl_imm32 (r25, 4194304);                      //    sub r25d, 4194304
    __ subl_imm32 (r25, 16777216);                     //    sub r25d, 16777216
    __ subl_imm32 (r25, 67108864);                     //    sub r25d, 67108864
    __ subl_imm32 (r25, 268435456);                    //    sub r25d, 268435456
    __ subl_imm32 (r25, 1073741824);                   //    sub r25d, 1073741824
    __ subl_imm32 (r26, 65536);                        //    sub r26d, 65536
    __ subl_imm32 (r26, 262144);                       //    sub r26d, 262144
    __ subl_imm32 (r26, 1048576);                      //    sub r26d, 1048576
    __ subl_imm32 (r26, 4194304);                      //    sub r26d, 4194304
    __ subl_imm32 (r26, 16777216);                     //    sub r26d, 16777216
    __ subl_imm32 (r26, 67108864);                     //    sub r26d, 67108864
    __ subl_imm32 (r26, 268435456);                    //    sub r26d, 268435456
    __ subl_imm32 (r26, 1073741824);                   //    sub r26d, 1073741824
    __ subl_imm32 (r27, 65536);                        //    sub r27d, 65536
    __ subl_imm32 (r27, 262144);                       //    sub r27d, 262144
    __ subl_imm32 (r27, 1048576);                      //    sub r27d, 1048576
    __ subl_imm32 (r27, 4194304);                      //    sub r27d, 4194304
    __ subl_imm32 (r27, 16777216);                     //    sub r27d, 16777216
    __ subl_imm32 (r27, 67108864);                     //    sub r27d, 67108864
    __ subl_imm32 (r27, 268435456);                    //    sub r27d, 268435456
    __ subl_imm32 (r27, 1073741824);                   //    sub r27d, 1073741824
    __ subl_imm32 (r28, 65536);                        //    sub r28d, 65536
    __ subl_imm32 (r28, 262144);                       //    sub r28d, 262144
    __ subl_imm32 (r28, 1048576);                      //    sub r28d, 1048576
    __ subl_imm32 (r28, 4194304);                      //    sub r28d, 4194304
    __ subl_imm32 (r28, 16777216);                     //    sub r28d, 16777216
    __ subl_imm32 (r28, 67108864);                     //    sub r28d, 67108864
    __ subl_imm32 (r28, 268435456);                    //    sub r28d, 268435456
    __ subl_imm32 (r28, 1073741824);                   //    sub r28d, 1073741824
    __ subl_imm32 (r29, 65536);                        //    sub r29d, 65536
    __ subl_imm32 (r29, 262144);                       //    sub r29d, 262144
    __ subl_imm32 (r29, 1048576);                      //    sub r29d, 1048576
    __ subl_imm32 (r29, 4194304);                      //    sub r29d, 4194304
    __ subl_imm32 (r29, 16777216);                     //    sub r29d, 16777216
    __ subl_imm32 (r29, 67108864);                     //    sub r29d, 67108864
    __ subl_imm32 (r29, 268435456);                    //    sub r29d, 268435456
    __ subl_imm32 (r29, 1073741824);                   //    sub r29d, 1073741824
    __ subl_imm32 (r30, 65536);                        //    sub r30d, 65536
    __ subl_imm32 (r30, 262144);                       //    sub r30d, 262144
    __ subl_imm32 (r30, 1048576);                      //    sub r30d, 1048576
    __ subl_imm32 (r30, 4194304);                      //    sub r30d, 4194304
    __ subl_imm32 (r30, 16777216);                     //    sub r30d, 16777216
    __ subl_imm32 (r30, 67108864);                     //    sub r30d, 67108864
    __ subl_imm32 (r30, 268435456);                    //    sub r30d, 268435456
    __ subl_imm32 (r30, 1073741824);                   //    sub r30d, 1073741824
    __ subl_imm32 (r31, 65536);                        //    sub r31d, 65536
    __ subl_imm32 (r31, 262144);                       //    sub r31d, 262144
    __ subl_imm32 (r31, 1048576);                      //    sub r31d, 1048576
    __ subl_imm32 (r31, 4194304);                      //    sub r31d, 4194304
    __ subl_imm32 (r31, 16777216);                     //    sub r31d, 16777216
    __ subl_imm32 (r31, 67108864);                     //    sub r31d, 67108864
    __ subl_imm32 (r31, 268435456);                    //    sub r31d, 268435456
    __ subl_imm32 (r31, 1073741824);                   //    sub r31d, 1073741824
#endif // _LP64
#ifdef _LP64
    __ adcq(rcx, rdx);                                 //    {load}adc rcx, rdx
    __ adcq(rdx, rbx);                                 //    {load}adc rdx, rbx
    __ adcq(rbx, r8);                                  //    {load}adc rbx, r8
    __ adcq(r8, r9);                                   //    {load}adc r8, r9
    __ adcq(r9, r10);                                  //    {load}adc r9, r10
    __ adcq(r10, r11);                                 //    {load}adc r10, r11
    __ adcq(r11, r12);                                 //    {load}adc r11, r12
    __ adcq(r12, r13);                                 //    {load}adc r12, r13
    __ adcq(r13, r14);                                 //    {load}adc r13, r14
    __ adcq(r14, r15);                                 //    {load}adc r14, r15
    __ adcq(r15, r16);                                 //    {load}adc r15, r16
    __ adcq(r16, r17);                                 //    {load}adc r16, r17
    __ adcq(r17, r18);                                 //    {load}adc r17, r18
    __ adcq(r18, r19);                                 //    {load}adc r18, r19
    __ adcq(r19, r20);                                 //    {load}adc r19, r20
    __ adcq(r20, r21);                                 //    {load}adc r20, r21
    __ adcq(r21, r22);                                 //    {load}adc r21, r22
    __ adcq(r22, r23);                                 //    {load}adc r22, r23
    __ adcq(r23, r24);                                 //    {load}adc r23, r24
    __ adcq(r24, r25);                                 //    {load}adc r24, r25
    __ adcq(r25, r26);                                 //    {load}adc r25, r26
    __ adcq(r26, r27);                                 //    {load}adc r26, r27
    __ adcq(r27, r28);                                 //    {load}adc r27, r28
    __ adcq(r28, r29);                                 //    {load}adc r28, r29
    __ adcq(r29, r30);                                 //    {load}adc r29, r30
    __ adcq(r30, r31);                                 //    {load}adc r30, r31
    __ adcq(r31, rcx);                                 //    {load}adc r31, rcx
    __ imulq(rcx, rdx);                                //    {load}imul rcx, rdx
    __ imulq(rdx, rbx);                                //    {load}imul rdx, rbx
    __ imulq(rbx, r8);                                 //    {load}imul rbx, r8
    __ imulq(r8, r9);                                  //    {load}imul r8, r9
    __ imulq(r9, r10);                                 //    {load}imul r9, r10
    __ imulq(r10, r11);                                //    {load}imul r10, r11
    __ imulq(r11, r12);                                //    {load}imul r11, r12
    __ imulq(r12, r13);                                //    {load}imul r12, r13
    __ imulq(r13, r14);                                //    {load}imul r13, r14
    __ imulq(r14, r15);                                //    {load}imul r14, r15
    __ imulq(r15, r16);                                //    {load}imul r15, r16
    __ imulq(r16, r17);                                //    {load}imul r16, r17
    __ imulq(r17, r18);                                //    {load}imul r17, r18
    __ imulq(r18, r19);                                //    {load}imul r18, r19
    __ imulq(r19, r20);                                //    {load}imul r19, r20
    __ imulq(r20, r21);                                //    {load}imul r20, r21
    __ imulq(r21, r22);                                //    {load}imul r21, r22
    __ imulq(r22, r23);                                //    {load}imul r22, r23
    __ imulq(r23, r24);                                //    {load}imul r23, r24
    __ imulq(r24, r25);                                //    {load}imul r24, r25
    __ imulq(r25, r26);                                //    {load}imul r25, r26
    __ imulq(r26, r27);                                //    {load}imul r26, r27
    __ imulq(r27, r28);                                //    {load}imul r27, r28
    __ imulq(r28, r29);                                //    {load}imul r28, r29
    __ imulq(r29, r30);                                //    {load}imul r29, r30
    __ imulq(r30, r31);                                //    {load}imul r30, r31
    __ imulq(r31, rcx);                                //    {load}imul r31, rcx
    __ popcntq(rcx, rdx);                              //    {load}popcnt rcx, rdx
    __ popcntq(rdx, rbx);                              //    {load}popcnt rdx, rbx
    __ popcntq(rbx, r8);                               //    {load}popcnt rbx, r8
    __ popcntq(r8, r9);                                //    {load}popcnt r8, r9
    __ popcntq(r9, r10);                               //    {load}popcnt r9, r10
    __ popcntq(r10, r11);                              //    {load}popcnt r10, r11
    __ popcntq(r11, r12);                              //    {load}popcnt r11, r12
    __ popcntq(r12, r13);                              //    {load}popcnt r12, r13
    __ popcntq(r13, r14);                              //    {load}popcnt r13, r14
    __ popcntq(r14, r15);                              //    {load}popcnt r14, r15
    __ popcntq(r15, r16);                              //    {load}popcnt r15, r16
    __ popcntq(r16, r17);                              //    {load}popcnt r16, r17
    __ popcntq(r17, r18);                              //    {load}popcnt r17, r18
    __ popcntq(r18, r19);                              //    {load}popcnt r18, r19
    __ popcntq(r19, r20);                              //    {load}popcnt r19, r20
    __ popcntq(r20, r21);                              //    {load}popcnt r20, r21
    __ popcntq(r21, r22);                              //    {load}popcnt r21, r22
    __ popcntq(r22, r23);                              //    {load}popcnt r22, r23
    __ popcntq(r23, r24);                              //    {load}popcnt r23, r24
    __ popcntq(r24, r25);                              //    {load}popcnt r24, r25
    __ popcntq(r25, r26);                              //    {load}popcnt r25, r26
    __ popcntq(r26, r27);                              //    {load}popcnt r26, r27
    __ popcntq(r27, r28);                              //    {load}popcnt r27, r28
    __ popcntq(r28, r29);                              //    {load}popcnt r28, r29
    __ popcntq(r29, r30);                              //    {load}popcnt r29, r30
    __ popcntq(r30, r31);                              //    {load}popcnt r30, r31
    __ popcntq(r31, rcx);                              //    {load}popcnt r31, rcx
    __ sbbq(rcx, rdx);                                 //    {load}sbb rcx, rdx
    __ sbbq(rdx, rbx);                                 //    {load}sbb rdx, rbx
    __ sbbq(rbx, r8);                                  //    {load}sbb rbx, r8
    __ sbbq(r8, r9);                                   //    {load}sbb r8, r9
    __ sbbq(r9, r10);                                  //    {load}sbb r9, r10
    __ sbbq(r10, r11);                                 //    {load}sbb r10, r11
    __ sbbq(r11, r12);                                 //    {load}sbb r11, r12
    __ sbbq(r12, r13);                                 //    {load}sbb r12, r13
    __ sbbq(r13, r14);                                 //    {load}sbb r13, r14
    __ sbbq(r14, r15);                                 //    {load}sbb r14, r15
    __ sbbq(r15, r16);                                 //    {load}sbb r15, r16
    __ sbbq(r16, r17);                                 //    {load}sbb r16, r17
    __ sbbq(r17, r18);                                 //    {load}sbb r17, r18
    __ sbbq(r18, r19);                                 //    {load}sbb r18, r19
    __ sbbq(r19, r20);                                 //    {load}sbb r19, r20
    __ sbbq(r20, r21);                                 //    {load}sbb r20, r21
    __ sbbq(r21, r22);                                 //    {load}sbb r21, r22
    __ sbbq(r22, r23);                                 //    {load}sbb r22, r23
    __ sbbq(r23, r24);                                 //    {load}sbb r23, r24
    __ sbbq(r24, r25);                                 //    {load}sbb r24, r25
    __ sbbq(r25, r26);                                 //    {load}sbb r25, r26
    __ sbbq(r26, r27);                                 //    {load}sbb r26, r27
    __ sbbq(r27, r28);                                 //    {load}sbb r27, r28
    __ sbbq(r28, r29);                                 //    {load}sbb r28, r29
    __ sbbq(r29, r30);                                 //    {load}sbb r29, r30
    __ sbbq(r30, r31);                                 //    {load}sbb r30, r31
    __ sbbq(r31, rcx);                                 //    {load}sbb r31, rcx
    __ subq(rcx, rdx);                                 //    {load}sub rcx, rdx
    __ subq(rdx, rbx);                                 //    {load}sub rdx, rbx
    __ subq(rbx, r8);                                  //    {load}sub rbx, r8
    __ subq(r8, r9);                                   //    {load}sub r8, r9
    __ subq(r9, r10);                                  //    {load}sub r9, r10
    __ subq(r10, r11);                                 //    {load}sub r10, r11
    __ subq(r11, r12);                                 //    {load}sub r11, r12
    __ subq(r12, r13);                                 //    {load}sub r12, r13
    __ subq(r13, r14);                                 //    {load}sub r13, r14
    __ subq(r14, r15);                                 //    {load}sub r14, r15
    __ subq(r15, r16);                                 //    {load}sub r15, r16
    __ subq(r16, r17);                                 //    {load}sub r16, r17
    __ subq(r17, r18);                                 //    {load}sub r17, r18
    __ subq(r18, r19);                                 //    {load}sub r18, r19
    __ subq(r19, r20);                                 //    {load}sub r19, r20
    __ subq(r20, r21);                                 //    {load}sub r20, r21
    __ subq(r21, r22);                                 //    {load}sub r21, r22
    __ subq(r22, r23);                                 //    {load}sub r22, r23
    __ subq(r23, r24);                                 //    {load}sub r23, r24
    __ subq(r24, r25);                                 //    {load}sub r24, r25
    __ subq(r25, r26);                                 //    {load}sub r25, r26
    __ subq(r26, r27);                                 //    {load}sub r26, r27
    __ subq(r27, r28);                                 //    {load}sub r27, r28
    __ subq(r28, r29);                                 //    {load}sub r28, r29
    __ subq(r29, r30);                                 //    {load}sub r29, r30
    __ subq(r30, r31);                                 //    {load}sub r30, r31
    __ subq(r31, rcx);                                 //    {load}sub r31, rcx
    __ tzcntq(rcx, rdx);                               //    {load}tzcnt rcx, rdx
    __ tzcntq(rdx, rbx);                               //    {load}tzcnt rdx, rbx
    __ tzcntq(rbx, r8);                                //    {load}tzcnt rbx, r8
    __ tzcntq(r8, r9);                                 //    {load}tzcnt r8, r9
    __ tzcntq(r9, r10);                                //    {load}tzcnt r9, r10
    __ tzcntq(r10, r11);                               //    {load}tzcnt r10, r11
    __ tzcntq(r11, r12);                               //    {load}tzcnt r11, r12
    __ tzcntq(r12, r13);                               //    {load}tzcnt r12, r13
    __ tzcntq(r13, r14);                               //    {load}tzcnt r13, r14
    __ tzcntq(r14, r15);                               //    {load}tzcnt r14, r15
    __ tzcntq(r15, r16);                               //    {load}tzcnt r15, r16
    __ tzcntq(r16, r17);                               //    {load}tzcnt r16, r17
    __ tzcntq(r17, r18);                               //    {load}tzcnt r17, r18
    __ tzcntq(r18, r19);                               //    {load}tzcnt r18, r19
    __ tzcntq(r19, r20);                               //    {load}tzcnt r19, r20
    __ tzcntq(r20, r21);                               //    {load}tzcnt r20, r21
    __ tzcntq(r21, r22);                               //    {load}tzcnt r21, r22
    __ tzcntq(r22, r23);                               //    {load}tzcnt r22, r23
    __ tzcntq(r23, r24);                               //    {load}tzcnt r23, r24
    __ tzcntq(r24, r25);                               //    {load}tzcnt r24, r25
    __ tzcntq(r25, r26);                               //    {load}tzcnt r25, r26
    __ tzcntq(r26, r27);                               //    {load}tzcnt r26, r27
    __ tzcntq(r27, r28);                               //    {load}tzcnt r27, r28
    __ tzcntq(r28, r29);                               //    {load}tzcnt r28, r29
    __ tzcntq(r29, r30);                               //    {load}tzcnt r29, r30
    __ tzcntq(r30, r31);                               //    {load}tzcnt r30, r31
    __ tzcntq(r31, rcx);                               //    {load}tzcnt r31, rcx
    __ lzcntq(rcx, rdx);                               //    {load}lzcnt rcx, rdx
    __ lzcntq(rdx, rbx);                               //    {load}lzcnt rdx, rbx
    __ lzcntq(rbx, r8);                                //    {load}lzcnt rbx, r8
    __ lzcntq(r8, r9);                                 //    {load}lzcnt r8, r9
    __ lzcntq(r9, r10);                                //    {load}lzcnt r9, r10
    __ lzcntq(r10, r11);                               //    {load}lzcnt r10, r11
    __ lzcntq(r11, r12);                               //    {load}lzcnt r11, r12
    __ lzcntq(r12, r13);                               //    {load}lzcnt r12, r13
    __ lzcntq(r13, r14);                               //    {load}lzcnt r13, r14
    __ lzcntq(r14, r15);                               //    {load}lzcnt r14, r15
    __ lzcntq(r15, r16);                               //    {load}lzcnt r15, r16
    __ lzcntq(r16, r17);                               //    {load}lzcnt r16, r17
    __ lzcntq(r17, r18);                               //    {load}lzcnt r17, r18
    __ lzcntq(r18, r19);                               //    {load}lzcnt r18, r19
    __ lzcntq(r19, r20);                               //    {load}lzcnt r19, r20
    __ lzcntq(r20, r21);                               //    {load}lzcnt r20, r21
    __ lzcntq(r21, r22);                               //    {load}lzcnt r21, r22
    __ lzcntq(r22, r23);                               //    {load}lzcnt r22, r23
    __ lzcntq(r23, r24);                               //    {load}lzcnt r23, r24
    __ lzcntq(r24, r25);                               //    {load}lzcnt r24, r25
    __ lzcntq(r25, r26);                               //    {load}lzcnt r25, r26
    __ lzcntq(r26, r27);                               //    {load}lzcnt r26, r27
    __ lzcntq(r27, r28);                               //    {load}lzcnt r27, r28
    __ lzcntq(r28, r29);                               //    {load}lzcnt r28, r29
    __ lzcntq(r29, r30);                               //    {load}lzcnt r29, r30
    __ lzcntq(r30, r31);                               //    {load}lzcnt r30, r31
    __ lzcntq(r31, rcx);                               //    {load}lzcnt r31, rcx
    __ addq(rcx, rdx);                                 //    {load}add rcx, rdx
    __ addq(rdx, rbx);                                 //    {load}add rdx, rbx
    __ addq(rbx, r8);                                  //    {load}add rbx, r8
    __ addq(r8, r9);                                   //    {load}add r8, r9
    __ addq(r9, r10);                                  //    {load}add r9, r10
    __ addq(r10, r11);                                 //    {load}add r10, r11
    __ addq(r11, r12);                                 //    {load}add r11, r12
    __ addq(r12, r13);                                 //    {load}add r12, r13
    __ addq(r13, r14);                                 //    {load}add r13, r14
    __ addq(r14, r15);                                 //    {load}add r14, r15
    __ addq(r15, r16);                                 //    {load}add r15, r16
    __ addq(r16, r17);                                 //    {load}add r16, r17
    __ addq(r17, r18);                                 //    {load}add r17, r18
    __ addq(r18, r19);                                 //    {load}add r18, r19
    __ addq(r19, r20);                                 //    {load}add r19, r20
    __ addq(r20, r21);                                 //    {load}add r20, r21
    __ addq(r21, r22);                                 //    {load}add r21, r22
    __ addq(r22, r23);                                 //    {load}add r22, r23
    __ addq(r23, r24);                                 //    {load}add r23, r24
    __ addq(r24, r25);                                 //    {load}add r24, r25
    __ addq(r25, r26);                                 //    {load}add r25, r26
    __ addq(r26, r27);                                 //    {load}add r26, r27
    __ addq(r27, r28);                                 //    {load}add r27, r28
    __ addq(r28, r29);                                 //    {load}add r28, r29
    __ addq(r29, r30);                                 //    {load}add r29, r30
    __ addq(r30, r31);                                 //    {load}add r30, r31
    __ addq(r31, rcx);                                 //    {load}add r31, rcx
    __ andq(rcx, rdx);                                 //    {load}and rcx, rdx
    __ andq(rdx, rbx);                                 //    {load}and rdx, rbx
    __ andq(rbx, r8);                                  //    {load}and rbx, r8
    __ andq(r8, r9);                                   //    {load}and r8, r9
    __ andq(r9, r10);                                  //    {load}and r9, r10
    __ andq(r10, r11);                                 //    {load}and r10, r11
    __ andq(r11, r12);                                 //    {load}and r11, r12
    __ andq(r12, r13);                                 //    {load}and r12, r13
    __ andq(r13, r14);                                 //    {load}and r13, r14
    __ andq(r14, r15);                                 //    {load}and r14, r15
    __ andq(r15, r16);                                 //    {load}and r15, r16
    __ andq(r16, r17);                                 //    {load}and r16, r17
    __ andq(r17, r18);                                 //    {load}and r17, r18
    __ andq(r18, r19);                                 //    {load}and r18, r19
    __ andq(r19, r20);                                 //    {load}and r19, r20
    __ andq(r20, r21);                                 //    {load}and r20, r21
    __ andq(r21, r22);                                 //    {load}and r21, r22
    __ andq(r22, r23);                                 //    {load}and r22, r23
    __ andq(r23, r24);                                 //    {load}and r23, r24
    __ andq(r24, r25);                                 //    {load}and r24, r25
    __ andq(r25, r26);                                 //    {load}and r25, r26
    __ andq(r26, r27);                                 //    {load}and r26, r27
    __ andq(r27, r28);                                 //    {load}and r27, r28
    __ andq(r28, r29);                                 //    {load}and r28, r29
    __ andq(r29, r30);                                 //    {load}and r29, r30
    __ andq(r30, r31);                                 //    {load}and r30, r31
    __ andq(r31, rcx);                                 //    {load}and r31, rcx
    __ orq(rcx, rdx);                                  //    {load}or rcx, rdx
    __ orq(rdx, rbx);                                  //    {load}or rdx, rbx
    __ orq(rbx, r8);                                   //    {load}or rbx, r8
    __ orq(r8, r9);                                    //    {load}or r8, r9
    __ orq(r9, r10);                                   //    {load}or r9, r10
    __ orq(r10, r11);                                  //    {load}or r10, r11
    __ orq(r11, r12);                                  //    {load}or r11, r12
    __ orq(r12, r13);                                  //    {load}or r12, r13
    __ orq(r13, r14);                                  //    {load}or r13, r14
    __ orq(r14, r15);                                  //    {load}or r14, r15
    __ orq(r15, r16);                                  //    {load}or r15, r16
    __ orq(r16, r17);                                  //    {load}or r16, r17
    __ orq(r17, r18);                                  //    {load}or r17, r18
    __ orq(r18, r19);                                  //    {load}or r18, r19
    __ orq(r19, r20);                                  //    {load}or r19, r20
    __ orq(r20, r21);                                  //    {load}or r20, r21
    __ orq(r21, r22);                                  //    {load}or r21, r22
    __ orq(r22, r23);                                  //    {load}or r22, r23
    __ orq(r23, r24);                                  //    {load}or r23, r24
    __ orq(r24, r25);                                  //    {load}or r24, r25
    __ orq(r25, r26);                                  //    {load}or r25, r26
    __ orq(r26, r27);                                  //    {load}or r26, r27
    __ orq(r27, r28);                                  //    {load}or r27, r28
    __ orq(r28, r29);                                  //    {load}or r28, r29
    __ orq(r29, r30);                                  //    {load}or r29, r30
    __ orq(r30, r31);                                  //    {load}or r30, r31
    __ orq(r31, rcx);                                  //    {load}or r31, rcx
    __ xorq(rcx, rdx);                                 //    {load}xor rcx, rdx
    __ xorq(rdx, rbx);                                 //    {load}xor rdx, rbx
    __ xorq(rbx, r8);                                  //    {load}xor rbx, r8
    __ xorq(r8, r9);                                   //    {load}xor r8, r9
    __ xorq(r9, r10);                                  //    {load}xor r9, r10
    __ xorq(r10, r11);                                 //    {load}xor r10, r11
    __ xorq(r11, r12);                                 //    {load}xor r11, r12
    __ xorq(r12, r13);                                 //    {load}xor r12, r13
    __ xorq(r13, r14);                                 //    {load}xor r13, r14
    __ xorq(r14, r15);                                 //    {load}xor r14, r15
    __ xorq(r15, r16);                                 //    {load}xor r15, r16
    __ xorq(r16, r17);                                 //    {load}xor r16, r17
    __ xorq(r17, r18);                                 //    {load}xor r17, r18
    __ xorq(r18, r19);                                 //    {load}xor r18, r19
    __ xorq(r19, r20);                                 //    {load}xor r19, r20
    __ xorq(r20, r21);                                 //    {load}xor r20, r21
    __ xorq(r21, r22);                                 //    {load}xor r21, r22
    __ xorq(r22, r23);                                 //    {load}xor r22, r23
    __ xorq(r23, r24);                                 //    {load}xor r23, r24
    __ xorq(r24, r25);                                 //    {load}xor r24, r25
    __ xorq(r25, r26);                                 //    {load}xor r25, r26
    __ xorq(r26, r27);                                 //    {load}xor r26, r27
    __ xorq(r27, r28);                                 //    {load}xor r27, r28
    __ xorq(r28, r29);                                 //    {load}xor r28, r29
    __ xorq(r29, r30);                                 //    {load}xor r29, r30
    __ xorq(r30, r31);                                 //    {load}xor r30, r31
    __ xorq(r31, rcx);                                 //    {load}xor r31, rcx
    __ addq(Address(rdx, rbx), rcx);                   //    add qword ptr [rdx + rbx], rcx
    __ addq(Address(rbx, r8), rdx);                    //    add qword ptr [rbx + r8], rdx
    __ addq(Address(r8, r9), rbx);                     //    add qword ptr [r8 + r9], rbx
    __ addq(Address(r9, r10), r8);                     //    add qword ptr [r9 + r10], r8
    __ addq(Address(r10, r11), r9);                    //    add qword ptr [r10 + r11], r9
    __ addq(Address(r11, r12), r10);                   //    add qword ptr [r11 + r12], r10
    __ addq(Address(r12, r13), r11);                   //    add qword ptr [r12 + r13], r11
    __ addq(Address(r13, r14), r12);                   //    add qword ptr [r13 + r14], r12
    __ addq(Address(r14, r15), r13);                   //    add qword ptr [r14 + r15], r13
    __ addq(Address(r15, r16), r14);                   //    add qword ptr [r15 + r16], r14
    __ addq(Address(r16, r17), r15);                   //    add qword ptr [r16 + r17], r15
    __ addq(Address(r17, r18), r16);                   //    add qword ptr [r17 + r18], r16
    __ addq(Address(r18, r19), r17);                   //    add qword ptr [r18 + r19], r17
    __ addq(Address(r19, r20), r18);                   //    add qword ptr [r19 + r20], r18
    __ addq(Address(r20, r21), r19);                   //    add qword ptr [r20 + r21], r19
    __ addq(Address(r21, r22), r20);                   //    add qword ptr [r21 + r22], r20
    __ addq(Address(r22, r23), r21);                   //    add qword ptr [r22 + r23], r21
    __ addq(Address(r23, r24), r22);                   //    add qword ptr [r23 + r24], r22
    __ addq(Address(r24, r25), r23);                   //    add qword ptr [r24 + r25], r23
    __ addq(Address(r25, r26), r24);                   //    add qword ptr [r25 + r26], r24
    __ addq(Address(r26, r27), r25);                   //    add qword ptr [r26 + r27], r25
    __ addq(Address(r27, r28), r26);                   //    add qword ptr [r27 + r28], r26
    __ addq(Address(r28, r29), r27);                   //    add qword ptr [r28 + r29], r27
    __ addq(Address(r29, r30), r28);                   //    add qword ptr [r29 + r30], r28
    __ addq(Address(r30, r31), r29);                   //    add qword ptr [r30 + r31], r29
    __ addq(Address(r31, rcx), r30);                   //    add qword ptr [r31 + rcx], r30
    __ addq(Address(rcx, rdx), r31);                   //    add qword ptr [rcx + rdx], r31
    __ andq(Address(rdx, rbx), rcx);                   //    and qword ptr [rdx + rbx], rcx
    __ andq(Address(rbx, r8), rdx);                    //    and qword ptr [rbx + r8], rdx
    __ andq(Address(r8, r9), rbx);                     //    and qword ptr [r8 + r9], rbx
    __ andq(Address(r9, r10), r8);                     //    and qword ptr [r9 + r10], r8
    __ andq(Address(r10, r11), r9);                    //    and qword ptr [r10 + r11], r9
    __ andq(Address(r11, r12), r10);                   //    and qword ptr [r11 + r12], r10
    __ andq(Address(r12, r13), r11);                   //    and qword ptr [r12 + r13], r11
    __ andq(Address(r13, r14), r12);                   //    and qword ptr [r13 + r14], r12
    __ andq(Address(r14, r15), r13);                   //    and qword ptr [r14 + r15], r13
    __ andq(Address(r15, r16), r14);                   //    and qword ptr [r15 + r16], r14
    __ andq(Address(r16, r17), r15);                   //    and qword ptr [r16 + r17], r15
    __ andq(Address(r17, r18), r16);                   //    and qword ptr [r17 + r18], r16
    __ andq(Address(r18, r19), r17);                   //    and qword ptr [r18 + r19], r17
    __ andq(Address(r19, r20), r18);                   //    and qword ptr [r19 + r20], r18
    __ andq(Address(r20, r21), r19);                   //    and qword ptr [r20 + r21], r19
    __ andq(Address(r21, r22), r20);                   //    and qword ptr [r21 + r22], r20
    __ andq(Address(r22, r23), r21);                   //    and qword ptr [r22 + r23], r21
    __ andq(Address(r23, r24), r22);                   //    and qword ptr [r23 + r24], r22
    __ andq(Address(r24, r25), r23);                   //    and qword ptr [r24 + r25], r23
    __ andq(Address(r25, r26), r24);                   //    and qword ptr [r25 + r26], r24
    __ andq(Address(r26, r27), r25);                   //    and qword ptr [r26 + r27], r25
    __ andq(Address(r27, r28), r26);                   //    and qword ptr [r27 + r28], r26
    __ andq(Address(r28, r29), r27);                   //    and qword ptr [r28 + r29], r27
    __ andq(Address(r29, r30), r28);                   //    and qword ptr [r29 + r30], r28
    __ andq(Address(r30, r31), r29);                   //    and qword ptr [r30 + r31], r29
    __ andq(Address(r31, rcx), r30);                   //    and qword ptr [r31 + rcx], r30
    __ andq(Address(rcx, rdx), r31);                   //    and qword ptr [rcx + rdx], r31
    __ orq(Address(rdx, rbx), rcx);                    //    or qword ptr [rdx + rbx], rcx
    __ orq(Address(rbx, r8), rdx);                     //    or qword ptr [rbx + r8], rdx
    __ orq(Address(r8, r9), rbx);                      //    or qword ptr [r8 + r9], rbx
    __ orq(Address(r9, r10), r8);                      //    or qword ptr [r9 + r10], r8
    __ orq(Address(r10, r11), r9);                     //    or qword ptr [r10 + r11], r9
    __ orq(Address(r11, r12), r10);                    //    or qword ptr [r11 + r12], r10
    __ orq(Address(r12, r13), r11);                    //    or qword ptr [r12 + r13], r11
    __ orq(Address(r13, r14), r12);                    //    or qword ptr [r13 + r14], r12
    __ orq(Address(r14, r15), r13);                    //    or qword ptr [r14 + r15], r13
    __ orq(Address(r15, r16), r14);                    //    or qword ptr [r15 + r16], r14
    __ orq(Address(r16, r17), r15);                    //    or qword ptr [r16 + r17], r15
    __ orq(Address(r17, r18), r16);                    //    or qword ptr [r17 + r18], r16
    __ orq(Address(r18, r19), r17);                    //    or qword ptr [r18 + r19], r17
    __ orq(Address(r19, r20), r18);                    //    or qword ptr [r19 + r20], r18
    __ orq(Address(r20, r21), r19);                    //    or qword ptr [r20 + r21], r19
    __ orq(Address(r21, r22), r20);                    //    or qword ptr [r21 + r22], r20
    __ orq(Address(r22, r23), r21);                    //    or qword ptr [r22 + r23], r21
    __ orq(Address(r23, r24), r22);                    //    or qword ptr [r23 + r24], r22
    __ orq(Address(r24, r25), r23);                    //    or qword ptr [r24 + r25], r23
    __ orq(Address(r25, r26), r24);                    //    or qword ptr [r25 + r26], r24
    __ orq(Address(r26, r27), r25);                    //    or qword ptr [r26 + r27], r25
    __ orq(Address(r27, r28), r26);                    //    or qword ptr [r27 + r28], r26
    __ orq(Address(r28, r29), r27);                    //    or qword ptr [r28 + r29], r27
    __ orq(Address(r29, r30), r28);                    //    or qword ptr [r29 + r30], r28
    __ orq(Address(r30, r31), r29);                    //    or qword ptr [r30 + r31], r29
    __ orq(Address(r31, rcx), r30);                    //    or qword ptr [r31 + rcx], r30
    __ orq(Address(rcx, rdx), r31);                    //    or qword ptr [rcx + rdx], r31
    __ xorq(Address(rdx, rbx), rcx);                   //    xor qword ptr [rdx + rbx], rcx
    __ xorq(Address(rbx, r8), rdx);                    //    xor qword ptr [rbx + r8], rdx
    __ xorq(Address(r8, r9), rbx);                     //    xor qword ptr [r8 + r9], rbx
    __ xorq(Address(r9, r10), r8);                     //    xor qword ptr [r9 + r10], r8
    __ xorq(Address(r10, r11), r9);                    //    xor qword ptr [r10 + r11], r9
    __ xorq(Address(r11, r12), r10);                   //    xor qword ptr [r11 + r12], r10
    __ xorq(Address(r12, r13), r11);                   //    xor qword ptr [r12 + r13], r11
    __ xorq(Address(r13, r14), r12);                   //    xor qword ptr [r13 + r14], r12
    __ xorq(Address(r14, r15), r13);                   //    xor qword ptr [r14 + r15], r13
    __ xorq(Address(r15, r16), r14);                   //    xor qword ptr [r15 + r16], r14
    __ xorq(Address(r16, r17), r15);                   //    xor qword ptr [r16 + r17], r15
    __ xorq(Address(r17, r18), r16);                   //    xor qword ptr [r17 + r18], r16
    __ xorq(Address(r18, r19), r17);                   //    xor qword ptr [r18 + r19], r17
    __ xorq(Address(r19, r20), r18);                   //    xor qword ptr [r19 + r20], r18
    __ xorq(Address(r20, r21), r19);                   //    xor qword ptr [r20 + r21], r19
    __ xorq(Address(r21, r22), r20);                   //    xor qword ptr [r21 + r22], r20
    __ xorq(Address(r22, r23), r21);                   //    xor qword ptr [r22 + r23], r21
    __ xorq(Address(r23, r24), r22);                   //    xor qword ptr [r23 + r24], r22
    __ xorq(Address(r24, r25), r23);                   //    xor qword ptr [r24 + r25], r23
    __ xorq(Address(r25, r26), r24);                   //    xor qword ptr [r25 + r26], r24
    __ xorq(Address(r26, r27), r25);                   //    xor qword ptr [r26 + r27], r25
    __ xorq(Address(r27, r28), r26);                   //    xor qword ptr [r27 + r28], r26
    __ xorq(Address(r28, r29), r27);                   //    xor qword ptr [r28 + r29], r27
    __ xorq(Address(r29, r30), r28);                   //    xor qword ptr [r29 + r30], r28
    __ xorq(Address(r30, r31), r29);                   //    xor qword ptr [r30 + r31], r29
    __ xorq(Address(r31, rcx), r30);                   //    xor qword ptr [r31 + rcx], r30
    __ xorq(Address(rcx, rdx), r31);                   //    xor qword ptr [rcx + rdx], r31
    __ subq(Address(rdx, rbx), rcx);                   //    sub qword ptr [rdx + rbx], rcx
    __ subq(Address(rbx, r8), rdx);                    //    sub qword ptr [rbx + r8], rdx
    __ subq(Address(r8, r9), rbx);                     //    sub qword ptr [r8 + r9], rbx
    __ subq(Address(r9, r10), r8);                     //    sub qword ptr [r9 + r10], r8
    __ subq(Address(r10, r11), r9);                    //    sub qword ptr [r10 + r11], r9
    __ subq(Address(r11, r12), r10);                   //    sub qword ptr [r11 + r12], r10
    __ subq(Address(r12, r13), r11);                   //    sub qword ptr [r12 + r13], r11
    __ subq(Address(r13, r14), r12);                   //    sub qword ptr [r13 + r14], r12
    __ subq(Address(r14, r15), r13);                   //    sub qword ptr [r14 + r15], r13
    __ subq(Address(r15, r16), r14);                   //    sub qword ptr [r15 + r16], r14
    __ subq(Address(r16, r17), r15);                   //    sub qword ptr [r16 + r17], r15
    __ subq(Address(r17, r18), r16);                   //    sub qword ptr [r17 + r18], r16
    __ subq(Address(r18, r19), r17);                   //    sub qword ptr [r18 + r19], r17
    __ subq(Address(r19, r20), r18);                   //    sub qword ptr [r19 + r20], r18
    __ subq(Address(r20, r21), r19);                   //    sub qword ptr [r20 + r21], r19
    __ subq(Address(r21, r22), r20);                   //    sub qword ptr [r21 + r22], r20
    __ subq(Address(r22, r23), r21);                   //    sub qword ptr [r22 + r23], r21
    __ subq(Address(r23, r24), r22);                   //    sub qword ptr [r23 + r24], r22
    __ subq(Address(r24, r25), r23);                   //    sub qword ptr [r24 + r25], r23
    __ subq(Address(r25, r26), r24);                   //    sub qword ptr [r25 + r26], r24
    __ subq(Address(r26, r27), r25);                   //    sub qword ptr [r26 + r27], r25
    __ subq(Address(r27, r28), r26);                   //    sub qword ptr [r27 + r28], r26
    __ subq(Address(r28, r29), r27);                   //    sub qword ptr [r28 + r29], r27
    __ subq(Address(r29, r30), r28);                   //    sub qword ptr [r29 + r30], r28
    __ subq(Address(r30, r31), r29);                   //    sub qword ptr [r30 + r31], r29
    __ subq(Address(r31, rcx), r30);                   //    sub qword ptr [r31 + rcx], r30
    __ subq(Address(rcx, rdx), r31);                   //    sub qword ptr [rcx + rdx], r31
    __ andq(Address(rcx, rdx), 1);                     //    and qword ptr [rcx + rdx], 1
    __ andq(Address(rdx, rbx), 1);                     //    and qword ptr [rdx + rbx], 1
    __ andq(Address(rbx, r8), 1);                      //    and qword ptr [rbx + r8], 1
    __ andq(Address(r8, r9), 1);                       //    and qword ptr [r8 + r9], 1
    __ andq(Address(r9, r10), 1);                      //    and qword ptr [r9 + r10], 1
    __ andq(Address(r10, r11), 1);                     //    and qword ptr [r10 + r11], 1
    __ andq(Address(r11, r12), 1);                     //    and qword ptr [r11 + r12], 1
    __ andq(Address(r12, r13), 1);                     //    and qword ptr [r12 + r13], 1
    __ andq(Address(r13, r14), 1);                     //    and qword ptr [r13 + r14], 1
    __ andq(Address(r14, r15), 1);                     //    and qword ptr [r14 + r15], 1
    __ andq(Address(r15, r16), 1);                     //    and qword ptr [r15 + r16], 1
    __ andq(Address(r16, r17), 1);                     //    and qword ptr [r16 + r17], 1
    __ andq(Address(r17, r18), 1);                     //    and qword ptr [r17 + r18], 1
    __ andq(Address(r18, r19), 1);                     //    and qword ptr [r18 + r19], 1
    __ andq(Address(r19, r20), 1);                     //    and qword ptr [r19 + r20], 1
    __ andq(Address(r20, r21), 1);                     //    and qword ptr [r20 + r21], 1
    __ andq(Address(r21, r22), 1);                     //    and qword ptr [r21 + r22], 1
    __ andq(Address(r22, r23), 1);                     //    and qword ptr [r22 + r23], 1
    __ andq(Address(r23, r24), 1);                     //    and qword ptr [r23 + r24], 1
    __ andq(Address(r24, r25), 1);                     //    and qword ptr [r24 + r25], 1
    __ andq(Address(r25, r26), 1);                     //    and qword ptr [r25 + r26], 1
    __ andq(Address(r26, r27), 1);                     //    and qword ptr [r26 + r27], 1
    __ andq(Address(r27, r28), 1);                     //    and qword ptr [r27 + r28], 1
    __ andq(Address(r28, r29), 1);                     //    and qword ptr [r28 + r29], 1
    __ andq(Address(r29, r30), 1);                     //    and qword ptr [r29 + r30], 1
    __ andq(Address(r30, r31), 1);                     //    and qword ptr [r30 + r31], 1
    __ andq(Address(r31, rcx), 1);                     //    and qword ptr [r31 + rcx], 1
    __ andq(Address(rcx, rdx), 16);                    //    and qword ptr [rcx + rdx], 16
    __ andq(Address(rdx, rbx), 16);                    //    and qword ptr [rdx + rbx], 16
    __ andq(Address(rbx, r8), 16);                     //    and qword ptr [rbx + r8], 16
    __ andq(Address(r8, r9), 16);                      //    and qword ptr [r8 + r9], 16
    __ andq(Address(r9, r10), 16);                     //    and qword ptr [r9 + r10], 16
    __ andq(Address(r10, r11), 16);                    //    and qword ptr [r10 + r11], 16
    __ andq(Address(r11, r12), 16);                    //    and qword ptr [r11 + r12], 16
    __ andq(Address(r12, r13), 16);                    //    and qword ptr [r12 + r13], 16
    __ andq(Address(r13, r14), 16);                    //    and qword ptr [r13 + r14], 16
    __ andq(Address(r14, r15), 16);                    //    and qword ptr [r14 + r15], 16
    __ andq(Address(r15, r16), 16);                    //    and qword ptr [r15 + r16], 16
    __ andq(Address(r16, r17), 16);                    //    and qword ptr [r16 + r17], 16
    __ andq(Address(r17, r18), 16);                    //    and qword ptr [r17 + r18], 16
    __ andq(Address(r18, r19), 16);                    //    and qword ptr [r18 + r19], 16
    __ andq(Address(r19, r20), 16);                    //    and qword ptr [r19 + r20], 16
    __ andq(Address(r20, r21), 16);                    //    and qword ptr [r20 + r21], 16
    __ andq(Address(r21, r22), 16);                    //    and qword ptr [r21 + r22], 16
    __ andq(Address(r22, r23), 16);                    //    and qword ptr [r22 + r23], 16
    __ andq(Address(r23, r24), 16);                    //    and qword ptr [r23 + r24], 16
    __ andq(Address(r24, r25), 16);                    //    and qword ptr [r24 + r25], 16
    __ andq(Address(r25, r26), 16);                    //    and qword ptr [r25 + r26], 16
    __ andq(Address(r26, r27), 16);                    //    and qword ptr [r26 + r27], 16
    __ andq(Address(r27, r28), 16);                    //    and qword ptr [r27 + r28], 16
    __ andq(Address(r28, r29), 16);                    //    and qword ptr [r28 + r29], 16
    __ andq(Address(r29, r30), 16);                    //    and qword ptr [r29 + r30], 16
    __ andq(Address(r30, r31), 16);                    //    and qword ptr [r30 + r31], 16
    __ andq(Address(r31, rcx), 16);                    //    and qword ptr [r31 + rcx], 16
    __ andq(Address(rcx, rdx), 256);                   //    and qword ptr [rcx + rdx], 256
    __ andq(Address(rdx, rbx), 256);                   //    and qword ptr [rdx + rbx], 256
    __ andq(Address(rbx, r8), 256);                    //    and qword ptr [rbx + r8], 256
    __ andq(Address(r8, r9), 256);                     //    and qword ptr [r8 + r9], 256
    __ andq(Address(r9, r10), 256);                    //    and qword ptr [r9 + r10], 256
    __ andq(Address(r10, r11), 256);                   //    and qword ptr [r10 + r11], 256
    __ andq(Address(r11, r12), 256);                   //    and qword ptr [r11 + r12], 256
    __ andq(Address(r12, r13), 256);                   //    and qword ptr [r12 + r13], 256
    __ andq(Address(r13, r14), 256);                   //    and qword ptr [r13 + r14], 256
    __ andq(Address(r14, r15), 256);                   //    and qword ptr [r14 + r15], 256
    __ andq(Address(r15, r16), 256);                   //    and qword ptr [r15 + r16], 256
    __ andq(Address(r16, r17), 256);                   //    and qword ptr [r16 + r17], 256
    __ andq(Address(r17, r18), 256);                   //    and qword ptr [r17 + r18], 256
    __ andq(Address(r18, r19), 256);                   //    and qword ptr [r18 + r19], 256
    __ andq(Address(r19, r20), 256);                   //    and qword ptr [r19 + r20], 256
    __ andq(Address(r20, r21), 256);                   //    and qword ptr [r20 + r21], 256
    __ andq(Address(r21, r22), 256);                   //    and qword ptr [r21 + r22], 256
    __ andq(Address(r22, r23), 256);                   //    and qword ptr [r22 + r23], 256
    __ andq(Address(r23, r24), 256);                   //    and qword ptr [r23 + r24], 256
    __ andq(Address(r24, r25), 256);                   //    and qword ptr [r24 + r25], 256
    __ andq(Address(r25, r26), 256);                   //    and qword ptr [r25 + r26], 256
    __ andq(Address(r26, r27), 256);                   //    and qword ptr [r26 + r27], 256
    __ andq(Address(r27, r28), 256);                   //    and qword ptr [r27 + r28], 256
    __ andq(Address(r28, r29), 256);                   //    and qword ptr [r28 + r29], 256
    __ andq(Address(r29, r30), 256);                   //    and qword ptr [r29 + r30], 256
    __ andq(Address(r30, r31), 256);                   //    and qword ptr [r30 + r31], 256
    __ andq(Address(r31, rcx), 256);                   //    and qword ptr [r31 + rcx], 256
    __ andq(Address(rcx, rdx), 4096);                  //    and qword ptr [rcx + rdx], 4096
    __ andq(Address(rdx, rbx), 4096);                  //    and qword ptr [rdx + rbx], 4096
    __ andq(Address(rbx, r8), 4096);                   //    and qword ptr [rbx + r8], 4096
    __ andq(Address(r8, r9), 4096);                    //    and qword ptr [r8 + r9], 4096
    __ andq(Address(r9, r10), 4096);                   //    and qword ptr [r9 + r10], 4096
    __ andq(Address(r10, r11), 4096);                  //    and qword ptr [r10 + r11], 4096
    __ andq(Address(r11, r12), 4096);                  //    and qword ptr [r11 + r12], 4096
    __ andq(Address(r12, r13), 4096);                  //    and qword ptr [r12 + r13], 4096
    __ andq(Address(r13, r14), 4096);                  //    and qword ptr [r13 + r14], 4096
    __ andq(Address(r14, r15), 4096);                  //    and qword ptr [r14 + r15], 4096
    __ andq(Address(r15, r16), 4096);                  //    and qword ptr [r15 + r16], 4096
    __ andq(Address(r16, r17), 4096);                  //    and qword ptr [r16 + r17], 4096
    __ andq(Address(r17, r18), 4096);                  //    and qword ptr [r17 + r18], 4096
    __ andq(Address(r18, r19), 4096);                  //    and qword ptr [r18 + r19], 4096
    __ andq(Address(r19, r20), 4096);                  //    and qword ptr [r19 + r20], 4096
    __ andq(Address(r20, r21), 4096);                  //    and qword ptr [r20 + r21], 4096
    __ andq(Address(r21, r22), 4096);                  //    and qword ptr [r21 + r22], 4096
    __ andq(Address(r22, r23), 4096);                  //    and qword ptr [r22 + r23], 4096
    __ andq(Address(r23, r24), 4096);                  //    and qword ptr [r23 + r24], 4096
    __ andq(Address(r24, r25), 4096);                  //    and qword ptr [r24 + r25], 4096
    __ andq(Address(r25, r26), 4096);                  //    and qword ptr [r25 + r26], 4096
    __ andq(Address(r26, r27), 4096);                  //    and qword ptr [r26 + r27], 4096
    __ andq(Address(r27, r28), 4096);                  //    and qword ptr [r27 + r28], 4096
    __ andq(Address(r28, r29), 4096);                  //    and qword ptr [r28 + r29], 4096
    __ andq(Address(r29, r30), 4096);                  //    and qword ptr [r29 + r30], 4096
    __ andq(Address(r30, r31), 4096);                  //    and qword ptr [r30 + r31], 4096
    __ andq(Address(r31, rcx), 4096);                  //    and qword ptr [r31 + rcx], 4096
    __ andq(Address(rcx, rdx), 65536);                 //    and qword ptr [rcx + rdx], 65536
    __ andq(Address(rdx, rbx), 65536);                 //    and qword ptr [rdx + rbx], 65536
    __ andq(Address(rbx, r8), 65536);                  //    and qword ptr [rbx + r8], 65536
    __ andq(Address(r8, r9), 65536);                   //    and qword ptr [r8 + r9], 65536
    __ andq(Address(r9, r10), 65536);                  //    and qword ptr [r9 + r10], 65536
    __ andq(Address(r10, r11), 65536);                 //    and qword ptr [r10 + r11], 65536
    __ andq(Address(r11, r12), 65536);                 //    and qword ptr [r11 + r12], 65536
    __ andq(Address(r12, r13), 65536);                 //    and qword ptr [r12 + r13], 65536
    __ andq(Address(r13, r14), 65536);                 //    and qword ptr [r13 + r14], 65536
    __ andq(Address(r14, r15), 65536);                 //    and qword ptr [r14 + r15], 65536
    __ andq(Address(r15, r16), 65536);                 //    and qword ptr [r15 + r16], 65536
    __ andq(Address(r16, r17), 65536);                 //    and qword ptr [r16 + r17], 65536
    __ andq(Address(r17, r18), 65536);                 //    and qword ptr [r17 + r18], 65536
    __ andq(Address(r18, r19), 65536);                 //    and qword ptr [r18 + r19], 65536
    __ andq(Address(r19, r20), 65536);                 //    and qword ptr [r19 + r20], 65536
    __ andq(Address(r20, r21), 65536);                 //    and qword ptr [r20 + r21], 65536
    __ andq(Address(r21, r22), 65536);                 //    and qword ptr [r21 + r22], 65536
    __ andq(Address(r22, r23), 65536);                 //    and qword ptr [r22 + r23], 65536
    __ andq(Address(r23, r24), 65536);                 //    and qword ptr [r23 + r24], 65536
    __ andq(Address(r24, r25), 65536);                 //    and qword ptr [r24 + r25], 65536
    __ andq(Address(r25, r26), 65536);                 //    and qword ptr [r25 + r26], 65536
    __ andq(Address(r26, r27), 65536);                 //    and qword ptr [r26 + r27], 65536
    __ andq(Address(r27, r28), 65536);                 //    and qword ptr [r27 + r28], 65536
    __ andq(Address(r28, r29), 65536);                 //    and qword ptr [r28 + r29], 65536
    __ andq(Address(r29, r30), 65536);                 //    and qword ptr [r29 + r30], 65536
    __ andq(Address(r30, r31), 65536);                 //    and qword ptr [r30 + r31], 65536
    __ andq(Address(r31, rcx), 65536);                 //    and qword ptr [r31 + rcx], 65536
    __ andq(Address(rcx, rdx), 1048576);               //    and qword ptr [rcx + rdx], 1048576
    __ andq(Address(rdx, rbx), 1048576);               //    and qword ptr [rdx + rbx], 1048576
    __ andq(Address(rbx, r8), 1048576);                //    and qword ptr [rbx + r8], 1048576
    __ andq(Address(r8, r9), 1048576);                 //    and qword ptr [r8 + r9], 1048576
    __ andq(Address(r9, r10), 1048576);                //    and qword ptr [r9 + r10], 1048576
    __ andq(Address(r10, r11), 1048576);               //    and qword ptr [r10 + r11], 1048576
    __ andq(Address(r11, r12), 1048576);               //    and qword ptr [r11 + r12], 1048576
    __ andq(Address(r12, r13), 1048576);               //    and qword ptr [r12 + r13], 1048576
    __ andq(Address(r13, r14), 1048576);               //    and qword ptr [r13 + r14], 1048576
    __ andq(Address(r14, r15), 1048576);               //    and qword ptr [r14 + r15], 1048576
    __ andq(Address(r15, r16), 1048576);               //    and qword ptr [r15 + r16], 1048576
    __ andq(Address(r16, r17), 1048576);               //    and qword ptr [r16 + r17], 1048576
    __ andq(Address(r17, r18), 1048576);               //    and qword ptr [r17 + r18], 1048576
    __ andq(Address(r18, r19), 1048576);               //    and qword ptr [r18 + r19], 1048576
    __ andq(Address(r19, r20), 1048576);               //    and qword ptr [r19 + r20], 1048576
    __ andq(Address(r20, r21), 1048576);               //    and qword ptr [r20 + r21], 1048576
    __ andq(Address(r21, r22), 1048576);               //    and qword ptr [r21 + r22], 1048576
    __ andq(Address(r22, r23), 1048576);               //    and qword ptr [r22 + r23], 1048576
    __ andq(Address(r23, r24), 1048576);               //    and qword ptr [r23 + r24], 1048576
    __ andq(Address(r24, r25), 1048576);               //    and qword ptr [r24 + r25], 1048576
    __ andq(Address(r25, r26), 1048576);               //    and qword ptr [r25 + r26], 1048576
    __ andq(Address(r26, r27), 1048576);               //    and qword ptr [r26 + r27], 1048576
    __ andq(Address(r27, r28), 1048576);               //    and qword ptr [r27 + r28], 1048576
    __ andq(Address(r28, r29), 1048576);               //    and qword ptr [r28 + r29], 1048576
    __ andq(Address(r29, r30), 1048576);               //    and qword ptr [r29 + r30], 1048576
    __ andq(Address(r30, r31), 1048576);               //    and qword ptr [r30 + r31], 1048576
    __ andq(Address(r31, rcx), 1048576);               //    and qword ptr [r31 + rcx], 1048576
    __ andq(Address(rcx, rdx), 16777216);              //    and qword ptr [rcx + rdx], 16777216
    __ andq(Address(rdx, rbx), 16777216);              //    and qword ptr [rdx + rbx], 16777216
    __ andq(Address(rbx, r8), 16777216);               //    and qword ptr [rbx + r8], 16777216
    __ andq(Address(r8, r9), 16777216);                //    and qword ptr [r8 + r9], 16777216
    __ andq(Address(r9, r10), 16777216);               //    and qword ptr [r9 + r10], 16777216
    __ andq(Address(r10, r11), 16777216);              //    and qword ptr [r10 + r11], 16777216
    __ andq(Address(r11, r12), 16777216);              //    and qword ptr [r11 + r12], 16777216
    __ andq(Address(r12, r13), 16777216);              //    and qword ptr [r12 + r13], 16777216
    __ andq(Address(r13, r14), 16777216);              //    and qword ptr [r13 + r14], 16777216
    __ andq(Address(r14, r15), 16777216);              //    and qword ptr [r14 + r15], 16777216
    __ andq(Address(r15, r16), 16777216);              //    and qword ptr [r15 + r16], 16777216
    __ andq(Address(r16, r17), 16777216);              //    and qword ptr [r16 + r17], 16777216
    __ andq(Address(r17, r18), 16777216);              //    and qword ptr [r17 + r18], 16777216
    __ andq(Address(r18, r19), 16777216);              //    and qword ptr [r18 + r19], 16777216
    __ andq(Address(r19, r20), 16777216);              //    and qword ptr [r19 + r20], 16777216
    __ andq(Address(r20, r21), 16777216);              //    and qword ptr [r20 + r21], 16777216
    __ andq(Address(r21, r22), 16777216);              //    and qword ptr [r21 + r22], 16777216
    __ andq(Address(r22, r23), 16777216);              //    and qword ptr [r22 + r23], 16777216
    __ andq(Address(r23, r24), 16777216);              //    and qword ptr [r23 + r24], 16777216
    __ andq(Address(r24, r25), 16777216);              //    and qword ptr [r24 + r25], 16777216
    __ andq(Address(r25, r26), 16777216);              //    and qword ptr [r25 + r26], 16777216
    __ andq(Address(r26, r27), 16777216);              //    and qword ptr [r26 + r27], 16777216
    __ andq(Address(r27, r28), 16777216);              //    and qword ptr [r27 + r28], 16777216
    __ andq(Address(r28, r29), 16777216);              //    and qword ptr [r28 + r29], 16777216
    __ andq(Address(r29, r30), 16777216);              //    and qword ptr [r29 + r30], 16777216
    __ andq(Address(r30, r31), 16777216);              //    and qword ptr [r30 + r31], 16777216
    __ andq(Address(r31, rcx), 16777216);              //    and qword ptr [r31 + rcx], 16777216
    __ andq(Address(rcx, rdx), 268435456);             //    and qword ptr [rcx + rdx], 268435456
    __ andq(Address(rdx, rbx), 268435456);             //    and qword ptr [rdx + rbx], 268435456
    __ andq(Address(rbx, r8), 268435456);              //    and qword ptr [rbx + r8], 268435456
    __ andq(Address(r8, r9), 268435456);               //    and qword ptr [r8 + r9], 268435456
    __ andq(Address(r9, r10), 268435456);              //    and qword ptr [r9 + r10], 268435456
    __ andq(Address(r10, r11), 268435456);             //    and qword ptr [r10 + r11], 268435456
    __ andq(Address(r11, r12), 268435456);             //    and qword ptr [r11 + r12], 268435456
    __ andq(Address(r12, r13), 268435456);             //    and qword ptr [r12 + r13], 268435456
    __ andq(Address(r13, r14), 268435456);             //    and qword ptr [r13 + r14], 268435456
    __ andq(Address(r14, r15), 268435456);             //    and qword ptr [r14 + r15], 268435456
    __ andq(Address(r15, r16), 268435456);             //    and qword ptr [r15 + r16], 268435456
    __ andq(Address(r16, r17), 268435456);             //    and qword ptr [r16 + r17], 268435456
    __ andq(Address(r17, r18), 268435456);             //    and qword ptr [r17 + r18], 268435456
    __ andq(Address(r18, r19), 268435456);             //    and qword ptr [r18 + r19], 268435456
    __ andq(Address(r19, r20), 268435456);             //    and qword ptr [r19 + r20], 268435456
    __ andq(Address(r20, r21), 268435456);             //    and qword ptr [r20 + r21], 268435456
    __ andq(Address(r21, r22), 268435456);             //    and qword ptr [r21 + r22], 268435456
    __ andq(Address(r22, r23), 268435456);             //    and qword ptr [r22 + r23], 268435456
    __ andq(Address(r23, r24), 268435456);             //    and qword ptr [r23 + r24], 268435456
    __ andq(Address(r24, r25), 268435456);             //    and qword ptr [r24 + r25], 268435456
    __ andq(Address(r25, r26), 268435456);             //    and qword ptr [r25 + r26], 268435456
    __ andq(Address(r26, r27), 268435456);             //    and qword ptr [r26 + r27], 268435456
    __ andq(Address(r27, r28), 268435456);             //    and qword ptr [r27 + r28], 268435456
    __ andq(Address(r28, r29), 268435456);             //    and qword ptr [r28 + r29], 268435456
    __ andq(Address(r29, r30), 268435456);             //    and qword ptr [r29 + r30], 268435456
    __ andq(Address(r30, r31), 268435456);             //    and qword ptr [r30 + r31], 268435456
    __ andq(Address(r31, rcx), 268435456);             //    and qword ptr [r31 + rcx], 268435456
    __ addq(Address(rcx, rdx), 1);                     //    add qword ptr [rcx + rdx], 1
    __ addq(Address(rdx, rbx), 1);                     //    add qword ptr [rdx + rbx], 1
    __ addq(Address(rbx, r8), 1);                      //    add qword ptr [rbx + r8], 1
    __ addq(Address(r8, r9), 1);                       //    add qword ptr [r8 + r9], 1
    __ addq(Address(r9, r10), 1);                      //    add qword ptr [r9 + r10], 1
    __ addq(Address(r10, r11), 1);                     //    add qword ptr [r10 + r11], 1
    __ addq(Address(r11, r12), 1);                     //    add qword ptr [r11 + r12], 1
    __ addq(Address(r12, r13), 1);                     //    add qword ptr [r12 + r13], 1
    __ addq(Address(r13, r14), 1);                     //    add qword ptr [r13 + r14], 1
    __ addq(Address(r14, r15), 1);                     //    add qword ptr [r14 + r15], 1
    __ addq(Address(r15, r16), 1);                     //    add qword ptr [r15 + r16], 1
    __ addq(Address(r16, r17), 1);                     //    add qword ptr [r16 + r17], 1
    __ addq(Address(r17, r18), 1);                     //    add qword ptr [r17 + r18], 1
    __ addq(Address(r18, r19), 1);                     //    add qword ptr [r18 + r19], 1
    __ addq(Address(r19, r20), 1);                     //    add qword ptr [r19 + r20], 1
    __ addq(Address(r20, r21), 1);                     //    add qword ptr [r20 + r21], 1
    __ addq(Address(r21, r22), 1);                     //    add qword ptr [r21 + r22], 1
    __ addq(Address(r22, r23), 1);                     //    add qword ptr [r22 + r23], 1
    __ addq(Address(r23, r24), 1);                     //    add qword ptr [r23 + r24], 1
    __ addq(Address(r24, r25), 1);                     //    add qword ptr [r24 + r25], 1
    __ addq(Address(r25, r26), 1);                     //    add qword ptr [r25 + r26], 1
    __ addq(Address(r26, r27), 1);                     //    add qword ptr [r26 + r27], 1
    __ addq(Address(r27, r28), 1);                     //    add qword ptr [r27 + r28], 1
    __ addq(Address(r28, r29), 1);                     //    add qword ptr [r28 + r29], 1
    __ addq(Address(r29, r30), 1);                     //    add qword ptr [r29 + r30], 1
    __ addq(Address(r30, r31), 1);                     //    add qword ptr [r30 + r31], 1
    __ addq(Address(r31, rcx), 1);                     //    add qword ptr [r31 + rcx], 1
    __ addq(Address(rcx, rdx), 16);                    //    add qword ptr [rcx + rdx], 16
    __ addq(Address(rdx, rbx), 16);                    //    add qword ptr [rdx + rbx], 16
    __ addq(Address(rbx, r8), 16);                     //    add qword ptr [rbx + r8], 16
    __ addq(Address(r8, r9), 16);                      //    add qword ptr [r8 + r9], 16
    __ addq(Address(r9, r10), 16);                     //    add qword ptr [r9 + r10], 16
    __ addq(Address(r10, r11), 16);                    //    add qword ptr [r10 + r11], 16
    __ addq(Address(r11, r12), 16);                    //    add qword ptr [r11 + r12], 16
    __ addq(Address(r12, r13), 16);                    //    add qword ptr [r12 + r13], 16
    __ addq(Address(r13, r14), 16);                    //    add qword ptr [r13 + r14], 16
    __ addq(Address(r14, r15), 16);                    //    add qword ptr [r14 + r15], 16
    __ addq(Address(r15, r16), 16);                    //    add qword ptr [r15 + r16], 16
    __ addq(Address(r16, r17), 16);                    //    add qword ptr [r16 + r17], 16
    __ addq(Address(r17, r18), 16);                    //    add qword ptr [r17 + r18], 16
    __ addq(Address(r18, r19), 16);                    //    add qword ptr [r18 + r19], 16
    __ addq(Address(r19, r20), 16);                    //    add qword ptr [r19 + r20], 16
    __ addq(Address(r20, r21), 16);                    //    add qword ptr [r20 + r21], 16
    __ addq(Address(r21, r22), 16);                    //    add qword ptr [r21 + r22], 16
    __ addq(Address(r22, r23), 16);                    //    add qword ptr [r22 + r23], 16
    __ addq(Address(r23, r24), 16);                    //    add qword ptr [r23 + r24], 16
    __ addq(Address(r24, r25), 16);                    //    add qword ptr [r24 + r25], 16
    __ addq(Address(r25, r26), 16);                    //    add qword ptr [r25 + r26], 16
    __ addq(Address(r26, r27), 16);                    //    add qword ptr [r26 + r27], 16
    __ addq(Address(r27, r28), 16);                    //    add qword ptr [r27 + r28], 16
    __ addq(Address(r28, r29), 16);                    //    add qword ptr [r28 + r29], 16
    __ addq(Address(r29, r30), 16);                    //    add qword ptr [r29 + r30], 16
    __ addq(Address(r30, r31), 16);                    //    add qword ptr [r30 + r31], 16
    __ addq(Address(r31, rcx), 16);                    //    add qword ptr [r31 + rcx], 16
    __ addq(Address(rcx, rdx), 256);                   //    add qword ptr [rcx + rdx], 256
    __ addq(Address(rdx, rbx), 256);                   //    add qword ptr [rdx + rbx], 256
    __ addq(Address(rbx, r8), 256);                    //    add qword ptr [rbx + r8], 256
    __ addq(Address(r8, r9), 256);                     //    add qword ptr [r8 + r9], 256
    __ addq(Address(r9, r10), 256);                    //    add qword ptr [r9 + r10], 256
    __ addq(Address(r10, r11), 256);                   //    add qword ptr [r10 + r11], 256
    __ addq(Address(r11, r12), 256);                   //    add qword ptr [r11 + r12], 256
    __ addq(Address(r12, r13), 256);                   //    add qword ptr [r12 + r13], 256
    __ addq(Address(r13, r14), 256);                   //    add qword ptr [r13 + r14], 256
    __ addq(Address(r14, r15), 256);                   //    add qword ptr [r14 + r15], 256
    __ addq(Address(r15, r16), 256);                   //    add qword ptr [r15 + r16], 256
    __ addq(Address(r16, r17), 256);                   //    add qword ptr [r16 + r17], 256
    __ addq(Address(r17, r18), 256);                   //    add qword ptr [r17 + r18], 256
    __ addq(Address(r18, r19), 256);                   //    add qword ptr [r18 + r19], 256
    __ addq(Address(r19, r20), 256);                   //    add qword ptr [r19 + r20], 256
    __ addq(Address(r20, r21), 256);                   //    add qword ptr [r20 + r21], 256
    __ addq(Address(r21, r22), 256);                   //    add qword ptr [r21 + r22], 256
    __ addq(Address(r22, r23), 256);                   //    add qword ptr [r22 + r23], 256
    __ addq(Address(r23, r24), 256);                   //    add qword ptr [r23 + r24], 256
    __ addq(Address(r24, r25), 256);                   //    add qword ptr [r24 + r25], 256
    __ addq(Address(r25, r26), 256);                   //    add qword ptr [r25 + r26], 256
    __ addq(Address(r26, r27), 256);                   //    add qword ptr [r26 + r27], 256
    __ addq(Address(r27, r28), 256);                   //    add qword ptr [r27 + r28], 256
    __ addq(Address(r28, r29), 256);                   //    add qword ptr [r28 + r29], 256
    __ addq(Address(r29, r30), 256);                   //    add qword ptr [r29 + r30], 256
    __ addq(Address(r30, r31), 256);                   //    add qword ptr [r30 + r31], 256
    __ addq(Address(r31, rcx), 256);                   //    add qword ptr [r31 + rcx], 256
    __ addq(Address(rcx, rdx), 4096);                  //    add qword ptr [rcx + rdx], 4096
    __ addq(Address(rdx, rbx), 4096);                  //    add qword ptr [rdx + rbx], 4096
    __ addq(Address(rbx, r8), 4096);                   //    add qword ptr [rbx + r8], 4096
    __ addq(Address(r8, r9), 4096);                    //    add qword ptr [r8 + r9], 4096
    __ addq(Address(r9, r10), 4096);                   //    add qword ptr [r9 + r10], 4096
    __ addq(Address(r10, r11), 4096);                  //    add qword ptr [r10 + r11], 4096
    __ addq(Address(r11, r12), 4096);                  //    add qword ptr [r11 + r12], 4096
    __ addq(Address(r12, r13), 4096);                  //    add qword ptr [r12 + r13], 4096
    __ addq(Address(r13, r14), 4096);                  //    add qword ptr [r13 + r14], 4096
    __ addq(Address(r14, r15), 4096);                  //    add qword ptr [r14 + r15], 4096
    __ addq(Address(r15, r16), 4096);                  //    add qword ptr [r15 + r16], 4096
    __ addq(Address(r16, r17), 4096);                  //    add qword ptr [r16 + r17], 4096
    __ addq(Address(r17, r18), 4096);                  //    add qword ptr [r17 + r18], 4096
    __ addq(Address(r18, r19), 4096);                  //    add qword ptr [r18 + r19], 4096
    __ addq(Address(r19, r20), 4096);                  //    add qword ptr [r19 + r20], 4096
    __ addq(Address(r20, r21), 4096);                  //    add qword ptr [r20 + r21], 4096
    __ addq(Address(r21, r22), 4096);                  //    add qword ptr [r21 + r22], 4096
    __ addq(Address(r22, r23), 4096);                  //    add qword ptr [r22 + r23], 4096
    __ addq(Address(r23, r24), 4096);                  //    add qword ptr [r23 + r24], 4096
    __ addq(Address(r24, r25), 4096);                  //    add qword ptr [r24 + r25], 4096
    __ addq(Address(r25, r26), 4096);                  //    add qword ptr [r25 + r26], 4096
    __ addq(Address(r26, r27), 4096);                  //    add qword ptr [r26 + r27], 4096
    __ addq(Address(r27, r28), 4096);                  //    add qword ptr [r27 + r28], 4096
    __ addq(Address(r28, r29), 4096);                  //    add qword ptr [r28 + r29], 4096
    __ addq(Address(r29, r30), 4096);                  //    add qword ptr [r29 + r30], 4096
    __ addq(Address(r30, r31), 4096);                  //    add qword ptr [r30 + r31], 4096
    __ addq(Address(r31, rcx), 4096);                  //    add qword ptr [r31 + rcx], 4096
    __ addq(Address(rcx, rdx), 65536);                 //    add qword ptr [rcx + rdx], 65536
    __ addq(Address(rdx, rbx), 65536);                 //    add qword ptr [rdx + rbx], 65536
    __ addq(Address(rbx, r8), 65536);                  //    add qword ptr [rbx + r8], 65536
    __ addq(Address(r8, r9), 65536);                   //    add qword ptr [r8 + r9], 65536
    __ addq(Address(r9, r10), 65536);                  //    add qword ptr [r9 + r10], 65536
    __ addq(Address(r10, r11), 65536);                 //    add qword ptr [r10 + r11], 65536
    __ addq(Address(r11, r12), 65536);                 //    add qword ptr [r11 + r12], 65536
    __ addq(Address(r12, r13), 65536);                 //    add qword ptr [r12 + r13], 65536
    __ addq(Address(r13, r14), 65536);                 //    add qword ptr [r13 + r14], 65536
    __ addq(Address(r14, r15), 65536);                 //    add qword ptr [r14 + r15], 65536
    __ addq(Address(r15, r16), 65536);                 //    add qword ptr [r15 + r16], 65536
    __ addq(Address(r16, r17), 65536);                 //    add qword ptr [r16 + r17], 65536
    __ addq(Address(r17, r18), 65536);                 //    add qword ptr [r17 + r18], 65536
    __ addq(Address(r18, r19), 65536);                 //    add qword ptr [r18 + r19], 65536
    __ addq(Address(r19, r20), 65536);                 //    add qword ptr [r19 + r20], 65536
    __ addq(Address(r20, r21), 65536);                 //    add qword ptr [r20 + r21], 65536
    __ addq(Address(r21, r22), 65536);                 //    add qword ptr [r21 + r22], 65536
    __ addq(Address(r22, r23), 65536);                 //    add qword ptr [r22 + r23], 65536
    __ addq(Address(r23, r24), 65536);                 //    add qword ptr [r23 + r24], 65536
    __ addq(Address(r24, r25), 65536);                 //    add qword ptr [r24 + r25], 65536
    __ addq(Address(r25, r26), 65536);                 //    add qword ptr [r25 + r26], 65536
    __ addq(Address(r26, r27), 65536);                 //    add qword ptr [r26 + r27], 65536
    __ addq(Address(r27, r28), 65536);                 //    add qword ptr [r27 + r28], 65536
    __ addq(Address(r28, r29), 65536);                 //    add qword ptr [r28 + r29], 65536
    __ addq(Address(r29, r30), 65536);                 //    add qword ptr [r29 + r30], 65536
    __ addq(Address(r30, r31), 65536);                 //    add qword ptr [r30 + r31], 65536
    __ addq(Address(r31, rcx), 65536);                 //    add qword ptr [r31 + rcx], 65536
    __ addq(Address(rcx, rdx), 1048576);               //    add qword ptr [rcx + rdx], 1048576
    __ addq(Address(rdx, rbx), 1048576);               //    add qword ptr [rdx + rbx], 1048576
    __ addq(Address(rbx, r8), 1048576);                //    add qword ptr [rbx + r8], 1048576
    __ addq(Address(r8, r9), 1048576);                 //    add qword ptr [r8 + r9], 1048576
    __ addq(Address(r9, r10), 1048576);                //    add qword ptr [r9 + r10], 1048576
    __ addq(Address(r10, r11), 1048576);               //    add qword ptr [r10 + r11], 1048576
    __ addq(Address(r11, r12), 1048576);               //    add qword ptr [r11 + r12], 1048576
    __ addq(Address(r12, r13), 1048576);               //    add qword ptr [r12 + r13], 1048576
    __ addq(Address(r13, r14), 1048576);               //    add qword ptr [r13 + r14], 1048576
    __ addq(Address(r14, r15), 1048576);               //    add qword ptr [r14 + r15], 1048576
    __ addq(Address(r15, r16), 1048576);               //    add qword ptr [r15 + r16], 1048576
    __ addq(Address(r16, r17), 1048576);               //    add qword ptr [r16 + r17], 1048576
    __ addq(Address(r17, r18), 1048576);               //    add qword ptr [r17 + r18], 1048576
    __ addq(Address(r18, r19), 1048576);               //    add qword ptr [r18 + r19], 1048576
    __ addq(Address(r19, r20), 1048576);               //    add qword ptr [r19 + r20], 1048576
    __ addq(Address(r20, r21), 1048576);               //    add qword ptr [r20 + r21], 1048576
    __ addq(Address(r21, r22), 1048576);               //    add qword ptr [r21 + r22], 1048576
    __ addq(Address(r22, r23), 1048576);               //    add qword ptr [r22 + r23], 1048576
    __ addq(Address(r23, r24), 1048576);               //    add qword ptr [r23 + r24], 1048576
    __ addq(Address(r24, r25), 1048576);               //    add qword ptr [r24 + r25], 1048576
    __ addq(Address(r25, r26), 1048576);               //    add qword ptr [r25 + r26], 1048576
    __ addq(Address(r26, r27), 1048576);               //    add qword ptr [r26 + r27], 1048576
    __ addq(Address(r27, r28), 1048576);               //    add qword ptr [r27 + r28], 1048576
    __ addq(Address(r28, r29), 1048576);               //    add qword ptr [r28 + r29], 1048576
    __ addq(Address(r29, r30), 1048576);               //    add qword ptr [r29 + r30], 1048576
    __ addq(Address(r30, r31), 1048576);               //    add qword ptr [r30 + r31], 1048576
    __ addq(Address(r31, rcx), 1048576);               //    add qword ptr [r31 + rcx], 1048576
    __ addq(Address(rcx, rdx), 16777216);              //    add qword ptr [rcx + rdx], 16777216
    __ addq(Address(rdx, rbx), 16777216);              //    add qword ptr [rdx + rbx], 16777216
    __ addq(Address(rbx, r8), 16777216);               //    add qword ptr [rbx + r8], 16777216
    __ addq(Address(r8, r9), 16777216);                //    add qword ptr [r8 + r9], 16777216
    __ addq(Address(r9, r10), 16777216);               //    add qword ptr [r9 + r10], 16777216
    __ addq(Address(r10, r11), 16777216);              //    add qword ptr [r10 + r11], 16777216
    __ addq(Address(r11, r12), 16777216);              //    add qword ptr [r11 + r12], 16777216
    __ addq(Address(r12, r13), 16777216);              //    add qword ptr [r12 + r13], 16777216
    __ addq(Address(r13, r14), 16777216);              //    add qword ptr [r13 + r14], 16777216
    __ addq(Address(r14, r15), 16777216);              //    add qword ptr [r14 + r15], 16777216
    __ addq(Address(r15, r16), 16777216);              //    add qword ptr [r15 + r16], 16777216
    __ addq(Address(r16, r17), 16777216);              //    add qword ptr [r16 + r17], 16777216
    __ addq(Address(r17, r18), 16777216);              //    add qword ptr [r17 + r18], 16777216
    __ addq(Address(r18, r19), 16777216);              //    add qword ptr [r18 + r19], 16777216
    __ addq(Address(r19, r20), 16777216);              //    add qword ptr [r19 + r20], 16777216
    __ addq(Address(r20, r21), 16777216);              //    add qword ptr [r20 + r21], 16777216
    __ addq(Address(r21, r22), 16777216);              //    add qword ptr [r21 + r22], 16777216
    __ addq(Address(r22, r23), 16777216);              //    add qword ptr [r22 + r23], 16777216
    __ addq(Address(r23, r24), 16777216);              //    add qword ptr [r23 + r24], 16777216
    __ addq(Address(r24, r25), 16777216);              //    add qword ptr [r24 + r25], 16777216
    __ addq(Address(r25, r26), 16777216);              //    add qword ptr [r25 + r26], 16777216
    __ addq(Address(r26, r27), 16777216);              //    add qword ptr [r26 + r27], 16777216
    __ addq(Address(r27, r28), 16777216);              //    add qword ptr [r27 + r28], 16777216
    __ addq(Address(r28, r29), 16777216);              //    add qword ptr [r28 + r29], 16777216
    __ addq(Address(r29, r30), 16777216);              //    add qword ptr [r29 + r30], 16777216
    __ addq(Address(r30, r31), 16777216);              //    add qword ptr [r30 + r31], 16777216
    __ addq(Address(r31, rcx), 16777216);              //    add qword ptr [r31 + rcx], 16777216
    __ addq(Address(rcx, rdx), 268435456);             //    add qword ptr [rcx + rdx], 268435456
    __ addq(Address(rdx, rbx), 268435456);             //    add qword ptr [rdx + rbx], 268435456
    __ addq(Address(rbx, r8), 268435456);              //    add qword ptr [rbx + r8], 268435456
    __ addq(Address(r8, r9), 268435456);               //    add qword ptr [r8 + r9], 268435456
    __ addq(Address(r9, r10), 268435456);              //    add qword ptr [r9 + r10], 268435456
    __ addq(Address(r10, r11), 268435456);             //    add qword ptr [r10 + r11], 268435456
    __ addq(Address(r11, r12), 268435456);             //    add qword ptr [r11 + r12], 268435456
    __ addq(Address(r12, r13), 268435456);             //    add qword ptr [r12 + r13], 268435456
    __ addq(Address(r13, r14), 268435456);             //    add qword ptr [r13 + r14], 268435456
    __ addq(Address(r14, r15), 268435456);             //    add qword ptr [r14 + r15], 268435456
    __ addq(Address(r15, r16), 268435456);             //    add qword ptr [r15 + r16], 268435456
    __ addq(Address(r16, r17), 268435456);             //    add qword ptr [r16 + r17], 268435456
    __ addq(Address(r17, r18), 268435456);             //    add qword ptr [r17 + r18], 268435456
    __ addq(Address(r18, r19), 268435456);             //    add qword ptr [r18 + r19], 268435456
    __ addq(Address(r19, r20), 268435456);             //    add qword ptr [r19 + r20], 268435456
    __ addq(Address(r20, r21), 268435456);             //    add qword ptr [r20 + r21], 268435456
    __ addq(Address(r21, r22), 268435456);             //    add qword ptr [r21 + r22], 268435456
    __ addq(Address(r22, r23), 268435456);             //    add qword ptr [r22 + r23], 268435456
    __ addq(Address(r23, r24), 268435456);             //    add qword ptr [r23 + r24], 268435456
    __ addq(Address(r24, r25), 268435456);             //    add qword ptr [r24 + r25], 268435456
    __ addq(Address(r25, r26), 268435456);             //    add qword ptr [r25 + r26], 268435456
    __ addq(Address(r26, r27), 268435456);             //    add qword ptr [r26 + r27], 268435456
    __ addq(Address(r27, r28), 268435456);             //    add qword ptr [r27 + r28], 268435456
    __ addq(Address(r28, r29), 268435456);             //    add qword ptr [r28 + r29], 268435456
    __ addq(Address(r29, r30), 268435456);             //    add qword ptr [r29 + r30], 268435456
    __ addq(Address(r30, r31), 268435456);             //    add qword ptr [r30 + r31], 268435456
    __ addq(Address(r31, rcx), 268435456);             //    add qword ptr [r31 + rcx], 268435456
    __ sarq(Address(rcx, rdx), 1);                     //    sar qword ptr [rcx + rdx], 1
    __ sarq(Address(rdx, rbx), 1);                     //    sar qword ptr [rdx + rbx], 1
    __ sarq(Address(rbx, r8), 1);                      //    sar qword ptr [rbx + r8], 1
    __ sarq(Address(r8, r9), 1);                       //    sar qword ptr [r8 + r9], 1
    __ sarq(Address(r9, r10), 1);                      //    sar qword ptr [r9 + r10], 1
    __ sarq(Address(r10, r11), 1);                     //    sar qword ptr [r10 + r11], 1
    __ sarq(Address(r11, r12), 1);                     //    sar qword ptr [r11 + r12], 1
    __ sarq(Address(r12, r13), 1);                     //    sar qword ptr [r12 + r13], 1
    __ sarq(Address(r13, r14), 1);                     //    sar qword ptr [r13 + r14], 1
    __ sarq(Address(r14, r15), 1);                     //    sar qword ptr [r14 + r15], 1
    __ sarq(Address(r15, r16), 1);                     //    sar qword ptr [r15 + r16], 1
    __ sarq(Address(r16, r17), 1);                     //    sar qword ptr [r16 + r17], 1
    __ sarq(Address(r17, r18), 1);                     //    sar qword ptr [r17 + r18], 1
    __ sarq(Address(r18, r19), 1);                     //    sar qword ptr [r18 + r19], 1
    __ sarq(Address(r19, r20), 1);                     //    sar qword ptr [r19 + r20], 1
    __ sarq(Address(r20, r21), 1);                     //    sar qword ptr [r20 + r21], 1
    __ sarq(Address(r21, r22), 1);                     //    sar qword ptr [r21 + r22], 1
    __ sarq(Address(r22, r23), 1);                     //    sar qword ptr [r22 + r23], 1
    __ sarq(Address(r23, r24), 1);                     //    sar qword ptr [r23 + r24], 1
    __ sarq(Address(r24, r25), 1);                     //    sar qword ptr [r24 + r25], 1
    __ sarq(Address(r25, r26), 1);                     //    sar qword ptr [r25 + r26], 1
    __ sarq(Address(r26, r27), 1);                     //    sar qword ptr [r26 + r27], 1
    __ sarq(Address(r27, r28), 1);                     //    sar qword ptr [r27 + r28], 1
    __ sarq(Address(r28, r29), 1);                     //    sar qword ptr [r28 + r29], 1
    __ sarq(Address(r29, r30), 1);                     //    sar qword ptr [r29 + r30], 1
    __ sarq(Address(r30, r31), 1);                     //    sar qword ptr [r30 + r31], 1
    __ sarq(Address(r31, rcx), 1);                     //    sar qword ptr [r31 + rcx], 1
    __ sarq(Address(rcx, rdx), 2);                     //    sar qword ptr [rcx + rdx], 2
    __ sarq(Address(rdx, rbx), 2);                     //    sar qword ptr [rdx + rbx], 2
    __ sarq(Address(rbx, r8), 2);                      //    sar qword ptr [rbx + r8], 2
    __ sarq(Address(r8, r9), 2);                       //    sar qword ptr [r8 + r9], 2
    __ sarq(Address(r9, r10), 2);                      //    sar qword ptr [r9 + r10], 2
    __ sarq(Address(r10, r11), 2);                     //    sar qword ptr [r10 + r11], 2
    __ sarq(Address(r11, r12), 2);                     //    sar qword ptr [r11 + r12], 2
    __ sarq(Address(r12, r13), 2);                     //    sar qword ptr [r12 + r13], 2
    __ sarq(Address(r13, r14), 2);                     //    sar qword ptr [r13 + r14], 2
    __ sarq(Address(r14, r15), 2);                     //    sar qword ptr [r14 + r15], 2
    __ sarq(Address(r15, r16), 2);                     //    sar qword ptr [r15 + r16], 2
    __ sarq(Address(r16, r17), 2);                     //    sar qword ptr [r16 + r17], 2
    __ sarq(Address(r17, r18), 2);                     //    sar qword ptr [r17 + r18], 2
    __ sarq(Address(r18, r19), 2);                     //    sar qword ptr [r18 + r19], 2
    __ sarq(Address(r19, r20), 2);                     //    sar qword ptr [r19 + r20], 2
    __ sarq(Address(r20, r21), 2);                     //    sar qword ptr [r20 + r21], 2
    __ sarq(Address(r21, r22), 2);                     //    sar qword ptr [r21 + r22], 2
    __ sarq(Address(r22, r23), 2);                     //    sar qword ptr [r22 + r23], 2
    __ sarq(Address(r23, r24), 2);                     //    sar qword ptr [r23 + r24], 2
    __ sarq(Address(r24, r25), 2);                     //    sar qword ptr [r24 + r25], 2
    __ sarq(Address(r25, r26), 2);                     //    sar qword ptr [r25 + r26], 2
    __ sarq(Address(r26, r27), 2);                     //    sar qword ptr [r26 + r27], 2
    __ sarq(Address(r27, r28), 2);                     //    sar qword ptr [r27 + r28], 2
    __ sarq(Address(r28, r29), 2);                     //    sar qword ptr [r28 + r29], 2
    __ sarq(Address(r29, r30), 2);                     //    sar qword ptr [r29 + r30], 2
    __ sarq(Address(r30, r31), 2);                     //    sar qword ptr [r30 + r31], 2
    __ sarq(Address(r31, rcx), 2);                     //    sar qword ptr [r31 + rcx], 2
    __ sarq(Address(rcx, rdx), 4);                     //    sar qword ptr [rcx + rdx], 4
    __ sarq(Address(rdx, rbx), 4);                     //    sar qword ptr [rdx + rbx], 4
    __ sarq(Address(rbx, r8), 4);                      //    sar qword ptr [rbx + r8], 4
    __ sarq(Address(r8, r9), 4);                       //    sar qword ptr [r8 + r9], 4
    __ sarq(Address(r9, r10), 4);                      //    sar qword ptr [r9 + r10], 4
    __ sarq(Address(r10, r11), 4);                     //    sar qword ptr [r10 + r11], 4
    __ sarq(Address(r11, r12), 4);                     //    sar qword ptr [r11 + r12], 4
    __ sarq(Address(r12, r13), 4);                     //    sar qword ptr [r12 + r13], 4
    __ sarq(Address(r13, r14), 4);                     //    sar qword ptr [r13 + r14], 4
    __ sarq(Address(r14, r15), 4);                     //    sar qword ptr [r14 + r15], 4
    __ sarq(Address(r15, r16), 4);                     //    sar qword ptr [r15 + r16], 4
    __ sarq(Address(r16, r17), 4);                     //    sar qword ptr [r16 + r17], 4
    __ sarq(Address(r17, r18), 4);                     //    sar qword ptr [r17 + r18], 4
    __ sarq(Address(r18, r19), 4);                     //    sar qword ptr [r18 + r19], 4
    __ sarq(Address(r19, r20), 4);                     //    sar qword ptr [r19 + r20], 4
    __ sarq(Address(r20, r21), 4);                     //    sar qword ptr [r20 + r21], 4
    __ sarq(Address(r21, r22), 4);                     //    sar qword ptr [r21 + r22], 4
    __ sarq(Address(r22, r23), 4);                     //    sar qword ptr [r22 + r23], 4
    __ sarq(Address(r23, r24), 4);                     //    sar qword ptr [r23 + r24], 4
    __ sarq(Address(r24, r25), 4);                     //    sar qword ptr [r24 + r25], 4
    __ sarq(Address(r25, r26), 4);                     //    sar qword ptr [r25 + r26], 4
    __ sarq(Address(r26, r27), 4);                     //    sar qword ptr [r26 + r27], 4
    __ sarq(Address(r27, r28), 4);                     //    sar qword ptr [r27 + r28], 4
    __ sarq(Address(r28, r29), 4);                     //    sar qword ptr [r28 + r29], 4
    __ sarq(Address(r29, r30), 4);                     //    sar qword ptr [r29 + r30], 4
    __ sarq(Address(r30, r31), 4);                     //    sar qword ptr [r30 + r31], 4
    __ sarq(Address(r31, rcx), 4);                     //    sar qword ptr [r31 + rcx], 4
    __ sarq(Address(rcx, rdx), 8);                     //    sar qword ptr [rcx + rdx], 8
    __ sarq(Address(rdx, rbx), 8);                     //    sar qword ptr [rdx + rbx], 8
    __ sarq(Address(rbx, r8), 8);                      //    sar qword ptr [rbx + r8], 8
    __ sarq(Address(r8, r9), 8);                       //    sar qword ptr [r8 + r9], 8
    __ sarq(Address(r9, r10), 8);                      //    sar qword ptr [r9 + r10], 8
    __ sarq(Address(r10, r11), 8);                     //    sar qword ptr [r10 + r11], 8
    __ sarq(Address(r11, r12), 8);                     //    sar qword ptr [r11 + r12], 8
    __ sarq(Address(r12, r13), 8);                     //    sar qword ptr [r12 + r13], 8
    __ sarq(Address(r13, r14), 8);                     //    sar qword ptr [r13 + r14], 8
    __ sarq(Address(r14, r15), 8);                     //    sar qword ptr [r14 + r15], 8
    __ sarq(Address(r15, r16), 8);                     //    sar qword ptr [r15 + r16], 8
    __ sarq(Address(r16, r17), 8);                     //    sar qword ptr [r16 + r17], 8
    __ sarq(Address(r17, r18), 8);                     //    sar qword ptr [r17 + r18], 8
    __ sarq(Address(r18, r19), 8);                     //    sar qword ptr [r18 + r19], 8
    __ sarq(Address(r19, r20), 8);                     //    sar qword ptr [r19 + r20], 8
    __ sarq(Address(r20, r21), 8);                     //    sar qword ptr [r20 + r21], 8
    __ sarq(Address(r21, r22), 8);                     //    sar qword ptr [r21 + r22], 8
    __ sarq(Address(r22, r23), 8);                     //    sar qword ptr [r22 + r23], 8
    __ sarq(Address(r23, r24), 8);                     //    sar qword ptr [r23 + r24], 8
    __ sarq(Address(r24, r25), 8);                     //    sar qword ptr [r24 + r25], 8
    __ sarq(Address(r25, r26), 8);                     //    sar qword ptr [r25 + r26], 8
    __ sarq(Address(r26, r27), 8);                     //    sar qword ptr [r26 + r27], 8
    __ sarq(Address(r27, r28), 8);                     //    sar qword ptr [r27 + r28], 8
    __ sarq(Address(r28, r29), 8);                     //    sar qword ptr [r28 + r29], 8
    __ sarq(Address(r29, r30), 8);                     //    sar qword ptr [r29 + r30], 8
    __ sarq(Address(r30, r31), 8);                     //    sar qword ptr [r30 + r31], 8
    __ sarq(Address(r31, rcx), 8);                     //    sar qword ptr [r31 + rcx], 8
    __ sarq(Address(rcx, rdx), 16);                    //    sar qword ptr [rcx + rdx], 16
    __ sarq(Address(rdx, rbx), 16);                    //    sar qword ptr [rdx + rbx], 16
    __ sarq(Address(rbx, r8), 16);                     //    sar qword ptr [rbx + r8], 16
    __ sarq(Address(r8, r9), 16);                      //    sar qword ptr [r8 + r9], 16
    __ sarq(Address(r9, r10), 16);                     //    sar qword ptr [r9 + r10], 16
    __ sarq(Address(r10, r11), 16);                    //    sar qword ptr [r10 + r11], 16
    __ sarq(Address(r11, r12), 16);                    //    sar qword ptr [r11 + r12], 16
    __ sarq(Address(r12, r13), 16);                    //    sar qword ptr [r12 + r13], 16
    __ sarq(Address(r13, r14), 16);                    //    sar qword ptr [r13 + r14], 16
    __ sarq(Address(r14, r15), 16);                    //    sar qword ptr [r14 + r15], 16
    __ sarq(Address(r15, r16), 16);                    //    sar qword ptr [r15 + r16], 16
    __ sarq(Address(r16, r17), 16);                    //    sar qword ptr [r16 + r17], 16
    __ sarq(Address(r17, r18), 16);                    //    sar qword ptr [r17 + r18], 16
    __ sarq(Address(r18, r19), 16);                    //    sar qword ptr [r18 + r19], 16
    __ sarq(Address(r19, r20), 16);                    //    sar qword ptr [r19 + r20], 16
    __ sarq(Address(r20, r21), 16);                    //    sar qword ptr [r20 + r21], 16
    __ sarq(Address(r21, r22), 16);                    //    sar qword ptr [r21 + r22], 16
    __ sarq(Address(r22, r23), 16);                    //    sar qword ptr [r22 + r23], 16
    __ sarq(Address(r23, r24), 16);                    //    sar qword ptr [r23 + r24], 16
    __ sarq(Address(r24, r25), 16);                    //    sar qword ptr [r24 + r25], 16
    __ sarq(Address(r25, r26), 16);                    //    sar qword ptr [r25 + r26], 16
    __ sarq(Address(r26, r27), 16);                    //    sar qword ptr [r26 + r27], 16
    __ sarq(Address(r27, r28), 16);                    //    sar qword ptr [r27 + r28], 16
    __ sarq(Address(r28, r29), 16);                    //    sar qword ptr [r28 + r29], 16
    __ sarq(Address(r29, r30), 16);                    //    sar qword ptr [r29 + r30], 16
    __ sarq(Address(r30, r31), 16);                    //    sar qword ptr [r30 + r31], 16
    __ sarq(Address(r31, rcx), 16);                    //    sar qword ptr [r31 + rcx], 16
    __ sbbq(Address(rcx, rdx), 1);                     //    sbb qword ptr [rcx + rdx], 1
    __ sbbq(Address(rdx, rbx), 1);                     //    sbb qword ptr [rdx + rbx], 1
    __ sbbq(Address(rbx, r8), 1);                      //    sbb qword ptr [rbx + r8], 1
    __ sbbq(Address(r8, r9), 1);                       //    sbb qword ptr [r8 + r9], 1
    __ sbbq(Address(r9, r10), 1);                      //    sbb qword ptr [r9 + r10], 1
    __ sbbq(Address(r10, r11), 1);                     //    sbb qword ptr [r10 + r11], 1
    __ sbbq(Address(r11, r12), 1);                     //    sbb qword ptr [r11 + r12], 1
    __ sbbq(Address(r12, r13), 1);                     //    sbb qword ptr [r12 + r13], 1
    __ sbbq(Address(r13, r14), 1);                     //    sbb qword ptr [r13 + r14], 1
    __ sbbq(Address(r14, r15), 1);                     //    sbb qword ptr [r14 + r15], 1
    __ sbbq(Address(r15, r16), 1);                     //    sbb qword ptr [r15 + r16], 1
    __ sbbq(Address(r16, r17), 1);                     //    sbb qword ptr [r16 + r17], 1
    __ sbbq(Address(r17, r18), 1);                     //    sbb qword ptr [r17 + r18], 1
    __ sbbq(Address(r18, r19), 1);                     //    sbb qword ptr [r18 + r19], 1
    __ sbbq(Address(r19, r20), 1);                     //    sbb qword ptr [r19 + r20], 1
    __ sbbq(Address(r20, r21), 1);                     //    sbb qword ptr [r20 + r21], 1
    __ sbbq(Address(r21, r22), 1);                     //    sbb qword ptr [r21 + r22], 1
    __ sbbq(Address(r22, r23), 1);                     //    sbb qword ptr [r22 + r23], 1
    __ sbbq(Address(r23, r24), 1);                     //    sbb qword ptr [r23 + r24], 1
    __ sbbq(Address(r24, r25), 1);                     //    sbb qword ptr [r24 + r25], 1
    __ sbbq(Address(r25, r26), 1);                     //    sbb qword ptr [r25 + r26], 1
    __ sbbq(Address(r26, r27), 1);                     //    sbb qword ptr [r26 + r27], 1
    __ sbbq(Address(r27, r28), 1);                     //    sbb qword ptr [r27 + r28], 1
    __ sbbq(Address(r28, r29), 1);                     //    sbb qword ptr [r28 + r29], 1
    __ sbbq(Address(r29, r30), 1);                     //    sbb qword ptr [r29 + r30], 1
    __ sbbq(Address(r30, r31), 1);                     //    sbb qword ptr [r30 + r31], 1
    __ sbbq(Address(r31, rcx), 1);                     //    sbb qword ptr [r31 + rcx], 1
    __ sbbq(Address(rcx, rdx), 16);                    //    sbb qword ptr [rcx + rdx], 16
    __ sbbq(Address(rdx, rbx), 16);                    //    sbb qword ptr [rdx + rbx], 16
    __ sbbq(Address(rbx, r8), 16);                     //    sbb qword ptr [rbx + r8], 16
    __ sbbq(Address(r8, r9), 16);                      //    sbb qword ptr [r8 + r9], 16
    __ sbbq(Address(r9, r10), 16);                     //    sbb qword ptr [r9 + r10], 16
    __ sbbq(Address(r10, r11), 16);                    //    sbb qword ptr [r10 + r11], 16
    __ sbbq(Address(r11, r12), 16);                    //    sbb qword ptr [r11 + r12], 16
    __ sbbq(Address(r12, r13), 16);                    //    sbb qword ptr [r12 + r13], 16
    __ sbbq(Address(r13, r14), 16);                    //    sbb qword ptr [r13 + r14], 16
    __ sbbq(Address(r14, r15), 16);                    //    sbb qword ptr [r14 + r15], 16
    __ sbbq(Address(r15, r16), 16);                    //    sbb qword ptr [r15 + r16], 16
    __ sbbq(Address(r16, r17), 16);                    //    sbb qword ptr [r16 + r17], 16
    __ sbbq(Address(r17, r18), 16);                    //    sbb qword ptr [r17 + r18], 16
    __ sbbq(Address(r18, r19), 16);                    //    sbb qword ptr [r18 + r19], 16
    __ sbbq(Address(r19, r20), 16);                    //    sbb qword ptr [r19 + r20], 16
    __ sbbq(Address(r20, r21), 16);                    //    sbb qword ptr [r20 + r21], 16
    __ sbbq(Address(r21, r22), 16);                    //    sbb qword ptr [r21 + r22], 16
    __ sbbq(Address(r22, r23), 16);                    //    sbb qword ptr [r22 + r23], 16
    __ sbbq(Address(r23, r24), 16);                    //    sbb qword ptr [r23 + r24], 16
    __ sbbq(Address(r24, r25), 16);                    //    sbb qword ptr [r24 + r25], 16
    __ sbbq(Address(r25, r26), 16);                    //    sbb qword ptr [r25 + r26], 16
    __ sbbq(Address(r26, r27), 16);                    //    sbb qword ptr [r26 + r27], 16
    __ sbbq(Address(r27, r28), 16);                    //    sbb qword ptr [r27 + r28], 16
    __ sbbq(Address(r28, r29), 16);                    //    sbb qword ptr [r28 + r29], 16
    __ sbbq(Address(r29, r30), 16);                    //    sbb qword ptr [r29 + r30], 16
    __ sbbq(Address(r30, r31), 16);                    //    sbb qword ptr [r30 + r31], 16
    __ sbbq(Address(r31, rcx), 16);                    //    sbb qword ptr [r31 + rcx], 16
    __ sbbq(Address(rcx, rdx), 256);                   //    sbb qword ptr [rcx + rdx], 256
    __ sbbq(Address(rdx, rbx), 256);                   //    sbb qword ptr [rdx + rbx], 256
    __ sbbq(Address(rbx, r8), 256);                    //    sbb qword ptr [rbx + r8], 256
    __ sbbq(Address(r8, r9), 256);                     //    sbb qword ptr [r8 + r9], 256
    __ sbbq(Address(r9, r10), 256);                    //    sbb qword ptr [r9 + r10], 256
    __ sbbq(Address(r10, r11), 256);                   //    sbb qword ptr [r10 + r11], 256
    __ sbbq(Address(r11, r12), 256);                   //    sbb qword ptr [r11 + r12], 256
    __ sbbq(Address(r12, r13), 256);                   //    sbb qword ptr [r12 + r13], 256
    __ sbbq(Address(r13, r14), 256);                   //    sbb qword ptr [r13 + r14], 256
    __ sbbq(Address(r14, r15), 256);                   //    sbb qword ptr [r14 + r15], 256
    __ sbbq(Address(r15, r16), 256);                   //    sbb qword ptr [r15 + r16], 256
    __ sbbq(Address(r16, r17), 256);                   //    sbb qword ptr [r16 + r17], 256
    __ sbbq(Address(r17, r18), 256);                   //    sbb qword ptr [r17 + r18], 256
    __ sbbq(Address(r18, r19), 256);                   //    sbb qword ptr [r18 + r19], 256
    __ sbbq(Address(r19, r20), 256);                   //    sbb qword ptr [r19 + r20], 256
    __ sbbq(Address(r20, r21), 256);                   //    sbb qword ptr [r20 + r21], 256
    __ sbbq(Address(r21, r22), 256);                   //    sbb qword ptr [r21 + r22], 256
    __ sbbq(Address(r22, r23), 256);                   //    sbb qword ptr [r22 + r23], 256
    __ sbbq(Address(r23, r24), 256);                   //    sbb qword ptr [r23 + r24], 256
    __ sbbq(Address(r24, r25), 256);                   //    sbb qword ptr [r24 + r25], 256
    __ sbbq(Address(r25, r26), 256);                   //    sbb qword ptr [r25 + r26], 256
    __ sbbq(Address(r26, r27), 256);                   //    sbb qword ptr [r26 + r27], 256
    __ sbbq(Address(r27, r28), 256);                   //    sbb qword ptr [r27 + r28], 256
    __ sbbq(Address(r28, r29), 256);                   //    sbb qword ptr [r28 + r29], 256
    __ sbbq(Address(r29, r30), 256);                   //    sbb qword ptr [r29 + r30], 256
    __ sbbq(Address(r30, r31), 256);                   //    sbb qword ptr [r30 + r31], 256
    __ sbbq(Address(r31, rcx), 256);                   //    sbb qword ptr [r31 + rcx], 256
    __ sbbq(Address(rcx, rdx), 4096);                  //    sbb qword ptr [rcx + rdx], 4096
    __ sbbq(Address(rdx, rbx), 4096);                  //    sbb qword ptr [rdx + rbx], 4096
    __ sbbq(Address(rbx, r8), 4096);                   //    sbb qword ptr [rbx + r8], 4096
    __ sbbq(Address(r8, r9), 4096);                    //    sbb qword ptr [r8 + r9], 4096
    __ sbbq(Address(r9, r10), 4096);                   //    sbb qword ptr [r9 + r10], 4096
    __ sbbq(Address(r10, r11), 4096);                  //    sbb qword ptr [r10 + r11], 4096
    __ sbbq(Address(r11, r12), 4096);                  //    sbb qword ptr [r11 + r12], 4096
    __ sbbq(Address(r12, r13), 4096);                  //    sbb qword ptr [r12 + r13], 4096
    __ sbbq(Address(r13, r14), 4096);                  //    sbb qword ptr [r13 + r14], 4096
    __ sbbq(Address(r14, r15), 4096);                  //    sbb qword ptr [r14 + r15], 4096
    __ sbbq(Address(r15, r16), 4096);                  //    sbb qword ptr [r15 + r16], 4096
    __ sbbq(Address(r16, r17), 4096);                  //    sbb qword ptr [r16 + r17], 4096
    __ sbbq(Address(r17, r18), 4096);                  //    sbb qword ptr [r17 + r18], 4096
    __ sbbq(Address(r18, r19), 4096);                  //    sbb qword ptr [r18 + r19], 4096
    __ sbbq(Address(r19, r20), 4096);                  //    sbb qword ptr [r19 + r20], 4096
    __ sbbq(Address(r20, r21), 4096);                  //    sbb qword ptr [r20 + r21], 4096
    __ sbbq(Address(r21, r22), 4096);                  //    sbb qword ptr [r21 + r22], 4096
    __ sbbq(Address(r22, r23), 4096);                  //    sbb qword ptr [r22 + r23], 4096
    __ sbbq(Address(r23, r24), 4096);                  //    sbb qword ptr [r23 + r24], 4096
    __ sbbq(Address(r24, r25), 4096);                  //    sbb qword ptr [r24 + r25], 4096
    __ sbbq(Address(r25, r26), 4096);                  //    sbb qword ptr [r25 + r26], 4096
    __ sbbq(Address(r26, r27), 4096);                  //    sbb qword ptr [r26 + r27], 4096
    __ sbbq(Address(r27, r28), 4096);                  //    sbb qword ptr [r27 + r28], 4096
    __ sbbq(Address(r28, r29), 4096);                  //    sbb qword ptr [r28 + r29], 4096
    __ sbbq(Address(r29, r30), 4096);                  //    sbb qword ptr [r29 + r30], 4096
    __ sbbq(Address(r30, r31), 4096);                  //    sbb qword ptr [r30 + r31], 4096
    __ sbbq(Address(r31, rcx), 4096);                  //    sbb qword ptr [r31 + rcx], 4096
    __ sbbq(Address(rcx, rdx), 65536);                 //    sbb qword ptr [rcx + rdx], 65536
    __ sbbq(Address(rdx, rbx), 65536);                 //    sbb qword ptr [rdx + rbx], 65536
    __ sbbq(Address(rbx, r8), 65536);                  //    sbb qword ptr [rbx + r8], 65536
    __ sbbq(Address(r8, r9), 65536);                   //    sbb qword ptr [r8 + r9], 65536
    __ sbbq(Address(r9, r10), 65536);                  //    sbb qword ptr [r9 + r10], 65536
    __ sbbq(Address(r10, r11), 65536);                 //    sbb qword ptr [r10 + r11], 65536
    __ sbbq(Address(r11, r12), 65536);                 //    sbb qword ptr [r11 + r12], 65536
    __ sbbq(Address(r12, r13), 65536);                 //    sbb qword ptr [r12 + r13], 65536
    __ sbbq(Address(r13, r14), 65536);                 //    sbb qword ptr [r13 + r14], 65536
    __ sbbq(Address(r14, r15), 65536);                 //    sbb qword ptr [r14 + r15], 65536
    __ sbbq(Address(r15, r16), 65536);                 //    sbb qword ptr [r15 + r16], 65536
    __ sbbq(Address(r16, r17), 65536);                 //    sbb qword ptr [r16 + r17], 65536
    __ sbbq(Address(r17, r18), 65536);                 //    sbb qword ptr [r17 + r18], 65536
    __ sbbq(Address(r18, r19), 65536);                 //    sbb qword ptr [r18 + r19], 65536
    __ sbbq(Address(r19, r20), 65536);                 //    sbb qword ptr [r19 + r20], 65536
    __ sbbq(Address(r20, r21), 65536);                 //    sbb qword ptr [r20 + r21], 65536
    __ sbbq(Address(r21, r22), 65536);                 //    sbb qword ptr [r21 + r22], 65536
    __ sbbq(Address(r22, r23), 65536);                 //    sbb qword ptr [r22 + r23], 65536
    __ sbbq(Address(r23, r24), 65536);                 //    sbb qword ptr [r23 + r24], 65536
    __ sbbq(Address(r24, r25), 65536);                 //    sbb qword ptr [r24 + r25], 65536
    __ sbbq(Address(r25, r26), 65536);                 //    sbb qword ptr [r25 + r26], 65536
    __ sbbq(Address(r26, r27), 65536);                 //    sbb qword ptr [r26 + r27], 65536
    __ sbbq(Address(r27, r28), 65536);                 //    sbb qword ptr [r27 + r28], 65536
    __ sbbq(Address(r28, r29), 65536);                 //    sbb qword ptr [r28 + r29], 65536
    __ sbbq(Address(r29, r30), 65536);                 //    sbb qword ptr [r29 + r30], 65536
    __ sbbq(Address(r30, r31), 65536);                 //    sbb qword ptr [r30 + r31], 65536
    __ sbbq(Address(r31, rcx), 65536);                 //    sbb qword ptr [r31 + rcx], 65536
    __ sbbq(Address(rcx, rdx), 1048576);               //    sbb qword ptr [rcx + rdx], 1048576
    __ sbbq(Address(rdx, rbx), 1048576);               //    sbb qword ptr [rdx + rbx], 1048576
    __ sbbq(Address(rbx, r8), 1048576);                //    sbb qword ptr [rbx + r8], 1048576
    __ sbbq(Address(r8, r9), 1048576);                 //    sbb qword ptr [r8 + r9], 1048576
    __ sbbq(Address(r9, r10), 1048576);                //    sbb qword ptr [r9 + r10], 1048576
    __ sbbq(Address(r10, r11), 1048576);               //    sbb qword ptr [r10 + r11], 1048576
    __ sbbq(Address(r11, r12), 1048576);               //    sbb qword ptr [r11 + r12], 1048576
    __ sbbq(Address(r12, r13), 1048576);               //    sbb qword ptr [r12 + r13], 1048576
    __ sbbq(Address(r13, r14), 1048576);               //    sbb qword ptr [r13 + r14], 1048576
    __ sbbq(Address(r14, r15), 1048576);               //    sbb qword ptr [r14 + r15], 1048576
    __ sbbq(Address(r15, r16), 1048576);               //    sbb qword ptr [r15 + r16], 1048576
    __ sbbq(Address(r16, r17), 1048576);               //    sbb qword ptr [r16 + r17], 1048576
    __ sbbq(Address(r17, r18), 1048576);               //    sbb qword ptr [r17 + r18], 1048576
    __ sbbq(Address(r18, r19), 1048576);               //    sbb qword ptr [r18 + r19], 1048576
    __ sbbq(Address(r19, r20), 1048576);               //    sbb qword ptr [r19 + r20], 1048576
    __ sbbq(Address(r20, r21), 1048576);               //    sbb qword ptr [r20 + r21], 1048576
    __ sbbq(Address(r21, r22), 1048576);               //    sbb qword ptr [r21 + r22], 1048576
    __ sbbq(Address(r22, r23), 1048576);               //    sbb qword ptr [r22 + r23], 1048576
    __ sbbq(Address(r23, r24), 1048576);               //    sbb qword ptr [r23 + r24], 1048576
    __ sbbq(Address(r24, r25), 1048576);               //    sbb qword ptr [r24 + r25], 1048576
    __ sbbq(Address(r25, r26), 1048576);               //    sbb qword ptr [r25 + r26], 1048576
    __ sbbq(Address(r26, r27), 1048576);               //    sbb qword ptr [r26 + r27], 1048576
    __ sbbq(Address(r27, r28), 1048576);               //    sbb qword ptr [r27 + r28], 1048576
    __ sbbq(Address(r28, r29), 1048576);               //    sbb qword ptr [r28 + r29], 1048576
    __ sbbq(Address(r29, r30), 1048576);               //    sbb qword ptr [r29 + r30], 1048576
    __ sbbq(Address(r30, r31), 1048576);               //    sbb qword ptr [r30 + r31], 1048576
    __ sbbq(Address(r31, rcx), 1048576);               //    sbb qword ptr [r31 + rcx], 1048576
    __ sbbq(Address(rcx, rdx), 16777216);              //    sbb qword ptr [rcx + rdx], 16777216
    __ sbbq(Address(rdx, rbx), 16777216);              //    sbb qword ptr [rdx + rbx], 16777216
    __ sbbq(Address(rbx, r8), 16777216);               //    sbb qword ptr [rbx + r8], 16777216
    __ sbbq(Address(r8, r9), 16777216);                //    sbb qword ptr [r8 + r9], 16777216
    __ sbbq(Address(r9, r10), 16777216);               //    sbb qword ptr [r9 + r10], 16777216
    __ sbbq(Address(r10, r11), 16777216);              //    sbb qword ptr [r10 + r11], 16777216
    __ sbbq(Address(r11, r12), 16777216);              //    sbb qword ptr [r11 + r12], 16777216
    __ sbbq(Address(r12, r13), 16777216);              //    sbb qword ptr [r12 + r13], 16777216
    __ sbbq(Address(r13, r14), 16777216);              //    sbb qword ptr [r13 + r14], 16777216
    __ sbbq(Address(r14, r15), 16777216);              //    sbb qword ptr [r14 + r15], 16777216
    __ sbbq(Address(r15, r16), 16777216);              //    sbb qword ptr [r15 + r16], 16777216
    __ sbbq(Address(r16, r17), 16777216);              //    sbb qword ptr [r16 + r17], 16777216
    __ sbbq(Address(r17, r18), 16777216);              //    sbb qword ptr [r17 + r18], 16777216
    __ sbbq(Address(r18, r19), 16777216);              //    sbb qword ptr [r18 + r19], 16777216
    __ sbbq(Address(r19, r20), 16777216);              //    sbb qword ptr [r19 + r20], 16777216
    __ sbbq(Address(r20, r21), 16777216);              //    sbb qword ptr [r20 + r21], 16777216
    __ sbbq(Address(r21, r22), 16777216);              //    sbb qword ptr [r21 + r22], 16777216
    __ sbbq(Address(r22, r23), 16777216);              //    sbb qword ptr [r22 + r23], 16777216
    __ sbbq(Address(r23, r24), 16777216);              //    sbb qword ptr [r23 + r24], 16777216
    __ sbbq(Address(r24, r25), 16777216);              //    sbb qword ptr [r24 + r25], 16777216
    __ sbbq(Address(r25, r26), 16777216);              //    sbb qword ptr [r25 + r26], 16777216
    __ sbbq(Address(r26, r27), 16777216);              //    sbb qword ptr [r26 + r27], 16777216
    __ sbbq(Address(r27, r28), 16777216);              //    sbb qword ptr [r27 + r28], 16777216
    __ sbbq(Address(r28, r29), 16777216);              //    sbb qword ptr [r28 + r29], 16777216
    __ sbbq(Address(r29, r30), 16777216);              //    sbb qword ptr [r29 + r30], 16777216
    __ sbbq(Address(r30, r31), 16777216);              //    sbb qword ptr [r30 + r31], 16777216
    __ sbbq(Address(r31, rcx), 16777216);              //    sbb qword ptr [r31 + rcx], 16777216
    __ sbbq(Address(rcx, rdx), 268435456);             //    sbb qword ptr [rcx + rdx], 268435456
    __ sbbq(Address(rdx, rbx), 268435456);             //    sbb qword ptr [rdx + rbx], 268435456
    __ sbbq(Address(rbx, r8), 268435456);              //    sbb qword ptr [rbx + r8], 268435456
    __ sbbq(Address(r8, r9), 268435456);               //    sbb qword ptr [r8 + r9], 268435456
    __ sbbq(Address(r9, r10), 268435456);              //    sbb qword ptr [r9 + r10], 268435456
    __ sbbq(Address(r10, r11), 268435456);             //    sbb qword ptr [r10 + r11], 268435456
    __ sbbq(Address(r11, r12), 268435456);             //    sbb qword ptr [r11 + r12], 268435456
    __ sbbq(Address(r12, r13), 268435456);             //    sbb qword ptr [r12 + r13], 268435456
    __ sbbq(Address(r13, r14), 268435456);             //    sbb qword ptr [r13 + r14], 268435456
    __ sbbq(Address(r14, r15), 268435456);             //    sbb qword ptr [r14 + r15], 268435456
    __ sbbq(Address(r15, r16), 268435456);             //    sbb qword ptr [r15 + r16], 268435456
    __ sbbq(Address(r16, r17), 268435456);             //    sbb qword ptr [r16 + r17], 268435456
    __ sbbq(Address(r17, r18), 268435456);             //    sbb qword ptr [r17 + r18], 268435456
    __ sbbq(Address(r18, r19), 268435456);             //    sbb qword ptr [r18 + r19], 268435456
    __ sbbq(Address(r19, r20), 268435456);             //    sbb qword ptr [r19 + r20], 268435456
    __ sbbq(Address(r20, r21), 268435456);             //    sbb qword ptr [r20 + r21], 268435456
    __ sbbq(Address(r21, r22), 268435456);             //    sbb qword ptr [r21 + r22], 268435456
    __ sbbq(Address(r22, r23), 268435456);             //    sbb qword ptr [r22 + r23], 268435456
    __ sbbq(Address(r23, r24), 268435456);             //    sbb qword ptr [r23 + r24], 268435456
    __ sbbq(Address(r24, r25), 268435456);             //    sbb qword ptr [r24 + r25], 268435456
    __ sbbq(Address(r25, r26), 268435456);             //    sbb qword ptr [r25 + r26], 268435456
    __ sbbq(Address(r26, r27), 268435456);             //    sbb qword ptr [r26 + r27], 268435456
    __ sbbq(Address(r27, r28), 268435456);             //    sbb qword ptr [r27 + r28], 268435456
    __ sbbq(Address(r28, r29), 268435456);             //    sbb qword ptr [r28 + r29], 268435456
    __ sbbq(Address(r29, r30), 268435456);             //    sbb qword ptr [r29 + r30], 268435456
    __ sbbq(Address(r30, r31), 268435456);             //    sbb qword ptr [r30 + r31], 268435456
    __ sbbq(Address(r31, rcx), 268435456);             //    sbb qword ptr [r31 + rcx], 268435456
    __ shrq(Address(rcx, rdx), 1);                     //    shr qword ptr [rcx + rdx], 1
    __ shrq(Address(rdx, rbx), 1);                     //    shr qword ptr [rdx + rbx], 1
    __ shrq(Address(rbx, r8), 1);                      //    shr qword ptr [rbx + r8], 1
    __ shrq(Address(r8, r9), 1);                       //    shr qword ptr [r8 + r9], 1
    __ shrq(Address(r9, r10), 1);                      //    shr qword ptr [r9 + r10], 1
    __ shrq(Address(r10, r11), 1);                     //    shr qword ptr [r10 + r11], 1
    __ shrq(Address(r11, r12), 1);                     //    shr qword ptr [r11 + r12], 1
    __ shrq(Address(r12, r13), 1);                     //    shr qword ptr [r12 + r13], 1
    __ shrq(Address(r13, r14), 1);                     //    shr qword ptr [r13 + r14], 1
    __ shrq(Address(r14, r15), 1);                     //    shr qword ptr [r14 + r15], 1
    __ shrq(Address(r15, r16), 1);                     //    shr qword ptr [r15 + r16], 1
    __ shrq(Address(r16, r17), 1);                     //    shr qword ptr [r16 + r17], 1
    __ shrq(Address(r17, r18), 1);                     //    shr qword ptr [r17 + r18], 1
    __ shrq(Address(r18, r19), 1);                     //    shr qword ptr [r18 + r19], 1
    __ shrq(Address(r19, r20), 1);                     //    shr qword ptr [r19 + r20], 1
    __ shrq(Address(r20, r21), 1);                     //    shr qword ptr [r20 + r21], 1
    __ shrq(Address(r21, r22), 1);                     //    shr qword ptr [r21 + r22], 1
    __ shrq(Address(r22, r23), 1);                     //    shr qword ptr [r22 + r23], 1
    __ shrq(Address(r23, r24), 1);                     //    shr qword ptr [r23 + r24], 1
    __ shrq(Address(r24, r25), 1);                     //    shr qword ptr [r24 + r25], 1
    __ shrq(Address(r25, r26), 1);                     //    shr qword ptr [r25 + r26], 1
    __ shrq(Address(r26, r27), 1);                     //    shr qword ptr [r26 + r27], 1
    __ shrq(Address(r27, r28), 1);                     //    shr qword ptr [r27 + r28], 1
    __ shrq(Address(r28, r29), 1);                     //    shr qword ptr [r28 + r29], 1
    __ shrq(Address(r29, r30), 1);                     //    shr qword ptr [r29 + r30], 1
    __ shrq(Address(r30, r31), 1);                     //    shr qword ptr [r30 + r31], 1
    __ shrq(Address(r31, rcx), 1);                     //    shr qword ptr [r31 + rcx], 1
    __ shrq(Address(rcx, rdx), 2);                     //    shr qword ptr [rcx + rdx], 2
    __ shrq(Address(rdx, rbx), 2);                     //    shr qword ptr [rdx + rbx], 2
    __ shrq(Address(rbx, r8), 2);                      //    shr qword ptr [rbx + r8], 2
    __ shrq(Address(r8, r9), 2);                       //    shr qword ptr [r8 + r9], 2
    __ shrq(Address(r9, r10), 2);                      //    shr qword ptr [r9 + r10], 2
    __ shrq(Address(r10, r11), 2);                     //    shr qword ptr [r10 + r11], 2
    __ shrq(Address(r11, r12), 2);                     //    shr qword ptr [r11 + r12], 2
    __ shrq(Address(r12, r13), 2);                     //    shr qword ptr [r12 + r13], 2
    __ shrq(Address(r13, r14), 2);                     //    shr qword ptr [r13 + r14], 2
    __ shrq(Address(r14, r15), 2);                     //    shr qword ptr [r14 + r15], 2
    __ shrq(Address(r15, r16), 2);                     //    shr qword ptr [r15 + r16], 2
    __ shrq(Address(r16, r17), 2);                     //    shr qword ptr [r16 + r17], 2
    __ shrq(Address(r17, r18), 2);                     //    shr qword ptr [r17 + r18], 2
    __ shrq(Address(r18, r19), 2);                     //    shr qword ptr [r18 + r19], 2
    __ shrq(Address(r19, r20), 2);                     //    shr qword ptr [r19 + r20], 2
    __ shrq(Address(r20, r21), 2);                     //    shr qword ptr [r20 + r21], 2
    __ shrq(Address(r21, r22), 2);                     //    shr qword ptr [r21 + r22], 2
    __ shrq(Address(r22, r23), 2);                     //    shr qword ptr [r22 + r23], 2
    __ shrq(Address(r23, r24), 2);                     //    shr qword ptr [r23 + r24], 2
    __ shrq(Address(r24, r25), 2);                     //    shr qword ptr [r24 + r25], 2
    __ shrq(Address(r25, r26), 2);                     //    shr qword ptr [r25 + r26], 2
    __ shrq(Address(r26, r27), 2);                     //    shr qword ptr [r26 + r27], 2
    __ shrq(Address(r27, r28), 2);                     //    shr qword ptr [r27 + r28], 2
    __ shrq(Address(r28, r29), 2);                     //    shr qword ptr [r28 + r29], 2
    __ shrq(Address(r29, r30), 2);                     //    shr qword ptr [r29 + r30], 2
    __ shrq(Address(r30, r31), 2);                     //    shr qword ptr [r30 + r31], 2
    __ shrq(Address(r31, rcx), 2);                     //    shr qword ptr [r31 + rcx], 2
    __ shrq(Address(rcx, rdx), 4);                     //    shr qword ptr [rcx + rdx], 4
    __ shrq(Address(rdx, rbx), 4);                     //    shr qword ptr [rdx + rbx], 4
    __ shrq(Address(rbx, r8), 4);                      //    shr qword ptr [rbx + r8], 4
    __ shrq(Address(r8, r9), 4);                       //    shr qword ptr [r8 + r9], 4
    __ shrq(Address(r9, r10), 4);                      //    shr qword ptr [r9 + r10], 4
    __ shrq(Address(r10, r11), 4);                     //    shr qword ptr [r10 + r11], 4
    __ shrq(Address(r11, r12), 4);                     //    shr qword ptr [r11 + r12], 4
    __ shrq(Address(r12, r13), 4);                     //    shr qword ptr [r12 + r13], 4
    __ shrq(Address(r13, r14), 4);                     //    shr qword ptr [r13 + r14], 4
    __ shrq(Address(r14, r15), 4);                     //    shr qword ptr [r14 + r15], 4
    __ shrq(Address(r15, r16), 4);                     //    shr qword ptr [r15 + r16], 4
    __ shrq(Address(r16, r17), 4);                     //    shr qword ptr [r16 + r17], 4
    __ shrq(Address(r17, r18), 4);                     //    shr qword ptr [r17 + r18], 4
    __ shrq(Address(r18, r19), 4);                     //    shr qword ptr [r18 + r19], 4
    __ shrq(Address(r19, r20), 4);                     //    shr qword ptr [r19 + r20], 4
    __ shrq(Address(r20, r21), 4);                     //    shr qword ptr [r20 + r21], 4
    __ shrq(Address(r21, r22), 4);                     //    shr qword ptr [r21 + r22], 4
    __ shrq(Address(r22, r23), 4);                     //    shr qword ptr [r22 + r23], 4
    __ shrq(Address(r23, r24), 4);                     //    shr qword ptr [r23 + r24], 4
    __ shrq(Address(r24, r25), 4);                     //    shr qword ptr [r24 + r25], 4
    __ shrq(Address(r25, r26), 4);                     //    shr qword ptr [r25 + r26], 4
    __ shrq(Address(r26, r27), 4);                     //    shr qword ptr [r26 + r27], 4
    __ shrq(Address(r27, r28), 4);                     //    shr qword ptr [r27 + r28], 4
    __ shrq(Address(r28, r29), 4);                     //    shr qword ptr [r28 + r29], 4
    __ shrq(Address(r29, r30), 4);                     //    shr qword ptr [r29 + r30], 4
    __ shrq(Address(r30, r31), 4);                     //    shr qword ptr [r30 + r31], 4
    __ shrq(Address(r31, rcx), 4);                     //    shr qword ptr [r31 + rcx], 4
    __ shrq(Address(rcx, rdx), 8);                     //    shr qword ptr [rcx + rdx], 8
    __ shrq(Address(rdx, rbx), 8);                     //    shr qword ptr [rdx + rbx], 8
    __ shrq(Address(rbx, r8), 8);                      //    shr qword ptr [rbx + r8], 8
    __ shrq(Address(r8, r9), 8);                       //    shr qword ptr [r8 + r9], 8
    __ shrq(Address(r9, r10), 8);                      //    shr qword ptr [r9 + r10], 8
    __ shrq(Address(r10, r11), 8);                     //    shr qword ptr [r10 + r11], 8
    __ shrq(Address(r11, r12), 8);                     //    shr qword ptr [r11 + r12], 8
    __ shrq(Address(r12, r13), 8);                     //    shr qword ptr [r12 + r13], 8
    __ shrq(Address(r13, r14), 8);                     //    shr qword ptr [r13 + r14], 8
    __ shrq(Address(r14, r15), 8);                     //    shr qword ptr [r14 + r15], 8
    __ shrq(Address(r15, r16), 8);                     //    shr qword ptr [r15 + r16], 8
    __ shrq(Address(r16, r17), 8);                     //    shr qword ptr [r16 + r17], 8
    __ shrq(Address(r17, r18), 8);                     //    shr qword ptr [r17 + r18], 8
    __ shrq(Address(r18, r19), 8);                     //    shr qword ptr [r18 + r19], 8
    __ shrq(Address(r19, r20), 8);                     //    shr qword ptr [r19 + r20], 8
    __ shrq(Address(r20, r21), 8);                     //    shr qword ptr [r20 + r21], 8
    __ shrq(Address(r21, r22), 8);                     //    shr qword ptr [r21 + r22], 8
    __ shrq(Address(r22, r23), 8);                     //    shr qword ptr [r22 + r23], 8
    __ shrq(Address(r23, r24), 8);                     //    shr qword ptr [r23 + r24], 8
    __ shrq(Address(r24, r25), 8);                     //    shr qword ptr [r24 + r25], 8
    __ shrq(Address(r25, r26), 8);                     //    shr qword ptr [r25 + r26], 8
    __ shrq(Address(r26, r27), 8);                     //    shr qword ptr [r26 + r27], 8
    __ shrq(Address(r27, r28), 8);                     //    shr qword ptr [r27 + r28], 8
    __ shrq(Address(r28, r29), 8);                     //    shr qword ptr [r28 + r29], 8
    __ shrq(Address(r29, r30), 8);                     //    shr qword ptr [r29 + r30], 8
    __ shrq(Address(r30, r31), 8);                     //    shr qword ptr [r30 + r31], 8
    __ shrq(Address(r31, rcx), 8);                     //    shr qword ptr [r31 + rcx], 8
    __ shrq(Address(rcx, rdx), 16);                    //    shr qword ptr [rcx + rdx], 16
    __ shrq(Address(rdx, rbx), 16);                    //    shr qword ptr [rdx + rbx], 16
    __ shrq(Address(rbx, r8), 16);                     //    shr qword ptr [rbx + r8], 16
    __ shrq(Address(r8, r9), 16);                      //    shr qword ptr [r8 + r9], 16
    __ shrq(Address(r9, r10), 16);                     //    shr qword ptr [r9 + r10], 16
    __ shrq(Address(r10, r11), 16);                    //    shr qword ptr [r10 + r11], 16
    __ shrq(Address(r11, r12), 16);                    //    shr qword ptr [r11 + r12], 16
    __ shrq(Address(r12, r13), 16);                    //    shr qword ptr [r12 + r13], 16
    __ shrq(Address(r13, r14), 16);                    //    shr qword ptr [r13 + r14], 16
    __ shrq(Address(r14, r15), 16);                    //    shr qword ptr [r14 + r15], 16
    __ shrq(Address(r15, r16), 16);                    //    shr qword ptr [r15 + r16], 16
    __ shrq(Address(r16, r17), 16);                    //    shr qword ptr [r16 + r17], 16
    __ shrq(Address(r17, r18), 16);                    //    shr qword ptr [r17 + r18], 16
    __ shrq(Address(r18, r19), 16);                    //    shr qword ptr [r18 + r19], 16
    __ shrq(Address(r19, r20), 16);                    //    shr qword ptr [r19 + r20], 16
    __ shrq(Address(r20, r21), 16);                    //    shr qword ptr [r20 + r21], 16
    __ shrq(Address(r21, r22), 16);                    //    shr qword ptr [r21 + r22], 16
    __ shrq(Address(r22, r23), 16);                    //    shr qword ptr [r22 + r23], 16
    __ shrq(Address(r23, r24), 16);                    //    shr qword ptr [r23 + r24], 16
    __ shrq(Address(r24, r25), 16);                    //    shr qword ptr [r24 + r25], 16
    __ shrq(Address(r25, r26), 16);                    //    shr qword ptr [r25 + r26], 16
    __ shrq(Address(r26, r27), 16);                    //    shr qword ptr [r26 + r27], 16
    __ shrq(Address(r27, r28), 16);                    //    shr qword ptr [r27 + r28], 16
    __ shrq(Address(r28, r29), 16);                    //    shr qword ptr [r28 + r29], 16
    __ shrq(Address(r29, r30), 16);                    //    shr qword ptr [r29 + r30], 16
    __ shrq(Address(r30, r31), 16);                    //    shr qword ptr [r30 + r31], 16
    __ shrq(Address(r31, rcx), 16);                    //    shr qword ptr [r31 + rcx], 16
    __ subq(Address(rcx, rdx), 1);                     //    sub qword ptr [rcx + rdx], 1
    __ subq(Address(rdx, rbx), 1);                     //    sub qword ptr [rdx + rbx], 1
    __ subq(Address(rbx, r8), 1);                      //    sub qword ptr [rbx + r8], 1
    __ subq(Address(r8, r9), 1);                       //    sub qword ptr [r8 + r9], 1
    __ subq(Address(r9, r10), 1);                      //    sub qword ptr [r9 + r10], 1
    __ subq(Address(r10, r11), 1);                     //    sub qword ptr [r10 + r11], 1
    __ subq(Address(r11, r12), 1);                     //    sub qword ptr [r11 + r12], 1
    __ subq(Address(r12, r13), 1);                     //    sub qword ptr [r12 + r13], 1
    __ subq(Address(r13, r14), 1);                     //    sub qword ptr [r13 + r14], 1
    __ subq(Address(r14, r15), 1);                     //    sub qword ptr [r14 + r15], 1
    __ subq(Address(r15, r16), 1);                     //    sub qword ptr [r15 + r16], 1
    __ subq(Address(r16, r17), 1);                     //    sub qword ptr [r16 + r17], 1
    __ subq(Address(r17, r18), 1);                     //    sub qword ptr [r17 + r18], 1
    __ subq(Address(r18, r19), 1);                     //    sub qword ptr [r18 + r19], 1
    __ subq(Address(r19, r20), 1);                     //    sub qword ptr [r19 + r20], 1
    __ subq(Address(r20, r21), 1);                     //    sub qword ptr [r20 + r21], 1
    __ subq(Address(r21, r22), 1);                     //    sub qword ptr [r21 + r22], 1
    __ subq(Address(r22, r23), 1);                     //    sub qword ptr [r22 + r23], 1
    __ subq(Address(r23, r24), 1);                     //    sub qword ptr [r23 + r24], 1
    __ subq(Address(r24, r25), 1);                     //    sub qword ptr [r24 + r25], 1
    __ subq(Address(r25, r26), 1);                     //    sub qword ptr [r25 + r26], 1
    __ subq(Address(r26, r27), 1);                     //    sub qword ptr [r26 + r27], 1
    __ subq(Address(r27, r28), 1);                     //    sub qword ptr [r27 + r28], 1
    __ subq(Address(r28, r29), 1);                     //    sub qword ptr [r28 + r29], 1
    __ subq(Address(r29, r30), 1);                     //    sub qword ptr [r29 + r30], 1
    __ subq(Address(r30, r31), 1);                     //    sub qword ptr [r30 + r31], 1
    __ subq(Address(r31, rcx), 1);                     //    sub qword ptr [r31 + rcx], 1
    __ subq(Address(rcx, rdx), 16);                    //    sub qword ptr [rcx + rdx], 16
    __ subq(Address(rdx, rbx), 16);                    //    sub qword ptr [rdx + rbx], 16
    __ subq(Address(rbx, r8), 16);                     //    sub qword ptr [rbx + r8], 16
    __ subq(Address(r8, r9), 16);                      //    sub qword ptr [r8 + r9], 16
    __ subq(Address(r9, r10), 16);                     //    sub qword ptr [r9 + r10], 16
    __ subq(Address(r10, r11), 16);                    //    sub qword ptr [r10 + r11], 16
    __ subq(Address(r11, r12), 16);                    //    sub qword ptr [r11 + r12], 16
    __ subq(Address(r12, r13), 16);                    //    sub qword ptr [r12 + r13], 16
    __ subq(Address(r13, r14), 16);                    //    sub qword ptr [r13 + r14], 16
    __ subq(Address(r14, r15), 16);                    //    sub qword ptr [r14 + r15], 16
    __ subq(Address(r15, r16), 16);                    //    sub qword ptr [r15 + r16], 16
    __ subq(Address(r16, r17), 16);                    //    sub qword ptr [r16 + r17], 16
    __ subq(Address(r17, r18), 16);                    //    sub qword ptr [r17 + r18], 16
    __ subq(Address(r18, r19), 16);                    //    sub qword ptr [r18 + r19], 16
    __ subq(Address(r19, r20), 16);                    //    sub qword ptr [r19 + r20], 16
    __ subq(Address(r20, r21), 16);                    //    sub qword ptr [r20 + r21], 16
    __ subq(Address(r21, r22), 16);                    //    sub qword ptr [r21 + r22], 16
    __ subq(Address(r22, r23), 16);                    //    sub qword ptr [r22 + r23], 16
    __ subq(Address(r23, r24), 16);                    //    sub qword ptr [r23 + r24], 16
    __ subq(Address(r24, r25), 16);                    //    sub qword ptr [r24 + r25], 16
    __ subq(Address(r25, r26), 16);                    //    sub qword ptr [r25 + r26], 16
    __ subq(Address(r26, r27), 16);                    //    sub qword ptr [r26 + r27], 16
    __ subq(Address(r27, r28), 16);                    //    sub qword ptr [r27 + r28], 16
    __ subq(Address(r28, r29), 16);                    //    sub qword ptr [r28 + r29], 16
    __ subq(Address(r29, r30), 16);                    //    sub qword ptr [r29 + r30], 16
    __ subq(Address(r30, r31), 16);                    //    sub qword ptr [r30 + r31], 16
    __ subq(Address(r31, rcx), 16);                    //    sub qword ptr [r31 + rcx], 16
    __ subq(Address(rcx, rdx), 256);                   //    sub qword ptr [rcx + rdx], 256
    __ subq(Address(rdx, rbx), 256);                   //    sub qword ptr [rdx + rbx], 256
    __ subq(Address(rbx, r8), 256);                    //    sub qword ptr [rbx + r8], 256
    __ subq(Address(r8, r9), 256);                     //    sub qword ptr [r8 + r9], 256
    __ subq(Address(r9, r10), 256);                    //    sub qword ptr [r9 + r10], 256
    __ subq(Address(r10, r11), 256);                   //    sub qword ptr [r10 + r11], 256
    __ subq(Address(r11, r12), 256);                   //    sub qword ptr [r11 + r12], 256
    __ subq(Address(r12, r13), 256);                   //    sub qword ptr [r12 + r13], 256
    __ subq(Address(r13, r14), 256);                   //    sub qword ptr [r13 + r14], 256
    __ subq(Address(r14, r15), 256);                   //    sub qword ptr [r14 + r15], 256
    __ subq(Address(r15, r16), 256);                   //    sub qword ptr [r15 + r16], 256
    __ subq(Address(r16, r17), 256);                   //    sub qword ptr [r16 + r17], 256
    __ subq(Address(r17, r18), 256);                   //    sub qword ptr [r17 + r18], 256
    __ subq(Address(r18, r19), 256);                   //    sub qword ptr [r18 + r19], 256
    __ subq(Address(r19, r20), 256);                   //    sub qword ptr [r19 + r20], 256
    __ subq(Address(r20, r21), 256);                   //    sub qword ptr [r20 + r21], 256
    __ subq(Address(r21, r22), 256);                   //    sub qword ptr [r21 + r22], 256
    __ subq(Address(r22, r23), 256);                   //    sub qword ptr [r22 + r23], 256
    __ subq(Address(r23, r24), 256);                   //    sub qword ptr [r23 + r24], 256
    __ subq(Address(r24, r25), 256);                   //    sub qword ptr [r24 + r25], 256
    __ subq(Address(r25, r26), 256);                   //    sub qword ptr [r25 + r26], 256
    __ subq(Address(r26, r27), 256);                   //    sub qword ptr [r26 + r27], 256
    __ subq(Address(r27, r28), 256);                   //    sub qword ptr [r27 + r28], 256
    __ subq(Address(r28, r29), 256);                   //    sub qword ptr [r28 + r29], 256
    __ subq(Address(r29, r30), 256);                   //    sub qword ptr [r29 + r30], 256
    __ subq(Address(r30, r31), 256);                   //    sub qword ptr [r30 + r31], 256
    __ subq(Address(r31, rcx), 256);                   //    sub qword ptr [r31 + rcx], 256
    __ subq(Address(rcx, rdx), 4096);                  //    sub qword ptr [rcx + rdx], 4096
    __ subq(Address(rdx, rbx), 4096);                  //    sub qword ptr [rdx + rbx], 4096
    __ subq(Address(rbx, r8), 4096);                   //    sub qword ptr [rbx + r8], 4096
    __ subq(Address(r8, r9), 4096);                    //    sub qword ptr [r8 + r9], 4096
    __ subq(Address(r9, r10), 4096);                   //    sub qword ptr [r9 + r10], 4096
    __ subq(Address(r10, r11), 4096);                  //    sub qword ptr [r10 + r11], 4096
    __ subq(Address(r11, r12), 4096);                  //    sub qword ptr [r11 + r12], 4096
    __ subq(Address(r12, r13), 4096);                  //    sub qword ptr [r12 + r13], 4096
    __ subq(Address(r13, r14), 4096);                  //    sub qword ptr [r13 + r14], 4096
    __ subq(Address(r14, r15), 4096);                  //    sub qword ptr [r14 + r15], 4096
    __ subq(Address(r15, r16), 4096);                  //    sub qword ptr [r15 + r16], 4096
    __ subq(Address(r16, r17), 4096);                  //    sub qword ptr [r16 + r17], 4096
    __ subq(Address(r17, r18), 4096);                  //    sub qword ptr [r17 + r18], 4096
    __ subq(Address(r18, r19), 4096);                  //    sub qword ptr [r18 + r19], 4096
    __ subq(Address(r19, r20), 4096);                  //    sub qword ptr [r19 + r20], 4096
    __ subq(Address(r20, r21), 4096);                  //    sub qword ptr [r20 + r21], 4096
    __ subq(Address(r21, r22), 4096);                  //    sub qword ptr [r21 + r22], 4096
    __ subq(Address(r22, r23), 4096);                  //    sub qword ptr [r22 + r23], 4096
    __ subq(Address(r23, r24), 4096);                  //    sub qword ptr [r23 + r24], 4096
    __ subq(Address(r24, r25), 4096);                  //    sub qword ptr [r24 + r25], 4096
    __ subq(Address(r25, r26), 4096);                  //    sub qword ptr [r25 + r26], 4096
    __ subq(Address(r26, r27), 4096);                  //    sub qword ptr [r26 + r27], 4096
    __ subq(Address(r27, r28), 4096);                  //    sub qword ptr [r27 + r28], 4096
    __ subq(Address(r28, r29), 4096);                  //    sub qword ptr [r28 + r29], 4096
    __ subq(Address(r29, r30), 4096);                  //    sub qword ptr [r29 + r30], 4096
    __ subq(Address(r30, r31), 4096);                  //    sub qword ptr [r30 + r31], 4096
    __ subq(Address(r31, rcx), 4096);                  //    sub qword ptr [r31 + rcx], 4096
    __ subq(Address(rcx, rdx), 65536);                 //    sub qword ptr [rcx + rdx], 65536
    __ subq(Address(rdx, rbx), 65536);                 //    sub qword ptr [rdx + rbx], 65536
    __ subq(Address(rbx, r8), 65536);                  //    sub qword ptr [rbx + r8], 65536
    __ subq(Address(r8, r9), 65536);                   //    sub qword ptr [r8 + r9], 65536
    __ subq(Address(r9, r10), 65536);                  //    sub qword ptr [r9 + r10], 65536
    __ subq(Address(r10, r11), 65536);                 //    sub qword ptr [r10 + r11], 65536
    __ subq(Address(r11, r12), 65536);                 //    sub qword ptr [r11 + r12], 65536
    __ subq(Address(r12, r13), 65536);                 //    sub qword ptr [r12 + r13], 65536
    __ subq(Address(r13, r14), 65536);                 //    sub qword ptr [r13 + r14], 65536
    __ subq(Address(r14, r15), 65536);                 //    sub qword ptr [r14 + r15], 65536
    __ subq(Address(r15, r16), 65536);                 //    sub qword ptr [r15 + r16], 65536
    __ subq(Address(r16, r17), 65536);                 //    sub qword ptr [r16 + r17], 65536
    __ subq(Address(r17, r18), 65536);                 //    sub qword ptr [r17 + r18], 65536
    __ subq(Address(r18, r19), 65536);                 //    sub qword ptr [r18 + r19], 65536
    __ subq(Address(r19, r20), 65536);                 //    sub qword ptr [r19 + r20], 65536
    __ subq(Address(r20, r21), 65536);                 //    sub qword ptr [r20 + r21], 65536
    __ subq(Address(r21, r22), 65536);                 //    sub qword ptr [r21 + r22], 65536
    __ subq(Address(r22, r23), 65536);                 //    sub qword ptr [r22 + r23], 65536
    __ subq(Address(r23, r24), 65536);                 //    sub qword ptr [r23 + r24], 65536
    __ subq(Address(r24, r25), 65536);                 //    sub qword ptr [r24 + r25], 65536
    __ subq(Address(r25, r26), 65536);                 //    sub qword ptr [r25 + r26], 65536
    __ subq(Address(r26, r27), 65536);                 //    sub qword ptr [r26 + r27], 65536
    __ subq(Address(r27, r28), 65536);                 //    sub qword ptr [r27 + r28], 65536
    __ subq(Address(r28, r29), 65536);                 //    sub qword ptr [r28 + r29], 65536
    __ subq(Address(r29, r30), 65536);                 //    sub qword ptr [r29 + r30], 65536
    __ subq(Address(r30, r31), 65536);                 //    sub qword ptr [r30 + r31], 65536
    __ subq(Address(r31, rcx), 65536);                 //    sub qword ptr [r31 + rcx], 65536
    __ subq(Address(rcx, rdx), 1048576);               //    sub qword ptr [rcx + rdx], 1048576
    __ subq(Address(rdx, rbx), 1048576);               //    sub qword ptr [rdx + rbx], 1048576
    __ subq(Address(rbx, r8), 1048576);                //    sub qword ptr [rbx + r8], 1048576
    __ subq(Address(r8, r9), 1048576);                 //    sub qword ptr [r8 + r9], 1048576
    __ subq(Address(r9, r10), 1048576);                //    sub qword ptr [r9 + r10], 1048576
    __ subq(Address(r10, r11), 1048576);               //    sub qword ptr [r10 + r11], 1048576
    __ subq(Address(r11, r12), 1048576);               //    sub qword ptr [r11 + r12], 1048576
    __ subq(Address(r12, r13), 1048576);               //    sub qword ptr [r12 + r13], 1048576
    __ subq(Address(r13, r14), 1048576);               //    sub qword ptr [r13 + r14], 1048576
    __ subq(Address(r14, r15), 1048576);               //    sub qword ptr [r14 + r15], 1048576
    __ subq(Address(r15, r16), 1048576);               //    sub qword ptr [r15 + r16], 1048576
    __ subq(Address(r16, r17), 1048576);               //    sub qword ptr [r16 + r17], 1048576
    __ subq(Address(r17, r18), 1048576);               //    sub qword ptr [r17 + r18], 1048576
    __ subq(Address(r18, r19), 1048576);               //    sub qword ptr [r18 + r19], 1048576
    __ subq(Address(r19, r20), 1048576);               //    sub qword ptr [r19 + r20], 1048576
    __ subq(Address(r20, r21), 1048576);               //    sub qword ptr [r20 + r21], 1048576
    __ subq(Address(r21, r22), 1048576);               //    sub qword ptr [r21 + r22], 1048576
    __ subq(Address(r22, r23), 1048576);               //    sub qword ptr [r22 + r23], 1048576
    __ subq(Address(r23, r24), 1048576);               //    sub qword ptr [r23 + r24], 1048576
    __ subq(Address(r24, r25), 1048576);               //    sub qword ptr [r24 + r25], 1048576
    __ subq(Address(r25, r26), 1048576);               //    sub qword ptr [r25 + r26], 1048576
    __ subq(Address(r26, r27), 1048576);               //    sub qword ptr [r26 + r27], 1048576
    __ subq(Address(r27, r28), 1048576);               //    sub qword ptr [r27 + r28], 1048576
    __ subq(Address(r28, r29), 1048576);               //    sub qword ptr [r28 + r29], 1048576
    __ subq(Address(r29, r30), 1048576);               //    sub qword ptr [r29 + r30], 1048576
    __ subq(Address(r30, r31), 1048576);               //    sub qword ptr [r30 + r31], 1048576
    __ subq(Address(r31, rcx), 1048576);               //    sub qword ptr [r31 + rcx], 1048576
    __ subq(Address(rcx, rdx), 16777216);              //    sub qword ptr [rcx + rdx], 16777216
    __ subq(Address(rdx, rbx), 16777216);              //    sub qword ptr [rdx + rbx], 16777216
    __ subq(Address(rbx, r8), 16777216);               //    sub qword ptr [rbx + r8], 16777216
    __ subq(Address(r8, r9), 16777216);                //    sub qword ptr [r8 + r9], 16777216
    __ subq(Address(r9, r10), 16777216);               //    sub qword ptr [r9 + r10], 16777216
    __ subq(Address(r10, r11), 16777216);              //    sub qword ptr [r10 + r11], 16777216
    __ subq(Address(r11, r12), 16777216);              //    sub qword ptr [r11 + r12], 16777216
    __ subq(Address(r12, r13), 16777216);              //    sub qword ptr [r12 + r13], 16777216
    __ subq(Address(r13, r14), 16777216);              //    sub qword ptr [r13 + r14], 16777216
    __ subq(Address(r14, r15), 16777216);              //    sub qword ptr [r14 + r15], 16777216
    __ subq(Address(r15, r16), 16777216);              //    sub qword ptr [r15 + r16], 16777216
    __ subq(Address(r16, r17), 16777216);              //    sub qword ptr [r16 + r17], 16777216
    __ subq(Address(r17, r18), 16777216);              //    sub qword ptr [r17 + r18], 16777216
    __ subq(Address(r18, r19), 16777216);              //    sub qword ptr [r18 + r19], 16777216
    __ subq(Address(r19, r20), 16777216);              //    sub qword ptr [r19 + r20], 16777216
    __ subq(Address(r20, r21), 16777216);              //    sub qword ptr [r20 + r21], 16777216
    __ subq(Address(r21, r22), 16777216);              //    sub qword ptr [r21 + r22], 16777216
    __ subq(Address(r22, r23), 16777216);              //    sub qword ptr [r22 + r23], 16777216
    __ subq(Address(r23, r24), 16777216);              //    sub qword ptr [r23 + r24], 16777216
    __ subq(Address(r24, r25), 16777216);              //    sub qword ptr [r24 + r25], 16777216
    __ subq(Address(r25, r26), 16777216);              //    sub qword ptr [r25 + r26], 16777216
    __ subq(Address(r26, r27), 16777216);              //    sub qword ptr [r26 + r27], 16777216
    __ subq(Address(r27, r28), 16777216);              //    sub qword ptr [r27 + r28], 16777216
    __ subq(Address(r28, r29), 16777216);              //    sub qword ptr [r28 + r29], 16777216
    __ subq(Address(r29, r30), 16777216);              //    sub qword ptr [r29 + r30], 16777216
    __ subq(Address(r30, r31), 16777216);              //    sub qword ptr [r30 + r31], 16777216
    __ subq(Address(r31, rcx), 16777216);              //    sub qword ptr [r31 + rcx], 16777216
    __ subq(Address(rcx, rdx), 268435456);             //    sub qword ptr [rcx + rdx], 268435456
    __ subq(Address(rdx, rbx), 268435456);             //    sub qword ptr [rdx + rbx], 268435456
    __ subq(Address(rbx, r8), 268435456);              //    sub qword ptr [rbx + r8], 268435456
    __ subq(Address(r8, r9), 268435456);               //    sub qword ptr [r8 + r9], 268435456
    __ subq(Address(r9, r10), 268435456);              //    sub qword ptr [r9 + r10], 268435456
    __ subq(Address(r10, r11), 268435456);             //    sub qword ptr [r10 + r11], 268435456
    __ subq(Address(r11, r12), 268435456);             //    sub qword ptr [r11 + r12], 268435456
    __ subq(Address(r12, r13), 268435456);             //    sub qword ptr [r12 + r13], 268435456
    __ subq(Address(r13, r14), 268435456);             //    sub qword ptr [r13 + r14], 268435456
    __ subq(Address(r14, r15), 268435456);             //    sub qword ptr [r14 + r15], 268435456
    __ subq(Address(r15, r16), 268435456);             //    sub qword ptr [r15 + r16], 268435456
    __ subq(Address(r16, r17), 268435456);             //    sub qword ptr [r16 + r17], 268435456
    __ subq(Address(r17, r18), 268435456);             //    sub qword ptr [r17 + r18], 268435456
    __ subq(Address(r18, r19), 268435456);             //    sub qword ptr [r18 + r19], 268435456
    __ subq(Address(r19, r20), 268435456);             //    sub qword ptr [r19 + r20], 268435456
    __ subq(Address(r20, r21), 268435456);             //    sub qword ptr [r20 + r21], 268435456
    __ subq(Address(r21, r22), 268435456);             //    sub qword ptr [r21 + r22], 268435456
    __ subq(Address(r22, r23), 268435456);             //    sub qword ptr [r22 + r23], 268435456
    __ subq(Address(r23, r24), 268435456);             //    sub qword ptr [r23 + r24], 268435456
    __ subq(Address(r24, r25), 268435456);             //    sub qword ptr [r24 + r25], 268435456
    __ subq(Address(r25, r26), 268435456);             //    sub qword ptr [r25 + r26], 268435456
    __ subq(Address(r26, r27), 268435456);             //    sub qword ptr [r26 + r27], 268435456
    __ subq(Address(r27, r28), 268435456);             //    sub qword ptr [r27 + r28], 268435456
    __ subq(Address(r28, r29), 268435456);             //    sub qword ptr [r28 + r29], 268435456
    __ subq(Address(r29, r30), 268435456);             //    sub qword ptr [r29 + r30], 268435456
    __ subq(Address(r30, r31), 268435456);             //    sub qword ptr [r30 + r31], 268435456
    __ subq(Address(r31, rcx), 268435456);             //    sub qword ptr [r31 + rcx], 268435456
    __ xorq(Address(rcx, rdx), 1);                     //    xor qword ptr [rcx + rdx], 1
    __ xorq(Address(rdx, rbx), 1);                     //    xor qword ptr [rdx + rbx], 1
    __ xorq(Address(rbx, r8), 1);                      //    xor qword ptr [rbx + r8], 1
    __ xorq(Address(r8, r9), 1);                       //    xor qword ptr [r8 + r9], 1
    __ xorq(Address(r9, r10), 1);                      //    xor qword ptr [r9 + r10], 1
    __ xorq(Address(r10, r11), 1);                     //    xor qword ptr [r10 + r11], 1
    __ xorq(Address(r11, r12), 1);                     //    xor qword ptr [r11 + r12], 1
    __ xorq(Address(r12, r13), 1);                     //    xor qword ptr [r12 + r13], 1
    __ xorq(Address(r13, r14), 1);                     //    xor qword ptr [r13 + r14], 1
    __ xorq(Address(r14, r15), 1);                     //    xor qword ptr [r14 + r15], 1
    __ xorq(Address(r15, r16), 1);                     //    xor qword ptr [r15 + r16], 1
    __ xorq(Address(r16, r17), 1);                     //    xor qword ptr [r16 + r17], 1
    __ xorq(Address(r17, r18), 1);                     //    xor qword ptr [r17 + r18], 1
    __ xorq(Address(r18, r19), 1);                     //    xor qword ptr [r18 + r19], 1
    __ xorq(Address(r19, r20), 1);                     //    xor qword ptr [r19 + r20], 1
    __ xorq(Address(r20, r21), 1);                     //    xor qword ptr [r20 + r21], 1
    __ xorq(Address(r21, r22), 1);                     //    xor qword ptr [r21 + r22], 1
    __ xorq(Address(r22, r23), 1);                     //    xor qword ptr [r22 + r23], 1
    __ xorq(Address(r23, r24), 1);                     //    xor qword ptr [r23 + r24], 1
    __ xorq(Address(r24, r25), 1);                     //    xor qword ptr [r24 + r25], 1
    __ xorq(Address(r25, r26), 1);                     //    xor qword ptr [r25 + r26], 1
    __ xorq(Address(r26, r27), 1);                     //    xor qword ptr [r26 + r27], 1
    __ xorq(Address(r27, r28), 1);                     //    xor qword ptr [r27 + r28], 1
    __ xorq(Address(r28, r29), 1);                     //    xor qword ptr [r28 + r29], 1
    __ xorq(Address(r29, r30), 1);                     //    xor qword ptr [r29 + r30], 1
    __ xorq(Address(r30, r31), 1);                     //    xor qword ptr [r30 + r31], 1
    __ xorq(Address(r31, rcx), 1);                     //    xor qword ptr [r31 + rcx], 1
    __ xorq(Address(rcx, rdx), 16);                    //    xor qword ptr [rcx + rdx], 16
    __ xorq(Address(rdx, rbx), 16);                    //    xor qword ptr [rdx + rbx], 16
    __ xorq(Address(rbx, r8), 16);                     //    xor qword ptr [rbx + r8], 16
    __ xorq(Address(r8, r9), 16);                      //    xor qword ptr [r8 + r9], 16
    __ xorq(Address(r9, r10), 16);                     //    xor qword ptr [r9 + r10], 16
    __ xorq(Address(r10, r11), 16);                    //    xor qword ptr [r10 + r11], 16
    __ xorq(Address(r11, r12), 16);                    //    xor qword ptr [r11 + r12], 16
    __ xorq(Address(r12, r13), 16);                    //    xor qword ptr [r12 + r13], 16
    __ xorq(Address(r13, r14), 16);                    //    xor qword ptr [r13 + r14], 16
    __ xorq(Address(r14, r15), 16);                    //    xor qword ptr [r14 + r15], 16
    __ xorq(Address(r15, r16), 16);                    //    xor qword ptr [r15 + r16], 16
    __ xorq(Address(r16, r17), 16);                    //    xor qword ptr [r16 + r17], 16
    __ xorq(Address(r17, r18), 16);                    //    xor qword ptr [r17 + r18], 16
    __ xorq(Address(r18, r19), 16);                    //    xor qword ptr [r18 + r19], 16
    __ xorq(Address(r19, r20), 16);                    //    xor qword ptr [r19 + r20], 16
    __ xorq(Address(r20, r21), 16);                    //    xor qword ptr [r20 + r21], 16
    __ xorq(Address(r21, r22), 16);                    //    xor qword ptr [r21 + r22], 16
    __ xorq(Address(r22, r23), 16);                    //    xor qword ptr [r22 + r23], 16
    __ xorq(Address(r23, r24), 16);                    //    xor qword ptr [r23 + r24], 16
    __ xorq(Address(r24, r25), 16);                    //    xor qword ptr [r24 + r25], 16
    __ xorq(Address(r25, r26), 16);                    //    xor qword ptr [r25 + r26], 16
    __ xorq(Address(r26, r27), 16);                    //    xor qword ptr [r26 + r27], 16
    __ xorq(Address(r27, r28), 16);                    //    xor qword ptr [r27 + r28], 16
    __ xorq(Address(r28, r29), 16);                    //    xor qword ptr [r28 + r29], 16
    __ xorq(Address(r29, r30), 16);                    //    xor qword ptr [r29 + r30], 16
    __ xorq(Address(r30, r31), 16);                    //    xor qword ptr [r30 + r31], 16
    __ xorq(Address(r31, rcx), 16);                    //    xor qword ptr [r31 + rcx], 16
    __ xorq(Address(rcx, rdx), 256);                   //    xor qword ptr [rcx + rdx], 256
    __ xorq(Address(rdx, rbx), 256);                   //    xor qword ptr [rdx + rbx], 256
    __ xorq(Address(rbx, r8), 256);                    //    xor qword ptr [rbx + r8], 256
    __ xorq(Address(r8, r9), 256);                     //    xor qword ptr [r8 + r9], 256
    __ xorq(Address(r9, r10), 256);                    //    xor qword ptr [r9 + r10], 256
    __ xorq(Address(r10, r11), 256);                   //    xor qword ptr [r10 + r11], 256
    __ xorq(Address(r11, r12), 256);                   //    xor qword ptr [r11 + r12], 256
    __ xorq(Address(r12, r13), 256);                   //    xor qword ptr [r12 + r13], 256
    __ xorq(Address(r13, r14), 256);                   //    xor qword ptr [r13 + r14], 256
    __ xorq(Address(r14, r15), 256);                   //    xor qword ptr [r14 + r15], 256
    __ xorq(Address(r15, r16), 256);                   //    xor qword ptr [r15 + r16], 256
    __ xorq(Address(r16, r17), 256);                   //    xor qword ptr [r16 + r17], 256
    __ xorq(Address(r17, r18), 256);                   //    xor qword ptr [r17 + r18], 256
    __ xorq(Address(r18, r19), 256);                   //    xor qword ptr [r18 + r19], 256
    __ xorq(Address(r19, r20), 256);                   //    xor qword ptr [r19 + r20], 256
    __ xorq(Address(r20, r21), 256);                   //    xor qword ptr [r20 + r21], 256
    __ xorq(Address(r21, r22), 256);                   //    xor qword ptr [r21 + r22], 256
    __ xorq(Address(r22, r23), 256);                   //    xor qword ptr [r22 + r23], 256
    __ xorq(Address(r23, r24), 256);                   //    xor qword ptr [r23 + r24], 256
    __ xorq(Address(r24, r25), 256);                   //    xor qword ptr [r24 + r25], 256
    __ xorq(Address(r25, r26), 256);                   //    xor qword ptr [r25 + r26], 256
    __ xorq(Address(r26, r27), 256);                   //    xor qword ptr [r26 + r27], 256
    __ xorq(Address(r27, r28), 256);                   //    xor qword ptr [r27 + r28], 256
    __ xorq(Address(r28, r29), 256);                   //    xor qword ptr [r28 + r29], 256
    __ xorq(Address(r29, r30), 256);                   //    xor qword ptr [r29 + r30], 256
    __ xorq(Address(r30, r31), 256);                   //    xor qword ptr [r30 + r31], 256
    __ xorq(Address(r31, rcx), 256);                   //    xor qword ptr [r31 + rcx], 256
    __ xorq(Address(rcx, rdx), 4096);                  //    xor qword ptr [rcx + rdx], 4096
    __ xorq(Address(rdx, rbx), 4096);                  //    xor qword ptr [rdx + rbx], 4096
    __ xorq(Address(rbx, r8), 4096);                   //    xor qword ptr [rbx + r8], 4096
    __ xorq(Address(r8, r9), 4096);                    //    xor qword ptr [r8 + r9], 4096
    __ xorq(Address(r9, r10), 4096);                   //    xor qword ptr [r9 + r10], 4096
    __ xorq(Address(r10, r11), 4096);                  //    xor qword ptr [r10 + r11], 4096
    __ xorq(Address(r11, r12), 4096);                  //    xor qword ptr [r11 + r12], 4096
    __ xorq(Address(r12, r13), 4096);                  //    xor qword ptr [r12 + r13], 4096
    __ xorq(Address(r13, r14), 4096);                  //    xor qword ptr [r13 + r14], 4096
    __ xorq(Address(r14, r15), 4096);                  //    xor qword ptr [r14 + r15], 4096
    __ xorq(Address(r15, r16), 4096);                  //    xor qword ptr [r15 + r16], 4096
    __ xorq(Address(r16, r17), 4096);                  //    xor qword ptr [r16 + r17], 4096
    __ xorq(Address(r17, r18), 4096);                  //    xor qword ptr [r17 + r18], 4096
    __ xorq(Address(r18, r19), 4096);                  //    xor qword ptr [r18 + r19], 4096
    __ xorq(Address(r19, r20), 4096);                  //    xor qword ptr [r19 + r20], 4096
    __ xorq(Address(r20, r21), 4096);                  //    xor qword ptr [r20 + r21], 4096
    __ xorq(Address(r21, r22), 4096);                  //    xor qword ptr [r21 + r22], 4096
    __ xorq(Address(r22, r23), 4096);                  //    xor qword ptr [r22 + r23], 4096
    __ xorq(Address(r23, r24), 4096);                  //    xor qword ptr [r23 + r24], 4096
    __ xorq(Address(r24, r25), 4096);                  //    xor qword ptr [r24 + r25], 4096
    __ xorq(Address(r25, r26), 4096);                  //    xor qword ptr [r25 + r26], 4096
    __ xorq(Address(r26, r27), 4096);                  //    xor qword ptr [r26 + r27], 4096
    __ xorq(Address(r27, r28), 4096);                  //    xor qword ptr [r27 + r28], 4096
    __ xorq(Address(r28, r29), 4096);                  //    xor qword ptr [r28 + r29], 4096
    __ xorq(Address(r29, r30), 4096);                  //    xor qword ptr [r29 + r30], 4096
    __ xorq(Address(r30, r31), 4096);                  //    xor qword ptr [r30 + r31], 4096
    __ xorq(Address(r31, rcx), 4096);                  //    xor qword ptr [r31 + rcx], 4096
    __ xorq(Address(rcx, rdx), 65536);                 //    xor qword ptr [rcx + rdx], 65536
    __ xorq(Address(rdx, rbx), 65536);                 //    xor qword ptr [rdx + rbx], 65536
    __ xorq(Address(rbx, r8), 65536);                  //    xor qword ptr [rbx + r8], 65536
    __ xorq(Address(r8, r9), 65536);                   //    xor qword ptr [r8 + r9], 65536
    __ xorq(Address(r9, r10), 65536);                  //    xor qword ptr [r9 + r10], 65536
    __ xorq(Address(r10, r11), 65536);                 //    xor qword ptr [r10 + r11], 65536
    __ xorq(Address(r11, r12), 65536);                 //    xor qword ptr [r11 + r12], 65536
    __ xorq(Address(r12, r13), 65536);                 //    xor qword ptr [r12 + r13], 65536
    __ xorq(Address(r13, r14), 65536);                 //    xor qword ptr [r13 + r14], 65536
    __ xorq(Address(r14, r15), 65536);                 //    xor qword ptr [r14 + r15], 65536
    __ xorq(Address(r15, r16), 65536);                 //    xor qword ptr [r15 + r16], 65536
    __ xorq(Address(r16, r17), 65536);                 //    xor qword ptr [r16 + r17], 65536
    __ xorq(Address(r17, r18), 65536);                 //    xor qword ptr [r17 + r18], 65536
    __ xorq(Address(r18, r19), 65536);                 //    xor qword ptr [r18 + r19], 65536
    __ xorq(Address(r19, r20), 65536);                 //    xor qword ptr [r19 + r20], 65536
    __ xorq(Address(r20, r21), 65536);                 //    xor qword ptr [r20 + r21], 65536
    __ xorq(Address(r21, r22), 65536);                 //    xor qword ptr [r21 + r22], 65536
    __ xorq(Address(r22, r23), 65536);                 //    xor qword ptr [r22 + r23], 65536
    __ xorq(Address(r23, r24), 65536);                 //    xor qword ptr [r23 + r24], 65536
    __ xorq(Address(r24, r25), 65536);                 //    xor qword ptr [r24 + r25], 65536
    __ xorq(Address(r25, r26), 65536);                 //    xor qword ptr [r25 + r26], 65536
    __ xorq(Address(r26, r27), 65536);                 //    xor qword ptr [r26 + r27], 65536
    __ xorq(Address(r27, r28), 65536);                 //    xor qword ptr [r27 + r28], 65536
    __ xorq(Address(r28, r29), 65536);                 //    xor qword ptr [r28 + r29], 65536
    __ xorq(Address(r29, r30), 65536);                 //    xor qword ptr [r29 + r30], 65536
    __ xorq(Address(r30, r31), 65536);                 //    xor qword ptr [r30 + r31], 65536
    __ xorq(Address(r31, rcx), 65536);                 //    xor qword ptr [r31 + rcx], 65536
    __ xorq(Address(rcx, rdx), 1048576);               //    xor qword ptr [rcx + rdx], 1048576
    __ xorq(Address(rdx, rbx), 1048576);               //    xor qword ptr [rdx + rbx], 1048576
    __ xorq(Address(rbx, r8), 1048576);                //    xor qword ptr [rbx + r8], 1048576
    __ xorq(Address(r8, r9), 1048576);                 //    xor qword ptr [r8 + r9], 1048576
    __ xorq(Address(r9, r10), 1048576);                //    xor qword ptr [r9 + r10], 1048576
    __ xorq(Address(r10, r11), 1048576);               //    xor qword ptr [r10 + r11], 1048576
    __ xorq(Address(r11, r12), 1048576);               //    xor qword ptr [r11 + r12], 1048576
    __ xorq(Address(r12, r13), 1048576);               //    xor qword ptr [r12 + r13], 1048576
    __ xorq(Address(r13, r14), 1048576);               //    xor qword ptr [r13 + r14], 1048576
    __ xorq(Address(r14, r15), 1048576);               //    xor qword ptr [r14 + r15], 1048576
    __ xorq(Address(r15, r16), 1048576);               //    xor qword ptr [r15 + r16], 1048576
    __ xorq(Address(r16, r17), 1048576);               //    xor qword ptr [r16 + r17], 1048576
    __ xorq(Address(r17, r18), 1048576);               //    xor qword ptr [r17 + r18], 1048576
    __ xorq(Address(r18, r19), 1048576);               //    xor qword ptr [r18 + r19], 1048576
    __ xorq(Address(r19, r20), 1048576);               //    xor qword ptr [r19 + r20], 1048576
    __ xorq(Address(r20, r21), 1048576);               //    xor qword ptr [r20 + r21], 1048576
    __ xorq(Address(r21, r22), 1048576);               //    xor qword ptr [r21 + r22], 1048576
    __ xorq(Address(r22, r23), 1048576);               //    xor qword ptr [r22 + r23], 1048576
    __ xorq(Address(r23, r24), 1048576);               //    xor qword ptr [r23 + r24], 1048576
    __ xorq(Address(r24, r25), 1048576);               //    xor qword ptr [r24 + r25], 1048576
    __ xorq(Address(r25, r26), 1048576);               //    xor qword ptr [r25 + r26], 1048576
    __ xorq(Address(r26, r27), 1048576);               //    xor qword ptr [r26 + r27], 1048576
    __ xorq(Address(r27, r28), 1048576);               //    xor qword ptr [r27 + r28], 1048576
    __ xorq(Address(r28, r29), 1048576);               //    xor qword ptr [r28 + r29], 1048576
    __ xorq(Address(r29, r30), 1048576);               //    xor qword ptr [r29 + r30], 1048576
    __ xorq(Address(r30, r31), 1048576);               //    xor qword ptr [r30 + r31], 1048576
    __ xorq(Address(r31, rcx), 1048576);               //    xor qword ptr [r31 + rcx], 1048576
    __ xorq(Address(rcx, rdx), 16777216);              //    xor qword ptr [rcx + rdx], 16777216
    __ xorq(Address(rdx, rbx), 16777216);              //    xor qword ptr [rdx + rbx], 16777216
    __ xorq(Address(rbx, r8), 16777216);               //    xor qword ptr [rbx + r8], 16777216
    __ xorq(Address(r8, r9), 16777216);                //    xor qword ptr [r8 + r9], 16777216
    __ xorq(Address(r9, r10), 16777216);               //    xor qword ptr [r9 + r10], 16777216
    __ xorq(Address(r10, r11), 16777216);              //    xor qword ptr [r10 + r11], 16777216
    __ xorq(Address(r11, r12), 16777216);              //    xor qword ptr [r11 + r12], 16777216
    __ xorq(Address(r12, r13), 16777216);              //    xor qword ptr [r12 + r13], 16777216
    __ xorq(Address(r13, r14), 16777216);              //    xor qword ptr [r13 + r14], 16777216
    __ xorq(Address(r14, r15), 16777216);              //    xor qword ptr [r14 + r15], 16777216
    __ xorq(Address(r15, r16), 16777216);              //    xor qword ptr [r15 + r16], 16777216
    __ xorq(Address(r16, r17), 16777216);              //    xor qword ptr [r16 + r17], 16777216
    __ xorq(Address(r17, r18), 16777216);              //    xor qword ptr [r17 + r18], 16777216
    __ xorq(Address(r18, r19), 16777216);              //    xor qword ptr [r18 + r19], 16777216
    __ xorq(Address(r19, r20), 16777216);              //    xor qword ptr [r19 + r20], 16777216
    __ xorq(Address(r20, r21), 16777216);              //    xor qword ptr [r20 + r21], 16777216
    __ xorq(Address(r21, r22), 16777216);              //    xor qword ptr [r21 + r22], 16777216
    __ xorq(Address(r22, r23), 16777216);              //    xor qword ptr [r22 + r23], 16777216
    __ xorq(Address(r23, r24), 16777216);              //    xor qword ptr [r23 + r24], 16777216
    __ xorq(Address(r24, r25), 16777216);              //    xor qword ptr [r24 + r25], 16777216
    __ xorq(Address(r25, r26), 16777216);              //    xor qword ptr [r25 + r26], 16777216
    __ xorq(Address(r26, r27), 16777216);              //    xor qword ptr [r26 + r27], 16777216
    __ xorq(Address(r27, r28), 16777216);              //    xor qword ptr [r27 + r28], 16777216
    __ xorq(Address(r28, r29), 16777216);              //    xor qword ptr [r28 + r29], 16777216
    __ xorq(Address(r29, r30), 16777216);              //    xor qword ptr [r29 + r30], 16777216
    __ xorq(Address(r30, r31), 16777216);              //    xor qword ptr [r30 + r31], 16777216
    __ xorq(Address(r31, rcx), 16777216);              //    xor qword ptr [r31 + rcx], 16777216
    __ xorq(Address(rcx, rdx), 268435456);             //    xor qword ptr [rcx + rdx], 268435456
    __ xorq(Address(rdx, rbx), 268435456);             //    xor qword ptr [rdx + rbx], 268435456
    __ xorq(Address(rbx, r8), 268435456);              //    xor qword ptr [rbx + r8], 268435456
    __ xorq(Address(r8, r9), 268435456);               //    xor qword ptr [r8 + r9], 268435456
    __ xorq(Address(r9, r10), 268435456);              //    xor qword ptr [r9 + r10], 268435456
    __ xorq(Address(r10, r11), 268435456);             //    xor qword ptr [r10 + r11], 268435456
    __ xorq(Address(r11, r12), 268435456);             //    xor qword ptr [r11 + r12], 268435456
    __ xorq(Address(r12, r13), 268435456);             //    xor qword ptr [r12 + r13], 268435456
    __ xorq(Address(r13, r14), 268435456);             //    xor qword ptr [r13 + r14], 268435456
    __ xorq(Address(r14, r15), 268435456);             //    xor qword ptr [r14 + r15], 268435456
    __ xorq(Address(r15, r16), 268435456);             //    xor qword ptr [r15 + r16], 268435456
    __ xorq(Address(r16, r17), 268435456);             //    xor qword ptr [r16 + r17], 268435456
    __ xorq(Address(r17, r18), 268435456);             //    xor qword ptr [r17 + r18], 268435456
    __ xorq(Address(r18, r19), 268435456);             //    xor qword ptr [r18 + r19], 268435456
    __ xorq(Address(r19, r20), 268435456);             //    xor qword ptr [r19 + r20], 268435456
    __ xorq(Address(r20, r21), 268435456);             //    xor qword ptr [r20 + r21], 268435456
    __ xorq(Address(r21, r22), 268435456);             //    xor qword ptr [r21 + r22], 268435456
    __ xorq(Address(r22, r23), 268435456);             //    xor qword ptr [r22 + r23], 268435456
    __ xorq(Address(r23, r24), 268435456);             //    xor qword ptr [r23 + r24], 268435456
    __ xorq(Address(r24, r25), 268435456);             //    xor qword ptr [r24 + r25], 268435456
    __ xorq(Address(r25, r26), 268435456);             //    xor qword ptr [r25 + r26], 268435456
    __ xorq(Address(r26, r27), 268435456);             //    xor qword ptr [r26 + r27], 268435456
    __ xorq(Address(r27, r28), 268435456);             //    xor qword ptr [r27 + r28], 268435456
    __ xorq(Address(r28, r29), 268435456);             //    xor qword ptr [r28 + r29], 268435456
    __ xorq(Address(r29, r30), 268435456);             //    xor qword ptr [r29 + r30], 268435456
    __ xorq(Address(r30, r31), 268435456);             //    xor qword ptr [r30 + r31], 268435456
    __ xorq(Address(r31, rcx), 268435456);             //    xor qword ptr [r31 + rcx], 268435456
    __ orq(Address(rcx, rdx), 1);                      //    or qword ptr [rcx + rdx], 1
    __ orq(Address(rdx, rbx), 1);                      //    or qword ptr [rdx + rbx], 1
    __ orq(Address(rbx, r8), 1);                       //    or qword ptr [rbx + r8], 1
    __ orq(Address(r8, r9), 1);                        //    or qword ptr [r8 + r9], 1
    __ orq(Address(r9, r10), 1);                       //    or qword ptr [r9 + r10], 1
    __ orq(Address(r10, r11), 1);                      //    or qword ptr [r10 + r11], 1
    __ orq(Address(r11, r12), 1);                      //    or qword ptr [r11 + r12], 1
    __ orq(Address(r12, r13), 1);                      //    or qword ptr [r12 + r13], 1
    __ orq(Address(r13, r14), 1);                      //    or qword ptr [r13 + r14], 1
    __ orq(Address(r14, r15), 1);                      //    or qword ptr [r14 + r15], 1
    __ orq(Address(r15, r16), 1);                      //    or qword ptr [r15 + r16], 1
    __ orq(Address(r16, r17), 1);                      //    or qword ptr [r16 + r17], 1
    __ orq(Address(r17, r18), 1);                      //    or qword ptr [r17 + r18], 1
    __ orq(Address(r18, r19), 1);                      //    or qword ptr [r18 + r19], 1
    __ orq(Address(r19, r20), 1);                      //    or qword ptr [r19 + r20], 1
    __ orq(Address(r20, r21), 1);                      //    or qword ptr [r20 + r21], 1
    __ orq(Address(r21, r22), 1);                      //    or qword ptr [r21 + r22], 1
    __ orq(Address(r22, r23), 1);                      //    or qword ptr [r22 + r23], 1
    __ orq(Address(r23, r24), 1);                      //    or qword ptr [r23 + r24], 1
    __ orq(Address(r24, r25), 1);                      //    or qword ptr [r24 + r25], 1
    __ orq(Address(r25, r26), 1);                      //    or qword ptr [r25 + r26], 1
    __ orq(Address(r26, r27), 1);                      //    or qword ptr [r26 + r27], 1
    __ orq(Address(r27, r28), 1);                      //    or qword ptr [r27 + r28], 1
    __ orq(Address(r28, r29), 1);                      //    or qword ptr [r28 + r29], 1
    __ orq(Address(r29, r30), 1);                      //    or qword ptr [r29 + r30], 1
    __ orq(Address(r30, r31), 1);                      //    or qword ptr [r30 + r31], 1
    __ orq(Address(r31, rcx), 1);                      //    or qword ptr [r31 + rcx], 1
    __ orq(Address(rcx, rdx), 16);                     //    or qword ptr [rcx + rdx], 16
    __ orq(Address(rdx, rbx), 16);                     //    or qword ptr [rdx + rbx], 16
    __ orq(Address(rbx, r8), 16);                      //    or qword ptr [rbx + r8], 16
    __ orq(Address(r8, r9), 16);                       //    or qword ptr [r8 + r9], 16
    __ orq(Address(r9, r10), 16);                      //    or qword ptr [r9 + r10], 16
    __ orq(Address(r10, r11), 16);                     //    or qword ptr [r10 + r11], 16
    __ orq(Address(r11, r12), 16);                     //    or qword ptr [r11 + r12], 16
    __ orq(Address(r12, r13), 16);                     //    or qword ptr [r12 + r13], 16
    __ orq(Address(r13, r14), 16);                     //    or qword ptr [r13 + r14], 16
    __ orq(Address(r14, r15), 16);                     //    or qword ptr [r14 + r15], 16
    __ orq(Address(r15, r16), 16);                     //    or qword ptr [r15 + r16], 16
    __ orq(Address(r16, r17), 16);                     //    or qword ptr [r16 + r17], 16
    __ orq(Address(r17, r18), 16);                     //    or qword ptr [r17 + r18], 16
    __ orq(Address(r18, r19), 16);                     //    or qword ptr [r18 + r19], 16
    __ orq(Address(r19, r20), 16);                     //    or qword ptr [r19 + r20], 16
    __ orq(Address(r20, r21), 16);                     //    or qword ptr [r20 + r21], 16
    __ orq(Address(r21, r22), 16);                     //    or qword ptr [r21 + r22], 16
    __ orq(Address(r22, r23), 16);                     //    or qword ptr [r22 + r23], 16
    __ orq(Address(r23, r24), 16);                     //    or qword ptr [r23 + r24], 16
    __ orq(Address(r24, r25), 16);                     //    or qword ptr [r24 + r25], 16
    __ orq(Address(r25, r26), 16);                     //    or qword ptr [r25 + r26], 16
    __ orq(Address(r26, r27), 16);                     //    or qword ptr [r26 + r27], 16
    __ orq(Address(r27, r28), 16);                     //    or qword ptr [r27 + r28], 16
    __ orq(Address(r28, r29), 16);                     //    or qword ptr [r28 + r29], 16
    __ orq(Address(r29, r30), 16);                     //    or qword ptr [r29 + r30], 16
    __ orq(Address(r30, r31), 16);                     //    or qword ptr [r30 + r31], 16
    __ orq(Address(r31, rcx), 16);                     //    or qword ptr [r31 + rcx], 16
    __ orq(Address(rcx, rdx), 256);                    //    or qword ptr [rcx + rdx], 256
    __ orq(Address(rdx, rbx), 256);                    //    or qword ptr [rdx + rbx], 256
    __ orq(Address(rbx, r8), 256);                     //    or qword ptr [rbx + r8], 256
    __ orq(Address(r8, r9), 256);                      //    or qword ptr [r8 + r9], 256
    __ orq(Address(r9, r10), 256);                     //    or qword ptr [r9 + r10], 256
    __ orq(Address(r10, r11), 256);                    //    or qword ptr [r10 + r11], 256
    __ orq(Address(r11, r12), 256);                    //    or qword ptr [r11 + r12], 256
    __ orq(Address(r12, r13), 256);                    //    or qword ptr [r12 + r13], 256
    __ orq(Address(r13, r14), 256);                    //    or qword ptr [r13 + r14], 256
    __ orq(Address(r14, r15), 256);                    //    or qword ptr [r14 + r15], 256
    __ orq(Address(r15, r16), 256);                    //    or qword ptr [r15 + r16], 256
    __ orq(Address(r16, r17), 256);                    //    or qword ptr [r16 + r17], 256
    __ orq(Address(r17, r18), 256);                    //    or qword ptr [r17 + r18], 256
    __ orq(Address(r18, r19), 256);                    //    or qword ptr [r18 + r19], 256
    __ orq(Address(r19, r20), 256);                    //    or qword ptr [r19 + r20], 256
    __ orq(Address(r20, r21), 256);                    //    or qword ptr [r20 + r21], 256
    __ orq(Address(r21, r22), 256);                    //    or qword ptr [r21 + r22], 256
    __ orq(Address(r22, r23), 256);                    //    or qword ptr [r22 + r23], 256
    __ orq(Address(r23, r24), 256);                    //    or qword ptr [r23 + r24], 256
    __ orq(Address(r24, r25), 256);                    //    or qword ptr [r24 + r25], 256
    __ orq(Address(r25, r26), 256);                    //    or qword ptr [r25 + r26], 256
    __ orq(Address(r26, r27), 256);                    //    or qword ptr [r26 + r27], 256
    __ orq(Address(r27, r28), 256);                    //    or qword ptr [r27 + r28], 256
    __ orq(Address(r28, r29), 256);                    //    or qword ptr [r28 + r29], 256
    __ orq(Address(r29, r30), 256);                    //    or qword ptr [r29 + r30], 256
    __ orq(Address(r30, r31), 256);                    //    or qword ptr [r30 + r31], 256
    __ orq(Address(r31, rcx), 256);                    //    or qword ptr [r31 + rcx], 256
    __ orq(Address(rcx, rdx), 4096);                   //    or qword ptr [rcx + rdx], 4096
    __ orq(Address(rdx, rbx), 4096);                   //    or qword ptr [rdx + rbx], 4096
    __ orq(Address(rbx, r8), 4096);                    //    or qword ptr [rbx + r8], 4096
    __ orq(Address(r8, r9), 4096);                     //    or qword ptr [r8 + r9], 4096
    __ orq(Address(r9, r10), 4096);                    //    or qword ptr [r9 + r10], 4096
    __ orq(Address(r10, r11), 4096);                   //    or qword ptr [r10 + r11], 4096
    __ orq(Address(r11, r12), 4096);                   //    or qword ptr [r11 + r12], 4096
    __ orq(Address(r12, r13), 4096);                   //    or qword ptr [r12 + r13], 4096
    __ orq(Address(r13, r14), 4096);                   //    or qword ptr [r13 + r14], 4096
    __ orq(Address(r14, r15), 4096);                   //    or qword ptr [r14 + r15], 4096
    __ orq(Address(r15, r16), 4096);                   //    or qword ptr [r15 + r16], 4096
    __ orq(Address(r16, r17), 4096);                   //    or qword ptr [r16 + r17], 4096
    __ orq(Address(r17, r18), 4096);                   //    or qword ptr [r17 + r18], 4096
    __ orq(Address(r18, r19), 4096);                   //    or qword ptr [r18 + r19], 4096
    __ orq(Address(r19, r20), 4096);                   //    or qword ptr [r19 + r20], 4096
    __ orq(Address(r20, r21), 4096);                   //    or qword ptr [r20 + r21], 4096
    __ orq(Address(r21, r22), 4096);                   //    or qword ptr [r21 + r22], 4096
    __ orq(Address(r22, r23), 4096);                   //    or qword ptr [r22 + r23], 4096
    __ orq(Address(r23, r24), 4096);                   //    or qword ptr [r23 + r24], 4096
    __ orq(Address(r24, r25), 4096);                   //    or qword ptr [r24 + r25], 4096
    __ orq(Address(r25, r26), 4096);                   //    or qword ptr [r25 + r26], 4096
    __ orq(Address(r26, r27), 4096);                   //    or qword ptr [r26 + r27], 4096
    __ orq(Address(r27, r28), 4096);                   //    or qword ptr [r27 + r28], 4096
    __ orq(Address(r28, r29), 4096);                   //    or qword ptr [r28 + r29], 4096
    __ orq(Address(r29, r30), 4096);                   //    or qword ptr [r29 + r30], 4096
    __ orq(Address(r30, r31), 4096);                   //    or qword ptr [r30 + r31], 4096
    __ orq(Address(r31, rcx), 4096);                   //    or qword ptr [r31 + rcx], 4096
    __ orq(Address(rcx, rdx), 65536);                  //    or qword ptr [rcx + rdx], 65536
    __ orq(Address(rdx, rbx), 65536);                  //    or qword ptr [rdx + rbx], 65536
    __ orq(Address(rbx, r8), 65536);                   //    or qword ptr [rbx + r8], 65536
    __ orq(Address(r8, r9), 65536);                    //    or qword ptr [r8 + r9], 65536
    __ orq(Address(r9, r10), 65536);                   //    or qword ptr [r9 + r10], 65536
    __ orq(Address(r10, r11), 65536);                  //    or qword ptr [r10 + r11], 65536
    __ orq(Address(r11, r12), 65536);                  //    or qword ptr [r11 + r12], 65536
    __ orq(Address(r12, r13), 65536);                  //    or qword ptr [r12 + r13], 65536
    __ orq(Address(r13, r14), 65536);                  //    or qword ptr [r13 + r14], 65536
    __ orq(Address(r14, r15), 65536);                  //    or qword ptr [r14 + r15], 65536
    __ orq(Address(r15, r16), 65536);                  //    or qword ptr [r15 + r16], 65536
    __ orq(Address(r16, r17), 65536);                  //    or qword ptr [r16 + r17], 65536
    __ orq(Address(r17, r18), 65536);                  //    or qword ptr [r17 + r18], 65536
    __ orq(Address(r18, r19), 65536);                  //    or qword ptr [r18 + r19], 65536
    __ orq(Address(r19, r20), 65536);                  //    or qword ptr [r19 + r20], 65536
    __ orq(Address(r20, r21), 65536);                  //    or qword ptr [r20 + r21], 65536
    __ orq(Address(r21, r22), 65536);                  //    or qword ptr [r21 + r22], 65536
    __ orq(Address(r22, r23), 65536);                  //    or qword ptr [r22 + r23], 65536
    __ orq(Address(r23, r24), 65536);                  //    or qword ptr [r23 + r24], 65536
    __ orq(Address(r24, r25), 65536);                  //    or qword ptr [r24 + r25], 65536
    __ orq(Address(r25, r26), 65536);                  //    or qword ptr [r25 + r26], 65536
    __ orq(Address(r26, r27), 65536);                  //    or qword ptr [r26 + r27], 65536
    __ orq(Address(r27, r28), 65536);                  //    or qword ptr [r27 + r28], 65536
    __ orq(Address(r28, r29), 65536);                  //    or qword ptr [r28 + r29], 65536
    __ orq(Address(r29, r30), 65536);                  //    or qword ptr [r29 + r30], 65536
    __ orq(Address(r30, r31), 65536);                  //    or qword ptr [r30 + r31], 65536
    __ orq(Address(r31, rcx), 65536);                  //    or qword ptr [r31 + rcx], 65536
    __ orq(Address(rcx, rdx), 1048576);                //    or qword ptr [rcx + rdx], 1048576
    __ orq(Address(rdx, rbx), 1048576);                //    or qword ptr [rdx + rbx], 1048576
    __ orq(Address(rbx, r8), 1048576);                 //    or qword ptr [rbx + r8], 1048576
    __ orq(Address(r8, r9), 1048576);                  //    or qword ptr [r8 + r9], 1048576
    __ orq(Address(r9, r10), 1048576);                 //    or qword ptr [r9 + r10], 1048576
    __ orq(Address(r10, r11), 1048576);                //    or qword ptr [r10 + r11], 1048576
    __ orq(Address(r11, r12), 1048576);                //    or qword ptr [r11 + r12], 1048576
    __ orq(Address(r12, r13), 1048576);                //    or qword ptr [r12 + r13], 1048576
    __ orq(Address(r13, r14), 1048576);                //    or qword ptr [r13 + r14], 1048576
    __ orq(Address(r14, r15), 1048576);                //    or qword ptr [r14 + r15], 1048576
    __ orq(Address(r15, r16), 1048576);                //    or qword ptr [r15 + r16], 1048576
    __ orq(Address(r16, r17), 1048576);                //    or qword ptr [r16 + r17], 1048576
    __ orq(Address(r17, r18), 1048576);                //    or qword ptr [r17 + r18], 1048576
    __ orq(Address(r18, r19), 1048576);                //    or qword ptr [r18 + r19], 1048576
    __ orq(Address(r19, r20), 1048576);                //    or qword ptr [r19 + r20], 1048576
    __ orq(Address(r20, r21), 1048576);                //    or qword ptr [r20 + r21], 1048576
    __ orq(Address(r21, r22), 1048576);                //    or qword ptr [r21 + r22], 1048576
    __ orq(Address(r22, r23), 1048576);                //    or qword ptr [r22 + r23], 1048576
    __ orq(Address(r23, r24), 1048576);                //    or qword ptr [r23 + r24], 1048576
    __ orq(Address(r24, r25), 1048576);                //    or qword ptr [r24 + r25], 1048576
    __ orq(Address(r25, r26), 1048576);                //    or qword ptr [r25 + r26], 1048576
    __ orq(Address(r26, r27), 1048576);                //    or qword ptr [r26 + r27], 1048576
    __ orq(Address(r27, r28), 1048576);                //    or qword ptr [r27 + r28], 1048576
    __ orq(Address(r28, r29), 1048576);                //    or qword ptr [r28 + r29], 1048576
    __ orq(Address(r29, r30), 1048576);                //    or qword ptr [r29 + r30], 1048576
    __ orq(Address(r30, r31), 1048576);                //    or qword ptr [r30 + r31], 1048576
    __ orq(Address(r31, rcx), 1048576);                //    or qword ptr [r31 + rcx], 1048576
    __ orq(Address(rcx, rdx), 16777216);               //    or qword ptr [rcx + rdx], 16777216
    __ orq(Address(rdx, rbx), 16777216);               //    or qword ptr [rdx + rbx], 16777216
    __ orq(Address(rbx, r8), 16777216);                //    or qword ptr [rbx + r8], 16777216
    __ orq(Address(r8, r9), 16777216);                 //    or qword ptr [r8 + r9], 16777216
    __ orq(Address(r9, r10), 16777216);                //    or qword ptr [r9 + r10], 16777216
    __ orq(Address(r10, r11), 16777216);               //    or qword ptr [r10 + r11], 16777216
    __ orq(Address(r11, r12), 16777216);               //    or qword ptr [r11 + r12], 16777216
    __ orq(Address(r12, r13), 16777216);               //    or qword ptr [r12 + r13], 16777216
    __ orq(Address(r13, r14), 16777216);               //    or qword ptr [r13 + r14], 16777216
    __ orq(Address(r14, r15), 16777216);               //    or qword ptr [r14 + r15], 16777216
    __ orq(Address(r15, r16), 16777216);               //    or qword ptr [r15 + r16], 16777216
    __ orq(Address(r16, r17), 16777216);               //    or qword ptr [r16 + r17], 16777216
    __ orq(Address(r17, r18), 16777216);               //    or qword ptr [r17 + r18], 16777216
    __ orq(Address(r18, r19), 16777216);               //    or qword ptr [r18 + r19], 16777216
    __ orq(Address(r19, r20), 16777216);               //    or qword ptr [r19 + r20], 16777216
    __ orq(Address(r20, r21), 16777216);               //    or qword ptr [r20 + r21], 16777216
    __ orq(Address(r21, r22), 16777216);               //    or qword ptr [r21 + r22], 16777216
    __ orq(Address(r22, r23), 16777216);               //    or qword ptr [r22 + r23], 16777216
    __ orq(Address(r23, r24), 16777216);               //    or qword ptr [r23 + r24], 16777216
    __ orq(Address(r24, r25), 16777216);               //    or qword ptr [r24 + r25], 16777216
    __ orq(Address(r25, r26), 16777216);               //    or qword ptr [r25 + r26], 16777216
    __ orq(Address(r26, r27), 16777216);               //    or qword ptr [r26 + r27], 16777216
    __ orq(Address(r27, r28), 16777216);               //    or qword ptr [r27 + r28], 16777216
    __ orq(Address(r28, r29), 16777216);               //    or qword ptr [r28 + r29], 16777216
    __ orq(Address(r29, r30), 16777216);               //    or qword ptr [r29 + r30], 16777216
    __ orq(Address(r30, r31), 16777216);               //    or qword ptr [r30 + r31], 16777216
    __ orq(Address(r31, rcx), 16777216);               //    or qword ptr [r31 + rcx], 16777216
    __ orq(Address(rcx, rdx), 268435456);              //    or qword ptr [rcx + rdx], 268435456
    __ orq(Address(rdx, rbx), 268435456);              //    or qword ptr [rdx + rbx], 268435456
    __ orq(Address(rbx, r8), 268435456);               //    or qword ptr [rbx + r8], 268435456
    __ orq(Address(r8, r9), 268435456);                //    or qword ptr [r8 + r9], 268435456
    __ orq(Address(r9, r10), 268435456);               //    or qword ptr [r9 + r10], 268435456
    __ orq(Address(r10, r11), 268435456);              //    or qword ptr [r10 + r11], 268435456
    __ orq(Address(r11, r12), 268435456);              //    or qword ptr [r11 + r12], 268435456
    __ orq(Address(r12, r13), 268435456);              //    or qword ptr [r12 + r13], 268435456
    __ orq(Address(r13, r14), 268435456);              //    or qword ptr [r13 + r14], 268435456
    __ orq(Address(r14, r15), 268435456);              //    or qword ptr [r14 + r15], 268435456
    __ orq(Address(r15, r16), 268435456);              //    or qword ptr [r15 + r16], 268435456
    __ orq(Address(r16, r17), 268435456);              //    or qword ptr [r16 + r17], 268435456
    __ orq(Address(r17, r18), 268435456);              //    or qword ptr [r17 + r18], 268435456
    __ orq(Address(r18, r19), 268435456);              //    or qword ptr [r18 + r19], 268435456
    __ orq(Address(r19, r20), 268435456);              //    or qword ptr [r19 + r20], 268435456
    __ orq(Address(r20, r21), 268435456);              //    or qword ptr [r20 + r21], 268435456
    __ orq(Address(r21, r22), 268435456);              //    or qword ptr [r21 + r22], 268435456
    __ orq(Address(r22, r23), 268435456);              //    or qword ptr [r22 + r23], 268435456
    __ orq(Address(r23, r24), 268435456);              //    or qword ptr [r23 + r24], 268435456
    __ orq(Address(r24, r25), 268435456);              //    or qword ptr [r24 + r25], 268435456
    __ orq(Address(r25, r26), 268435456);              //    or qword ptr [r25 + r26], 268435456
    __ orq(Address(r26, r27), 268435456);              //    or qword ptr [r26 + r27], 268435456
    __ orq(Address(r27, r28), 268435456);              //    or qword ptr [r27 + r28], 268435456
    __ orq(Address(r28, r29), 268435456);              //    or qword ptr [r28 + r29], 268435456
    __ orq(Address(r29, r30), 268435456);              //    or qword ptr [r29 + r30], 268435456
    __ orq(Address(r30, r31), 268435456);              //    or qword ptr [r30 + r31], 268435456
    __ orq(Address(r31, rcx), 268435456);              //    or qword ptr [r31 + rcx], 268435456
    __ addq(rcx, Address(rdx, rbx));                   //    add rcx, qword ptr [rdx + rbx]
    __ addq(rdx, Address(rbx, r8));                    //    add rdx, qword ptr [rbx + r8]
    __ addq(rbx, Address(r8, r9));                     //    add rbx, qword ptr [r8 + r9]
    __ addq(r8, Address(r9, r10));                     //    add r8, qword ptr [r9 + r10]
    __ addq(r9, Address(r10, r11));                    //    add r9, qword ptr [r10 + r11]
    __ addq(r10, Address(r11, r12));                   //    add r10, qword ptr [r11 + r12]
    __ addq(r11, Address(r12, r13));                   //    add r11, qword ptr [r12 + r13]
    __ addq(r12, Address(r13, r14));                   //    add r12, qword ptr [r13 + r14]
    __ addq(r13, Address(r14, r15));                   //    add r13, qword ptr [r14 + r15]
    __ addq(r14, Address(r15, r16));                   //    add r14, qword ptr [r15 + r16]
    __ addq(r15, Address(r16, r17));                   //    add r15, qword ptr [r16 + r17]
    __ addq(r16, Address(r17, r18));                   //    add r16, qword ptr [r17 + r18]
    __ addq(r17, Address(r18, r19));                   //    add r17, qword ptr [r18 + r19]
    __ addq(r18, Address(r19, r20));                   //    add r18, qword ptr [r19 + r20]
    __ addq(r19, Address(r20, r21));                   //    add r19, qword ptr [r20 + r21]
    __ addq(r20, Address(r21, r22));                   //    add r20, qword ptr [r21 + r22]
    __ addq(r21, Address(r22, r23));                   //    add r21, qword ptr [r22 + r23]
    __ addq(r22, Address(r23, r24));                   //    add r22, qword ptr [r23 + r24]
    __ addq(r23, Address(r24, r25));                   //    add r23, qword ptr [r24 + r25]
    __ addq(r24, Address(r25, r26));                   //    add r24, qword ptr [r25 + r26]
    __ addq(r25, Address(r26, r27));                   //    add r25, qword ptr [r26 + r27]
    __ addq(r26, Address(r27, r28));                   //    add r26, qword ptr [r27 + r28]
    __ addq(r27, Address(r28, r29));                   //    add r27, qword ptr [r28 + r29]
    __ addq(r28, Address(r29, r30));                   //    add r28, qword ptr [r29 + r30]
    __ addq(r29, Address(r30, r31));                   //    add r29, qword ptr [r30 + r31]
    __ addq(r30, Address(r31, rcx));                   //    add r30, qword ptr [r31 + rcx]
    __ addq(r31, Address(rcx, rdx));                   //    add r31, qword ptr [rcx + rdx]
    __ andq(rcx, Address(rdx, rbx));                   //    and rcx, qword ptr [rdx + rbx]
    __ andq(rdx, Address(rbx, r8));                    //    and rdx, qword ptr [rbx + r8]
    __ andq(rbx, Address(r8, r9));                     //    and rbx, qword ptr [r8 + r9]
    __ andq(r8, Address(r9, r10));                     //    and r8, qword ptr [r9 + r10]
    __ andq(r9, Address(r10, r11));                    //    and r9, qword ptr [r10 + r11]
    __ andq(r10, Address(r11, r12));                   //    and r10, qword ptr [r11 + r12]
    __ andq(r11, Address(r12, r13));                   //    and r11, qword ptr [r12 + r13]
    __ andq(r12, Address(r13, r14));                   //    and r12, qword ptr [r13 + r14]
    __ andq(r13, Address(r14, r15));                   //    and r13, qword ptr [r14 + r15]
    __ andq(r14, Address(r15, r16));                   //    and r14, qword ptr [r15 + r16]
    __ andq(r15, Address(r16, r17));                   //    and r15, qword ptr [r16 + r17]
    __ andq(r16, Address(r17, r18));                   //    and r16, qword ptr [r17 + r18]
    __ andq(r17, Address(r18, r19));                   //    and r17, qword ptr [r18 + r19]
    __ andq(r18, Address(r19, r20));                   //    and r18, qword ptr [r19 + r20]
    __ andq(r19, Address(r20, r21));                   //    and r19, qword ptr [r20 + r21]
    __ andq(r20, Address(r21, r22));                   //    and r20, qword ptr [r21 + r22]
    __ andq(r21, Address(r22, r23));                   //    and r21, qword ptr [r22 + r23]
    __ andq(r22, Address(r23, r24));                   //    and r22, qword ptr [r23 + r24]
    __ andq(r23, Address(r24, r25));                   //    and r23, qword ptr [r24 + r25]
    __ andq(r24, Address(r25, r26));                   //    and r24, qword ptr [r25 + r26]
    __ andq(r25, Address(r26, r27));                   //    and r25, qword ptr [r26 + r27]
    __ andq(r26, Address(r27, r28));                   //    and r26, qword ptr [r27 + r28]
    __ andq(r27, Address(r28, r29));                   //    and r27, qword ptr [r28 + r29]
    __ andq(r28, Address(r29, r30));                   //    and r28, qword ptr [r29 + r30]
    __ andq(r29, Address(r30, r31));                   //    and r29, qword ptr [r30 + r31]
    __ andq(r30, Address(r31, rcx));                   //    and r30, qword ptr [r31 + rcx]
    __ andq(r31, Address(rcx, rdx));                   //    and r31, qword ptr [rcx + rdx]
    __ lzcntq(rcx, Address(rdx, rbx));                 //    lzcnt rcx, qword ptr [rdx + rbx]
    __ lzcntq(rdx, Address(rbx, r8));                  //    lzcnt rdx, qword ptr [rbx + r8]
    __ lzcntq(rbx, Address(r8, r9));                   //    lzcnt rbx, qword ptr [r8 + r9]
    __ lzcntq(r8, Address(r9, r10));                   //    lzcnt r8, qword ptr [r9 + r10]
    __ lzcntq(r9, Address(r10, r11));                  //    lzcnt r9, qword ptr [r10 + r11]
    __ lzcntq(r10, Address(r11, r12));                 //    lzcnt r10, qword ptr [r11 + r12]
    __ lzcntq(r11, Address(r12, r13));                 //    lzcnt r11, qword ptr [r12 + r13]
    __ lzcntq(r12, Address(r13, r14));                 //    lzcnt r12, qword ptr [r13 + r14]
    __ lzcntq(r13, Address(r14, r15));                 //    lzcnt r13, qword ptr [r14 + r15]
    __ lzcntq(r14, Address(r15, r16));                 //    lzcnt r14, qword ptr [r15 + r16]
    __ lzcntq(r15, Address(r16, r17));                 //    lzcnt r15, qword ptr [r16 + r17]
    __ lzcntq(r16, Address(r17, r18));                 //    lzcnt r16, qword ptr [r17 + r18]
    __ lzcntq(r17, Address(r18, r19));                 //    lzcnt r17, qword ptr [r18 + r19]
    __ lzcntq(r18, Address(r19, r20));                 //    lzcnt r18, qword ptr [r19 + r20]
    __ lzcntq(r19, Address(r20, r21));                 //    lzcnt r19, qword ptr [r20 + r21]
    __ lzcntq(r20, Address(r21, r22));                 //    lzcnt r20, qword ptr [r21 + r22]
    __ lzcntq(r21, Address(r22, r23));                 //    lzcnt r21, qword ptr [r22 + r23]
    __ lzcntq(r22, Address(r23, r24));                 //    lzcnt r22, qword ptr [r23 + r24]
    __ lzcntq(r23, Address(r24, r25));                 //    lzcnt r23, qword ptr [r24 + r25]
    __ lzcntq(r24, Address(r25, r26));                 //    lzcnt r24, qword ptr [r25 + r26]
    __ lzcntq(r25, Address(r26, r27));                 //    lzcnt r25, qword ptr [r26 + r27]
    __ lzcntq(r26, Address(r27, r28));                 //    lzcnt r26, qword ptr [r27 + r28]
    __ lzcntq(r27, Address(r28, r29));                 //    lzcnt r27, qword ptr [r28 + r29]
    __ lzcntq(r28, Address(r29, r30));                 //    lzcnt r28, qword ptr [r29 + r30]
    __ lzcntq(r29, Address(r30, r31));                 //    lzcnt r29, qword ptr [r30 + r31]
    __ lzcntq(r30, Address(r31, rcx));                 //    lzcnt r30, qword ptr [r31 + rcx]
    __ lzcntq(r31, Address(rcx, rdx));                 //    lzcnt r31, qword ptr [rcx + rdx]
    __ orq(rcx, Address(rdx, rbx));                    //    or rcx, qword ptr [rdx + rbx]
    __ orq(rdx, Address(rbx, r8));                     //    or rdx, qword ptr [rbx + r8]
    __ orq(rbx, Address(r8, r9));                      //    or rbx, qword ptr [r8 + r9]
    __ orq(r8, Address(r9, r10));                      //    or r8, qword ptr [r9 + r10]
    __ orq(r9, Address(r10, r11));                     //    or r9, qword ptr [r10 + r11]
    __ orq(r10, Address(r11, r12));                    //    or r10, qword ptr [r11 + r12]
    __ orq(r11, Address(r12, r13));                    //    or r11, qword ptr [r12 + r13]
    __ orq(r12, Address(r13, r14));                    //    or r12, qword ptr [r13 + r14]
    __ orq(r13, Address(r14, r15));                    //    or r13, qword ptr [r14 + r15]
    __ orq(r14, Address(r15, r16));                    //    or r14, qword ptr [r15 + r16]
    __ orq(r15, Address(r16, r17));                    //    or r15, qword ptr [r16 + r17]
    __ orq(r16, Address(r17, r18));                    //    or r16, qword ptr [r17 + r18]
    __ orq(r17, Address(r18, r19));                    //    or r17, qword ptr [r18 + r19]
    __ orq(r18, Address(r19, r20));                    //    or r18, qword ptr [r19 + r20]
    __ orq(r19, Address(r20, r21));                    //    or r19, qword ptr [r20 + r21]
    __ orq(r20, Address(r21, r22));                    //    or r20, qword ptr [r21 + r22]
    __ orq(r21, Address(r22, r23));                    //    or r21, qword ptr [r22 + r23]
    __ orq(r22, Address(r23, r24));                    //    or r22, qword ptr [r23 + r24]
    __ orq(r23, Address(r24, r25));                    //    or r23, qword ptr [r24 + r25]
    __ orq(r24, Address(r25, r26));                    //    or r24, qword ptr [r25 + r26]
    __ orq(r25, Address(r26, r27));                    //    or r25, qword ptr [r26 + r27]
    __ orq(r26, Address(r27, r28));                    //    or r26, qword ptr [r27 + r28]
    __ orq(r27, Address(r28, r29));                    //    or r27, qword ptr [r28 + r29]
    __ orq(r28, Address(r29, r30));                    //    or r28, qword ptr [r29 + r30]
    __ orq(r29, Address(r30, r31));                    //    or r29, qword ptr [r30 + r31]
    __ orq(r30, Address(r31, rcx));                    //    or r30, qword ptr [r31 + rcx]
    __ orq(r31, Address(rcx, rdx));                    //    or r31, qword ptr [rcx + rdx]
    __ adcq(rcx, Address(rdx, rbx));                   //    adc rcx, qword ptr [rdx + rbx]
    __ adcq(rdx, Address(rbx, r8));                    //    adc rdx, qword ptr [rbx + r8]
    __ adcq(rbx, Address(r8, r9));                     //    adc rbx, qword ptr [r8 + r9]
    __ adcq(r8, Address(r9, r10));                     //    adc r8, qword ptr [r9 + r10]
    __ adcq(r9, Address(r10, r11));                    //    adc r9, qword ptr [r10 + r11]
    __ adcq(r10, Address(r11, r12));                   //    adc r10, qword ptr [r11 + r12]
    __ adcq(r11, Address(r12, r13));                   //    adc r11, qword ptr [r12 + r13]
    __ adcq(r12, Address(r13, r14));                   //    adc r12, qword ptr [r13 + r14]
    __ adcq(r13, Address(r14, r15));                   //    adc r13, qword ptr [r14 + r15]
    __ adcq(r14, Address(r15, r16));                   //    adc r14, qword ptr [r15 + r16]
    __ adcq(r15, Address(r16, r17));                   //    adc r15, qword ptr [r16 + r17]
    __ adcq(r16, Address(r17, r18));                   //    adc r16, qword ptr [r17 + r18]
    __ adcq(r17, Address(r18, r19));                   //    adc r17, qword ptr [r18 + r19]
    __ adcq(r18, Address(r19, r20));                   //    adc r18, qword ptr [r19 + r20]
    __ adcq(r19, Address(r20, r21));                   //    adc r19, qword ptr [r20 + r21]
    __ adcq(r20, Address(r21, r22));                   //    adc r20, qword ptr [r21 + r22]
    __ adcq(r21, Address(r22, r23));                   //    adc r21, qword ptr [r22 + r23]
    __ adcq(r22, Address(r23, r24));                   //    adc r22, qword ptr [r23 + r24]
    __ adcq(r23, Address(r24, r25));                   //    adc r23, qword ptr [r24 + r25]
    __ adcq(r24, Address(r25, r26));                   //    adc r24, qword ptr [r25 + r26]
    __ adcq(r25, Address(r26, r27));                   //    adc r25, qword ptr [r26 + r27]
    __ adcq(r26, Address(r27, r28));                   //    adc r26, qword ptr [r27 + r28]
    __ adcq(r27, Address(r28, r29));                   //    adc r27, qword ptr [r28 + r29]
    __ adcq(r28, Address(r29, r30));                   //    adc r28, qword ptr [r29 + r30]
    __ adcq(r29, Address(r30, r31));                   //    adc r29, qword ptr [r30 + r31]
    __ adcq(r30, Address(r31, rcx));                   //    adc r30, qword ptr [r31 + rcx]
    __ adcq(r31, Address(rcx, rdx));                   //    adc r31, qword ptr [rcx + rdx]
    __ imulq(rcx, Address(rdx, rbx));                  //    imul rcx, qword ptr [rdx + rbx]
    __ imulq(rdx, Address(rbx, r8));                   //    imul rdx, qword ptr [rbx + r8]
    __ imulq(rbx, Address(r8, r9));                    //    imul rbx, qword ptr [r8 + r9]
    __ imulq(r8, Address(r9, r10));                    //    imul r8, qword ptr [r9 + r10]
    __ imulq(r9, Address(r10, r11));                   //    imul r9, qword ptr [r10 + r11]
    __ imulq(r10, Address(r11, r12));                  //    imul r10, qword ptr [r11 + r12]
    __ imulq(r11, Address(r12, r13));                  //    imul r11, qword ptr [r12 + r13]
    __ imulq(r12, Address(r13, r14));                  //    imul r12, qword ptr [r13 + r14]
    __ imulq(r13, Address(r14, r15));                  //    imul r13, qword ptr [r14 + r15]
    __ imulq(r14, Address(r15, r16));                  //    imul r14, qword ptr [r15 + r16]
    __ imulq(r15, Address(r16, r17));                  //    imul r15, qword ptr [r16 + r17]
    __ imulq(r16, Address(r17, r18));                  //    imul r16, qword ptr [r17 + r18]
    __ imulq(r17, Address(r18, r19));                  //    imul r17, qword ptr [r18 + r19]
    __ imulq(r18, Address(r19, r20));                  //    imul r18, qword ptr [r19 + r20]
    __ imulq(r19, Address(r20, r21));                  //    imul r19, qword ptr [r20 + r21]
    __ imulq(r20, Address(r21, r22));                  //    imul r20, qword ptr [r21 + r22]
    __ imulq(r21, Address(r22, r23));                  //    imul r21, qword ptr [r22 + r23]
    __ imulq(r22, Address(r23, r24));                  //    imul r22, qword ptr [r23 + r24]
    __ imulq(r23, Address(r24, r25));                  //    imul r23, qword ptr [r24 + r25]
    __ imulq(r24, Address(r25, r26));                  //    imul r24, qword ptr [r25 + r26]
    __ imulq(r25, Address(r26, r27));                  //    imul r25, qword ptr [r26 + r27]
    __ imulq(r26, Address(r27, r28));                  //    imul r26, qword ptr [r27 + r28]
    __ imulq(r27, Address(r28, r29));                  //    imul r27, qword ptr [r28 + r29]
    __ imulq(r28, Address(r29, r30));                  //    imul r28, qword ptr [r29 + r30]
    __ imulq(r29, Address(r30, r31));                  //    imul r29, qword ptr [r30 + r31]
    __ imulq(r30, Address(r31, rcx));                  //    imul r30, qword ptr [r31 + rcx]
    __ imulq(r31, Address(rcx, rdx));                  //    imul r31, qword ptr [rcx + rdx]
    __ popcntq(rcx, Address(rdx, rbx));                //    popcnt rcx, qword ptr [rdx + rbx]
    __ popcntq(rdx, Address(rbx, r8));                 //    popcnt rdx, qword ptr [rbx + r8]
    __ popcntq(rbx, Address(r8, r9));                  //    popcnt rbx, qword ptr [r8 + r9]
    __ popcntq(r8, Address(r9, r10));                  //    popcnt r8, qword ptr [r9 + r10]
    __ popcntq(r9, Address(r10, r11));                 //    popcnt r9, qword ptr [r10 + r11]
    __ popcntq(r10, Address(r11, r12));                //    popcnt r10, qword ptr [r11 + r12]
    __ popcntq(r11, Address(r12, r13));                //    popcnt r11, qword ptr [r12 + r13]
    __ popcntq(r12, Address(r13, r14));                //    popcnt r12, qword ptr [r13 + r14]
    __ popcntq(r13, Address(r14, r15));                //    popcnt r13, qword ptr [r14 + r15]
    __ popcntq(r14, Address(r15, r16));                //    popcnt r14, qword ptr [r15 + r16]
    __ popcntq(r15, Address(r16, r17));                //    popcnt r15, qword ptr [r16 + r17]
    __ popcntq(r16, Address(r17, r18));                //    popcnt r16, qword ptr [r17 + r18]
    __ popcntq(r17, Address(r18, r19));                //    popcnt r17, qword ptr [r18 + r19]
    __ popcntq(r18, Address(r19, r20));                //    popcnt r18, qword ptr [r19 + r20]
    __ popcntq(r19, Address(r20, r21));                //    popcnt r19, qword ptr [r20 + r21]
    __ popcntq(r20, Address(r21, r22));                //    popcnt r20, qword ptr [r21 + r22]
    __ popcntq(r21, Address(r22, r23));                //    popcnt r21, qword ptr [r22 + r23]
    __ popcntq(r22, Address(r23, r24));                //    popcnt r22, qword ptr [r23 + r24]
    __ popcntq(r23, Address(r24, r25));                //    popcnt r23, qword ptr [r24 + r25]
    __ popcntq(r24, Address(r25, r26));                //    popcnt r24, qword ptr [r25 + r26]
    __ popcntq(r25, Address(r26, r27));                //    popcnt r25, qword ptr [r26 + r27]
    __ popcntq(r26, Address(r27, r28));                //    popcnt r26, qword ptr [r27 + r28]
    __ popcntq(r27, Address(r28, r29));                //    popcnt r27, qword ptr [r28 + r29]
    __ popcntq(r28, Address(r29, r30));                //    popcnt r28, qword ptr [r29 + r30]
    __ popcntq(r29, Address(r30, r31));                //    popcnt r29, qword ptr [r30 + r31]
    __ popcntq(r30, Address(r31, rcx));                //    popcnt r30, qword ptr [r31 + rcx]
    __ popcntq(r31, Address(rcx, rdx));                //    popcnt r31, qword ptr [rcx + rdx]
    __ sbbq(rcx, Address(rdx, rbx));                   //    sbb rcx, qword ptr [rdx + rbx]
    __ sbbq(rdx, Address(rbx, r8));                    //    sbb rdx, qword ptr [rbx + r8]
    __ sbbq(rbx, Address(r8, r9));                     //    sbb rbx, qword ptr [r8 + r9]
    __ sbbq(r8, Address(r9, r10));                     //    sbb r8, qword ptr [r9 + r10]
    __ sbbq(r9, Address(r10, r11));                    //    sbb r9, qword ptr [r10 + r11]
    __ sbbq(r10, Address(r11, r12));                   //    sbb r10, qword ptr [r11 + r12]
    __ sbbq(r11, Address(r12, r13));                   //    sbb r11, qword ptr [r12 + r13]
    __ sbbq(r12, Address(r13, r14));                   //    sbb r12, qword ptr [r13 + r14]
    __ sbbq(r13, Address(r14, r15));                   //    sbb r13, qword ptr [r14 + r15]
    __ sbbq(r14, Address(r15, r16));                   //    sbb r14, qword ptr [r15 + r16]
    __ sbbq(r15, Address(r16, r17));                   //    sbb r15, qword ptr [r16 + r17]
    __ sbbq(r16, Address(r17, r18));                   //    sbb r16, qword ptr [r17 + r18]
    __ sbbq(r17, Address(r18, r19));                   //    sbb r17, qword ptr [r18 + r19]
    __ sbbq(r18, Address(r19, r20));                   //    sbb r18, qword ptr [r19 + r20]
    __ sbbq(r19, Address(r20, r21));                   //    sbb r19, qword ptr [r20 + r21]
    __ sbbq(r20, Address(r21, r22));                   //    sbb r20, qword ptr [r21 + r22]
    __ sbbq(r21, Address(r22, r23));                   //    sbb r21, qword ptr [r22 + r23]
    __ sbbq(r22, Address(r23, r24));                   //    sbb r22, qword ptr [r23 + r24]
    __ sbbq(r23, Address(r24, r25));                   //    sbb r23, qword ptr [r24 + r25]
    __ sbbq(r24, Address(r25, r26));                   //    sbb r24, qword ptr [r25 + r26]
    __ sbbq(r25, Address(r26, r27));                   //    sbb r25, qword ptr [r26 + r27]
    __ sbbq(r26, Address(r27, r28));                   //    sbb r26, qword ptr [r27 + r28]
    __ sbbq(r27, Address(r28, r29));                   //    sbb r27, qword ptr [r28 + r29]
    __ sbbq(r28, Address(r29, r30));                   //    sbb r28, qword ptr [r29 + r30]
    __ sbbq(r29, Address(r30, r31));                   //    sbb r29, qword ptr [r30 + r31]
    __ sbbq(r30, Address(r31, rcx));                   //    sbb r30, qword ptr [r31 + rcx]
    __ sbbq(r31, Address(rcx, rdx));                   //    sbb r31, qword ptr [rcx + rdx]
    __ subq(rcx, Address(rdx, rbx));                   //    sub rcx, qword ptr [rdx + rbx]
    __ subq(rdx, Address(rbx, r8));                    //    sub rdx, qword ptr [rbx + r8]
    __ subq(rbx, Address(r8, r9));                     //    sub rbx, qword ptr [r8 + r9]
    __ subq(r8, Address(r9, r10));                     //    sub r8, qword ptr [r9 + r10]
    __ subq(r9, Address(r10, r11));                    //    sub r9, qword ptr [r10 + r11]
    __ subq(r10, Address(r11, r12));                   //    sub r10, qword ptr [r11 + r12]
    __ subq(r11, Address(r12, r13));                   //    sub r11, qword ptr [r12 + r13]
    __ subq(r12, Address(r13, r14));                   //    sub r12, qword ptr [r13 + r14]
    __ subq(r13, Address(r14, r15));                   //    sub r13, qword ptr [r14 + r15]
    __ subq(r14, Address(r15, r16));                   //    sub r14, qword ptr [r15 + r16]
    __ subq(r15, Address(r16, r17));                   //    sub r15, qword ptr [r16 + r17]
    __ subq(r16, Address(r17, r18));                   //    sub r16, qword ptr [r17 + r18]
    __ subq(r17, Address(r18, r19));                   //    sub r17, qword ptr [r18 + r19]
    __ subq(r18, Address(r19, r20));                   //    sub r18, qword ptr [r19 + r20]
    __ subq(r19, Address(r20, r21));                   //    sub r19, qword ptr [r20 + r21]
    __ subq(r20, Address(r21, r22));                   //    sub r20, qword ptr [r21 + r22]
    __ subq(r21, Address(r22, r23));                   //    sub r21, qword ptr [r22 + r23]
    __ subq(r22, Address(r23, r24));                   //    sub r22, qword ptr [r23 + r24]
    __ subq(r23, Address(r24, r25));                   //    sub r23, qword ptr [r24 + r25]
    __ subq(r24, Address(r25, r26));                   //    sub r24, qword ptr [r25 + r26]
    __ subq(r25, Address(r26, r27));                   //    sub r25, qword ptr [r26 + r27]
    __ subq(r26, Address(r27, r28));                   //    sub r26, qword ptr [r27 + r28]
    __ subq(r27, Address(r28, r29));                   //    sub r27, qword ptr [r28 + r29]
    __ subq(r28, Address(r29, r30));                   //    sub r28, qword ptr [r29 + r30]
    __ subq(r29, Address(r30, r31));                   //    sub r29, qword ptr [r30 + r31]
    __ subq(r30, Address(r31, rcx));                   //    sub r30, qword ptr [r31 + rcx]
    __ subq(r31, Address(rcx, rdx));                   //    sub r31, qword ptr [rcx + rdx]
    __ tzcntq(rcx, Address(rdx, rbx));                 //    tzcnt rcx, qword ptr [rdx + rbx]
    __ tzcntq(rdx, Address(rbx, r8));                  //    tzcnt rdx, qword ptr [rbx + r8]
    __ tzcntq(rbx, Address(r8, r9));                   //    tzcnt rbx, qword ptr [r8 + r9]
    __ tzcntq(r8, Address(r9, r10));                   //    tzcnt r8, qword ptr [r9 + r10]
    __ tzcntq(r9, Address(r10, r11));                  //    tzcnt r9, qword ptr [r10 + r11]
    __ tzcntq(r10, Address(r11, r12));                 //    tzcnt r10, qword ptr [r11 + r12]
    __ tzcntq(r11, Address(r12, r13));                 //    tzcnt r11, qword ptr [r12 + r13]
    __ tzcntq(r12, Address(r13, r14));                 //    tzcnt r12, qword ptr [r13 + r14]
    __ tzcntq(r13, Address(r14, r15));                 //    tzcnt r13, qword ptr [r14 + r15]
    __ tzcntq(r14, Address(r15, r16));                 //    tzcnt r14, qword ptr [r15 + r16]
    __ tzcntq(r15, Address(r16, r17));                 //    tzcnt r15, qword ptr [r16 + r17]
    __ tzcntq(r16, Address(r17, r18));                 //    tzcnt r16, qword ptr [r17 + r18]
    __ tzcntq(r17, Address(r18, r19));                 //    tzcnt r17, qword ptr [r18 + r19]
    __ tzcntq(r18, Address(r19, r20));                 //    tzcnt r18, qword ptr [r19 + r20]
    __ tzcntq(r19, Address(r20, r21));                 //    tzcnt r19, qword ptr [r20 + r21]
    __ tzcntq(r20, Address(r21, r22));                 //    tzcnt r20, qword ptr [r21 + r22]
    __ tzcntq(r21, Address(r22, r23));                 //    tzcnt r21, qword ptr [r22 + r23]
    __ tzcntq(r22, Address(r23, r24));                 //    tzcnt r22, qword ptr [r23 + r24]
    __ tzcntq(r23, Address(r24, r25));                 //    tzcnt r23, qword ptr [r24 + r25]
    __ tzcntq(r24, Address(r25, r26));                 //    tzcnt r24, qword ptr [r25 + r26]
    __ tzcntq(r25, Address(r26, r27));                 //    tzcnt r25, qword ptr [r26 + r27]
    __ tzcntq(r26, Address(r27, r28));                 //    tzcnt r26, qword ptr [r27 + r28]
    __ tzcntq(r27, Address(r28, r29));                 //    tzcnt r27, qword ptr [r28 + r29]
    __ tzcntq(r28, Address(r29, r30));                 //    tzcnt r28, qword ptr [r29 + r30]
    __ tzcntq(r29, Address(r30, r31));                 //    tzcnt r29, qword ptr [r30 + r31]
    __ tzcntq(r30, Address(r31, rcx));                 //    tzcnt r30, qword ptr [r31 + rcx]
    __ tzcntq(r31, Address(rcx, rdx));                 //    tzcnt r31, qword ptr [rcx + rdx]
    __ xorq(rcx, Address(rdx, rbx));                   //    xor rcx, qword ptr [rdx + rbx]
    __ xorq(rdx, Address(rbx, r8));                    //    xor rdx, qword ptr [rbx + r8]
    __ xorq(rbx, Address(r8, r9));                     //    xor rbx, qword ptr [r8 + r9]
    __ xorq(r8, Address(r9, r10));                     //    xor r8, qword ptr [r9 + r10]
    __ xorq(r9, Address(r10, r11));                    //    xor r9, qword ptr [r10 + r11]
    __ xorq(r10, Address(r11, r12));                   //    xor r10, qword ptr [r11 + r12]
    __ xorq(r11, Address(r12, r13));                   //    xor r11, qword ptr [r12 + r13]
    __ xorq(r12, Address(r13, r14));                   //    xor r12, qword ptr [r13 + r14]
    __ xorq(r13, Address(r14, r15));                   //    xor r13, qword ptr [r14 + r15]
    __ xorq(r14, Address(r15, r16));                   //    xor r14, qword ptr [r15 + r16]
    __ xorq(r15, Address(r16, r17));                   //    xor r15, qword ptr [r16 + r17]
    __ xorq(r16, Address(r17, r18));                   //    xor r16, qword ptr [r17 + r18]
    __ xorq(r17, Address(r18, r19));                   //    xor r17, qword ptr [r18 + r19]
    __ xorq(r18, Address(r19, r20));                   //    xor r18, qword ptr [r19 + r20]
    __ xorq(r19, Address(r20, r21));                   //    xor r19, qword ptr [r20 + r21]
    __ xorq(r20, Address(r21, r22));                   //    xor r20, qword ptr [r21 + r22]
    __ xorq(r21, Address(r22, r23));                   //    xor r21, qword ptr [r22 + r23]
    __ xorq(r22, Address(r23, r24));                   //    xor r22, qword ptr [r23 + r24]
    __ xorq(r23, Address(r24, r25));                   //    xor r23, qword ptr [r24 + r25]
    __ xorq(r24, Address(r25, r26));                   //    xor r24, qword ptr [r25 + r26]
    __ xorq(r25, Address(r26, r27));                   //    xor r25, qword ptr [r26 + r27]
    __ xorq(r26, Address(r27, r28));                   //    xor r26, qword ptr [r27 + r28]
    __ xorq(r27, Address(r28, r29));                   //    xor r27, qword ptr [r28 + r29]
    __ xorq(r28, Address(r29, r30));                   //    xor r28, qword ptr [r29 + r30]
    __ xorq(r29, Address(r30, r31));                   //    xor r29, qword ptr [r30 + r31]
    __ xorq(r30, Address(r31, rcx));                   //    xor r30, qword ptr [r31 + rcx]
    __ xorq(r31, Address(rcx, rdx));                   //    xor r31, qword ptr [rcx + rdx]
    __ addq(rcx, 1);                                   //    add rcx, 1
    __ addq(rcx, 16);                                  //    add rcx, 16
    __ addq(rcx, 256);                                 //    add rcx, 256
    __ addq(rcx, 4096);                                //    add rcx, 4096
    __ addq(rcx, 65536);                               //    add rcx, 65536
    __ addq(rcx, 1048576);                             //    add rcx, 1048576
    __ addq(rcx, 16777216);                            //    add rcx, 16777216
    __ addq(rcx, 268435456);                           //    add rcx, 268435456
    __ addq(rdx, 1);                                   //    add rdx, 1
    __ addq(rdx, 16);                                  //    add rdx, 16
    __ addq(rdx, 256);                                 //    add rdx, 256
    __ addq(rdx, 4096);                                //    add rdx, 4096
    __ addq(rdx, 65536);                               //    add rdx, 65536
    __ addq(rdx, 1048576);                             //    add rdx, 1048576
    __ addq(rdx, 16777216);                            //    add rdx, 16777216
    __ addq(rdx, 268435456);                           //    add rdx, 268435456
    __ addq(rbx, 1);                                   //    add rbx, 1
    __ addq(rbx, 16);                                  //    add rbx, 16
    __ addq(rbx, 256);                                 //    add rbx, 256
    __ addq(rbx, 4096);                                //    add rbx, 4096
    __ addq(rbx, 65536);                               //    add rbx, 65536
    __ addq(rbx, 1048576);                             //    add rbx, 1048576
    __ addq(rbx, 16777216);                            //    add rbx, 16777216
    __ addq(rbx, 268435456);                           //    add rbx, 268435456
    __ addq(r8, 1);                                    //    add r8, 1
    __ addq(r8, 16);                                   //    add r8, 16
    __ addq(r8, 256);                                  //    add r8, 256
    __ addq(r8, 4096);                                 //    add r8, 4096
    __ addq(r8, 65536);                                //    add r8, 65536
    __ addq(r8, 1048576);                              //    add r8, 1048576
    __ addq(r8, 16777216);                             //    add r8, 16777216
    __ addq(r8, 268435456);                            //    add r8, 268435456
    __ addq(r9, 1);                                    //    add r9, 1
    __ addq(r9, 16);                                   //    add r9, 16
    __ addq(r9, 256);                                  //    add r9, 256
    __ addq(r9, 4096);                                 //    add r9, 4096
    __ addq(r9, 65536);                                //    add r9, 65536
    __ addq(r9, 1048576);                              //    add r9, 1048576
    __ addq(r9, 16777216);                             //    add r9, 16777216
    __ addq(r9, 268435456);                            //    add r9, 268435456
    __ addq(r10, 1);                                   //    add r10, 1
    __ addq(r10, 16);                                  //    add r10, 16
    __ addq(r10, 256);                                 //    add r10, 256
    __ addq(r10, 4096);                                //    add r10, 4096
    __ addq(r10, 65536);                               //    add r10, 65536
    __ addq(r10, 1048576);                             //    add r10, 1048576
    __ addq(r10, 16777216);                            //    add r10, 16777216
    __ addq(r10, 268435456);                           //    add r10, 268435456
    __ addq(r11, 1);                                   //    add r11, 1
    __ addq(r11, 16);                                  //    add r11, 16
    __ addq(r11, 256);                                 //    add r11, 256
    __ addq(r11, 4096);                                //    add r11, 4096
    __ addq(r11, 65536);                               //    add r11, 65536
    __ addq(r11, 1048576);                             //    add r11, 1048576
    __ addq(r11, 16777216);                            //    add r11, 16777216
    __ addq(r11, 268435456);                           //    add r11, 268435456
    __ addq(r12, 1);                                   //    add r12, 1
    __ addq(r12, 16);                                  //    add r12, 16
    __ addq(r12, 256);                                 //    add r12, 256
    __ addq(r12, 4096);                                //    add r12, 4096
    __ addq(r12, 65536);                               //    add r12, 65536
    __ addq(r12, 1048576);                             //    add r12, 1048576
    __ addq(r12, 16777216);                            //    add r12, 16777216
    __ addq(r12, 268435456);                           //    add r12, 268435456
    __ addq(r13, 1);                                   //    add r13, 1
    __ addq(r13, 16);                                  //    add r13, 16
    __ addq(r13, 256);                                 //    add r13, 256
    __ addq(r13, 4096);                                //    add r13, 4096
    __ addq(r13, 65536);                               //    add r13, 65536
    __ addq(r13, 1048576);                             //    add r13, 1048576
    __ addq(r13, 16777216);                            //    add r13, 16777216
    __ addq(r13, 268435456);                           //    add r13, 268435456
    __ addq(r14, 1);                                   //    add r14, 1
    __ addq(r14, 16);                                  //    add r14, 16
    __ addq(r14, 256);                                 //    add r14, 256
    __ addq(r14, 4096);                                //    add r14, 4096
    __ addq(r14, 65536);                               //    add r14, 65536
    __ addq(r14, 1048576);                             //    add r14, 1048576
    __ addq(r14, 16777216);                            //    add r14, 16777216
    __ addq(r14, 268435456);                           //    add r14, 268435456
    __ addq(r15, 1);                                   //    add r15, 1
    __ addq(r15, 16);                                  //    add r15, 16
    __ addq(r15, 256);                                 //    add r15, 256
    __ addq(r15, 4096);                                //    add r15, 4096
    __ addq(r15, 65536);                               //    add r15, 65536
    __ addq(r15, 1048576);                             //    add r15, 1048576
    __ addq(r15, 16777216);                            //    add r15, 16777216
    __ addq(r15, 268435456);                           //    add r15, 268435456
    __ addq(r16, 1);                                   //    add r16, 1
    __ addq(r16, 16);                                  //    add r16, 16
    __ addq(r16, 256);                                 //    add r16, 256
    __ addq(r16, 4096);                                //    add r16, 4096
    __ addq(r16, 65536);                               //    add r16, 65536
    __ addq(r16, 1048576);                             //    add r16, 1048576
    __ addq(r16, 16777216);                            //    add r16, 16777216
    __ addq(r16, 268435456);                           //    add r16, 268435456
    __ addq(r17, 1);                                   //    add r17, 1
    __ addq(r17, 16);                                  //    add r17, 16
    __ addq(r17, 256);                                 //    add r17, 256
    __ addq(r17, 4096);                                //    add r17, 4096
    __ addq(r17, 65536);                               //    add r17, 65536
    __ addq(r17, 1048576);                             //    add r17, 1048576
    __ addq(r17, 16777216);                            //    add r17, 16777216
    __ addq(r17, 268435456);                           //    add r17, 268435456
    __ addq(r18, 1);                                   //    add r18, 1
    __ addq(r18, 16);                                  //    add r18, 16
    __ addq(r18, 256);                                 //    add r18, 256
    __ addq(r18, 4096);                                //    add r18, 4096
    __ addq(r18, 65536);                               //    add r18, 65536
    __ addq(r18, 1048576);                             //    add r18, 1048576
    __ addq(r18, 16777216);                            //    add r18, 16777216
    __ addq(r18, 268435456);                           //    add r18, 268435456
    __ addq(r19, 1);                                   //    add r19, 1
    __ addq(r19, 16);                                  //    add r19, 16
    __ addq(r19, 256);                                 //    add r19, 256
    __ addq(r19, 4096);                                //    add r19, 4096
    __ addq(r19, 65536);                               //    add r19, 65536
    __ addq(r19, 1048576);                             //    add r19, 1048576
    __ addq(r19, 16777216);                            //    add r19, 16777216
    __ addq(r19, 268435456);                           //    add r19, 268435456
    __ addq(r20, 1);                                   //    add r20, 1
    __ addq(r20, 16);                                  //    add r20, 16
    __ addq(r20, 256);                                 //    add r20, 256
    __ addq(r20, 4096);                                //    add r20, 4096
    __ addq(r20, 65536);                               //    add r20, 65536
    __ addq(r20, 1048576);                             //    add r20, 1048576
    __ addq(r20, 16777216);                            //    add r20, 16777216
    __ addq(r20, 268435456);                           //    add r20, 268435456
    __ addq(r21, 1);                                   //    add r21, 1
    __ addq(r21, 16);                                  //    add r21, 16
    __ addq(r21, 256);                                 //    add r21, 256
    __ addq(r21, 4096);                                //    add r21, 4096
    __ addq(r21, 65536);                               //    add r21, 65536
    __ addq(r21, 1048576);                             //    add r21, 1048576
    __ addq(r21, 16777216);                            //    add r21, 16777216
    __ addq(r21, 268435456);                           //    add r21, 268435456
    __ addq(r22, 1);                                   //    add r22, 1
    __ addq(r22, 16);                                  //    add r22, 16
    __ addq(r22, 256);                                 //    add r22, 256
    __ addq(r22, 4096);                                //    add r22, 4096
    __ addq(r22, 65536);                               //    add r22, 65536
    __ addq(r22, 1048576);                             //    add r22, 1048576
    __ addq(r22, 16777216);                            //    add r22, 16777216
    __ addq(r22, 268435456);                           //    add r22, 268435456
    __ addq(r23, 1);                                   //    add r23, 1
    __ addq(r23, 16);                                  //    add r23, 16
    __ addq(r23, 256);                                 //    add r23, 256
    __ addq(r23, 4096);                                //    add r23, 4096
    __ addq(r23, 65536);                               //    add r23, 65536
    __ addq(r23, 1048576);                             //    add r23, 1048576
    __ addq(r23, 16777216);                            //    add r23, 16777216
    __ addq(r23, 268435456);                           //    add r23, 268435456
    __ addq(r24, 1);                                   //    add r24, 1
    __ addq(r24, 16);                                  //    add r24, 16
    __ addq(r24, 256);                                 //    add r24, 256
    __ addq(r24, 4096);                                //    add r24, 4096
    __ addq(r24, 65536);                               //    add r24, 65536
    __ addq(r24, 1048576);                             //    add r24, 1048576
    __ addq(r24, 16777216);                            //    add r24, 16777216
    __ addq(r24, 268435456);                           //    add r24, 268435456
    __ addq(r25, 1);                                   //    add r25, 1
    __ addq(r25, 16);                                  //    add r25, 16
    __ addq(r25, 256);                                 //    add r25, 256
    __ addq(r25, 4096);                                //    add r25, 4096
    __ addq(r25, 65536);                               //    add r25, 65536
    __ addq(r25, 1048576);                             //    add r25, 1048576
    __ addq(r25, 16777216);                            //    add r25, 16777216
    __ addq(r25, 268435456);                           //    add r25, 268435456
    __ addq(r26, 1);                                   //    add r26, 1
    __ addq(r26, 16);                                  //    add r26, 16
    __ addq(r26, 256);                                 //    add r26, 256
    __ addq(r26, 4096);                                //    add r26, 4096
    __ addq(r26, 65536);                               //    add r26, 65536
    __ addq(r26, 1048576);                             //    add r26, 1048576
    __ addq(r26, 16777216);                            //    add r26, 16777216
    __ addq(r26, 268435456);                           //    add r26, 268435456
    __ addq(r27, 1);                                   //    add r27, 1
    __ addq(r27, 16);                                  //    add r27, 16
    __ addq(r27, 256);                                 //    add r27, 256
    __ addq(r27, 4096);                                //    add r27, 4096
    __ addq(r27, 65536);                               //    add r27, 65536
    __ addq(r27, 1048576);                             //    add r27, 1048576
    __ addq(r27, 16777216);                            //    add r27, 16777216
    __ addq(r27, 268435456);                           //    add r27, 268435456
    __ addq(r28, 1);                                   //    add r28, 1
    __ addq(r28, 16);                                  //    add r28, 16
    __ addq(r28, 256);                                 //    add r28, 256
    __ addq(r28, 4096);                                //    add r28, 4096
    __ addq(r28, 65536);                               //    add r28, 65536
    __ addq(r28, 1048576);                             //    add r28, 1048576
    __ addq(r28, 16777216);                            //    add r28, 16777216
    __ addq(r28, 268435456);                           //    add r28, 268435456
    __ addq(r29, 1);                                   //    add r29, 1
    __ addq(r29, 16);                                  //    add r29, 16
    __ addq(r29, 256);                                 //    add r29, 256
    __ addq(r29, 4096);                                //    add r29, 4096
    __ addq(r29, 65536);                               //    add r29, 65536
    __ addq(r29, 1048576);                             //    add r29, 1048576
    __ addq(r29, 16777216);                            //    add r29, 16777216
    __ addq(r29, 268435456);                           //    add r29, 268435456
    __ addq(r30, 1);                                   //    add r30, 1
    __ addq(r30, 16);                                  //    add r30, 16
    __ addq(r30, 256);                                 //    add r30, 256
    __ addq(r30, 4096);                                //    add r30, 4096
    __ addq(r30, 65536);                               //    add r30, 65536
    __ addq(r30, 1048576);                             //    add r30, 1048576
    __ addq(r30, 16777216);                            //    add r30, 16777216
    __ addq(r30, 268435456);                           //    add r30, 268435456
    __ addq(r31, 1);                                   //    add r31, 1
    __ addq(r31, 16);                                  //    add r31, 16
    __ addq(r31, 256);                                 //    add r31, 256
    __ addq(r31, 4096);                                //    add r31, 4096
    __ addq(r31, 65536);                               //    add r31, 65536
    __ addq(r31, 1048576);                             //    add r31, 1048576
    __ addq(r31, 16777216);                            //    add r31, 16777216
    __ addq(r31, 268435456);                           //    add r31, 268435456
    __ andq(rcx, 1);                                   //    and rcx, 1
    __ andq(rcx, 16);                                  //    and rcx, 16
    __ andq(rcx, 256);                                 //    and rcx, 256
    __ andq(rcx, 4096);                                //    and rcx, 4096
    __ andq(rcx, 65536);                               //    and rcx, 65536
    __ andq(rcx, 1048576);                             //    and rcx, 1048576
    __ andq(rcx, 16777216);                            //    and rcx, 16777216
    __ andq(rcx, 268435456);                           //    and rcx, 268435456
    __ andq(rdx, 1);                                   //    and rdx, 1
    __ andq(rdx, 16);                                  //    and rdx, 16
    __ andq(rdx, 256);                                 //    and rdx, 256
    __ andq(rdx, 4096);                                //    and rdx, 4096
    __ andq(rdx, 65536);                               //    and rdx, 65536
    __ andq(rdx, 1048576);                             //    and rdx, 1048576
    __ andq(rdx, 16777216);                            //    and rdx, 16777216
    __ andq(rdx, 268435456);                           //    and rdx, 268435456
    __ andq(rbx, 1);                                   //    and rbx, 1
    __ andq(rbx, 16);                                  //    and rbx, 16
    __ andq(rbx, 256);                                 //    and rbx, 256
    __ andq(rbx, 4096);                                //    and rbx, 4096
    __ andq(rbx, 65536);                               //    and rbx, 65536
    __ andq(rbx, 1048576);                             //    and rbx, 1048576
    __ andq(rbx, 16777216);                            //    and rbx, 16777216
    __ andq(rbx, 268435456);                           //    and rbx, 268435456
    __ andq(r8, 1);                                    //    and r8, 1
    __ andq(r8, 16);                                   //    and r8, 16
    __ andq(r8, 256);                                  //    and r8, 256
    __ andq(r8, 4096);                                 //    and r8, 4096
    __ andq(r8, 65536);                                //    and r8, 65536
    __ andq(r8, 1048576);                              //    and r8, 1048576
    __ andq(r8, 16777216);                             //    and r8, 16777216
    __ andq(r8, 268435456);                            //    and r8, 268435456
    __ andq(r9, 1);                                    //    and r9, 1
    __ andq(r9, 16);                                   //    and r9, 16
    __ andq(r9, 256);                                  //    and r9, 256
    __ andq(r9, 4096);                                 //    and r9, 4096
    __ andq(r9, 65536);                                //    and r9, 65536
    __ andq(r9, 1048576);                              //    and r9, 1048576
    __ andq(r9, 16777216);                             //    and r9, 16777216
    __ andq(r9, 268435456);                            //    and r9, 268435456
    __ andq(r10, 1);                                   //    and r10, 1
    __ andq(r10, 16);                                  //    and r10, 16
    __ andq(r10, 256);                                 //    and r10, 256
    __ andq(r10, 4096);                                //    and r10, 4096
    __ andq(r10, 65536);                               //    and r10, 65536
    __ andq(r10, 1048576);                             //    and r10, 1048576
    __ andq(r10, 16777216);                            //    and r10, 16777216
    __ andq(r10, 268435456);                           //    and r10, 268435456
    __ andq(r11, 1);                                   //    and r11, 1
    __ andq(r11, 16);                                  //    and r11, 16
    __ andq(r11, 256);                                 //    and r11, 256
    __ andq(r11, 4096);                                //    and r11, 4096
    __ andq(r11, 65536);                               //    and r11, 65536
    __ andq(r11, 1048576);                             //    and r11, 1048576
    __ andq(r11, 16777216);                            //    and r11, 16777216
    __ andq(r11, 268435456);                           //    and r11, 268435456
    __ andq(r12, 1);                                   //    and r12, 1
    __ andq(r12, 16);                                  //    and r12, 16
    __ andq(r12, 256);                                 //    and r12, 256
    __ andq(r12, 4096);                                //    and r12, 4096
    __ andq(r12, 65536);                               //    and r12, 65536
    __ andq(r12, 1048576);                             //    and r12, 1048576
    __ andq(r12, 16777216);                            //    and r12, 16777216
    __ andq(r12, 268435456);                           //    and r12, 268435456
    __ andq(r13, 1);                                   //    and r13, 1
    __ andq(r13, 16);                                  //    and r13, 16
    __ andq(r13, 256);                                 //    and r13, 256
    __ andq(r13, 4096);                                //    and r13, 4096
    __ andq(r13, 65536);                               //    and r13, 65536
    __ andq(r13, 1048576);                             //    and r13, 1048576
    __ andq(r13, 16777216);                            //    and r13, 16777216
    __ andq(r13, 268435456);                           //    and r13, 268435456
    __ andq(r14, 1);                                   //    and r14, 1
    __ andq(r14, 16);                                  //    and r14, 16
    __ andq(r14, 256);                                 //    and r14, 256
    __ andq(r14, 4096);                                //    and r14, 4096
    __ andq(r14, 65536);                               //    and r14, 65536
    __ andq(r14, 1048576);                             //    and r14, 1048576
    __ andq(r14, 16777216);                            //    and r14, 16777216
    __ andq(r14, 268435456);                           //    and r14, 268435456
    __ andq(r15, 1);                                   //    and r15, 1
    __ andq(r15, 16);                                  //    and r15, 16
    __ andq(r15, 256);                                 //    and r15, 256
    __ andq(r15, 4096);                                //    and r15, 4096
    __ andq(r15, 65536);                               //    and r15, 65536
    __ andq(r15, 1048576);                             //    and r15, 1048576
    __ andq(r15, 16777216);                            //    and r15, 16777216
    __ andq(r15, 268435456);                           //    and r15, 268435456
    __ andq(r16, 1);                                   //    and r16, 1
    __ andq(r16, 16);                                  //    and r16, 16
    __ andq(r16, 256);                                 //    and r16, 256
    __ andq(r16, 4096);                                //    and r16, 4096
    __ andq(r16, 65536);                               //    and r16, 65536
    __ andq(r16, 1048576);                             //    and r16, 1048576
    __ andq(r16, 16777216);                            //    and r16, 16777216
    __ andq(r16, 268435456);                           //    and r16, 268435456
    __ andq(r17, 1);                                   //    and r17, 1
    __ andq(r17, 16);                                  //    and r17, 16
    __ andq(r17, 256);                                 //    and r17, 256
    __ andq(r17, 4096);                                //    and r17, 4096
    __ andq(r17, 65536);                               //    and r17, 65536
    __ andq(r17, 1048576);                             //    and r17, 1048576
    __ andq(r17, 16777216);                            //    and r17, 16777216
    __ andq(r17, 268435456);                           //    and r17, 268435456
    __ andq(r18, 1);                                   //    and r18, 1
    __ andq(r18, 16);                                  //    and r18, 16
    __ andq(r18, 256);                                 //    and r18, 256
    __ andq(r18, 4096);                                //    and r18, 4096
    __ andq(r18, 65536);                               //    and r18, 65536
    __ andq(r18, 1048576);                             //    and r18, 1048576
    __ andq(r18, 16777216);                            //    and r18, 16777216
    __ andq(r18, 268435456);                           //    and r18, 268435456
    __ andq(r19, 1);                                   //    and r19, 1
    __ andq(r19, 16);                                  //    and r19, 16
    __ andq(r19, 256);                                 //    and r19, 256
    __ andq(r19, 4096);                                //    and r19, 4096
    __ andq(r19, 65536);                               //    and r19, 65536
    __ andq(r19, 1048576);                             //    and r19, 1048576
    __ andq(r19, 16777216);                            //    and r19, 16777216
    __ andq(r19, 268435456);                           //    and r19, 268435456
    __ andq(r20, 1);                                   //    and r20, 1
    __ andq(r20, 16);                                  //    and r20, 16
    __ andq(r20, 256);                                 //    and r20, 256
    __ andq(r20, 4096);                                //    and r20, 4096
    __ andq(r20, 65536);                               //    and r20, 65536
    __ andq(r20, 1048576);                             //    and r20, 1048576
    __ andq(r20, 16777216);                            //    and r20, 16777216
    __ andq(r20, 268435456);                           //    and r20, 268435456
    __ andq(r21, 1);                                   //    and r21, 1
    __ andq(r21, 16);                                  //    and r21, 16
    __ andq(r21, 256);                                 //    and r21, 256
    __ andq(r21, 4096);                                //    and r21, 4096
    __ andq(r21, 65536);                               //    and r21, 65536
    __ andq(r21, 1048576);                             //    and r21, 1048576
    __ andq(r21, 16777216);                            //    and r21, 16777216
    __ andq(r21, 268435456);                           //    and r21, 268435456
    __ andq(r22, 1);                                   //    and r22, 1
    __ andq(r22, 16);                                  //    and r22, 16
    __ andq(r22, 256);                                 //    and r22, 256
    __ andq(r22, 4096);                                //    and r22, 4096
    __ andq(r22, 65536);                               //    and r22, 65536
    __ andq(r22, 1048576);                             //    and r22, 1048576
    __ andq(r22, 16777216);                            //    and r22, 16777216
    __ andq(r22, 268435456);                           //    and r22, 268435456
    __ andq(r23, 1);                                   //    and r23, 1
    __ andq(r23, 16);                                  //    and r23, 16
    __ andq(r23, 256);                                 //    and r23, 256
    __ andq(r23, 4096);                                //    and r23, 4096
    __ andq(r23, 65536);                               //    and r23, 65536
    __ andq(r23, 1048576);                             //    and r23, 1048576
    __ andq(r23, 16777216);                            //    and r23, 16777216
    __ andq(r23, 268435456);                           //    and r23, 268435456
    __ andq(r24, 1);                                   //    and r24, 1
    __ andq(r24, 16);                                  //    and r24, 16
    __ andq(r24, 256);                                 //    and r24, 256
    __ andq(r24, 4096);                                //    and r24, 4096
    __ andq(r24, 65536);                               //    and r24, 65536
    __ andq(r24, 1048576);                             //    and r24, 1048576
    __ andq(r24, 16777216);                            //    and r24, 16777216
    __ andq(r24, 268435456);                           //    and r24, 268435456
    __ andq(r25, 1);                                   //    and r25, 1
    __ andq(r25, 16);                                  //    and r25, 16
    __ andq(r25, 256);                                 //    and r25, 256
    __ andq(r25, 4096);                                //    and r25, 4096
    __ andq(r25, 65536);                               //    and r25, 65536
    __ andq(r25, 1048576);                             //    and r25, 1048576
    __ andq(r25, 16777216);                            //    and r25, 16777216
    __ andq(r25, 268435456);                           //    and r25, 268435456
    __ andq(r26, 1);                                   //    and r26, 1
    __ andq(r26, 16);                                  //    and r26, 16
    __ andq(r26, 256);                                 //    and r26, 256
    __ andq(r26, 4096);                                //    and r26, 4096
    __ andq(r26, 65536);                               //    and r26, 65536
    __ andq(r26, 1048576);                             //    and r26, 1048576
    __ andq(r26, 16777216);                            //    and r26, 16777216
    __ andq(r26, 268435456);                           //    and r26, 268435456
    __ andq(r27, 1);                                   //    and r27, 1
    __ andq(r27, 16);                                  //    and r27, 16
    __ andq(r27, 256);                                 //    and r27, 256
    __ andq(r27, 4096);                                //    and r27, 4096
    __ andq(r27, 65536);                               //    and r27, 65536
    __ andq(r27, 1048576);                             //    and r27, 1048576
    __ andq(r27, 16777216);                            //    and r27, 16777216
    __ andq(r27, 268435456);                           //    and r27, 268435456
    __ andq(r28, 1);                                   //    and r28, 1
    __ andq(r28, 16);                                  //    and r28, 16
    __ andq(r28, 256);                                 //    and r28, 256
    __ andq(r28, 4096);                                //    and r28, 4096
    __ andq(r28, 65536);                               //    and r28, 65536
    __ andq(r28, 1048576);                             //    and r28, 1048576
    __ andq(r28, 16777216);                            //    and r28, 16777216
    __ andq(r28, 268435456);                           //    and r28, 268435456
    __ andq(r29, 1);                                   //    and r29, 1
    __ andq(r29, 16);                                  //    and r29, 16
    __ andq(r29, 256);                                 //    and r29, 256
    __ andq(r29, 4096);                                //    and r29, 4096
    __ andq(r29, 65536);                               //    and r29, 65536
    __ andq(r29, 1048576);                             //    and r29, 1048576
    __ andq(r29, 16777216);                            //    and r29, 16777216
    __ andq(r29, 268435456);                           //    and r29, 268435456
    __ andq(r30, 1);                                   //    and r30, 1
    __ andq(r30, 16);                                  //    and r30, 16
    __ andq(r30, 256);                                 //    and r30, 256
    __ andq(r30, 4096);                                //    and r30, 4096
    __ andq(r30, 65536);                               //    and r30, 65536
    __ andq(r30, 1048576);                             //    and r30, 1048576
    __ andq(r30, 16777216);                            //    and r30, 16777216
    __ andq(r30, 268435456);                           //    and r30, 268435456
    __ andq(r31, 1);                                   //    and r31, 1
    __ andq(r31, 16);                                  //    and r31, 16
    __ andq(r31, 256);                                 //    and r31, 256
    __ andq(r31, 4096);                                //    and r31, 4096
    __ andq(r31, 65536);                               //    and r31, 65536
    __ andq(r31, 1048576);                             //    and r31, 1048576
    __ andq(r31, 16777216);                            //    and r31, 16777216
    __ andq(r31, 268435456);                           //    and r31, 268435456
    __ adcq(rcx, 1);                                   //    adc rcx, 1
    __ adcq(rcx, 16);                                  //    adc rcx, 16
    __ adcq(rcx, 256);                                 //    adc rcx, 256
    __ adcq(rcx, 4096);                                //    adc rcx, 4096
    __ adcq(rcx, 65536);                               //    adc rcx, 65536
    __ adcq(rcx, 1048576);                             //    adc rcx, 1048576
    __ adcq(rcx, 16777216);                            //    adc rcx, 16777216
    __ adcq(rcx, 268435456);                           //    adc rcx, 268435456
    __ adcq(rdx, 1);                                   //    adc rdx, 1
    __ adcq(rdx, 16);                                  //    adc rdx, 16
    __ adcq(rdx, 256);                                 //    adc rdx, 256
    __ adcq(rdx, 4096);                                //    adc rdx, 4096
    __ adcq(rdx, 65536);                               //    adc rdx, 65536
    __ adcq(rdx, 1048576);                             //    adc rdx, 1048576
    __ adcq(rdx, 16777216);                            //    adc rdx, 16777216
    __ adcq(rdx, 268435456);                           //    adc rdx, 268435456
    __ adcq(rbx, 1);                                   //    adc rbx, 1
    __ adcq(rbx, 16);                                  //    adc rbx, 16
    __ adcq(rbx, 256);                                 //    adc rbx, 256
    __ adcq(rbx, 4096);                                //    adc rbx, 4096
    __ adcq(rbx, 65536);                               //    adc rbx, 65536
    __ adcq(rbx, 1048576);                             //    adc rbx, 1048576
    __ adcq(rbx, 16777216);                            //    adc rbx, 16777216
    __ adcq(rbx, 268435456);                           //    adc rbx, 268435456
    __ adcq(r8, 1);                                    //    adc r8, 1
    __ adcq(r8, 16);                                   //    adc r8, 16
    __ adcq(r8, 256);                                  //    adc r8, 256
    __ adcq(r8, 4096);                                 //    adc r8, 4096
    __ adcq(r8, 65536);                                //    adc r8, 65536
    __ adcq(r8, 1048576);                              //    adc r8, 1048576
    __ adcq(r8, 16777216);                             //    adc r8, 16777216
    __ adcq(r8, 268435456);                            //    adc r8, 268435456
    __ adcq(r9, 1);                                    //    adc r9, 1
    __ adcq(r9, 16);                                   //    adc r9, 16
    __ adcq(r9, 256);                                  //    adc r9, 256
    __ adcq(r9, 4096);                                 //    adc r9, 4096
    __ adcq(r9, 65536);                                //    adc r9, 65536
    __ adcq(r9, 1048576);                              //    adc r9, 1048576
    __ adcq(r9, 16777216);                             //    adc r9, 16777216
    __ adcq(r9, 268435456);                            //    adc r9, 268435456
    __ adcq(r10, 1);                                   //    adc r10, 1
    __ adcq(r10, 16);                                  //    adc r10, 16
    __ adcq(r10, 256);                                 //    adc r10, 256
    __ adcq(r10, 4096);                                //    adc r10, 4096
    __ adcq(r10, 65536);                               //    adc r10, 65536
    __ adcq(r10, 1048576);                             //    adc r10, 1048576
    __ adcq(r10, 16777216);                            //    adc r10, 16777216
    __ adcq(r10, 268435456);                           //    adc r10, 268435456
    __ adcq(r11, 1);                                   //    adc r11, 1
    __ adcq(r11, 16);                                  //    adc r11, 16
    __ adcq(r11, 256);                                 //    adc r11, 256
    __ adcq(r11, 4096);                                //    adc r11, 4096
    __ adcq(r11, 65536);                               //    adc r11, 65536
    __ adcq(r11, 1048576);                             //    adc r11, 1048576
    __ adcq(r11, 16777216);                            //    adc r11, 16777216
    __ adcq(r11, 268435456);                           //    adc r11, 268435456
    __ adcq(r12, 1);                                   //    adc r12, 1
    __ adcq(r12, 16);                                  //    adc r12, 16
    __ adcq(r12, 256);                                 //    adc r12, 256
    __ adcq(r12, 4096);                                //    adc r12, 4096
    __ adcq(r12, 65536);                               //    adc r12, 65536
    __ adcq(r12, 1048576);                             //    adc r12, 1048576
    __ adcq(r12, 16777216);                            //    adc r12, 16777216
    __ adcq(r12, 268435456);                           //    adc r12, 268435456
    __ adcq(r13, 1);                                   //    adc r13, 1
    __ adcq(r13, 16);                                  //    adc r13, 16
    __ adcq(r13, 256);                                 //    adc r13, 256
    __ adcq(r13, 4096);                                //    adc r13, 4096
    __ adcq(r13, 65536);                               //    adc r13, 65536
    __ adcq(r13, 1048576);                             //    adc r13, 1048576
    __ adcq(r13, 16777216);                            //    adc r13, 16777216
    __ adcq(r13, 268435456);                           //    adc r13, 268435456
    __ adcq(r14, 1);                                   //    adc r14, 1
    __ adcq(r14, 16);                                  //    adc r14, 16
    __ adcq(r14, 256);                                 //    adc r14, 256
    __ adcq(r14, 4096);                                //    adc r14, 4096
    __ adcq(r14, 65536);                               //    adc r14, 65536
    __ adcq(r14, 1048576);                             //    adc r14, 1048576
    __ adcq(r14, 16777216);                            //    adc r14, 16777216
    __ adcq(r14, 268435456);                           //    adc r14, 268435456
    __ adcq(r15, 1);                                   //    adc r15, 1
    __ adcq(r15, 16);                                  //    adc r15, 16
    __ adcq(r15, 256);                                 //    adc r15, 256
    __ adcq(r15, 4096);                                //    adc r15, 4096
    __ adcq(r15, 65536);                               //    adc r15, 65536
    __ adcq(r15, 1048576);                             //    adc r15, 1048576
    __ adcq(r15, 16777216);                            //    adc r15, 16777216
    __ adcq(r15, 268435456);                           //    adc r15, 268435456
    __ adcq(r16, 1);                                   //    adc r16, 1
    __ adcq(r16, 16);                                  //    adc r16, 16
    __ adcq(r16, 256);                                 //    adc r16, 256
    __ adcq(r16, 4096);                                //    adc r16, 4096
    __ adcq(r16, 65536);                               //    adc r16, 65536
    __ adcq(r16, 1048576);                             //    adc r16, 1048576
    __ adcq(r16, 16777216);                            //    adc r16, 16777216
    __ adcq(r16, 268435456);                           //    adc r16, 268435456
    __ adcq(r17, 1);                                   //    adc r17, 1
    __ adcq(r17, 16);                                  //    adc r17, 16
    __ adcq(r17, 256);                                 //    adc r17, 256
    __ adcq(r17, 4096);                                //    adc r17, 4096
    __ adcq(r17, 65536);                               //    adc r17, 65536
    __ adcq(r17, 1048576);                             //    adc r17, 1048576
    __ adcq(r17, 16777216);                            //    adc r17, 16777216
    __ adcq(r17, 268435456);                           //    adc r17, 268435456
    __ adcq(r18, 1);                                   //    adc r18, 1
    __ adcq(r18, 16);                                  //    adc r18, 16
    __ adcq(r18, 256);                                 //    adc r18, 256
    __ adcq(r18, 4096);                                //    adc r18, 4096
    __ adcq(r18, 65536);                               //    adc r18, 65536
    __ adcq(r18, 1048576);                             //    adc r18, 1048576
    __ adcq(r18, 16777216);                            //    adc r18, 16777216
    __ adcq(r18, 268435456);                           //    adc r18, 268435456
    __ adcq(r19, 1);                                   //    adc r19, 1
    __ adcq(r19, 16);                                  //    adc r19, 16
    __ adcq(r19, 256);                                 //    adc r19, 256
    __ adcq(r19, 4096);                                //    adc r19, 4096
    __ adcq(r19, 65536);                               //    adc r19, 65536
    __ adcq(r19, 1048576);                             //    adc r19, 1048576
    __ adcq(r19, 16777216);                            //    adc r19, 16777216
    __ adcq(r19, 268435456);                           //    adc r19, 268435456
    __ adcq(r20, 1);                                   //    adc r20, 1
    __ adcq(r20, 16);                                  //    adc r20, 16
    __ adcq(r20, 256);                                 //    adc r20, 256
    __ adcq(r20, 4096);                                //    adc r20, 4096
    __ adcq(r20, 65536);                               //    adc r20, 65536
    __ adcq(r20, 1048576);                             //    adc r20, 1048576
    __ adcq(r20, 16777216);                            //    adc r20, 16777216
    __ adcq(r20, 268435456);                           //    adc r20, 268435456
    __ adcq(r21, 1);                                   //    adc r21, 1
    __ adcq(r21, 16);                                  //    adc r21, 16
    __ adcq(r21, 256);                                 //    adc r21, 256
    __ adcq(r21, 4096);                                //    adc r21, 4096
    __ adcq(r21, 65536);                               //    adc r21, 65536
    __ adcq(r21, 1048576);                             //    adc r21, 1048576
    __ adcq(r21, 16777216);                            //    adc r21, 16777216
    __ adcq(r21, 268435456);                           //    adc r21, 268435456
    __ adcq(r22, 1);                                   //    adc r22, 1
    __ adcq(r22, 16);                                  //    adc r22, 16
    __ adcq(r22, 256);                                 //    adc r22, 256
    __ adcq(r22, 4096);                                //    adc r22, 4096
    __ adcq(r22, 65536);                               //    adc r22, 65536
    __ adcq(r22, 1048576);                             //    adc r22, 1048576
    __ adcq(r22, 16777216);                            //    adc r22, 16777216
    __ adcq(r22, 268435456);                           //    adc r22, 268435456
    __ adcq(r23, 1);                                   //    adc r23, 1
    __ adcq(r23, 16);                                  //    adc r23, 16
    __ adcq(r23, 256);                                 //    adc r23, 256
    __ adcq(r23, 4096);                                //    adc r23, 4096
    __ adcq(r23, 65536);                               //    adc r23, 65536
    __ adcq(r23, 1048576);                             //    adc r23, 1048576
    __ adcq(r23, 16777216);                            //    adc r23, 16777216
    __ adcq(r23, 268435456);                           //    adc r23, 268435456
    __ adcq(r24, 1);                                   //    adc r24, 1
    __ adcq(r24, 16);                                  //    adc r24, 16
    __ adcq(r24, 256);                                 //    adc r24, 256
    __ adcq(r24, 4096);                                //    adc r24, 4096
    __ adcq(r24, 65536);                               //    adc r24, 65536
    __ adcq(r24, 1048576);                             //    adc r24, 1048576
    __ adcq(r24, 16777216);                            //    adc r24, 16777216
    __ adcq(r24, 268435456);                           //    adc r24, 268435456
    __ adcq(r25, 1);                                   //    adc r25, 1
    __ adcq(r25, 16);                                  //    adc r25, 16
    __ adcq(r25, 256);                                 //    adc r25, 256
    __ adcq(r25, 4096);                                //    adc r25, 4096
    __ adcq(r25, 65536);                               //    adc r25, 65536
    __ adcq(r25, 1048576);                             //    adc r25, 1048576
    __ adcq(r25, 16777216);                            //    adc r25, 16777216
    __ adcq(r25, 268435456);                           //    adc r25, 268435456
    __ adcq(r26, 1);                                   //    adc r26, 1
    __ adcq(r26, 16);                                  //    adc r26, 16
    __ adcq(r26, 256);                                 //    adc r26, 256
    __ adcq(r26, 4096);                                //    adc r26, 4096
    __ adcq(r26, 65536);                               //    adc r26, 65536
    __ adcq(r26, 1048576);                             //    adc r26, 1048576
    __ adcq(r26, 16777216);                            //    adc r26, 16777216
    __ adcq(r26, 268435456);                           //    adc r26, 268435456
    __ adcq(r27, 1);                                   //    adc r27, 1
    __ adcq(r27, 16);                                  //    adc r27, 16
    __ adcq(r27, 256);                                 //    adc r27, 256
    __ adcq(r27, 4096);                                //    adc r27, 4096
    __ adcq(r27, 65536);                               //    adc r27, 65536
    __ adcq(r27, 1048576);                             //    adc r27, 1048576
    __ adcq(r27, 16777216);                            //    adc r27, 16777216
    __ adcq(r27, 268435456);                           //    adc r27, 268435456
    __ adcq(r28, 1);                                   //    adc r28, 1
    __ adcq(r28, 16);                                  //    adc r28, 16
    __ adcq(r28, 256);                                 //    adc r28, 256
    __ adcq(r28, 4096);                                //    adc r28, 4096
    __ adcq(r28, 65536);                               //    adc r28, 65536
    __ adcq(r28, 1048576);                             //    adc r28, 1048576
    __ adcq(r28, 16777216);                            //    adc r28, 16777216
    __ adcq(r28, 268435456);                           //    adc r28, 268435456
    __ adcq(r29, 1);                                   //    adc r29, 1
    __ adcq(r29, 16);                                  //    adc r29, 16
    __ adcq(r29, 256);                                 //    adc r29, 256
    __ adcq(r29, 4096);                                //    adc r29, 4096
    __ adcq(r29, 65536);                               //    adc r29, 65536
    __ adcq(r29, 1048576);                             //    adc r29, 1048576
    __ adcq(r29, 16777216);                            //    adc r29, 16777216
    __ adcq(r29, 268435456);                           //    adc r29, 268435456
    __ adcq(r30, 1);                                   //    adc r30, 1
    __ adcq(r30, 16);                                  //    adc r30, 16
    __ adcq(r30, 256);                                 //    adc r30, 256
    __ adcq(r30, 4096);                                //    adc r30, 4096
    __ adcq(r30, 65536);                               //    adc r30, 65536
    __ adcq(r30, 1048576);                             //    adc r30, 1048576
    __ adcq(r30, 16777216);                            //    adc r30, 16777216
    __ adcq(r30, 268435456);                           //    adc r30, 268435456
    __ adcq(r31, 1);                                   //    adc r31, 1
    __ adcq(r31, 16);                                  //    adc r31, 16
    __ adcq(r31, 256);                                 //    adc r31, 256
    __ adcq(r31, 4096);                                //    adc r31, 4096
    __ adcq(r31, 65536);                               //    adc r31, 65536
    __ adcq(r31, 1048576);                             //    adc r31, 1048576
    __ adcq(r31, 16777216);                            //    adc r31, 16777216
    __ adcq(r31, 268435456);                           //    adc r31, 268435456
    __ rclq(rcx, 1);                                   //    rcl rcx, 1
    __ rclq(rcx, 2);                                   //    rcl rcx, 2
    __ rclq(rcx, 4);                                   //    rcl rcx, 4
    __ rclq(rcx, 8);                                   //    rcl rcx, 8
    __ rclq(rcx, 16);                                  //    rcl rcx, 16
    __ rclq(rdx, 1);                                   //    rcl rdx, 1
    __ rclq(rdx, 2);                                   //    rcl rdx, 2
    __ rclq(rdx, 4);                                   //    rcl rdx, 4
    __ rclq(rdx, 8);                                   //    rcl rdx, 8
    __ rclq(rdx, 16);                                  //    rcl rdx, 16
    __ rclq(rbx, 1);                                   //    rcl rbx, 1
    __ rclq(rbx, 2);                                   //    rcl rbx, 2
    __ rclq(rbx, 4);                                   //    rcl rbx, 4
    __ rclq(rbx, 8);                                   //    rcl rbx, 8
    __ rclq(rbx, 16);                                  //    rcl rbx, 16
    __ rclq(r8, 1);                                    //    rcl r8, 1
    __ rclq(r8, 2);                                    //    rcl r8, 2
    __ rclq(r8, 4);                                    //    rcl r8, 4
    __ rclq(r8, 8);                                    //    rcl r8, 8
    __ rclq(r8, 16);                                   //    rcl r8, 16
    __ rclq(r9, 1);                                    //    rcl r9, 1
    __ rclq(r9, 2);                                    //    rcl r9, 2
    __ rclq(r9, 4);                                    //    rcl r9, 4
    __ rclq(r9, 8);                                    //    rcl r9, 8
    __ rclq(r9, 16);                                   //    rcl r9, 16
    __ rclq(r10, 1);                                   //    rcl r10, 1
    __ rclq(r10, 2);                                   //    rcl r10, 2
    __ rclq(r10, 4);                                   //    rcl r10, 4
    __ rclq(r10, 8);                                   //    rcl r10, 8
    __ rclq(r10, 16);                                  //    rcl r10, 16
    __ rclq(r11, 1);                                   //    rcl r11, 1
    __ rclq(r11, 2);                                   //    rcl r11, 2
    __ rclq(r11, 4);                                   //    rcl r11, 4
    __ rclq(r11, 8);                                   //    rcl r11, 8
    __ rclq(r11, 16);                                  //    rcl r11, 16
    __ rclq(r12, 1);                                   //    rcl r12, 1
    __ rclq(r12, 2);                                   //    rcl r12, 2
    __ rclq(r12, 4);                                   //    rcl r12, 4
    __ rclq(r12, 8);                                   //    rcl r12, 8
    __ rclq(r12, 16);                                  //    rcl r12, 16
    __ rclq(r13, 1);                                   //    rcl r13, 1
    __ rclq(r13, 2);                                   //    rcl r13, 2
    __ rclq(r13, 4);                                   //    rcl r13, 4
    __ rclq(r13, 8);                                   //    rcl r13, 8
    __ rclq(r13, 16);                                  //    rcl r13, 16
    __ rclq(r14, 1);                                   //    rcl r14, 1
    __ rclq(r14, 2);                                   //    rcl r14, 2
    __ rclq(r14, 4);                                   //    rcl r14, 4
    __ rclq(r14, 8);                                   //    rcl r14, 8
    __ rclq(r14, 16);                                  //    rcl r14, 16
    __ rclq(r15, 1);                                   //    rcl r15, 1
    __ rclq(r15, 2);                                   //    rcl r15, 2
    __ rclq(r15, 4);                                   //    rcl r15, 4
    __ rclq(r15, 8);                                   //    rcl r15, 8
    __ rclq(r15, 16);                                  //    rcl r15, 16
    __ rclq(r16, 1);                                   //    rcl r16, 1
    __ rclq(r16, 2);                                   //    rcl r16, 2
    __ rclq(r16, 4);                                   //    rcl r16, 4
    __ rclq(r16, 8);                                   //    rcl r16, 8
    __ rclq(r16, 16);                                  //    rcl r16, 16
    __ rclq(r17, 1);                                   //    rcl r17, 1
    __ rclq(r17, 2);                                   //    rcl r17, 2
    __ rclq(r17, 4);                                   //    rcl r17, 4
    __ rclq(r17, 8);                                   //    rcl r17, 8
    __ rclq(r17, 16);                                  //    rcl r17, 16
    __ rclq(r18, 1);                                   //    rcl r18, 1
    __ rclq(r18, 2);                                   //    rcl r18, 2
    __ rclq(r18, 4);                                   //    rcl r18, 4
    __ rclq(r18, 8);                                   //    rcl r18, 8
    __ rclq(r18, 16);                                  //    rcl r18, 16
    __ rclq(r19, 1);                                   //    rcl r19, 1
    __ rclq(r19, 2);                                   //    rcl r19, 2
    __ rclq(r19, 4);                                   //    rcl r19, 4
    __ rclq(r19, 8);                                   //    rcl r19, 8
    __ rclq(r19, 16);                                  //    rcl r19, 16
    __ rclq(r20, 1);                                   //    rcl r20, 1
    __ rclq(r20, 2);                                   //    rcl r20, 2
    __ rclq(r20, 4);                                   //    rcl r20, 4
    __ rclq(r20, 8);                                   //    rcl r20, 8
    __ rclq(r20, 16);                                  //    rcl r20, 16
    __ rclq(r21, 1);                                   //    rcl r21, 1
    __ rclq(r21, 2);                                   //    rcl r21, 2
    __ rclq(r21, 4);                                   //    rcl r21, 4
    __ rclq(r21, 8);                                   //    rcl r21, 8
    __ rclq(r21, 16);                                  //    rcl r21, 16
    __ rclq(r22, 1);                                   //    rcl r22, 1
    __ rclq(r22, 2);                                   //    rcl r22, 2
    __ rclq(r22, 4);                                   //    rcl r22, 4
    __ rclq(r22, 8);                                   //    rcl r22, 8
    __ rclq(r22, 16);                                  //    rcl r22, 16
    __ rclq(r23, 1);                                   //    rcl r23, 1
    __ rclq(r23, 2);                                   //    rcl r23, 2
    __ rclq(r23, 4);                                   //    rcl r23, 4
    __ rclq(r23, 8);                                   //    rcl r23, 8
    __ rclq(r23, 16);                                  //    rcl r23, 16
    __ rclq(r24, 1);                                   //    rcl r24, 1
    __ rclq(r24, 2);                                   //    rcl r24, 2
    __ rclq(r24, 4);                                   //    rcl r24, 4
    __ rclq(r24, 8);                                   //    rcl r24, 8
    __ rclq(r24, 16);                                  //    rcl r24, 16
    __ rclq(r25, 1);                                   //    rcl r25, 1
    __ rclq(r25, 2);                                   //    rcl r25, 2
    __ rclq(r25, 4);                                   //    rcl r25, 4
    __ rclq(r25, 8);                                   //    rcl r25, 8
    __ rclq(r25, 16);                                  //    rcl r25, 16
    __ rclq(r26, 1);                                   //    rcl r26, 1
    __ rclq(r26, 2);                                   //    rcl r26, 2
    __ rclq(r26, 4);                                   //    rcl r26, 4
    __ rclq(r26, 8);                                   //    rcl r26, 8
    __ rclq(r26, 16);                                  //    rcl r26, 16
    __ rclq(r27, 1);                                   //    rcl r27, 1
    __ rclq(r27, 2);                                   //    rcl r27, 2
    __ rclq(r27, 4);                                   //    rcl r27, 4
    __ rclq(r27, 8);                                   //    rcl r27, 8
    __ rclq(r27, 16);                                  //    rcl r27, 16
    __ rclq(r28, 1);                                   //    rcl r28, 1
    __ rclq(r28, 2);                                   //    rcl r28, 2
    __ rclq(r28, 4);                                   //    rcl r28, 4
    __ rclq(r28, 8);                                   //    rcl r28, 8
    __ rclq(r28, 16);                                  //    rcl r28, 16
    __ rclq(r29, 1);                                   //    rcl r29, 1
    __ rclq(r29, 2);                                   //    rcl r29, 2
    __ rclq(r29, 4);                                   //    rcl r29, 4
    __ rclq(r29, 8);                                   //    rcl r29, 8
    __ rclq(r29, 16);                                  //    rcl r29, 16
    __ rclq(r30, 1);                                   //    rcl r30, 1
    __ rclq(r30, 2);                                   //    rcl r30, 2
    __ rclq(r30, 4);                                   //    rcl r30, 4
    __ rclq(r30, 8);                                   //    rcl r30, 8
    __ rclq(r30, 16);                                  //    rcl r30, 16
    __ rclq(r31, 1);                                   //    rcl r31, 1
    __ rclq(r31, 2);                                   //    rcl r31, 2
    __ rclq(r31, 4);                                   //    rcl r31, 4
    __ rclq(r31, 8);                                   //    rcl r31, 8
    __ rclq(r31, 16);                                  //    rcl r31, 16
    __ rcrq(rcx, 1);                                   //    rcr rcx, 1
    __ rcrq(rcx, 2);                                   //    rcr rcx, 2
    __ rcrq(rcx, 4);                                   //    rcr rcx, 4
    __ rcrq(rcx, 8);                                   //    rcr rcx, 8
    __ rcrq(rcx, 16);                                  //    rcr rcx, 16
    __ rcrq(rdx, 1);                                   //    rcr rdx, 1
    __ rcrq(rdx, 2);                                   //    rcr rdx, 2
    __ rcrq(rdx, 4);                                   //    rcr rdx, 4
    __ rcrq(rdx, 8);                                   //    rcr rdx, 8
    __ rcrq(rdx, 16);                                  //    rcr rdx, 16
    __ rcrq(rbx, 1);                                   //    rcr rbx, 1
    __ rcrq(rbx, 2);                                   //    rcr rbx, 2
    __ rcrq(rbx, 4);                                   //    rcr rbx, 4
    __ rcrq(rbx, 8);                                   //    rcr rbx, 8
    __ rcrq(rbx, 16);                                  //    rcr rbx, 16
    __ rcrq(r8, 1);                                    //    rcr r8, 1
    __ rcrq(r8, 2);                                    //    rcr r8, 2
    __ rcrq(r8, 4);                                    //    rcr r8, 4
    __ rcrq(r8, 8);                                    //    rcr r8, 8
    __ rcrq(r8, 16);                                   //    rcr r8, 16
    __ rcrq(r9, 1);                                    //    rcr r9, 1
    __ rcrq(r9, 2);                                    //    rcr r9, 2
    __ rcrq(r9, 4);                                    //    rcr r9, 4
    __ rcrq(r9, 8);                                    //    rcr r9, 8
    __ rcrq(r9, 16);                                   //    rcr r9, 16
    __ rcrq(r10, 1);                                   //    rcr r10, 1
    __ rcrq(r10, 2);                                   //    rcr r10, 2
    __ rcrq(r10, 4);                                   //    rcr r10, 4
    __ rcrq(r10, 8);                                   //    rcr r10, 8
    __ rcrq(r10, 16);                                  //    rcr r10, 16
    __ rcrq(r11, 1);                                   //    rcr r11, 1
    __ rcrq(r11, 2);                                   //    rcr r11, 2
    __ rcrq(r11, 4);                                   //    rcr r11, 4
    __ rcrq(r11, 8);                                   //    rcr r11, 8
    __ rcrq(r11, 16);                                  //    rcr r11, 16
    __ rcrq(r12, 1);                                   //    rcr r12, 1
    __ rcrq(r12, 2);                                   //    rcr r12, 2
    __ rcrq(r12, 4);                                   //    rcr r12, 4
    __ rcrq(r12, 8);                                   //    rcr r12, 8
    __ rcrq(r12, 16);                                  //    rcr r12, 16
    __ rcrq(r13, 1);                                   //    rcr r13, 1
    __ rcrq(r13, 2);                                   //    rcr r13, 2
    __ rcrq(r13, 4);                                   //    rcr r13, 4
    __ rcrq(r13, 8);                                   //    rcr r13, 8
    __ rcrq(r13, 16);                                  //    rcr r13, 16
    __ rcrq(r14, 1);                                   //    rcr r14, 1
    __ rcrq(r14, 2);                                   //    rcr r14, 2
    __ rcrq(r14, 4);                                   //    rcr r14, 4
    __ rcrq(r14, 8);                                   //    rcr r14, 8
    __ rcrq(r14, 16);                                  //    rcr r14, 16
    __ rcrq(r15, 1);                                   //    rcr r15, 1
    __ rcrq(r15, 2);                                   //    rcr r15, 2
    __ rcrq(r15, 4);                                   //    rcr r15, 4
    __ rcrq(r15, 8);                                   //    rcr r15, 8
    __ rcrq(r15, 16);                                  //    rcr r15, 16
    __ rcrq(r16, 1);                                   //    rcr r16, 1
    __ rcrq(r16, 2);                                   //    rcr r16, 2
    __ rcrq(r16, 4);                                   //    rcr r16, 4
    __ rcrq(r16, 8);                                   //    rcr r16, 8
    __ rcrq(r16, 16);                                  //    rcr r16, 16
    __ rcrq(r17, 1);                                   //    rcr r17, 1
    __ rcrq(r17, 2);                                   //    rcr r17, 2
    __ rcrq(r17, 4);                                   //    rcr r17, 4
    __ rcrq(r17, 8);                                   //    rcr r17, 8
    __ rcrq(r17, 16);                                  //    rcr r17, 16
    __ rcrq(r18, 1);                                   //    rcr r18, 1
    __ rcrq(r18, 2);                                   //    rcr r18, 2
    __ rcrq(r18, 4);                                   //    rcr r18, 4
    __ rcrq(r18, 8);                                   //    rcr r18, 8
    __ rcrq(r18, 16);                                  //    rcr r18, 16
    __ rcrq(r19, 1);                                   //    rcr r19, 1
    __ rcrq(r19, 2);                                   //    rcr r19, 2
    __ rcrq(r19, 4);                                   //    rcr r19, 4
    __ rcrq(r19, 8);                                   //    rcr r19, 8
    __ rcrq(r19, 16);                                  //    rcr r19, 16
    __ rcrq(r20, 1);                                   //    rcr r20, 1
    __ rcrq(r20, 2);                                   //    rcr r20, 2
    __ rcrq(r20, 4);                                   //    rcr r20, 4
    __ rcrq(r20, 8);                                   //    rcr r20, 8
    __ rcrq(r20, 16);                                  //    rcr r20, 16
    __ rcrq(r21, 1);                                   //    rcr r21, 1
    __ rcrq(r21, 2);                                   //    rcr r21, 2
    __ rcrq(r21, 4);                                   //    rcr r21, 4
    __ rcrq(r21, 8);                                   //    rcr r21, 8
    __ rcrq(r21, 16);                                  //    rcr r21, 16
    __ rcrq(r22, 1);                                   //    rcr r22, 1
    __ rcrq(r22, 2);                                   //    rcr r22, 2
    __ rcrq(r22, 4);                                   //    rcr r22, 4
    __ rcrq(r22, 8);                                   //    rcr r22, 8
    __ rcrq(r22, 16);                                  //    rcr r22, 16
    __ rcrq(r23, 1);                                   //    rcr r23, 1
    __ rcrq(r23, 2);                                   //    rcr r23, 2
    __ rcrq(r23, 4);                                   //    rcr r23, 4
    __ rcrq(r23, 8);                                   //    rcr r23, 8
    __ rcrq(r23, 16);                                  //    rcr r23, 16
    __ rcrq(r24, 1);                                   //    rcr r24, 1
    __ rcrq(r24, 2);                                   //    rcr r24, 2
    __ rcrq(r24, 4);                                   //    rcr r24, 4
    __ rcrq(r24, 8);                                   //    rcr r24, 8
    __ rcrq(r24, 16);                                  //    rcr r24, 16
    __ rcrq(r25, 1);                                   //    rcr r25, 1
    __ rcrq(r25, 2);                                   //    rcr r25, 2
    __ rcrq(r25, 4);                                   //    rcr r25, 4
    __ rcrq(r25, 8);                                   //    rcr r25, 8
    __ rcrq(r25, 16);                                  //    rcr r25, 16
    __ rcrq(r26, 1);                                   //    rcr r26, 1
    __ rcrq(r26, 2);                                   //    rcr r26, 2
    __ rcrq(r26, 4);                                   //    rcr r26, 4
    __ rcrq(r26, 8);                                   //    rcr r26, 8
    __ rcrq(r26, 16);                                  //    rcr r26, 16
    __ rcrq(r27, 1);                                   //    rcr r27, 1
    __ rcrq(r27, 2);                                   //    rcr r27, 2
    __ rcrq(r27, 4);                                   //    rcr r27, 4
    __ rcrq(r27, 8);                                   //    rcr r27, 8
    __ rcrq(r27, 16);                                  //    rcr r27, 16
    __ rcrq(r28, 1);                                   //    rcr r28, 1
    __ rcrq(r28, 2);                                   //    rcr r28, 2
    __ rcrq(r28, 4);                                   //    rcr r28, 4
    __ rcrq(r28, 8);                                   //    rcr r28, 8
    __ rcrq(r28, 16);                                  //    rcr r28, 16
    __ rcrq(r29, 1);                                   //    rcr r29, 1
    __ rcrq(r29, 2);                                   //    rcr r29, 2
    __ rcrq(r29, 4);                                   //    rcr r29, 4
    __ rcrq(r29, 8);                                   //    rcr r29, 8
    __ rcrq(r29, 16);                                  //    rcr r29, 16
    __ rcrq(r30, 1);                                   //    rcr r30, 1
    __ rcrq(r30, 2);                                   //    rcr r30, 2
    __ rcrq(r30, 4);                                   //    rcr r30, 4
    __ rcrq(r30, 8);                                   //    rcr r30, 8
    __ rcrq(r30, 16);                                  //    rcr r30, 16
    __ rcrq(r31, 1);                                   //    rcr r31, 1
    __ rcrq(r31, 2);                                   //    rcr r31, 2
    __ rcrq(r31, 4);                                   //    rcr r31, 4
    __ rcrq(r31, 8);                                   //    rcr r31, 8
    __ rcrq(r31, 16);                                  //    rcr r31, 16
    __ rolq(rcx, 1);                                   //    rol rcx, 1
    __ rolq(rcx, 2);                                   //    rol rcx, 2
    __ rolq(rcx, 4);                                   //    rol rcx, 4
    __ rolq(rcx, 8);                                   //    rol rcx, 8
    __ rolq(rcx, 16);                                  //    rol rcx, 16
    __ rolq(rdx, 1);                                   //    rol rdx, 1
    __ rolq(rdx, 2);                                   //    rol rdx, 2
    __ rolq(rdx, 4);                                   //    rol rdx, 4
    __ rolq(rdx, 8);                                   //    rol rdx, 8
    __ rolq(rdx, 16);                                  //    rol rdx, 16
    __ rolq(rbx, 1);                                   //    rol rbx, 1
    __ rolq(rbx, 2);                                   //    rol rbx, 2
    __ rolq(rbx, 4);                                   //    rol rbx, 4
    __ rolq(rbx, 8);                                   //    rol rbx, 8
    __ rolq(rbx, 16);                                  //    rol rbx, 16
    __ rolq(r8, 1);                                    //    rol r8, 1
    __ rolq(r8, 2);                                    //    rol r8, 2
    __ rolq(r8, 4);                                    //    rol r8, 4
    __ rolq(r8, 8);                                    //    rol r8, 8
    __ rolq(r8, 16);                                   //    rol r8, 16
    __ rolq(r9, 1);                                    //    rol r9, 1
    __ rolq(r9, 2);                                    //    rol r9, 2
    __ rolq(r9, 4);                                    //    rol r9, 4
    __ rolq(r9, 8);                                    //    rol r9, 8
    __ rolq(r9, 16);                                   //    rol r9, 16
    __ rolq(r10, 1);                                   //    rol r10, 1
    __ rolq(r10, 2);                                   //    rol r10, 2
    __ rolq(r10, 4);                                   //    rol r10, 4
    __ rolq(r10, 8);                                   //    rol r10, 8
    __ rolq(r10, 16);                                  //    rol r10, 16
    __ rolq(r11, 1);                                   //    rol r11, 1
    __ rolq(r11, 2);                                   //    rol r11, 2
    __ rolq(r11, 4);                                   //    rol r11, 4
    __ rolq(r11, 8);                                   //    rol r11, 8
    __ rolq(r11, 16);                                  //    rol r11, 16
    __ rolq(r12, 1);                                   //    rol r12, 1
    __ rolq(r12, 2);                                   //    rol r12, 2
    __ rolq(r12, 4);                                   //    rol r12, 4
    __ rolq(r12, 8);                                   //    rol r12, 8
    __ rolq(r12, 16);                                  //    rol r12, 16
    __ rolq(r13, 1);                                   //    rol r13, 1
    __ rolq(r13, 2);                                   //    rol r13, 2
    __ rolq(r13, 4);                                   //    rol r13, 4
    __ rolq(r13, 8);                                   //    rol r13, 8
    __ rolq(r13, 16);                                  //    rol r13, 16
    __ rolq(r14, 1);                                   //    rol r14, 1
    __ rolq(r14, 2);                                   //    rol r14, 2
    __ rolq(r14, 4);                                   //    rol r14, 4
    __ rolq(r14, 8);                                   //    rol r14, 8
    __ rolq(r14, 16);                                  //    rol r14, 16
    __ rolq(r15, 1);                                   //    rol r15, 1
    __ rolq(r15, 2);                                   //    rol r15, 2
    __ rolq(r15, 4);                                   //    rol r15, 4
    __ rolq(r15, 8);                                   //    rol r15, 8
    __ rolq(r15, 16);                                  //    rol r15, 16
    __ rolq(r16, 1);                                   //    rol r16, 1
    __ rolq(r16, 2);                                   //    rol r16, 2
    __ rolq(r16, 4);                                   //    rol r16, 4
    __ rolq(r16, 8);                                   //    rol r16, 8
    __ rolq(r16, 16);                                  //    rol r16, 16
    __ rolq(r17, 1);                                   //    rol r17, 1
    __ rolq(r17, 2);                                   //    rol r17, 2
    __ rolq(r17, 4);                                   //    rol r17, 4
    __ rolq(r17, 8);                                   //    rol r17, 8
    __ rolq(r17, 16);                                  //    rol r17, 16
    __ rolq(r18, 1);                                   //    rol r18, 1
    __ rolq(r18, 2);                                   //    rol r18, 2
    __ rolq(r18, 4);                                   //    rol r18, 4
    __ rolq(r18, 8);                                   //    rol r18, 8
    __ rolq(r18, 16);                                  //    rol r18, 16
    __ rolq(r19, 1);                                   //    rol r19, 1
    __ rolq(r19, 2);                                   //    rol r19, 2
    __ rolq(r19, 4);                                   //    rol r19, 4
    __ rolq(r19, 8);                                   //    rol r19, 8
    __ rolq(r19, 16);                                  //    rol r19, 16
    __ rolq(r20, 1);                                   //    rol r20, 1
    __ rolq(r20, 2);                                   //    rol r20, 2
    __ rolq(r20, 4);                                   //    rol r20, 4
    __ rolq(r20, 8);                                   //    rol r20, 8
    __ rolq(r20, 16);                                  //    rol r20, 16
    __ rolq(r21, 1);                                   //    rol r21, 1
    __ rolq(r21, 2);                                   //    rol r21, 2
    __ rolq(r21, 4);                                   //    rol r21, 4
    __ rolq(r21, 8);                                   //    rol r21, 8
    __ rolq(r21, 16);                                  //    rol r21, 16
    __ rolq(r22, 1);                                   //    rol r22, 1
    __ rolq(r22, 2);                                   //    rol r22, 2
    __ rolq(r22, 4);                                   //    rol r22, 4
    __ rolq(r22, 8);                                   //    rol r22, 8
    __ rolq(r22, 16);                                  //    rol r22, 16
    __ rolq(r23, 1);                                   //    rol r23, 1
    __ rolq(r23, 2);                                   //    rol r23, 2
    __ rolq(r23, 4);                                   //    rol r23, 4
    __ rolq(r23, 8);                                   //    rol r23, 8
    __ rolq(r23, 16);                                  //    rol r23, 16
    __ rolq(r24, 1);                                   //    rol r24, 1
    __ rolq(r24, 2);                                   //    rol r24, 2
    __ rolq(r24, 4);                                   //    rol r24, 4
    __ rolq(r24, 8);                                   //    rol r24, 8
    __ rolq(r24, 16);                                  //    rol r24, 16
    __ rolq(r25, 1);                                   //    rol r25, 1
    __ rolq(r25, 2);                                   //    rol r25, 2
    __ rolq(r25, 4);                                   //    rol r25, 4
    __ rolq(r25, 8);                                   //    rol r25, 8
    __ rolq(r25, 16);                                  //    rol r25, 16
    __ rolq(r26, 1);                                   //    rol r26, 1
    __ rolq(r26, 2);                                   //    rol r26, 2
    __ rolq(r26, 4);                                   //    rol r26, 4
    __ rolq(r26, 8);                                   //    rol r26, 8
    __ rolq(r26, 16);                                  //    rol r26, 16
    __ rolq(r27, 1);                                   //    rol r27, 1
    __ rolq(r27, 2);                                   //    rol r27, 2
    __ rolq(r27, 4);                                   //    rol r27, 4
    __ rolq(r27, 8);                                   //    rol r27, 8
    __ rolq(r27, 16);                                  //    rol r27, 16
    __ rolq(r28, 1);                                   //    rol r28, 1
    __ rolq(r28, 2);                                   //    rol r28, 2
    __ rolq(r28, 4);                                   //    rol r28, 4
    __ rolq(r28, 8);                                   //    rol r28, 8
    __ rolq(r28, 16);                                  //    rol r28, 16
    __ rolq(r29, 1);                                   //    rol r29, 1
    __ rolq(r29, 2);                                   //    rol r29, 2
    __ rolq(r29, 4);                                   //    rol r29, 4
    __ rolq(r29, 8);                                   //    rol r29, 8
    __ rolq(r29, 16);                                  //    rol r29, 16
    __ rolq(r30, 1);                                   //    rol r30, 1
    __ rolq(r30, 2);                                   //    rol r30, 2
    __ rolq(r30, 4);                                   //    rol r30, 4
    __ rolq(r30, 8);                                   //    rol r30, 8
    __ rolq(r30, 16);                                  //    rol r30, 16
    __ rolq(r31, 1);                                   //    rol r31, 1
    __ rolq(r31, 2);                                   //    rol r31, 2
    __ rolq(r31, 4);                                   //    rol r31, 4
    __ rolq(r31, 8);                                   //    rol r31, 8
    __ rolq(r31, 16);                                  //    rol r31, 16
    __ rorq(rcx, 1);                                   //    ror rcx, 1
    __ rorq(rcx, 2);                                   //    ror rcx, 2
    __ rorq(rcx, 4);                                   //    ror rcx, 4
    __ rorq(rcx, 8);                                   //    ror rcx, 8
    __ rorq(rcx, 16);                                  //    ror rcx, 16
    __ rorq(rdx, 1);                                   //    ror rdx, 1
    __ rorq(rdx, 2);                                   //    ror rdx, 2
    __ rorq(rdx, 4);                                   //    ror rdx, 4
    __ rorq(rdx, 8);                                   //    ror rdx, 8
    __ rorq(rdx, 16);                                  //    ror rdx, 16
    __ rorq(rbx, 1);                                   //    ror rbx, 1
    __ rorq(rbx, 2);                                   //    ror rbx, 2
    __ rorq(rbx, 4);                                   //    ror rbx, 4
    __ rorq(rbx, 8);                                   //    ror rbx, 8
    __ rorq(rbx, 16);                                  //    ror rbx, 16
    __ rorq(r8, 1);                                    //    ror r8, 1
    __ rorq(r8, 2);                                    //    ror r8, 2
    __ rorq(r8, 4);                                    //    ror r8, 4
    __ rorq(r8, 8);                                    //    ror r8, 8
    __ rorq(r8, 16);                                   //    ror r8, 16
    __ rorq(r9, 1);                                    //    ror r9, 1
    __ rorq(r9, 2);                                    //    ror r9, 2
    __ rorq(r9, 4);                                    //    ror r9, 4
    __ rorq(r9, 8);                                    //    ror r9, 8
    __ rorq(r9, 16);                                   //    ror r9, 16
    __ rorq(r10, 1);                                   //    ror r10, 1
    __ rorq(r10, 2);                                   //    ror r10, 2
    __ rorq(r10, 4);                                   //    ror r10, 4
    __ rorq(r10, 8);                                   //    ror r10, 8
    __ rorq(r10, 16);                                  //    ror r10, 16
    __ rorq(r11, 1);                                   //    ror r11, 1
    __ rorq(r11, 2);                                   //    ror r11, 2
    __ rorq(r11, 4);                                   //    ror r11, 4
    __ rorq(r11, 8);                                   //    ror r11, 8
    __ rorq(r11, 16);                                  //    ror r11, 16
    __ rorq(r12, 1);                                   //    ror r12, 1
    __ rorq(r12, 2);                                   //    ror r12, 2
    __ rorq(r12, 4);                                   //    ror r12, 4
    __ rorq(r12, 8);                                   //    ror r12, 8
    __ rorq(r12, 16);                                  //    ror r12, 16
    __ rorq(r13, 1);                                   //    ror r13, 1
    __ rorq(r13, 2);                                   //    ror r13, 2
    __ rorq(r13, 4);                                   //    ror r13, 4
    __ rorq(r13, 8);                                   //    ror r13, 8
    __ rorq(r13, 16);                                  //    ror r13, 16
    __ rorq(r14, 1);                                   //    ror r14, 1
    __ rorq(r14, 2);                                   //    ror r14, 2
    __ rorq(r14, 4);                                   //    ror r14, 4
    __ rorq(r14, 8);                                   //    ror r14, 8
    __ rorq(r14, 16);                                  //    ror r14, 16
    __ rorq(r15, 1);                                   //    ror r15, 1
    __ rorq(r15, 2);                                   //    ror r15, 2
    __ rorq(r15, 4);                                   //    ror r15, 4
    __ rorq(r15, 8);                                   //    ror r15, 8
    __ rorq(r15, 16);                                  //    ror r15, 16
    __ rorq(r16, 1);                                   //    ror r16, 1
    __ rorq(r16, 2);                                   //    ror r16, 2
    __ rorq(r16, 4);                                   //    ror r16, 4
    __ rorq(r16, 8);                                   //    ror r16, 8
    __ rorq(r16, 16);                                  //    ror r16, 16
    __ rorq(r17, 1);                                   //    ror r17, 1
    __ rorq(r17, 2);                                   //    ror r17, 2
    __ rorq(r17, 4);                                   //    ror r17, 4
    __ rorq(r17, 8);                                   //    ror r17, 8
    __ rorq(r17, 16);                                  //    ror r17, 16
    __ rorq(r18, 1);                                   //    ror r18, 1
    __ rorq(r18, 2);                                   //    ror r18, 2
    __ rorq(r18, 4);                                   //    ror r18, 4
    __ rorq(r18, 8);                                   //    ror r18, 8
    __ rorq(r18, 16);                                  //    ror r18, 16
    __ rorq(r19, 1);                                   //    ror r19, 1
    __ rorq(r19, 2);                                   //    ror r19, 2
    __ rorq(r19, 4);                                   //    ror r19, 4
    __ rorq(r19, 8);                                   //    ror r19, 8
    __ rorq(r19, 16);                                  //    ror r19, 16
    __ rorq(r20, 1);                                   //    ror r20, 1
    __ rorq(r20, 2);                                   //    ror r20, 2
    __ rorq(r20, 4);                                   //    ror r20, 4
    __ rorq(r20, 8);                                   //    ror r20, 8
    __ rorq(r20, 16);                                  //    ror r20, 16
    __ rorq(r21, 1);                                   //    ror r21, 1
    __ rorq(r21, 2);                                   //    ror r21, 2
    __ rorq(r21, 4);                                   //    ror r21, 4
    __ rorq(r21, 8);                                   //    ror r21, 8
    __ rorq(r21, 16);                                  //    ror r21, 16
    __ rorq(r22, 1);                                   //    ror r22, 1
    __ rorq(r22, 2);                                   //    ror r22, 2
    __ rorq(r22, 4);                                   //    ror r22, 4
    __ rorq(r22, 8);                                   //    ror r22, 8
    __ rorq(r22, 16);                                  //    ror r22, 16
    __ rorq(r23, 1);                                   //    ror r23, 1
    __ rorq(r23, 2);                                   //    ror r23, 2
    __ rorq(r23, 4);                                   //    ror r23, 4
    __ rorq(r23, 8);                                   //    ror r23, 8
    __ rorq(r23, 16);                                  //    ror r23, 16
    __ rorq(r24, 1);                                   //    ror r24, 1
    __ rorq(r24, 2);                                   //    ror r24, 2
    __ rorq(r24, 4);                                   //    ror r24, 4
    __ rorq(r24, 8);                                   //    ror r24, 8
    __ rorq(r24, 16);                                  //    ror r24, 16
    __ rorq(r25, 1);                                   //    ror r25, 1
    __ rorq(r25, 2);                                   //    ror r25, 2
    __ rorq(r25, 4);                                   //    ror r25, 4
    __ rorq(r25, 8);                                   //    ror r25, 8
    __ rorq(r25, 16);                                  //    ror r25, 16
    __ rorq(r26, 1);                                   //    ror r26, 1
    __ rorq(r26, 2);                                   //    ror r26, 2
    __ rorq(r26, 4);                                   //    ror r26, 4
    __ rorq(r26, 8);                                   //    ror r26, 8
    __ rorq(r26, 16);                                  //    ror r26, 16
    __ rorq(r27, 1);                                   //    ror r27, 1
    __ rorq(r27, 2);                                   //    ror r27, 2
    __ rorq(r27, 4);                                   //    ror r27, 4
    __ rorq(r27, 8);                                   //    ror r27, 8
    __ rorq(r27, 16);                                  //    ror r27, 16
    __ rorq(r28, 1);                                   //    ror r28, 1
    __ rorq(r28, 2);                                   //    ror r28, 2
    __ rorq(r28, 4);                                   //    ror r28, 4
    __ rorq(r28, 8);                                   //    ror r28, 8
    __ rorq(r28, 16);                                  //    ror r28, 16
    __ rorq(r29, 1);                                   //    ror r29, 1
    __ rorq(r29, 2);                                   //    ror r29, 2
    __ rorq(r29, 4);                                   //    ror r29, 4
    __ rorq(r29, 8);                                   //    ror r29, 8
    __ rorq(r29, 16);                                  //    ror r29, 16
    __ rorq(r30, 1);                                   //    ror r30, 1
    __ rorq(r30, 2);                                   //    ror r30, 2
    __ rorq(r30, 4);                                   //    ror r30, 4
    __ rorq(r30, 8);                                   //    ror r30, 8
    __ rorq(r30, 16);                                  //    ror r30, 16
    __ rorq(r31, 1);                                   //    ror r31, 1
    __ rorq(r31, 2);                                   //    ror r31, 2
    __ rorq(r31, 4);                                   //    ror r31, 4
    __ rorq(r31, 8);                                   //    ror r31, 8
    __ rorq(r31, 16);                                  //    ror r31, 16
    __ sarq(rcx, 1);                                   //    sar rcx, 1
    __ sarq(rcx, 2);                                   //    sar rcx, 2
    __ sarq(rcx, 4);                                   //    sar rcx, 4
    __ sarq(rcx, 8);                                   //    sar rcx, 8
    __ sarq(rcx, 16);                                  //    sar rcx, 16
    __ sarq(rdx, 1);                                   //    sar rdx, 1
    __ sarq(rdx, 2);                                   //    sar rdx, 2
    __ sarq(rdx, 4);                                   //    sar rdx, 4
    __ sarq(rdx, 8);                                   //    sar rdx, 8
    __ sarq(rdx, 16);                                  //    sar rdx, 16
    __ sarq(rbx, 1);                                   //    sar rbx, 1
    __ sarq(rbx, 2);                                   //    sar rbx, 2
    __ sarq(rbx, 4);                                   //    sar rbx, 4
    __ sarq(rbx, 8);                                   //    sar rbx, 8
    __ sarq(rbx, 16);                                  //    sar rbx, 16
    __ sarq(r8, 1);                                    //    sar r8, 1
    __ sarq(r8, 2);                                    //    sar r8, 2
    __ sarq(r8, 4);                                    //    sar r8, 4
    __ sarq(r8, 8);                                    //    sar r8, 8
    __ sarq(r8, 16);                                   //    sar r8, 16
    __ sarq(r9, 1);                                    //    sar r9, 1
    __ sarq(r9, 2);                                    //    sar r9, 2
    __ sarq(r9, 4);                                    //    sar r9, 4
    __ sarq(r9, 8);                                    //    sar r9, 8
    __ sarq(r9, 16);                                   //    sar r9, 16
    __ sarq(r10, 1);                                   //    sar r10, 1
    __ sarq(r10, 2);                                   //    sar r10, 2
    __ sarq(r10, 4);                                   //    sar r10, 4
    __ sarq(r10, 8);                                   //    sar r10, 8
    __ sarq(r10, 16);                                  //    sar r10, 16
    __ sarq(r11, 1);                                   //    sar r11, 1
    __ sarq(r11, 2);                                   //    sar r11, 2
    __ sarq(r11, 4);                                   //    sar r11, 4
    __ sarq(r11, 8);                                   //    sar r11, 8
    __ sarq(r11, 16);                                  //    sar r11, 16
    __ sarq(r12, 1);                                   //    sar r12, 1
    __ sarq(r12, 2);                                   //    sar r12, 2
    __ sarq(r12, 4);                                   //    sar r12, 4
    __ sarq(r12, 8);                                   //    sar r12, 8
    __ sarq(r12, 16);                                  //    sar r12, 16
    __ sarq(r13, 1);                                   //    sar r13, 1
    __ sarq(r13, 2);                                   //    sar r13, 2
    __ sarq(r13, 4);                                   //    sar r13, 4
    __ sarq(r13, 8);                                   //    sar r13, 8
    __ sarq(r13, 16);                                  //    sar r13, 16
    __ sarq(r14, 1);                                   //    sar r14, 1
    __ sarq(r14, 2);                                   //    sar r14, 2
    __ sarq(r14, 4);                                   //    sar r14, 4
    __ sarq(r14, 8);                                   //    sar r14, 8
    __ sarq(r14, 16);                                  //    sar r14, 16
    __ sarq(r15, 1);                                   //    sar r15, 1
    __ sarq(r15, 2);                                   //    sar r15, 2
    __ sarq(r15, 4);                                   //    sar r15, 4
    __ sarq(r15, 8);                                   //    sar r15, 8
    __ sarq(r15, 16);                                  //    sar r15, 16
    __ sarq(r16, 1);                                   //    sar r16, 1
    __ sarq(r16, 2);                                   //    sar r16, 2
    __ sarq(r16, 4);                                   //    sar r16, 4
    __ sarq(r16, 8);                                   //    sar r16, 8
    __ sarq(r16, 16);                                  //    sar r16, 16
    __ sarq(r17, 1);                                   //    sar r17, 1
    __ sarq(r17, 2);                                   //    sar r17, 2
    __ sarq(r17, 4);                                   //    sar r17, 4
    __ sarq(r17, 8);                                   //    sar r17, 8
    __ sarq(r17, 16);                                  //    sar r17, 16
    __ sarq(r18, 1);                                   //    sar r18, 1
    __ sarq(r18, 2);                                   //    sar r18, 2
    __ sarq(r18, 4);                                   //    sar r18, 4
    __ sarq(r18, 8);                                   //    sar r18, 8
    __ sarq(r18, 16);                                  //    sar r18, 16
    __ sarq(r19, 1);                                   //    sar r19, 1
    __ sarq(r19, 2);                                   //    sar r19, 2
    __ sarq(r19, 4);                                   //    sar r19, 4
    __ sarq(r19, 8);                                   //    sar r19, 8
    __ sarq(r19, 16);                                  //    sar r19, 16
    __ sarq(r20, 1);                                   //    sar r20, 1
    __ sarq(r20, 2);                                   //    sar r20, 2
    __ sarq(r20, 4);                                   //    sar r20, 4
    __ sarq(r20, 8);                                   //    sar r20, 8
    __ sarq(r20, 16);                                  //    sar r20, 16
    __ sarq(r21, 1);                                   //    sar r21, 1
    __ sarq(r21, 2);                                   //    sar r21, 2
    __ sarq(r21, 4);                                   //    sar r21, 4
    __ sarq(r21, 8);                                   //    sar r21, 8
    __ sarq(r21, 16);                                  //    sar r21, 16
    __ sarq(r22, 1);                                   //    sar r22, 1
    __ sarq(r22, 2);                                   //    sar r22, 2
    __ sarq(r22, 4);                                   //    sar r22, 4
    __ sarq(r22, 8);                                   //    sar r22, 8
    __ sarq(r22, 16);                                  //    sar r22, 16
    __ sarq(r23, 1);                                   //    sar r23, 1
    __ sarq(r23, 2);                                   //    sar r23, 2
    __ sarq(r23, 4);                                   //    sar r23, 4
    __ sarq(r23, 8);                                   //    sar r23, 8
    __ sarq(r23, 16);                                  //    sar r23, 16
    __ sarq(r24, 1);                                   //    sar r24, 1
    __ sarq(r24, 2);                                   //    sar r24, 2
    __ sarq(r24, 4);                                   //    sar r24, 4
    __ sarq(r24, 8);                                   //    sar r24, 8
    __ sarq(r24, 16);                                  //    sar r24, 16
    __ sarq(r25, 1);                                   //    sar r25, 1
    __ sarq(r25, 2);                                   //    sar r25, 2
    __ sarq(r25, 4);                                   //    sar r25, 4
    __ sarq(r25, 8);                                   //    sar r25, 8
    __ sarq(r25, 16);                                  //    sar r25, 16
    __ sarq(r26, 1);                                   //    sar r26, 1
    __ sarq(r26, 2);                                   //    sar r26, 2
    __ sarq(r26, 4);                                   //    sar r26, 4
    __ sarq(r26, 8);                                   //    sar r26, 8
    __ sarq(r26, 16);                                  //    sar r26, 16
    __ sarq(r27, 1);                                   //    sar r27, 1
    __ sarq(r27, 2);                                   //    sar r27, 2
    __ sarq(r27, 4);                                   //    sar r27, 4
    __ sarq(r27, 8);                                   //    sar r27, 8
    __ sarq(r27, 16);                                  //    sar r27, 16
    __ sarq(r28, 1);                                   //    sar r28, 1
    __ sarq(r28, 2);                                   //    sar r28, 2
    __ sarq(r28, 4);                                   //    sar r28, 4
    __ sarq(r28, 8);                                   //    sar r28, 8
    __ sarq(r28, 16);                                  //    sar r28, 16
    __ sarq(r29, 1);                                   //    sar r29, 1
    __ sarq(r29, 2);                                   //    sar r29, 2
    __ sarq(r29, 4);                                   //    sar r29, 4
    __ sarq(r29, 8);                                   //    sar r29, 8
    __ sarq(r29, 16);                                  //    sar r29, 16
    __ sarq(r30, 1);                                   //    sar r30, 1
    __ sarq(r30, 2);                                   //    sar r30, 2
    __ sarq(r30, 4);                                   //    sar r30, 4
    __ sarq(r30, 8);                                   //    sar r30, 8
    __ sarq(r30, 16);                                  //    sar r30, 16
    __ sarq(r31, 1);                                   //    sar r31, 1
    __ sarq(r31, 2);                                   //    sar r31, 2
    __ sarq(r31, 4);                                   //    sar r31, 4
    __ sarq(r31, 8);                                   //    sar r31, 8
    __ sarq(r31, 16);                                  //    sar r31, 16
    __ sbbq(rcx, 1);                                   //    sbb rcx, 1
    __ sbbq(rcx, 16);                                  //    sbb rcx, 16
    __ sbbq(rcx, 256);                                 //    sbb rcx, 256
    __ sbbq(rcx, 4096);                                //    sbb rcx, 4096
    __ sbbq(rcx, 65536);                               //    sbb rcx, 65536
    __ sbbq(rcx, 1048576);                             //    sbb rcx, 1048576
    __ sbbq(rcx, 16777216);                            //    sbb rcx, 16777216
    __ sbbq(rcx, 268435456);                           //    sbb rcx, 268435456
    __ sbbq(rdx, 1);                                   //    sbb rdx, 1
    __ sbbq(rdx, 16);                                  //    sbb rdx, 16
    __ sbbq(rdx, 256);                                 //    sbb rdx, 256
    __ sbbq(rdx, 4096);                                //    sbb rdx, 4096
    __ sbbq(rdx, 65536);                               //    sbb rdx, 65536
    __ sbbq(rdx, 1048576);                             //    sbb rdx, 1048576
    __ sbbq(rdx, 16777216);                            //    sbb rdx, 16777216
    __ sbbq(rdx, 268435456);                           //    sbb rdx, 268435456
    __ sbbq(rbx, 1);                                   //    sbb rbx, 1
    __ sbbq(rbx, 16);                                  //    sbb rbx, 16
    __ sbbq(rbx, 256);                                 //    sbb rbx, 256
    __ sbbq(rbx, 4096);                                //    sbb rbx, 4096
    __ sbbq(rbx, 65536);                               //    sbb rbx, 65536
    __ sbbq(rbx, 1048576);                             //    sbb rbx, 1048576
    __ sbbq(rbx, 16777216);                            //    sbb rbx, 16777216
    __ sbbq(rbx, 268435456);                           //    sbb rbx, 268435456
    __ sbbq(r8, 1);                                    //    sbb r8, 1
    __ sbbq(r8, 16);                                   //    sbb r8, 16
    __ sbbq(r8, 256);                                  //    sbb r8, 256
    __ sbbq(r8, 4096);                                 //    sbb r8, 4096
    __ sbbq(r8, 65536);                                //    sbb r8, 65536
    __ sbbq(r8, 1048576);                              //    sbb r8, 1048576
    __ sbbq(r8, 16777216);                             //    sbb r8, 16777216
    __ sbbq(r8, 268435456);                            //    sbb r8, 268435456
    __ sbbq(r9, 1);                                    //    sbb r9, 1
    __ sbbq(r9, 16);                                   //    sbb r9, 16
    __ sbbq(r9, 256);                                  //    sbb r9, 256
    __ sbbq(r9, 4096);                                 //    sbb r9, 4096
    __ sbbq(r9, 65536);                                //    sbb r9, 65536
    __ sbbq(r9, 1048576);                              //    sbb r9, 1048576
    __ sbbq(r9, 16777216);                             //    sbb r9, 16777216
    __ sbbq(r9, 268435456);                            //    sbb r9, 268435456
    __ sbbq(r10, 1);                                   //    sbb r10, 1
    __ sbbq(r10, 16);                                  //    sbb r10, 16
    __ sbbq(r10, 256);                                 //    sbb r10, 256
    __ sbbq(r10, 4096);                                //    sbb r10, 4096
    __ sbbq(r10, 65536);                               //    sbb r10, 65536
    __ sbbq(r10, 1048576);                             //    sbb r10, 1048576
    __ sbbq(r10, 16777216);                            //    sbb r10, 16777216
    __ sbbq(r10, 268435456);                           //    sbb r10, 268435456
    __ sbbq(r11, 1);                                   //    sbb r11, 1
    __ sbbq(r11, 16);                                  //    sbb r11, 16
    __ sbbq(r11, 256);                                 //    sbb r11, 256
    __ sbbq(r11, 4096);                                //    sbb r11, 4096
    __ sbbq(r11, 65536);                               //    sbb r11, 65536
    __ sbbq(r11, 1048576);                             //    sbb r11, 1048576
    __ sbbq(r11, 16777216);                            //    sbb r11, 16777216
    __ sbbq(r11, 268435456);                           //    sbb r11, 268435456
    __ sbbq(r12, 1);                                   //    sbb r12, 1
    __ sbbq(r12, 16);                                  //    sbb r12, 16
    __ sbbq(r12, 256);                                 //    sbb r12, 256
    __ sbbq(r12, 4096);                                //    sbb r12, 4096
    __ sbbq(r12, 65536);                               //    sbb r12, 65536
    __ sbbq(r12, 1048576);                             //    sbb r12, 1048576
    __ sbbq(r12, 16777216);                            //    sbb r12, 16777216
    __ sbbq(r12, 268435456);                           //    sbb r12, 268435456
    __ sbbq(r13, 1);                                   //    sbb r13, 1
    __ sbbq(r13, 16);                                  //    sbb r13, 16
    __ sbbq(r13, 256);                                 //    sbb r13, 256
    __ sbbq(r13, 4096);                                //    sbb r13, 4096
    __ sbbq(r13, 65536);                               //    sbb r13, 65536
    __ sbbq(r13, 1048576);                             //    sbb r13, 1048576
    __ sbbq(r13, 16777216);                            //    sbb r13, 16777216
    __ sbbq(r13, 268435456);                           //    sbb r13, 268435456
    __ sbbq(r14, 1);                                   //    sbb r14, 1
    __ sbbq(r14, 16);                                  //    sbb r14, 16
    __ sbbq(r14, 256);                                 //    sbb r14, 256
    __ sbbq(r14, 4096);                                //    sbb r14, 4096
    __ sbbq(r14, 65536);                               //    sbb r14, 65536
    __ sbbq(r14, 1048576);                             //    sbb r14, 1048576
    __ sbbq(r14, 16777216);                            //    sbb r14, 16777216
    __ sbbq(r14, 268435456);                           //    sbb r14, 268435456
    __ sbbq(r15, 1);                                   //    sbb r15, 1
    __ sbbq(r15, 16);                                  //    sbb r15, 16
    __ sbbq(r15, 256);                                 //    sbb r15, 256
    __ sbbq(r15, 4096);                                //    sbb r15, 4096
    __ sbbq(r15, 65536);                               //    sbb r15, 65536
    __ sbbq(r15, 1048576);                             //    sbb r15, 1048576
    __ sbbq(r15, 16777216);                            //    sbb r15, 16777216
    __ sbbq(r15, 268435456);                           //    sbb r15, 268435456
    __ sbbq(r16, 1);                                   //    sbb r16, 1
    __ sbbq(r16, 16);                                  //    sbb r16, 16
    __ sbbq(r16, 256);                                 //    sbb r16, 256
    __ sbbq(r16, 4096);                                //    sbb r16, 4096
    __ sbbq(r16, 65536);                               //    sbb r16, 65536
    __ sbbq(r16, 1048576);                             //    sbb r16, 1048576
    __ sbbq(r16, 16777216);                            //    sbb r16, 16777216
    __ sbbq(r16, 268435456);                           //    sbb r16, 268435456
    __ sbbq(r17, 1);                                   //    sbb r17, 1
    __ sbbq(r17, 16);                                  //    sbb r17, 16
    __ sbbq(r17, 256);                                 //    sbb r17, 256
    __ sbbq(r17, 4096);                                //    sbb r17, 4096
    __ sbbq(r17, 65536);                               //    sbb r17, 65536
    __ sbbq(r17, 1048576);                             //    sbb r17, 1048576
    __ sbbq(r17, 16777216);                            //    sbb r17, 16777216
    __ sbbq(r17, 268435456);                           //    sbb r17, 268435456
    __ sbbq(r18, 1);                                   //    sbb r18, 1
    __ sbbq(r18, 16);                                  //    sbb r18, 16
    __ sbbq(r18, 256);                                 //    sbb r18, 256
    __ sbbq(r18, 4096);                                //    sbb r18, 4096
    __ sbbq(r18, 65536);                               //    sbb r18, 65536
    __ sbbq(r18, 1048576);                             //    sbb r18, 1048576
    __ sbbq(r18, 16777216);                            //    sbb r18, 16777216
    __ sbbq(r18, 268435456);                           //    sbb r18, 268435456
    __ sbbq(r19, 1);                                   //    sbb r19, 1
    __ sbbq(r19, 16);                                  //    sbb r19, 16
    __ sbbq(r19, 256);                                 //    sbb r19, 256
    __ sbbq(r19, 4096);                                //    sbb r19, 4096
    __ sbbq(r19, 65536);                               //    sbb r19, 65536
    __ sbbq(r19, 1048576);                             //    sbb r19, 1048576
    __ sbbq(r19, 16777216);                            //    sbb r19, 16777216
    __ sbbq(r19, 268435456);                           //    sbb r19, 268435456
    __ sbbq(r20, 1);                                   //    sbb r20, 1
    __ sbbq(r20, 16);                                  //    sbb r20, 16
    __ sbbq(r20, 256);                                 //    sbb r20, 256
    __ sbbq(r20, 4096);                                //    sbb r20, 4096
    __ sbbq(r20, 65536);                               //    sbb r20, 65536
    __ sbbq(r20, 1048576);                             //    sbb r20, 1048576
    __ sbbq(r20, 16777216);                            //    sbb r20, 16777216
    __ sbbq(r20, 268435456);                           //    sbb r20, 268435456
    __ sbbq(r21, 1);                                   //    sbb r21, 1
    __ sbbq(r21, 16);                                  //    sbb r21, 16
    __ sbbq(r21, 256);                                 //    sbb r21, 256
    __ sbbq(r21, 4096);                                //    sbb r21, 4096
    __ sbbq(r21, 65536);                               //    sbb r21, 65536
    __ sbbq(r21, 1048576);                             //    sbb r21, 1048576
    __ sbbq(r21, 16777216);                            //    sbb r21, 16777216
    __ sbbq(r21, 268435456);                           //    sbb r21, 268435456
    __ sbbq(r22, 1);                                   //    sbb r22, 1
    __ sbbq(r22, 16);                                  //    sbb r22, 16
    __ sbbq(r22, 256);                                 //    sbb r22, 256
    __ sbbq(r22, 4096);                                //    sbb r22, 4096
    __ sbbq(r22, 65536);                               //    sbb r22, 65536
    __ sbbq(r22, 1048576);                             //    sbb r22, 1048576
    __ sbbq(r22, 16777216);                            //    sbb r22, 16777216
    __ sbbq(r22, 268435456);                           //    sbb r22, 268435456
    __ sbbq(r23, 1);                                   //    sbb r23, 1
    __ sbbq(r23, 16);                                  //    sbb r23, 16
    __ sbbq(r23, 256);                                 //    sbb r23, 256
    __ sbbq(r23, 4096);                                //    sbb r23, 4096
    __ sbbq(r23, 65536);                               //    sbb r23, 65536
    __ sbbq(r23, 1048576);                             //    sbb r23, 1048576
    __ sbbq(r23, 16777216);                            //    sbb r23, 16777216
    __ sbbq(r23, 268435456);                           //    sbb r23, 268435456
    __ sbbq(r24, 1);                                   //    sbb r24, 1
    __ sbbq(r24, 16);                                  //    sbb r24, 16
    __ sbbq(r24, 256);                                 //    sbb r24, 256
    __ sbbq(r24, 4096);                                //    sbb r24, 4096
    __ sbbq(r24, 65536);                               //    sbb r24, 65536
    __ sbbq(r24, 1048576);                             //    sbb r24, 1048576
    __ sbbq(r24, 16777216);                            //    sbb r24, 16777216
    __ sbbq(r24, 268435456);                           //    sbb r24, 268435456
    __ sbbq(r25, 1);                                   //    sbb r25, 1
    __ sbbq(r25, 16);                                  //    sbb r25, 16
    __ sbbq(r25, 256);                                 //    sbb r25, 256
    __ sbbq(r25, 4096);                                //    sbb r25, 4096
    __ sbbq(r25, 65536);                               //    sbb r25, 65536
    __ sbbq(r25, 1048576);                             //    sbb r25, 1048576
    __ sbbq(r25, 16777216);                            //    sbb r25, 16777216
    __ sbbq(r25, 268435456);                           //    sbb r25, 268435456
    __ sbbq(r26, 1);                                   //    sbb r26, 1
    __ sbbq(r26, 16);                                  //    sbb r26, 16
    __ sbbq(r26, 256);                                 //    sbb r26, 256
    __ sbbq(r26, 4096);                                //    sbb r26, 4096
    __ sbbq(r26, 65536);                               //    sbb r26, 65536
    __ sbbq(r26, 1048576);                             //    sbb r26, 1048576
    __ sbbq(r26, 16777216);                            //    sbb r26, 16777216
    __ sbbq(r26, 268435456);                           //    sbb r26, 268435456
    __ sbbq(r27, 1);                                   //    sbb r27, 1
    __ sbbq(r27, 16);                                  //    sbb r27, 16
    __ sbbq(r27, 256);                                 //    sbb r27, 256
    __ sbbq(r27, 4096);                                //    sbb r27, 4096
    __ sbbq(r27, 65536);                               //    sbb r27, 65536
    __ sbbq(r27, 1048576);                             //    sbb r27, 1048576
    __ sbbq(r27, 16777216);                            //    sbb r27, 16777216
    __ sbbq(r27, 268435456);                           //    sbb r27, 268435456
    __ sbbq(r28, 1);                                   //    sbb r28, 1
    __ sbbq(r28, 16);                                  //    sbb r28, 16
    __ sbbq(r28, 256);                                 //    sbb r28, 256
    __ sbbq(r28, 4096);                                //    sbb r28, 4096
    __ sbbq(r28, 65536);                               //    sbb r28, 65536
    __ sbbq(r28, 1048576);                             //    sbb r28, 1048576
    __ sbbq(r28, 16777216);                            //    sbb r28, 16777216
    __ sbbq(r28, 268435456);                           //    sbb r28, 268435456
    __ sbbq(r29, 1);                                   //    sbb r29, 1
    __ sbbq(r29, 16);                                  //    sbb r29, 16
    __ sbbq(r29, 256);                                 //    sbb r29, 256
    __ sbbq(r29, 4096);                                //    sbb r29, 4096
    __ sbbq(r29, 65536);                               //    sbb r29, 65536
    __ sbbq(r29, 1048576);                             //    sbb r29, 1048576
    __ sbbq(r29, 16777216);                            //    sbb r29, 16777216
    __ sbbq(r29, 268435456);                           //    sbb r29, 268435456
    __ sbbq(r30, 1);                                   //    sbb r30, 1
    __ sbbq(r30, 16);                                  //    sbb r30, 16
    __ sbbq(r30, 256);                                 //    sbb r30, 256
    __ sbbq(r30, 4096);                                //    sbb r30, 4096
    __ sbbq(r30, 65536);                               //    sbb r30, 65536
    __ sbbq(r30, 1048576);                             //    sbb r30, 1048576
    __ sbbq(r30, 16777216);                            //    sbb r30, 16777216
    __ sbbq(r30, 268435456);                           //    sbb r30, 268435456
    __ sbbq(r31, 1);                                   //    sbb r31, 1
    __ sbbq(r31, 16);                                  //    sbb r31, 16
    __ sbbq(r31, 256);                                 //    sbb r31, 256
    __ sbbq(r31, 4096);                                //    sbb r31, 4096
    __ sbbq(r31, 65536);                               //    sbb r31, 65536
    __ sbbq(r31, 1048576);                             //    sbb r31, 1048576
    __ sbbq(r31, 16777216);                            //    sbb r31, 16777216
    __ sbbq(r31, 268435456);                           //    sbb r31, 268435456
    __ shlq(rcx, 1);                                   //    shl rcx, 1
    __ shlq(rcx, 2);                                   //    shl rcx, 2
    __ shlq(rcx, 4);                                   //    shl rcx, 4
    __ shlq(rcx, 8);                                   //    shl rcx, 8
    __ shlq(rcx, 16);                                  //    shl rcx, 16
    __ shlq(rdx, 1);                                   //    shl rdx, 1
    __ shlq(rdx, 2);                                   //    shl rdx, 2
    __ shlq(rdx, 4);                                   //    shl rdx, 4
    __ shlq(rdx, 8);                                   //    shl rdx, 8
    __ shlq(rdx, 16);                                  //    shl rdx, 16
    __ shlq(rbx, 1);                                   //    shl rbx, 1
    __ shlq(rbx, 2);                                   //    shl rbx, 2
    __ shlq(rbx, 4);                                   //    shl rbx, 4
    __ shlq(rbx, 8);                                   //    shl rbx, 8
    __ shlq(rbx, 16);                                  //    shl rbx, 16
    __ shlq(r8, 1);                                    //    shl r8, 1
    __ shlq(r8, 2);                                    //    shl r8, 2
    __ shlq(r8, 4);                                    //    shl r8, 4
    __ shlq(r8, 8);                                    //    shl r8, 8
    __ shlq(r8, 16);                                   //    shl r8, 16
    __ shlq(r9, 1);                                    //    shl r9, 1
    __ shlq(r9, 2);                                    //    shl r9, 2
    __ shlq(r9, 4);                                    //    shl r9, 4
    __ shlq(r9, 8);                                    //    shl r9, 8
    __ shlq(r9, 16);                                   //    shl r9, 16
    __ shlq(r10, 1);                                   //    shl r10, 1
    __ shlq(r10, 2);                                   //    shl r10, 2
    __ shlq(r10, 4);                                   //    shl r10, 4
    __ shlq(r10, 8);                                   //    shl r10, 8
    __ shlq(r10, 16);                                  //    shl r10, 16
    __ shlq(r11, 1);                                   //    shl r11, 1
    __ shlq(r11, 2);                                   //    shl r11, 2
    __ shlq(r11, 4);                                   //    shl r11, 4
    __ shlq(r11, 8);                                   //    shl r11, 8
    __ shlq(r11, 16);                                  //    shl r11, 16
    __ shlq(r12, 1);                                   //    shl r12, 1
    __ shlq(r12, 2);                                   //    shl r12, 2
    __ shlq(r12, 4);                                   //    shl r12, 4
    __ shlq(r12, 8);                                   //    shl r12, 8
    __ shlq(r12, 16);                                  //    shl r12, 16
    __ shlq(r13, 1);                                   //    shl r13, 1
    __ shlq(r13, 2);                                   //    shl r13, 2
    __ shlq(r13, 4);                                   //    shl r13, 4
    __ shlq(r13, 8);                                   //    shl r13, 8
    __ shlq(r13, 16);                                  //    shl r13, 16
    __ shlq(r14, 1);                                   //    shl r14, 1
    __ shlq(r14, 2);                                   //    shl r14, 2
    __ shlq(r14, 4);                                   //    shl r14, 4
    __ shlq(r14, 8);                                   //    shl r14, 8
    __ shlq(r14, 16);                                  //    shl r14, 16
    __ shlq(r15, 1);                                   //    shl r15, 1
    __ shlq(r15, 2);                                   //    shl r15, 2
    __ shlq(r15, 4);                                   //    shl r15, 4
    __ shlq(r15, 8);                                   //    shl r15, 8
    __ shlq(r15, 16);                                  //    shl r15, 16
    __ shlq(r16, 1);                                   //    shl r16, 1
    __ shlq(r16, 2);                                   //    shl r16, 2
    __ shlq(r16, 4);                                   //    shl r16, 4
    __ shlq(r16, 8);                                   //    shl r16, 8
    __ shlq(r16, 16);                                  //    shl r16, 16
    __ shlq(r17, 1);                                   //    shl r17, 1
    __ shlq(r17, 2);                                   //    shl r17, 2
    __ shlq(r17, 4);                                   //    shl r17, 4
    __ shlq(r17, 8);                                   //    shl r17, 8
    __ shlq(r17, 16);                                  //    shl r17, 16
    __ shlq(r18, 1);                                   //    shl r18, 1
    __ shlq(r18, 2);                                   //    shl r18, 2
    __ shlq(r18, 4);                                   //    shl r18, 4
    __ shlq(r18, 8);                                   //    shl r18, 8
    __ shlq(r18, 16);                                  //    shl r18, 16
    __ shlq(r19, 1);                                   //    shl r19, 1
    __ shlq(r19, 2);                                   //    shl r19, 2
    __ shlq(r19, 4);                                   //    shl r19, 4
    __ shlq(r19, 8);                                   //    shl r19, 8
    __ shlq(r19, 16);                                  //    shl r19, 16
    __ shlq(r20, 1);                                   //    shl r20, 1
    __ shlq(r20, 2);                                   //    shl r20, 2
    __ shlq(r20, 4);                                   //    shl r20, 4
    __ shlq(r20, 8);                                   //    shl r20, 8
    __ shlq(r20, 16);                                  //    shl r20, 16
    __ shlq(r21, 1);                                   //    shl r21, 1
    __ shlq(r21, 2);                                   //    shl r21, 2
    __ shlq(r21, 4);                                   //    shl r21, 4
    __ shlq(r21, 8);                                   //    shl r21, 8
    __ shlq(r21, 16);                                  //    shl r21, 16
    __ shlq(r22, 1);                                   //    shl r22, 1
    __ shlq(r22, 2);                                   //    shl r22, 2
    __ shlq(r22, 4);                                   //    shl r22, 4
    __ shlq(r22, 8);                                   //    shl r22, 8
    __ shlq(r22, 16);                                  //    shl r22, 16
    __ shlq(r23, 1);                                   //    shl r23, 1
    __ shlq(r23, 2);                                   //    shl r23, 2
    __ shlq(r23, 4);                                   //    shl r23, 4
    __ shlq(r23, 8);                                   //    shl r23, 8
    __ shlq(r23, 16);                                  //    shl r23, 16
    __ shlq(r24, 1);                                   //    shl r24, 1
    __ shlq(r24, 2);                                   //    shl r24, 2
    __ shlq(r24, 4);                                   //    shl r24, 4
    __ shlq(r24, 8);                                   //    shl r24, 8
    __ shlq(r24, 16);                                  //    shl r24, 16
    __ shlq(r25, 1);                                   //    shl r25, 1
    __ shlq(r25, 2);                                   //    shl r25, 2
    __ shlq(r25, 4);                                   //    shl r25, 4
    __ shlq(r25, 8);                                   //    shl r25, 8
    __ shlq(r25, 16);                                  //    shl r25, 16
    __ shlq(r26, 1);                                   //    shl r26, 1
    __ shlq(r26, 2);                                   //    shl r26, 2
    __ shlq(r26, 4);                                   //    shl r26, 4
    __ shlq(r26, 8);                                   //    shl r26, 8
    __ shlq(r26, 16);                                  //    shl r26, 16
    __ shlq(r27, 1);                                   //    shl r27, 1
    __ shlq(r27, 2);                                   //    shl r27, 2
    __ shlq(r27, 4);                                   //    shl r27, 4
    __ shlq(r27, 8);                                   //    shl r27, 8
    __ shlq(r27, 16);                                  //    shl r27, 16
    __ shlq(r28, 1);                                   //    shl r28, 1
    __ shlq(r28, 2);                                   //    shl r28, 2
    __ shlq(r28, 4);                                   //    shl r28, 4
    __ shlq(r28, 8);                                   //    shl r28, 8
    __ shlq(r28, 16);                                  //    shl r28, 16
    __ shlq(r29, 1);                                   //    shl r29, 1
    __ shlq(r29, 2);                                   //    shl r29, 2
    __ shlq(r29, 4);                                   //    shl r29, 4
    __ shlq(r29, 8);                                   //    shl r29, 8
    __ shlq(r29, 16);                                  //    shl r29, 16
    __ shlq(r30, 1);                                   //    shl r30, 1
    __ shlq(r30, 2);                                   //    shl r30, 2
    __ shlq(r30, 4);                                   //    shl r30, 4
    __ shlq(r30, 8);                                   //    shl r30, 8
    __ shlq(r30, 16);                                  //    shl r30, 16
    __ shlq(r31, 1);                                   //    shl r31, 1
    __ shlq(r31, 2);                                   //    shl r31, 2
    __ shlq(r31, 4);                                   //    shl r31, 4
    __ shlq(r31, 8);                                   //    shl r31, 8
    __ shlq(r31, 16);                                  //    shl r31, 16
    __ shrq(rcx, 1);                                   //    shr rcx, 1
    __ shrq(rcx, 2);                                   //    shr rcx, 2
    __ shrq(rcx, 4);                                   //    shr rcx, 4
    __ shrq(rcx, 8);                                   //    shr rcx, 8
    __ shrq(rcx, 16);                                  //    shr rcx, 16
    __ shrq(rdx, 1);                                   //    shr rdx, 1
    __ shrq(rdx, 2);                                   //    shr rdx, 2
    __ shrq(rdx, 4);                                   //    shr rdx, 4
    __ shrq(rdx, 8);                                   //    shr rdx, 8
    __ shrq(rdx, 16);                                  //    shr rdx, 16
    __ shrq(rbx, 1);                                   //    shr rbx, 1
    __ shrq(rbx, 2);                                   //    shr rbx, 2
    __ shrq(rbx, 4);                                   //    shr rbx, 4
    __ shrq(rbx, 8);                                   //    shr rbx, 8
    __ shrq(rbx, 16);                                  //    shr rbx, 16
    __ shrq(r8, 1);                                    //    shr r8, 1
    __ shrq(r8, 2);                                    //    shr r8, 2
    __ shrq(r8, 4);                                    //    shr r8, 4
    __ shrq(r8, 8);                                    //    shr r8, 8
    __ shrq(r8, 16);                                   //    shr r8, 16
    __ shrq(r9, 1);                                    //    shr r9, 1
    __ shrq(r9, 2);                                    //    shr r9, 2
    __ shrq(r9, 4);                                    //    shr r9, 4
    __ shrq(r9, 8);                                    //    shr r9, 8
    __ shrq(r9, 16);                                   //    shr r9, 16
    __ shrq(r10, 1);                                   //    shr r10, 1
    __ shrq(r10, 2);                                   //    shr r10, 2
    __ shrq(r10, 4);                                   //    shr r10, 4
    __ shrq(r10, 8);                                   //    shr r10, 8
    __ shrq(r10, 16);                                  //    shr r10, 16
    __ shrq(r11, 1);                                   //    shr r11, 1
    __ shrq(r11, 2);                                   //    shr r11, 2
    __ shrq(r11, 4);                                   //    shr r11, 4
    __ shrq(r11, 8);                                   //    shr r11, 8
    __ shrq(r11, 16);                                  //    shr r11, 16
    __ shrq(r12, 1);                                   //    shr r12, 1
    __ shrq(r12, 2);                                   //    shr r12, 2
    __ shrq(r12, 4);                                   //    shr r12, 4
    __ shrq(r12, 8);                                   //    shr r12, 8
    __ shrq(r12, 16);                                  //    shr r12, 16
    __ shrq(r13, 1);                                   //    shr r13, 1
    __ shrq(r13, 2);                                   //    shr r13, 2
    __ shrq(r13, 4);                                   //    shr r13, 4
    __ shrq(r13, 8);                                   //    shr r13, 8
    __ shrq(r13, 16);                                  //    shr r13, 16
    __ shrq(r14, 1);                                   //    shr r14, 1
    __ shrq(r14, 2);                                   //    shr r14, 2
    __ shrq(r14, 4);                                   //    shr r14, 4
    __ shrq(r14, 8);                                   //    shr r14, 8
    __ shrq(r14, 16);                                  //    shr r14, 16
    __ shrq(r15, 1);                                   //    shr r15, 1
    __ shrq(r15, 2);                                   //    shr r15, 2
    __ shrq(r15, 4);                                   //    shr r15, 4
    __ shrq(r15, 8);                                   //    shr r15, 8
    __ shrq(r15, 16);                                  //    shr r15, 16
    __ shrq(r16, 1);                                   //    shr r16, 1
    __ shrq(r16, 2);                                   //    shr r16, 2
    __ shrq(r16, 4);                                   //    shr r16, 4
    __ shrq(r16, 8);                                   //    shr r16, 8
    __ shrq(r16, 16);                                  //    shr r16, 16
    __ shrq(r17, 1);                                   //    shr r17, 1
    __ shrq(r17, 2);                                   //    shr r17, 2
    __ shrq(r17, 4);                                   //    shr r17, 4
    __ shrq(r17, 8);                                   //    shr r17, 8
    __ shrq(r17, 16);                                  //    shr r17, 16
    __ shrq(r18, 1);                                   //    shr r18, 1
    __ shrq(r18, 2);                                   //    shr r18, 2
    __ shrq(r18, 4);                                   //    shr r18, 4
    __ shrq(r18, 8);                                   //    shr r18, 8
    __ shrq(r18, 16);                                  //    shr r18, 16
    __ shrq(r19, 1);                                   //    shr r19, 1
    __ shrq(r19, 2);                                   //    shr r19, 2
    __ shrq(r19, 4);                                   //    shr r19, 4
    __ shrq(r19, 8);                                   //    shr r19, 8
    __ shrq(r19, 16);                                  //    shr r19, 16
    __ shrq(r20, 1);                                   //    shr r20, 1
    __ shrq(r20, 2);                                   //    shr r20, 2
    __ shrq(r20, 4);                                   //    shr r20, 4
    __ shrq(r20, 8);                                   //    shr r20, 8
    __ shrq(r20, 16);                                  //    shr r20, 16
    __ shrq(r21, 1);                                   //    shr r21, 1
    __ shrq(r21, 2);                                   //    shr r21, 2
    __ shrq(r21, 4);                                   //    shr r21, 4
    __ shrq(r21, 8);                                   //    shr r21, 8
    __ shrq(r21, 16);                                  //    shr r21, 16
    __ shrq(r22, 1);                                   //    shr r22, 1
    __ shrq(r22, 2);                                   //    shr r22, 2
    __ shrq(r22, 4);                                   //    shr r22, 4
    __ shrq(r22, 8);                                   //    shr r22, 8
    __ shrq(r22, 16);                                  //    shr r22, 16
    __ shrq(r23, 1);                                   //    shr r23, 1
    __ shrq(r23, 2);                                   //    shr r23, 2
    __ shrq(r23, 4);                                   //    shr r23, 4
    __ shrq(r23, 8);                                   //    shr r23, 8
    __ shrq(r23, 16);                                  //    shr r23, 16
    __ shrq(r24, 1);                                   //    shr r24, 1
    __ shrq(r24, 2);                                   //    shr r24, 2
    __ shrq(r24, 4);                                   //    shr r24, 4
    __ shrq(r24, 8);                                   //    shr r24, 8
    __ shrq(r24, 16);                                  //    shr r24, 16
    __ shrq(r25, 1);                                   //    shr r25, 1
    __ shrq(r25, 2);                                   //    shr r25, 2
    __ shrq(r25, 4);                                   //    shr r25, 4
    __ shrq(r25, 8);                                   //    shr r25, 8
    __ shrq(r25, 16);                                  //    shr r25, 16
    __ shrq(r26, 1);                                   //    shr r26, 1
    __ shrq(r26, 2);                                   //    shr r26, 2
    __ shrq(r26, 4);                                   //    shr r26, 4
    __ shrq(r26, 8);                                   //    shr r26, 8
    __ shrq(r26, 16);                                  //    shr r26, 16
    __ shrq(r27, 1);                                   //    shr r27, 1
    __ shrq(r27, 2);                                   //    shr r27, 2
    __ shrq(r27, 4);                                   //    shr r27, 4
    __ shrq(r27, 8);                                   //    shr r27, 8
    __ shrq(r27, 16);                                  //    shr r27, 16
    __ shrq(r28, 1);                                   //    shr r28, 1
    __ shrq(r28, 2);                                   //    shr r28, 2
    __ shrq(r28, 4);                                   //    shr r28, 4
    __ shrq(r28, 8);                                   //    shr r28, 8
    __ shrq(r28, 16);                                  //    shr r28, 16
    __ shrq(r29, 1);                                   //    shr r29, 1
    __ shrq(r29, 2);                                   //    shr r29, 2
    __ shrq(r29, 4);                                   //    shr r29, 4
    __ shrq(r29, 8);                                   //    shr r29, 8
    __ shrq(r29, 16);                                  //    shr r29, 16
    __ shrq(r30, 1);                                   //    shr r30, 1
    __ shrq(r30, 2);                                   //    shr r30, 2
    __ shrq(r30, 4);                                   //    shr r30, 4
    __ shrq(r30, 8);                                   //    shr r30, 8
    __ shrq(r30, 16);                                  //    shr r30, 16
    __ shrq(r31, 1);                                   //    shr r31, 1
    __ shrq(r31, 2);                                   //    shr r31, 2
    __ shrq(r31, 4);                                   //    shr r31, 4
    __ shrq(r31, 8);                                   //    shr r31, 8
    __ shrq(r31, 16);                                  //    shr r31, 16
    __ subq(rcx, 1);                                   //    sub rcx, 1
    __ subq(rcx, 16);                                  //    sub rcx, 16
    __ subq(rcx, 256);                                 //    sub rcx, 256
    __ subq(rcx, 4096);                                //    sub rcx, 4096
    __ subq(rcx, 65536);                               //    sub rcx, 65536
    __ subq(rcx, 1048576);                             //    sub rcx, 1048576
    __ subq(rcx, 16777216);                            //    sub rcx, 16777216
    __ subq(rcx, 268435456);                           //    sub rcx, 268435456
    __ subq(rdx, 1);                                   //    sub rdx, 1
    __ subq(rdx, 16);                                  //    sub rdx, 16
    __ subq(rdx, 256);                                 //    sub rdx, 256
    __ subq(rdx, 4096);                                //    sub rdx, 4096
    __ subq(rdx, 65536);                               //    sub rdx, 65536
    __ subq(rdx, 1048576);                             //    sub rdx, 1048576
    __ subq(rdx, 16777216);                            //    sub rdx, 16777216
    __ subq(rdx, 268435456);                           //    sub rdx, 268435456
    __ subq(rbx, 1);                                   //    sub rbx, 1
    __ subq(rbx, 16);                                  //    sub rbx, 16
    __ subq(rbx, 256);                                 //    sub rbx, 256
    __ subq(rbx, 4096);                                //    sub rbx, 4096
    __ subq(rbx, 65536);                               //    sub rbx, 65536
    __ subq(rbx, 1048576);                             //    sub rbx, 1048576
    __ subq(rbx, 16777216);                            //    sub rbx, 16777216
    __ subq(rbx, 268435456);                           //    sub rbx, 268435456
    __ subq(r8, 1);                                    //    sub r8, 1
    __ subq(r8, 16);                                   //    sub r8, 16
    __ subq(r8, 256);                                  //    sub r8, 256
    __ subq(r8, 4096);                                 //    sub r8, 4096
    __ subq(r8, 65536);                                //    sub r8, 65536
    __ subq(r8, 1048576);                              //    sub r8, 1048576
    __ subq(r8, 16777216);                             //    sub r8, 16777216
    __ subq(r8, 268435456);                            //    sub r8, 268435456
    __ subq(r9, 1);                                    //    sub r9, 1
    __ subq(r9, 16);                                   //    sub r9, 16
    __ subq(r9, 256);                                  //    sub r9, 256
    __ subq(r9, 4096);                                 //    sub r9, 4096
    __ subq(r9, 65536);                                //    sub r9, 65536
    __ subq(r9, 1048576);                              //    sub r9, 1048576
    __ subq(r9, 16777216);                             //    sub r9, 16777216
    __ subq(r9, 268435456);                            //    sub r9, 268435456
    __ subq(r10, 1);                                   //    sub r10, 1
    __ subq(r10, 16);                                  //    sub r10, 16
    __ subq(r10, 256);                                 //    sub r10, 256
    __ subq(r10, 4096);                                //    sub r10, 4096
    __ subq(r10, 65536);                               //    sub r10, 65536
    __ subq(r10, 1048576);                             //    sub r10, 1048576
    __ subq(r10, 16777216);                            //    sub r10, 16777216
    __ subq(r10, 268435456);                           //    sub r10, 268435456
    __ subq(r11, 1);                                   //    sub r11, 1
    __ subq(r11, 16);                                  //    sub r11, 16
    __ subq(r11, 256);                                 //    sub r11, 256
    __ subq(r11, 4096);                                //    sub r11, 4096
    __ subq(r11, 65536);                               //    sub r11, 65536
    __ subq(r11, 1048576);                             //    sub r11, 1048576
    __ subq(r11, 16777216);                            //    sub r11, 16777216
    __ subq(r11, 268435456);                           //    sub r11, 268435456
    __ subq(r12, 1);                                   //    sub r12, 1
    __ subq(r12, 16);                                  //    sub r12, 16
    __ subq(r12, 256);                                 //    sub r12, 256
    __ subq(r12, 4096);                                //    sub r12, 4096
    __ subq(r12, 65536);                               //    sub r12, 65536
    __ subq(r12, 1048576);                             //    sub r12, 1048576
    __ subq(r12, 16777216);                            //    sub r12, 16777216
    __ subq(r12, 268435456);                           //    sub r12, 268435456
    __ subq(r13, 1);                                   //    sub r13, 1
    __ subq(r13, 16);                                  //    sub r13, 16
    __ subq(r13, 256);                                 //    sub r13, 256
    __ subq(r13, 4096);                                //    sub r13, 4096
    __ subq(r13, 65536);                               //    sub r13, 65536
    __ subq(r13, 1048576);                             //    sub r13, 1048576
    __ subq(r13, 16777216);                            //    sub r13, 16777216
    __ subq(r13, 268435456);                           //    sub r13, 268435456
    __ subq(r14, 1);                                   //    sub r14, 1
    __ subq(r14, 16);                                  //    sub r14, 16
    __ subq(r14, 256);                                 //    sub r14, 256
    __ subq(r14, 4096);                                //    sub r14, 4096
    __ subq(r14, 65536);                               //    sub r14, 65536
    __ subq(r14, 1048576);                             //    sub r14, 1048576
    __ subq(r14, 16777216);                            //    sub r14, 16777216
    __ subq(r14, 268435456);                           //    sub r14, 268435456
    __ subq(r15, 1);                                   //    sub r15, 1
    __ subq(r15, 16);                                  //    sub r15, 16
    __ subq(r15, 256);                                 //    sub r15, 256
    __ subq(r15, 4096);                                //    sub r15, 4096
    __ subq(r15, 65536);                               //    sub r15, 65536
    __ subq(r15, 1048576);                             //    sub r15, 1048576
    __ subq(r15, 16777216);                            //    sub r15, 16777216
    __ subq(r15, 268435456);                           //    sub r15, 268435456
    __ subq(r16, 1);                                   //    sub r16, 1
    __ subq(r16, 16);                                  //    sub r16, 16
    __ subq(r16, 256);                                 //    sub r16, 256
    __ subq(r16, 4096);                                //    sub r16, 4096
    __ subq(r16, 65536);                               //    sub r16, 65536
    __ subq(r16, 1048576);                             //    sub r16, 1048576
    __ subq(r16, 16777216);                            //    sub r16, 16777216
    __ subq(r16, 268435456);                           //    sub r16, 268435456
    __ subq(r17, 1);                                   //    sub r17, 1
    __ subq(r17, 16);                                  //    sub r17, 16
    __ subq(r17, 256);                                 //    sub r17, 256
    __ subq(r17, 4096);                                //    sub r17, 4096
    __ subq(r17, 65536);                               //    sub r17, 65536
    __ subq(r17, 1048576);                             //    sub r17, 1048576
    __ subq(r17, 16777216);                            //    sub r17, 16777216
    __ subq(r17, 268435456);                           //    sub r17, 268435456
    __ subq(r18, 1);                                   //    sub r18, 1
    __ subq(r18, 16);                                  //    sub r18, 16
    __ subq(r18, 256);                                 //    sub r18, 256
    __ subq(r18, 4096);                                //    sub r18, 4096
    __ subq(r18, 65536);                               //    sub r18, 65536
    __ subq(r18, 1048576);                             //    sub r18, 1048576
    __ subq(r18, 16777216);                            //    sub r18, 16777216
    __ subq(r18, 268435456);                           //    sub r18, 268435456
    __ subq(r19, 1);                                   //    sub r19, 1
    __ subq(r19, 16);                                  //    sub r19, 16
    __ subq(r19, 256);                                 //    sub r19, 256
    __ subq(r19, 4096);                                //    sub r19, 4096
    __ subq(r19, 65536);                               //    sub r19, 65536
    __ subq(r19, 1048576);                             //    sub r19, 1048576
    __ subq(r19, 16777216);                            //    sub r19, 16777216
    __ subq(r19, 268435456);                           //    sub r19, 268435456
    __ subq(r20, 1);                                   //    sub r20, 1
    __ subq(r20, 16);                                  //    sub r20, 16
    __ subq(r20, 256);                                 //    sub r20, 256
    __ subq(r20, 4096);                                //    sub r20, 4096
    __ subq(r20, 65536);                               //    sub r20, 65536
    __ subq(r20, 1048576);                             //    sub r20, 1048576
    __ subq(r20, 16777216);                            //    sub r20, 16777216
    __ subq(r20, 268435456);                           //    sub r20, 268435456
    __ subq(r21, 1);                                   //    sub r21, 1
    __ subq(r21, 16);                                  //    sub r21, 16
    __ subq(r21, 256);                                 //    sub r21, 256
    __ subq(r21, 4096);                                //    sub r21, 4096
    __ subq(r21, 65536);                               //    sub r21, 65536
    __ subq(r21, 1048576);                             //    sub r21, 1048576
    __ subq(r21, 16777216);                            //    sub r21, 16777216
    __ subq(r21, 268435456);                           //    sub r21, 268435456
    __ subq(r22, 1);                                   //    sub r22, 1
    __ subq(r22, 16);                                  //    sub r22, 16
    __ subq(r22, 256);                                 //    sub r22, 256
    __ subq(r22, 4096);                                //    sub r22, 4096
    __ subq(r22, 65536);                               //    sub r22, 65536
    __ subq(r22, 1048576);                             //    sub r22, 1048576
    __ subq(r22, 16777216);                            //    sub r22, 16777216
    __ subq(r22, 268435456);                           //    sub r22, 268435456
    __ subq(r23, 1);                                   //    sub r23, 1
    __ subq(r23, 16);                                  //    sub r23, 16
    __ subq(r23, 256);                                 //    sub r23, 256
    __ subq(r23, 4096);                                //    sub r23, 4096
    __ subq(r23, 65536);                               //    sub r23, 65536
    __ subq(r23, 1048576);                             //    sub r23, 1048576
    __ subq(r23, 16777216);                            //    sub r23, 16777216
    __ subq(r23, 268435456);                           //    sub r23, 268435456
    __ subq(r24, 1);                                   //    sub r24, 1
    __ subq(r24, 16);                                  //    sub r24, 16
    __ subq(r24, 256);                                 //    sub r24, 256
    __ subq(r24, 4096);                                //    sub r24, 4096
    __ subq(r24, 65536);                               //    sub r24, 65536
    __ subq(r24, 1048576);                             //    sub r24, 1048576
    __ subq(r24, 16777216);                            //    sub r24, 16777216
    __ subq(r24, 268435456);                           //    sub r24, 268435456
    __ subq(r25, 1);                                   //    sub r25, 1
    __ subq(r25, 16);                                  //    sub r25, 16
    __ subq(r25, 256);                                 //    sub r25, 256
    __ subq(r25, 4096);                                //    sub r25, 4096
    __ subq(r25, 65536);                               //    sub r25, 65536
    __ subq(r25, 1048576);                             //    sub r25, 1048576
    __ subq(r25, 16777216);                            //    sub r25, 16777216
    __ subq(r25, 268435456);                           //    sub r25, 268435456
    __ subq(r26, 1);                                   //    sub r26, 1
    __ subq(r26, 16);                                  //    sub r26, 16
    __ subq(r26, 256);                                 //    sub r26, 256
    __ subq(r26, 4096);                                //    sub r26, 4096
    __ subq(r26, 65536);                               //    sub r26, 65536
    __ subq(r26, 1048576);                             //    sub r26, 1048576
    __ subq(r26, 16777216);                            //    sub r26, 16777216
    __ subq(r26, 268435456);                           //    sub r26, 268435456
    __ subq(r27, 1);                                   //    sub r27, 1
    __ subq(r27, 16);                                  //    sub r27, 16
    __ subq(r27, 256);                                 //    sub r27, 256
    __ subq(r27, 4096);                                //    sub r27, 4096
    __ subq(r27, 65536);                               //    sub r27, 65536
    __ subq(r27, 1048576);                             //    sub r27, 1048576
    __ subq(r27, 16777216);                            //    sub r27, 16777216
    __ subq(r27, 268435456);                           //    sub r27, 268435456
    __ subq(r28, 1);                                   //    sub r28, 1
    __ subq(r28, 16);                                  //    sub r28, 16
    __ subq(r28, 256);                                 //    sub r28, 256
    __ subq(r28, 4096);                                //    sub r28, 4096
    __ subq(r28, 65536);                               //    sub r28, 65536
    __ subq(r28, 1048576);                             //    sub r28, 1048576
    __ subq(r28, 16777216);                            //    sub r28, 16777216
    __ subq(r28, 268435456);                           //    sub r28, 268435456
    __ subq(r29, 1);                                   //    sub r29, 1
    __ subq(r29, 16);                                  //    sub r29, 16
    __ subq(r29, 256);                                 //    sub r29, 256
    __ subq(r29, 4096);                                //    sub r29, 4096
    __ subq(r29, 65536);                               //    sub r29, 65536
    __ subq(r29, 1048576);                             //    sub r29, 1048576
    __ subq(r29, 16777216);                            //    sub r29, 16777216
    __ subq(r29, 268435456);                           //    sub r29, 268435456
    __ subq(r30, 1);                                   //    sub r30, 1
    __ subq(r30, 16);                                  //    sub r30, 16
    __ subq(r30, 256);                                 //    sub r30, 256
    __ subq(r30, 4096);                                //    sub r30, 4096
    __ subq(r30, 65536);                               //    sub r30, 65536
    __ subq(r30, 1048576);                             //    sub r30, 1048576
    __ subq(r30, 16777216);                            //    sub r30, 16777216
    __ subq(r30, 268435456);                           //    sub r30, 268435456
    __ subq(r31, 1);                                   //    sub r31, 1
    __ subq(r31, 16);                                  //    sub r31, 16
    __ subq(r31, 256);                                 //    sub r31, 256
    __ subq(r31, 4096);                                //    sub r31, 4096
    __ subq(r31, 65536);                               //    sub r31, 65536
    __ subq(r31, 1048576);                             //    sub r31, 1048576
    __ subq(r31, 16777216);                            //    sub r31, 16777216
    __ subq(r31, 268435456);                           //    sub r31, 268435456
    __ xorq(rcx, 1);                                   //    xor rcx, 1
    __ xorq(rcx, 16);                                  //    xor rcx, 16
    __ xorq(rcx, 256);                                 //    xor rcx, 256
    __ xorq(rcx, 4096);                                //    xor rcx, 4096
    __ xorq(rcx, 65536);                               //    xor rcx, 65536
    __ xorq(rcx, 1048576);                             //    xor rcx, 1048576
    __ xorq(rcx, 16777216);                            //    xor rcx, 16777216
    __ xorq(rcx, 268435456);                           //    xor rcx, 268435456
    __ xorq(rdx, 1);                                   //    xor rdx, 1
    __ xorq(rdx, 16);                                  //    xor rdx, 16
    __ xorq(rdx, 256);                                 //    xor rdx, 256
    __ xorq(rdx, 4096);                                //    xor rdx, 4096
    __ xorq(rdx, 65536);                               //    xor rdx, 65536
    __ xorq(rdx, 1048576);                             //    xor rdx, 1048576
    __ xorq(rdx, 16777216);                            //    xor rdx, 16777216
    __ xorq(rdx, 268435456);                           //    xor rdx, 268435456
    __ xorq(rbx, 1);                                   //    xor rbx, 1
    __ xorq(rbx, 16);                                  //    xor rbx, 16
    __ xorq(rbx, 256);                                 //    xor rbx, 256
    __ xorq(rbx, 4096);                                //    xor rbx, 4096
    __ xorq(rbx, 65536);                               //    xor rbx, 65536
    __ xorq(rbx, 1048576);                             //    xor rbx, 1048576
    __ xorq(rbx, 16777216);                            //    xor rbx, 16777216
    __ xorq(rbx, 268435456);                           //    xor rbx, 268435456
    __ xorq(r8, 1);                                    //    xor r8, 1
    __ xorq(r8, 16);                                   //    xor r8, 16
    __ xorq(r8, 256);                                  //    xor r8, 256
    __ xorq(r8, 4096);                                 //    xor r8, 4096
    __ xorq(r8, 65536);                                //    xor r8, 65536
    __ xorq(r8, 1048576);                              //    xor r8, 1048576
    __ xorq(r8, 16777216);                             //    xor r8, 16777216
    __ xorq(r8, 268435456);                            //    xor r8, 268435456
    __ xorq(r9, 1);                                    //    xor r9, 1
    __ xorq(r9, 16);                                   //    xor r9, 16
    __ xorq(r9, 256);                                  //    xor r9, 256
    __ xorq(r9, 4096);                                 //    xor r9, 4096
    __ xorq(r9, 65536);                                //    xor r9, 65536
    __ xorq(r9, 1048576);                              //    xor r9, 1048576
    __ xorq(r9, 16777216);                             //    xor r9, 16777216
    __ xorq(r9, 268435456);                            //    xor r9, 268435456
    __ xorq(r10, 1);                                   //    xor r10, 1
    __ xorq(r10, 16);                                  //    xor r10, 16
    __ xorq(r10, 256);                                 //    xor r10, 256
    __ xorq(r10, 4096);                                //    xor r10, 4096
    __ xorq(r10, 65536);                               //    xor r10, 65536
    __ xorq(r10, 1048576);                             //    xor r10, 1048576
    __ xorq(r10, 16777216);                            //    xor r10, 16777216
    __ xorq(r10, 268435456);                           //    xor r10, 268435456
    __ xorq(r11, 1);                                   //    xor r11, 1
    __ xorq(r11, 16);                                  //    xor r11, 16
    __ xorq(r11, 256);                                 //    xor r11, 256
    __ xorq(r11, 4096);                                //    xor r11, 4096
    __ xorq(r11, 65536);                               //    xor r11, 65536
    __ xorq(r11, 1048576);                             //    xor r11, 1048576
    __ xorq(r11, 16777216);                            //    xor r11, 16777216
    __ xorq(r11, 268435456);                           //    xor r11, 268435456
    __ xorq(r12, 1);                                   //    xor r12, 1
    __ xorq(r12, 16);                                  //    xor r12, 16
    __ xorq(r12, 256);                                 //    xor r12, 256
    __ xorq(r12, 4096);                                //    xor r12, 4096
    __ xorq(r12, 65536);                               //    xor r12, 65536
    __ xorq(r12, 1048576);                             //    xor r12, 1048576
    __ xorq(r12, 16777216);                            //    xor r12, 16777216
    __ xorq(r12, 268435456);                           //    xor r12, 268435456
    __ xorq(r13, 1);                                   //    xor r13, 1
    __ xorq(r13, 16);                                  //    xor r13, 16
    __ xorq(r13, 256);                                 //    xor r13, 256
    __ xorq(r13, 4096);                                //    xor r13, 4096
    __ xorq(r13, 65536);                               //    xor r13, 65536
    __ xorq(r13, 1048576);                             //    xor r13, 1048576
    __ xorq(r13, 16777216);                            //    xor r13, 16777216
    __ xorq(r13, 268435456);                           //    xor r13, 268435456
    __ xorq(r14, 1);                                   //    xor r14, 1
    __ xorq(r14, 16);                                  //    xor r14, 16
    __ xorq(r14, 256);                                 //    xor r14, 256
    __ xorq(r14, 4096);                                //    xor r14, 4096
    __ xorq(r14, 65536);                               //    xor r14, 65536
    __ xorq(r14, 1048576);                             //    xor r14, 1048576
    __ xorq(r14, 16777216);                            //    xor r14, 16777216
    __ xorq(r14, 268435456);                           //    xor r14, 268435456
    __ xorq(r15, 1);                                   //    xor r15, 1
    __ xorq(r15, 16);                                  //    xor r15, 16
    __ xorq(r15, 256);                                 //    xor r15, 256
    __ xorq(r15, 4096);                                //    xor r15, 4096
    __ xorq(r15, 65536);                               //    xor r15, 65536
    __ xorq(r15, 1048576);                             //    xor r15, 1048576
    __ xorq(r15, 16777216);                            //    xor r15, 16777216
    __ xorq(r15, 268435456);                           //    xor r15, 268435456
    __ xorq(r16, 1);                                   //    xor r16, 1
    __ xorq(r16, 16);                                  //    xor r16, 16
    __ xorq(r16, 256);                                 //    xor r16, 256
    __ xorq(r16, 4096);                                //    xor r16, 4096
    __ xorq(r16, 65536);                               //    xor r16, 65536
    __ xorq(r16, 1048576);                             //    xor r16, 1048576
    __ xorq(r16, 16777216);                            //    xor r16, 16777216
    __ xorq(r16, 268435456);                           //    xor r16, 268435456
    __ xorq(r17, 1);                                   //    xor r17, 1
    __ xorq(r17, 16);                                  //    xor r17, 16
    __ xorq(r17, 256);                                 //    xor r17, 256
    __ xorq(r17, 4096);                                //    xor r17, 4096
    __ xorq(r17, 65536);                               //    xor r17, 65536
    __ xorq(r17, 1048576);                             //    xor r17, 1048576
    __ xorq(r17, 16777216);                            //    xor r17, 16777216
    __ xorq(r17, 268435456);                           //    xor r17, 268435456
    __ xorq(r18, 1);                                   //    xor r18, 1
    __ xorq(r18, 16);                                  //    xor r18, 16
    __ xorq(r18, 256);                                 //    xor r18, 256
    __ xorq(r18, 4096);                                //    xor r18, 4096
    __ xorq(r18, 65536);                               //    xor r18, 65536
    __ xorq(r18, 1048576);                             //    xor r18, 1048576
    __ xorq(r18, 16777216);                            //    xor r18, 16777216
    __ xorq(r18, 268435456);                           //    xor r18, 268435456
    __ xorq(r19, 1);                                   //    xor r19, 1
    __ xorq(r19, 16);                                  //    xor r19, 16
    __ xorq(r19, 256);                                 //    xor r19, 256
    __ xorq(r19, 4096);                                //    xor r19, 4096
    __ xorq(r19, 65536);                               //    xor r19, 65536
    __ xorq(r19, 1048576);                             //    xor r19, 1048576
    __ xorq(r19, 16777216);                            //    xor r19, 16777216
    __ xorq(r19, 268435456);                           //    xor r19, 268435456
    __ xorq(r20, 1);                                   //    xor r20, 1
    __ xorq(r20, 16);                                  //    xor r20, 16
    __ xorq(r20, 256);                                 //    xor r20, 256
    __ xorq(r20, 4096);                                //    xor r20, 4096
    __ xorq(r20, 65536);                               //    xor r20, 65536
    __ xorq(r20, 1048576);                             //    xor r20, 1048576
    __ xorq(r20, 16777216);                            //    xor r20, 16777216
    __ xorq(r20, 268435456);                           //    xor r20, 268435456
    __ xorq(r21, 1);                                   //    xor r21, 1
    __ xorq(r21, 16);                                  //    xor r21, 16
    __ xorq(r21, 256);                                 //    xor r21, 256
    __ xorq(r21, 4096);                                //    xor r21, 4096
    __ xorq(r21, 65536);                               //    xor r21, 65536
    __ xorq(r21, 1048576);                             //    xor r21, 1048576
    __ xorq(r21, 16777216);                            //    xor r21, 16777216
    __ xorq(r21, 268435456);                           //    xor r21, 268435456
    __ xorq(r22, 1);                                   //    xor r22, 1
    __ xorq(r22, 16);                                  //    xor r22, 16
    __ xorq(r22, 256);                                 //    xor r22, 256
    __ xorq(r22, 4096);                                //    xor r22, 4096
    __ xorq(r22, 65536);                               //    xor r22, 65536
    __ xorq(r22, 1048576);                             //    xor r22, 1048576
    __ xorq(r22, 16777216);                            //    xor r22, 16777216
    __ xorq(r22, 268435456);                           //    xor r22, 268435456
    __ xorq(r23, 1);                                   //    xor r23, 1
    __ xorq(r23, 16);                                  //    xor r23, 16
    __ xorq(r23, 256);                                 //    xor r23, 256
    __ xorq(r23, 4096);                                //    xor r23, 4096
    __ xorq(r23, 65536);                               //    xor r23, 65536
    __ xorq(r23, 1048576);                             //    xor r23, 1048576
    __ xorq(r23, 16777216);                            //    xor r23, 16777216
    __ xorq(r23, 268435456);                           //    xor r23, 268435456
    __ xorq(r24, 1);                                   //    xor r24, 1
    __ xorq(r24, 16);                                  //    xor r24, 16
    __ xorq(r24, 256);                                 //    xor r24, 256
    __ xorq(r24, 4096);                                //    xor r24, 4096
    __ xorq(r24, 65536);                               //    xor r24, 65536
    __ xorq(r24, 1048576);                             //    xor r24, 1048576
    __ xorq(r24, 16777216);                            //    xor r24, 16777216
    __ xorq(r24, 268435456);                           //    xor r24, 268435456
    __ xorq(r25, 1);                                   //    xor r25, 1
    __ xorq(r25, 16);                                  //    xor r25, 16
    __ xorq(r25, 256);                                 //    xor r25, 256
    __ xorq(r25, 4096);                                //    xor r25, 4096
    __ xorq(r25, 65536);                               //    xor r25, 65536
    __ xorq(r25, 1048576);                             //    xor r25, 1048576
    __ xorq(r25, 16777216);                            //    xor r25, 16777216
    __ xorq(r25, 268435456);                           //    xor r25, 268435456
    __ xorq(r26, 1);                                   //    xor r26, 1
    __ xorq(r26, 16);                                  //    xor r26, 16
    __ xorq(r26, 256);                                 //    xor r26, 256
    __ xorq(r26, 4096);                                //    xor r26, 4096
    __ xorq(r26, 65536);                               //    xor r26, 65536
    __ xorq(r26, 1048576);                             //    xor r26, 1048576
    __ xorq(r26, 16777216);                            //    xor r26, 16777216
    __ xorq(r26, 268435456);                           //    xor r26, 268435456
    __ xorq(r27, 1);                                   //    xor r27, 1
    __ xorq(r27, 16);                                  //    xor r27, 16
    __ xorq(r27, 256);                                 //    xor r27, 256
    __ xorq(r27, 4096);                                //    xor r27, 4096
    __ xorq(r27, 65536);                               //    xor r27, 65536
    __ xorq(r27, 1048576);                             //    xor r27, 1048576
    __ xorq(r27, 16777216);                            //    xor r27, 16777216
    __ xorq(r27, 268435456);                           //    xor r27, 268435456
    __ xorq(r28, 1);                                   //    xor r28, 1
    __ xorq(r28, 16);                                  //    xor r28, 16
    __ xorq(r28, 256);                                 //    xor r28, 256
    __ xorq(r28, 4096);                                //    xor r28, 4096
    __ xorq(r28, 65536);                               //    xor r28, 65536
    __ xorq(r28, 1048576);                             //    xor r28, 1048576
    __ xorq(r28, 16777216);                            //    xor r28, 16777216
    __ xorq(r28, 268435456);                           //    xor r28, 268435456
    __ xorq(r29, 1);                                   //    xor r29, 1
    __ xorq(r29, 16);                                  //    xor r29, 16
    __ xorq(r29, 256);                                 //    xor r29, 256
    __ xorq(r29, 4096);                                //    xor r29, 4096
    __ xorq(r29, 65536);                               //    xor r29, 65536
    __ xorq(r29, 1048576);                             //    xor r29, 1048576
    __ xorq(r29, 16777216);                            //    xor r29, 16777216
    __ xorq(r29, 268435456);                           //    xor r29, 268435456
    __ xorq(r30, 1);                                   //    xor r30, 1
    __ xorq(r30, 16);                                  //    xor r30, 16
    __ xorq(r30, 256);                                 //    xor r30, 256
    __ xorq(r30, 4096);                                //    xor r30, 4096
    __ xorq(r30, 65536);                               //    xor r30, 65536
    __ xorq(r30, 1048576);                             //    xor r30, 1048576
    __ xorq(r30, 16777216);                            //    xor r30, 16777216
    __ xorq(r30, 268435456);                           //    xor r30, 268435456
    __ xorq(r31, 1);                                   //    xor r31, 1
    __ xorq(r31, 16);                                  //    xor r31, 16
    __ xorq(r31, 256);                                 //    xor r31, 256
    __ xorq(r31, 4096);                                //    xor r31, 4096
    __ xorq(r31, 65536);                               //    xor r31, 65536
    __ xorq(r31, 1048576);                             //    xor r31, 1048576
    __ xorq(r31, 16777216);                            //    xor r31, 16777216
    __ xorq(r31, 268435456);                           //    xor r31, 268435456
    __ cmovq (Assembler::Condition::overflow, rcx, Address(rdx, rbx)); //    cmovo rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::overflow, rdx, Address(rbx, r8)); //    cmovo rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::overflow, rbx, Address(r8, r9)); //    cmovo rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::overflow, r8, Address(r9, r10)); //    cmovo r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::overflow, r9, Address(r10, r11)); //    cmovo r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::overflow, r10, Address(r11, r12)); //    cmovo r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::overflow, r11, Address(r12, r13)); //    cmovo r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::overflow, r12, Address(r13, r14)); //    cmovo r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::overflow, r13, Address(r14, r15)); //    cmovo r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::overflow, r14, Address(r15, r16)); //    cmovo r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::overflow, r15, Address(r16, r17)); //    cmovo r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::overflow, r16, Address(r17, r18)); //    cmovo r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::overflow, r17, Address(r18, r19)); //    cmovo r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::overflow, r18, Address(r19, r20)); //    cmovo r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::overflow, r19, Address(r20, r21)); //    cmovo r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::overflow, r20, Address(r21, r22)); //    cmovo r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::overflow, r21, Address(r22, r23)); //    cmovo r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::overflow, r22, Address(r23, r24)); //    cmovo r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::overflow, r23, Address(r24, r25)); //    cmovo r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::overflow, r24, Address(r25, r26)); //    cmovo r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::overflow, r25, Address(r26, r27)); //    cmovo r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::overflow, r26, Address(r27, r28)); //    cmovo r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::overflow, r27, Address(r28, r29)); //    cmovo r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::overflow, r28, Address(r29, r30)); //    cmovo r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::overflow, r29, Address(r30, r31)); //    cmovo r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::overflow, r30, Address(r31, rcx)); //    cmovo r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::overflow, r31, Address(rcx, rdx)); //    cmovo r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::noOverflow, rcx, Address(rdx, rbx)); //    cmovno rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::noOverflow, rdx, Address(rbx, r8)); //    cmovno rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::noOverflow, rbx, Address(r8, r9)); //    cmovno rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::noOverflow, r8, Address(r9, r10)); //    cmovno r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::noOverflow, r9, Address(r10, r11)); //    cmovno r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::noOverflow, r10, Address(r11, r12)); //    cmovno r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::noOverflow, r11, Address(r12, r13)); //    cmovno r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::noOverflow, r12, Address(r13, r14)); //    cmovno r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::noOverflow, r13, Address(r14, r15)); //    cmovno r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::noOverflow, r14, Address(r15, r16)); //    cmovno r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::noOverflow, r15, Address(r16, r17)); //    cmovno r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::noOverflow, r16, Address(r17, r18)); //    cmovno r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::noOverflow, r17, Address(r18, r19)); //    cmovno r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::noOverflow, r18, Address(r19, r20)); //    cmovno r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::noOverflow, r19, Address(r20, r21)); //    cmovno r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::noOverflow, r20, Address(r21, r22)); //    cmovno r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::noOverflow, r21, Address(r22, r23)); //    cmovno r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::noOverflow, r22, Address(r23, r24)); //    cmovno r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::noOverflow, r23, Address(r24, r25)); //    cmovno r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::noOverflow, r24, Address(r25, r26)); //    cmovno r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::noOverflow, r25, Address(r26, r27)); //    cmovno r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::noOverflow, r26, Address(r27, r28)); //    cmovno r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::noOverflow, r27, Address(r28, r29)); //    cmovno r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::noOverflow, r28, Address(r29, r30)); //    cmovno r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::noOverflow, r29, Address(r30, r31)); //    cmovno r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::noOverflow, r30, Address(r31, rcx)); //    cmovno r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::noOverflow, r31, Address(rcx, rdx)); //    cmovno r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::below, rcx, Address(rdx, rbx)); //    cmovb rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::below, rdx, Address(rbx, r8)); //    cmovb rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::below, rbx, Address(r8, r9)); //    cmovb rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::below, r8, Address(r9, r10)); //    cmovb r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::below, r9, Address(r10, r11)); //    cmovb r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::below, r10, Address(r11, r12)); //    cmovb r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::below, r11, Address(r12, r13)); //    cmovb r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::below, r12, Address(r13, r14)); //    cmovb r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::below, r13, Address(r14, r15)); //    cmovb r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::below, r14, Address(r15, r16)); //    cmovb r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::below, r15, Address(r16, r17)); //    cmovb r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::below, r16, Address(r17, r18)); //    cmovb r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::below, r17, Address(r18, r19)); //    cmovb r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::below, r18, Address(r19, r20)); //    cmovb r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::below, r19, Address(r20, r21)); //    cmovb r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::below, r20, Address(r21, r22)); //    cmovb r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::below, r21, Address(r22, r23)); //    cmovb r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::below, r22, Address(r23, r24)); //    cmovb r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::below, r23, Address(r24, r25)); //    cmovb r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::below, r24, Address(r25, r26)); //    cmovb r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::below, r25, Address(r26, r27)); //    cmovb r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::below, r26, Address(r27, r28)); //    cmovb r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::below, r27, Address(r28, r29)); //    cmovb r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::below, r28, Address(r29, r30)); //    cmovb r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::below, r29, Address(r30, r31)); //    cmovb r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::below, r30, Address(r31, rcx)); //    cmovb r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::below, r31, Address(rcx, rdx)); //    cmovb r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::aboveEqual, rcx, Address(rdx, rbx)); //    cmovae rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::aboveEqual, rdx, Address(rbx, r8)); //    cmovae rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::aboveEqual, rbx, Address(r8, r9)); //    cmovae rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::aboveEqual, r8, Address(r9, r10)); //    cmovae r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::aboveEqual, r9, Address(r10, r11)); //    cmovae r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::aboveEqual, r10, Address(r11, r12)); //    cmovae r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::aboveEqual, r11, Address(r12, r13)); //    cmovae r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::aboveEqual, r12, Address(r13, r14)); //    cmovae r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::aboveEqual, r13, Address(r14, r15)); //    cmovae r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::aboveEqual, r14, Address(r15, r16)); //    cmovae r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::aboveEqual, r15, Address(r16, r17)); //    cmovae r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::aboveEqual, r16, Address(r17, r18)); //    cmovae r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::aboveEqual, r17, Address(r18, r19)); //    cmovae r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::aboveEqual, r18, Address(r19, r20)); //    cmovae r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::aboveEqual, r19, Address(r20, r21)); //    cmovae r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::aboveEqual, r20, Address(r21, r22)); //    cmovae r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::aboveEqual, r21, Address(r22, r23)); //    cmovae r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::aboveEqual, r22, Address(r23, r24)); //    cmovae r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::aboveEqual, r23, Address(r24, r25)); //    cmovae r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::aboveEqual, r24, Address(r25, r26)); //    cmovae r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::aboveEqual, r25, Address(r26, r27)); //    cmovae r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::aboveEqual, r26, Address(r27, r28)); //    cmovae r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::aboveEqual, r27, Address(r28, r29)); //    cmovae r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::aboveEqual, r28, Address(r29, r30)); //    cmovae r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::aboveEqual, r29, Address(r30, r31)); //    cmovae r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::aboveEqual, r30, Address(r31, rcx)); //    cmovae r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::aboveEqual, r31, Address(rcx, rdx)); //    cmovae r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::zero, rcx, Address(rdx, rbx)); //    cmovz rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::zero, rdx, Address(rbx, r8)); //    cmovz rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::zero, rbx, Address(r8, r9)); //    cmovz rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::zero, r8, Address(r9, r10)); //    cmovz r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::zero, r9, Address(r10, r11)); //    cmovz r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::zero, r10, Address(r11, r12)); //    cmovz r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::zero, r11, Address(r12, r13)); //    cmovz r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::zero, r12, Address(r13, r14)); //    cmovz r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::zero, r13, Address(r14, r15)); //    cmovz r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::zero, r14, Address(r15, r16)); //    cmovz r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::zero, r15, Address(r16, r17)); //    cmovz r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::zero, r16, Address(r17, r18)); //    cmovz r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::zero, r17, Address(r18, r19)); //    cmovz r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::zero, r18, Address(r19, r20)); //    cmovz r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::zero, r19, Address(r20, r21)); //    cmovz r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::zero, r20, Address(r21, r22)); //    cmovz r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::zero, r21, Address(r22, r23)); //    cmovz r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::zero, r22, Address(r23, r24)); //    cmovz r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::zero, r23, Address(r24, r25)); //    cmovz r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::zero, r24, Address(r25, r26)); //    cmovz r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::zero, r25, Address(r26, r27)); //    cmovz r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::zero, r26, Address(r27, r28)); //    cmovz r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::zero, r27, Address(r28, r29)); //    cmovz r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::zero, r28, Address(r29, r30)); //    cmovz r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::zero, r29, Address(r30, r31)); //    cmovz r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::zero, r30, Address(r31, rcx)); //    cmovz r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::zero, r31, Address(rcx, rdx)); //    cmovz r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::notZero, rcx, Address(rdx, rbx)); //    cmovnz rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::notZero, rdx, Address(rbx, r8)); //    cmovnz rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::notZero, rbx, Address(r8, r9)); //    cmovnz rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::notZero, r8, Address(r9, r10)); //    cmovnz r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::notZero, r9, Address(r10, r11)); //    cmovnz r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::notZero, r10, Address(r11, r12)); //    cmovnz r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::notZero, r11, Address(r12, r13)); //    cmovnz r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::notZero, r12, Address(r13, r14)); //    cmovnz r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::notZero, r13, Address(r14, r15)); //    cmovnz r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::notZero, r14, Address(r15, r16)); //    cmovnz r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::notZero, r15, Address(r16, r17)); //    cmovnz r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::notZero, r16, Address(r17, r18)); //    cmovnz r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::notZero, r17, Address(r18, r19)); //    cmovnz r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::notZero, r18, Address(r19, r20)); //    cmovnz r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::notZero, r19, Address(r20, r21)); //    cmovnz r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::notZero, r20, Address(r21, r22)); //    cmovnz r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::notZero, r21, Address(r22, r23)); //    cmovnz r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::notZero, r22, Address(r23, r24)); //    cmovnz r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::notZero, r23, Address(r24, r25)); //    cmovnz r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::notZero, r24, Address(r25, r26)); //    cmovnz r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::notZero, r25, Address(r26, r27)); //    cmovnz r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::notZero, r26, Address(r27, r28)); //    cmovnz r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::notZero, r27, Address(r28, r29)); //    cmovnz r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::notZero, r28, Address(r29, r30)); //    cmovnz r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::notZero, r29, Address(r30, r31)); //    cmovnz r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::notZero, r30, Address(r31, rcx)); //    cmovnz r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::notZero, r31, Address(rcx, rdx)); //    cmovnz r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::belowEqual, rcx, Address(rdx, rbx)); //    cmovbe rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::belowEqual, rdx, Address(rbx, r8)); //    cmovbe rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::belowEqual, rbx, Address(r8, r9)); //    cmovbe rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::belowEqual, r8, Address(r9, r10)); //    cmovbe r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::belowEqual, r9, Address(r10, r11)); //    cmovbe r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::belowEqual, r10, Address(r11, r12)); //    cmovbe r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::belowEqual, r11, Address(r12, r13)); //    cmovbe r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::belowEqual, r12, Address(r13, r14)); //    cmovbe r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::belowEqual, r13, Address(r14, r15)); //    cmovbe r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::belowEqual, r14, Address(r15, r16)); //    cmovbe r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::belowEqual, r15, Address(r16, r17)); //    cmovbe r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::belowEqual, r16, Address(r17, r18)); //    cmovbe r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::belowEqual, r17, Address(r18, r19)); //    cmovbe r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::belowEqual, r18, Address(r19, r20)); //    cmovbe r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::belowEqual, r19, Address(r20, r21)); //    cmovbe r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::belowEqual, r20, Address(r21, r22)); //    cmovbe r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::belowEqual, r21, Address(r22, r23)); //    cmovbe r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::belowEqual, r22, Address(r23, r24)); //    cmovbe r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::belowEqual, r23, Address(r24, r25)); //    cmovbe r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::belowEqual, r24, Address(r25, r26)); //    cmovbe r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::belowEqual, r25, Address(r26, r27)); //    cmovbe r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::belowEqual, r26, Address(r27, r28)); //    cmovbe r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::belowEqual, r27, Address(r28, r29)); //    cmovbe r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::belowEqual, r28, Address(r29, r30)); //    cmovbe r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::belowEqual, r29, Address(r30, r31)); //    cmovbe r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::belowEqual, r30, Address(r31, rcx)); //    cmovbe r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::belowEqual, r31, Address(rcx, rdx)); //    cmovbe r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::above, rcx, Address(rdx, rbx)); //    cmova rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::above, rdx, Address(rbx, r8)); //    cmova rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::above, rbx, Address(r8, r9)); //    cmova rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::above, r8, Address(r9, r10)); //    cmova r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::above, r9, Address(r10, r11)); //    cmova r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::above, r10, Address(r11, r12)); //    cmova r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::above, r11, Address(r12, r13)); //    cmova r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::above, r12, Address(r13, r14)); //    cmova r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::above, r13, Address(r14, r15)); //    cmova r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::above, r14, Address(r15, r16)); //    cmova r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::above, r15, Address(r16, r17)); //    cmova r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::above, r16, Address(r17, r18)); //    cmova r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::above, r17, Address(r18, r19)); //    cmova r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::above, r18, Address(r19, r20)); //    cmova r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::above, r19, Address(r20, r21)); //    cmova r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::above, r20, Address(r21, r22)); //    cmova r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::above, r21, Address(r22, r23)); //    cmova r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::above, r22, Address(r23, r24)); //    cmova r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::above, r23, Address(r24, r25)); //    cmova r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::above, r24, Address(r25, r26)); //    cmova r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::above, r25, Address(r26, r27)); //    cmova r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::above, r26, Address(r27, r28)); //    cmova r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::above, r27, Address(r28, r29)); //    cmova r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::above, r28, Address(r29, r30)); //    cmova r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::above, r29, Address(r30, r31)); //    cmova r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::above, r30, Address(r31, rcx)); //    cmova r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::above, r31, Address(rcx, rdx)); //    cmova r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::negative, rcx, Address(rdx, rbx)); //    cmovs rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::negative, rdx, Address(rbx, r8)); //    cmovs rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::negative, rbx, Address(r8, r9)); //    cmovs rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::negative, r8, Address(r9, r10)); //    cmovs r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::negative, r9, Address(r10, r11)); //    cmovs r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::negative, r10, Address(r11, r12)); //    cmovs r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::negative, r11, Address(r12, r13)); //    cmovs r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::negative, r12, Address(r13, r14)); //    cmovs r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::negative, r13, Address(r14, r15)); //    cmovs r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::negative, r14, Address(r15, r16)); //    cmovs r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::negative, r15, Address(r16, r17)); //    cmovs r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::negative, r16, Address(r17, r18)); //    cmovs r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::negative, r17, Address(r18, r19)); //    cmovs r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::negative, r18, Address(r19, r20)); //    cmovs r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::negative, r19, Address(r20, r21)); //    cmovs r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::negative, r20, Address(r21, r22)); //    cmovs r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::negative, r21, Address(r22, r23)); //    cmovs r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::negative, r22, Address(r23, r24)); //    cmovs r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::negative, r23, Address(r24, r25)); //    cmovs r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::negative, r24, Address(r25, r26)); //    cmovs r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::negative, r25, Address(r26, r27)); //    cmovs r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::negative, r26, Address(r27, r28)); //    cmovs r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::negative, r27, Address(r28, r29)); //    cmovs r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::negative, r28, Address(r29, r30)); //    cmovs r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::negative, r29, Address(r30, r31)); //    cmovs r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::negative, r30, Address(r31, rcx)); //    cmovs r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::negative, r31, Address(rcx, rdx)); //    cmovs r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::positive, rcx, Address(rdx, rbx)); //    cmovns rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::positive, rdx, Address(rbx, r8)); //    cmovns rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::positive, rbx, Address(r8, r9)); //    cmovns rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::positive, r8, Address(r9, r10)); //    cmovns r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::positive, r9, Address(r10, r11)); //    cmovns r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::positive, r10, Address(r11, r12)); //    cmovns r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::positive, r11, Address(r12, r13)); //    cmovns r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::positive, r12, Address(r13, r14)); //    cmovns r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::positive, r13, Address(r14, r15)); //    cmovns r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::positive, r14, Address(r15, r16)); //    cmovns r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::positive, r15, Address(r16, r17)); //    cmovns r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::positive, r16, Address(r17, r18)); //    cmovns r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::positive, r17, Address(r18, r19)); //    cmovns r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::positive, r18, Address(r19, r20)); //    cmovns r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::positive, r19, Address(r20, r21)); //    cmovns r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::positive, r20, Address(r21, r22)); //    cmovns r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::positive, r21, Address(r22, r23)); //    cmovns r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::positive, r22, Address(r23, r24)); //    cmovns r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::positive, r23, Address(r24, r25)); //    cmovns r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::positive, r24, Address(r25, r26)); //    cmovns r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::positive, r25, Address(r26, r27)); //    cmovns r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::positive, r26, Address(r27, r28)); //    cmovns r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::positive, r27, Address(r28, r29)); //    cmovns r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::positive, r28, Address(r29, r30)); //    cmovns r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::positive, r29, Address(r30, r31)); //    cmovns r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::positive, r30, Address(r31, rcx)); //    cmovns r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::positive, r31, Address(rcx, rdx)); //    cmovns r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::parity, rcx, Address(rdx, rbx)); //    cmovp rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::parity, rdx, Address(rbx, r8)); //    cmovp rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::parity, rbx, Address(r8, r9)); //    cmovp rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::parity, r8, Address(r9, r10)); //    cmovp r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::parity, r9, Address(r10, r11)); //    cmovp r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::parity, r10, Address(r11, r12)); //    cmovp r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::parity, r11, Address(r12, r13)); //    cmovp r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::parity, r12, Address(r13, r14)); //    cmovp r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::parity, r13, Address(r14, r15)); //    cmovp r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::parity, r14, Address(r15, r16)); //    cmovp r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::parity, r15, Address(r16, r17)); //    cmovp r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::parity, r16, Address(r17, r18)); //    cmovp r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::parity, r17, Address(r18, r19)); //    cmovp r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::parity, r18, Address(r19, r20)); //    cmovp r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::parity, r19, Address(r20, r21)); //    cmovp r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::parity, r20, Address(r21, r22)); //    cmovp r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::parity, r21, Address(r22, r23)); //    cmovp r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::parity, r22, Address(r23, r24)); //    cmovp r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::parity, r23, Address(r24, r25)); //    cmovp r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::parity, r24, Address(r25, r26)); //    cmovp r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::parity, r25, Address(r26, r27)); //    cmovp r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::parity, r26, Address(r27, r28)); //    cmovp r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::parity, r27, Address(r28, r29)); //    cmovp r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::parity, r28, Address(r29, r30)); //    cmovp r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::parity, r29, Address(r30, r31)); //    cmovp r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::parity, r30, Address(r31, rcx)); //    cmovp r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::parity, r31, Address(rcx, rdx)); //    cmovp r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::noParity, rcx, Address(rdx, rbx)); //    cmovnp rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::noParity, rdx, Address(rbx, r8)); //    cmovnp rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::noParity, rbx, Address(r8, r9)); //    cmovnp rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::noParity, r8, Address(r9, r10)); //    cmovnp r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::noParity, r9, Address(r10, r11)); //    cmovnp r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::noParity, r10, Address(r11, r12)); //    cmovnp r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::noParity, r11, Address(r12, r13)); //    cmovnp r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::noParity, r12, Address(r13, r14)); //    cmovnp r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::noParity, r13, Address(r14, r15)); //    cmovnp r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::noParity, r14, Address(r15, r16)); //    cmovnp r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::noParity, r15, Address(r16, r17)); //    cmovnp r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::noParity, r16, Address(r17, r18)); //    cmovnp r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::noParity, r17, Address(r18, r19)); //    cmovnp r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::noParity, r18, Address(r19, r20)); //    cmovnp r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::noParity, r19, Address(r20, r21)); //    cmovnp r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::noParity, r20, Address(r21, r22)); //    cmovnp r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::noParity, r21, Address(r22, r23)); //    cmovnp r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::noParity, r22, Address(r23, r24)); //    cmovnp r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::noParity, r23, Address(r24, r25)); //    cmovnp r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::noParity, r24, Address(r25, r26)); //    cmovnp r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::noParity, r25, Address(r26, r27)); //    cmovnp r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::noParity, r26, Address(r27, r28)); //    cmovnp r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::noParity, r27, Address(r28, r29)); //    cmovnp r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::noParity, r28, Address(r29, r30)); //    cmovnp r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::noParity, r29, Address(r30, r31)); //    cmovnp r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::noParity, r30, Address(r31, rcx)); //    cmovnp r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::noParity, r31, Address(rcx, rdx)); //    cmovnp r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::less, rcx, Address(rdx, rbx)); //    cmovl rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::less, rdx, Address(rbx, r8)); //    cmovl rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::less, rbx, Address(r8, r9)); //    cmovl rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::less, r8, Address(r9, r10)); //    cmovl r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::less, r9, Address(r10, r11)); //    cmovl r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::less, r10, Address(r11, r12)); //    cmovl r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::less, r11, Address(r12, r13)); //    cmovl r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::less, r12, Address(r13, r14)); //    cmovl r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::less, r13, Address(r14, r15)); //    cmovl r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::less, r14, Address(r15, r16)); //    cmovl r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::less, r15, Address(r16, r17)); //    cmovl r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::less, r16, Address(r17, r18)); //    cmovl r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::less, r17, Address(r18, r19)); //    cmovl r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::less, r18, Address(r19, r20)); //    cmovl r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::less, r19, Address(r20, r21)); //    cmovl r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::less, r20, Address(r21, r22)); //    cmovl r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::less, r21, Address(r22, r23)); //    cmovl r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::less, r22, Address(r23, r24)); //    cmovl r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::less, r23, Address(r24, r25)); //    cmovl r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::less, r24, Address(r25, r26)); //    cmovl r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::less, r25, Address(r26, r27)); //    cmovl r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::less, r26, Address(r27, r28)); //    cmovl r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::less, r27, Address(r28, r29)); //    cmovl r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::less, r28, Address(r29, r30)); //    cmovl r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::less, r29, Address(r30, r31)); //    cmovl r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::less, r30, Address(r31, rcx)); //    cmovl r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::less, r31, Address(rcx, rdx)); //    cmovl r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::greaterEqual, rcx, Address(rdx, rbx)); //    cmovge rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::greaterEqual, rdx, Address(rbx, r8)); //    cmovge rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::greaterEqual, rbx, Address(r8, r9)); //    cmovge rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::greaterEqual, r8, Address(r9, r10)); //    cmovge r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::greaterEqual, r9, Address(r10, r11)); //    cmovge r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::greaterEqual, r10, Address(r11, r12)); //    cmovge r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::greaterEqual, r11, Address(r12, r13)); //    cmovge r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::greaterEqual, r12, Address(r13, r14)); //    cmovge r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::greaterEqual, r13, Address(r14, r15)); //    cmovge r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::greaterEqual, r14, Address(r15, r16)); //    cmovge r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::greaterEqual, r15, Address(r16, r17)); //    cmovge r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::greaterEqual, r16, Address(r17, r18)); //    cmovge r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::greaterEqual, r17, Address(r18, r19)); //    cmovge r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::greaterEqual, r18, Address(r19, r20)); //    cmovge r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::greaterEqual, r19, Address(r20, r21)); //    cmovge r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::greaterEqual, r20, Address(r21, r22)); //    cmovge r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::greaterEqual, r21, Address(r22, r23)); //    cmovge r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::greaterEqual, r22, Address(r23, r24)); //    cmovge r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::greaterEqual, r23, Address(r24, r25)); //    cmovge r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::greaterEqual, r24, Address(r25, r26)); //    cmovge r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::greaterEqual, r25, Address(r26, r27)); //    cmovge r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::greaterEqual, r26, Address(r27, r28)); //    cmovge r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::greaterEqual, r27, Address(r28, r29)); //    cmovge r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::greaterEqual, r28, Address(r29, r30)); //    cmovge r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::greaterEqual, r29, Address(r30, r31)); //    cmovge r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::greaterEqual, r30, Address(r31, rcx)); //    cmovge r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::greaterEqual, r31, Address(rcx, rdx)); //    cmovge r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::lessEqual, rcx, Address(rdx, rbx)); //    cmovle rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::lessEqual, rdx, Address(rbx, r8)); //    cmovle rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::lessEqual, rbx, Address(r8, r9)); //    cmovle rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::lessEqual, r8, Address(r9, r10)); //    cmovle r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::lessEqual, r9, Address(r10, r11)); //    cmovle r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::lessEqual, r10, Address(r11, r12)); //    cmovle r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::lessEqual, r11, Address(r12, r13)); //    cmovle r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::lessEqual, r12, Address(r13, r14)); //    cmovle r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::lessEqual, r13, Address(r14, r15)); //    cmovle r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::lessEqual, r14, Address(r15, r16)); //    cmovle r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::lessEqual, r15, Address(r16, r17)); //    cmovle r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::lessEqual, r16, Address(r17, r18)); //    cmovle r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::lessEqual, r17, Address(r18, r19)); //    cmovle r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::lessEqual, r18, Address(r19, r20)); //    cmovle r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::lessEqual, r19, Address(r20, r21)); //    cmovle r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::lessEqual, r20, Address(r21, r22)); //    cmovle r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::lessEqual, r21, Address(r22, r23)); //    cmovle r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::lessEqual, r22, Address(r23, r24)); //    cmovle r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::lessEqual, r23, Address(r24, r25)); //    cmovle r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::lessEqual, r24, Address(r25, r26)); //    cmovle r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::lessEqual, r25, Address(r26, r27)); //    cmovle r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::lessEqual, r26, Address(r27, r28)); //    cmovle r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::lessEqual, r27, Address(r28, r29)); //    cmovle r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::lessEqual, r28, Address(r29, r30)); //    cmovle r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::lessEqual, r29, Address(r30, r31)); //    cmovle r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::lessEqual, r30, Address(r31, rcx)); //    cmovle r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::lessEqual, r31, Address(rcx, rdx)); //    cmovle r31, qword ptr [rcx + rdx]
    __ cmovq (Assembler::Condition::greater, rcx, Address(rdx, rbx)); //    cmovg rcx, qword ptr [rdx + rbx]
    __ cmovq (Assembler::Condition::greater, rdx, Address(rbx, r8)); //    cmovg rdx, qword ptr [rbx + r8]
    __ cmovq (Assembler::Condition::greater, rbx, Address(r8, r9)); //    cmovg rbx, qword ptr [r8 + r9]
    __ cmovq (Assembler::Condition::greater, r8, Address(r9, r10)); //    cmovg r8, qword ptr [r9 + r10]
    __ cmovq (Assembler::Condition::greater, r9, Address(r10, r11)); //    cmovg r9, qword ptr [r10 + r11]
    __ cmovq (Assembler::Condition::greater, r10, Address(r11, r12)); //    cmovg r10, qword ptr [r11 + r12]
    __ cmovq (Assembler::Condition::greater, r11, Address(r12, r13)); //    cmovg r11, qword ptr [r12 + r13]
    __ cmovq (Assembler::Condition::greater, r12, Address(r13, r14)); //    cmovg r12, qword ptr [r13 + r14]
    __ cmovq (Assembler::Condition::greater, r13, Address(r14, r15)); //    cmovg r13, qword ptr [r14 + r15]
    __ cmovq (Assembler::Condition::greater, r14, Address(r15, r16)); //    cmovg r14, qword ptr [r15 + r16]
    __ cmovq (Assembler::Condition::greater, r15, Address(r16, r17)); //    cmovg r15, qword ptr [r16 + r17]
    __ cmovq (Assembler::Condition::greater, r16, Address(r17, r18)); //    cmovg r16, qword ptr [r17 + r18]
    __ cmovq (Assembler::Condition::greater, r17, Address(r18, r19)); //    cmovg r17, qword ptr [r18 + r19]
    __ cmovq (Assembler::Condition::greater, r18, Address(r19, r20)); //    cmovg r18, qword ptr [r19 + r20]
    __ cmovq (Assembler::Condition::greater, r19, Address(r20, r21)); //    cmovg r19, qword ptr [r20 + r21]
    __ cmovq (Assembler::Condition::greater, r20, Address(r21, r22)); //    cmovg r20, qword ptr [r21 + r22]
    __ cmovq (Assembler::Condition::greater, r21, Address(r22, r23)); //    cmovg r21, qword ptr [r22 + r23]
    __ cmovq (Assembler::Condition::greater, r22, Address(r23, r24)); //    cmovg r22, qword ptr [r23 + r24]
    __ cmovq (Assembler::Condition::greater, r23, Address(r24, r25)); //    cmovg r23, qword ptr [r24 + r25]
    __ cmovq (Assembler::Condition::greater, r24, Address(r25, r26)); //    cmovg r24, qword ptr [r25 + r26]
    __ cmovq (Assembler::Condition::greater, r25, Address(r26, r27)); //    cmovg r25, qword ptr [r26 + r27]
    __ cmovq (Assembler::Condition::greater, r26, Address(r27, r28)); //    cmovg r26, qword ptr [r27 + r28]
    __ cmovq (Assembler::Condition::greater, r27, Address(r28, r29)); //    cmovg r27, qword ptr [r28 + r29]
    __ cmovq (Assembler::Condition::greater, r28, Address(r29, r30)); //    cmovg r28, qword ptr [r29 + r30]
    __ cmovq (Assembler::Condition::greater, r29, Address(r30, r31)); //    cmovg r29, qword ptr [r30 + r31]
    __ cmovq (Assembler::Condition::greater, r30, Address(r31, rcx)); //    cmovg r30, qword ptr [r31 + rcx]
    __ cmovq (Assembler::Condition::greater, r31, Address(rcx, rdx)); //    cmovg r31, qword ptr [rcx + rdx]
    __ divq(rcx);                                      //    div rcx
    __ divq(rdx);                                      //    div rdx
    __ divq(rbx);                                      //    div rbx
    __ divq(r8);                                       //    div r8
    __ divq(r9);                                       //    div r9
    __ divq(r10);                                      //    div r10
    __ divq(r11);                                      //    div r11
    __ divq(r12);                                      //    div r12
    __ divq(r13);                                      //    div r13
    __ divq(r14);                                      //    div r14
    __ divq(r15);                                      //    div r15
    __ divq(r16);                                      //    div r16
    __ divq(r17);                                      //    div r17
    __ divq(r18);                                      //    div r18
    __ divq(r19);                                      //    div r19
    __ divq(r20);                                      //    div r20
    __ divq(r21);                                      //    div r21
    __ divq(r22);                                      //    div r22
    __ divq(r23);                                      //    div r23
    __ divq(r24);                                      //    div r24
    __ divq(r25);                                      //    div r25
    __ divq(r26);                                      //    div r26
    __ divq(r27);                                      //    div r27
    __ divq(r28);                                      //    div r28
    __ divq(r29);                                      //    div r29
    __ divq(r30);                                      //    div r30
    __ divq(r31);                                      //    div r31
    __ idivq(rcx);                                     //    idiv rcx
    __ idivq(rdx);                                     //    idiv rdx
    __ idivq(rbx);                                     //    idiv rbx
    __ idivq(r8);                                      //    idiv r8
    __ idivq(r9);                                      //    idiv r9
    __ idivq(r10);                                     //    idiv r10
    __ idivq(r11);                                     //    idiv r11
    __ idivq(r12);                                     //    idiv r12
    __ idivq(r13);                                     //    idiv r13
    __ idivq(r14);                                     //    idiv r14
    __ idivq(r15);                                     //    idiv r15
    __ idivq(r16);                                     //    idiv r16
    __ idivq(r17);                                     //    idiv r17
    __ idivq(r18);                                     //    idiv r18
    __ idivq(r19);                                     //    idiv r19
    __ idivq(r20);                                     //    idiv r20
    __ idivq(r21);                                     //    idiv r21
    __ idivq(r22);                                     //    idiv r22
    __ idivq(r23);                                     //    idiv r23
    __ idivq(r24);                                     //    idiv r24
    __ idivq(r25);                                     //    idiv r25
    __ idivq(r26);                                     //    idiv r26
    __ idivq(r27);                                     //    idiv r27
    __ idivq(r28);                                     //    idiv r28
    __ idivq(r29);                                     //    idiv r29
    __ idivq(r30);                                     //    idiv r30
    __ idivq(r31);                                     //    idiv r31
    __ imulq(rcx);                                     //    imul rcx
    __ imulq(rdx);                                     //    imul rdx
    __ imulq(rbx);                                     //    imul rbx
    __ imulq(r8);                                      //    imul r8
    __ imulq(r9);                                      //    imul r9
    __ imulq(r10);                                     //    imul r10
    __ imulq(r11);                                     //    imul r11
    __ imulq(r12);                                     //    imul r12
    __ imulq(r13);                                     //    imul r13
    __ imulq(r14);                                     //    imul r14
    __ imulq(r15);                                     //    imul r15
    __ imulq(r16);                                     //    imul r16
    __ imulq(r17);                                     //    imul r17
    __ imulq(r18);                                     //    imul r18
    __ imulq(r19);                                     //    imul r19
    __ imulq(r20);                                     //    imul r20
    __ imulq(r21);                                     //    imul r21
    __ imulq(r22);                                     //    imul r22
    __ imulq(r23);                                     //    imul r23
    __ imulq(r24);                                     //    imul r24
    __ imulq(r25);                                     //    imul r25
    __ imulq(r26);                                     //    imul r26
    __ imulq(r27);                                     //    imul r27
    __ imulq(r28);                                     //    imul r28
    __ imulq(r29);                                     //    imul r29
    __ imulq(r30);                                     //    imul r30
    __ imulq(r31);                                     //    imul r31
    __ mulq(rcx);                                      //    mul rcx
    __ mulq(rdx);                                      //    mul rdx
    __ mulq(rbx);                                      //    mul rbx
    __ mulq(r8);                                       //    mul r8
    __ mulq(r9);                                       //    mul r9
    __ mulq(r10);                                      //    mul r10
    __ mulq(r11);                                      //    mul r11
    __ mulq(r12);                                      //    mul r12
    __ mulq(r13);                                      //    mul r13
    __ mulq(r14);                                      //    mul r14
    __ mulq(r15);                                      //    mul r15
    __ mulq(r16);                                      //    mul r16
    __ mulq(r17);                                      //    mul r17
    __ mulq(r18);                                      //    mul r18
    __ mulq(r19);                                      //    mul r19
    __ mulq(r20);                                      //    mul r20
    __ mulq(r21);                                      //    mul r21
    __ mulq(r22);                                      //    mul r22
    __ mulq(r23);                                      //    mul r23
    __ mulq(r24);                                      //    mul r24
    __ mulq(r25);                                      //    mul r25
    __ mulq(r26);                                      //    mul r26
    __ mulq(r27);                                      //    mul r27
    __ mulq(r28);                                      //    mul r28
    __ mulq(r29);                                      //    mul r29
    __ mulq(r30);                                      //    mul r30
    __ mulq(r31);                                      //    mul r31
    __ negq(rcx);                                      //    neg rcx
    __ negq(rdx);                                      //    neg rdx
    __ negq(rbx);                                      //    neg rbx
    __ negq(r8);                                       //    neg r8
    __ negq(r9);                                       //    neg r9
    __ negq(r10);                                      //    neg r10
    __ negq(r11);                                      //    neg r11
    __ negq(r12);                                      //    neg r12
    __ negq(r13);                                      //    neg r13
    __ negq(r14);                                      //    neg r14
    __ negq(r15);                                      //    neg r15
    __ negq(r16);                                      //    neg r16
    __ negq(r17);                                      //    neg r17
    __ negq(r18);                                      //    neg r18
    __ negq(r19);                                      //    neg r19
    __ negq(r20);                                      //    neg r20
    __ negq(r21);                                      //    neg r21
    __ negq(r22);                                      //    neg r22
    __ negq(r23);                                      //    neg r23
    __ negq(r24);                                      //    neg r24
    __ negq(r25);                                      //    neg r25
    __ negq(r26);                                      //    neg r26
    __ negq(r27);                                      //    neg r27
    __ negq(r28);                                      //    neg r28
    __ negq(r29);                                      //    neg r29
    __ negq(r30);                                      //    neg r30
    __ negq(r31);                                      //    neg r31
    __ notq(rcx);                                      //    not rcx
    __ notq(rdx);                                      //    not rdx
    __ notq(rbx);                                      //    not rbx
    __ notq(r8);                                       //    not r8
    __ notq(r9);                                       //    not r9
    __ notq(r10);                                      //    not r10
    __ notq(r11);                                      //    not r11
    __ notq(r12);                                      //    not r12
    __ notq(r13);                                      //    not r13
    __ notq(r14);                                      //    not r14
    __ notq(r15);                                      //    not r15
    __ notq(r16);                                      //    not r16
    __ notq(r17);                                      //    not r17
    __ notq(r18);                                      //    not r18
    __ notq(r19);                                      //    not r19
    __ notq(r20);                                      //    not r20
    __ notq(r21);                                      //    not r21
    __ notq(r22);                                      //    not r22
    __ notq(r23);                                      //    not r23
    __ notq(r24);                                      //    not r24
    __ notq(r25);                                      //    not r25
    __ notq(r26);                                      //    not r26
    __ notq(r27);                                      //    not r27
    __ notq(r28);                                      //    not r28
    __ notq(r29);                                      //    not r29
    __ notq(r30);                                      //    not r30
    __ notq(r31);                                      //    not r31
    __ rolq(rcx);                                      //    rol rcx
    __ rolq(rdx);                                      //    rol rdx
    __ rolq(rbx);                                      //    rol rbx
    __ rolq(r8);                                       //    rol r8
    __ rolq(r9);                                       //    rol r9
    __ rolq(r10);                                      //    rol r10
    __ rolq(r11);                                      //    rol r11
    __ rolq(r12);                                      //    rol r12
    __ rolq(r13);                                      //    rol r13
    __ rolq(r14);                                      //    rol r14
    __ rolq(r15);                                      //    rol r15
    __ rolq(r16);                                      //    rol r16
    __ rolq(r17);                                      //    rol r17
    __ rolq(r18);                                      //    rol r18
    __ rolq(r19);                                      //    rol r19
    __ rolq(r20);                                      //    rol r20
    __ rolq(r21);                                      //    rol r21
    __ rolq(r22);                                      //    rol r22
    __ rolq(r23);                                      //    rol r23
    __ rolq(r24);                                      //    rol r24
    __ rolq(r25);                                      //    rol r25
    __ rolq(r26);                                      //    rol r26
    __ rolq(r27);                                      //    rol r27
    __ rolq(r28);                                      //    rol r28
    __ rolq(r29);                                      //    rol r29
    __ rolq(r30);                                      //    rol r30
    __ rolq(r31);                                      //    rol r31
    __ rorq(rcx);                                      //    ror rcx
    __ rorq(rdx);                                      //    ror rdx
    __ rorq(rbx);                                      //    ror rbx
    __ rorq(r8);                                       //    ror r8
    __ rorq(r9);                                       //    ror r9
    __ rorq(r10);                                      //    ror r10
    __ rorq(r11);                                      //    ror r11
    __ rorq(r12);                                      //    ror r12
    __ rorq(r13);                                      //    ror r13
    __ rorq(r14);                                      //    ror r14
    __ rorq(r15);                                      //    ror r15
    __ rorq(r16);                                      //    ror r16
    __ rorq(r17);                                      //    ror r17
    __ rorq(r18);                                      //    ror r18
    __ rorq(r19);                                      //    ror r19
    __ rorq(r20);                                      //    ror r20
    __ rorq(r21);                                      //    ror r21
    __ rorq(r22);                                      //    ror r22
    __ rorq(r23);                                      //    ror r23
    __ rorq(r24);                                      //    ror r24
    __ rorq(r25);                                      //    ror r25
    __ rorq(r26);                                      //    ror r26
    __ rorq(r27);                                      //    ror r27
    __ rorq(r28);                                      //    ror r28
    __ rorq(r29);                                      //    ror r29
    __ rorq(r30);                                      //    ror r30
    __ rorq(r31);                                      //    ror r31
    __ sarq(rcx);                                      //    sar rcx
    __ sarq(rdx);                                      //    sar rdx
    __ sarq(rbx);                                      //    sar rbx
    __ sarq(r8);                                       //    sar r8
    __ sarq(r9);                                       //    sar r9
    __ sarq(r10);                                      //    sar r10
    __ sarq(r11);                                      //    sar r11
    __ sarq(r12);                                      //    sar r12
    __ sarq(r13);                                      //    sar r13
    __ sarq(r14);                                      //    sar r14
    __ sarq(r15);                                      //    sar r15
    __ sarq(r16);                                      //    sar r16
    __ sarq(r17);                                      //    sar r17
    __ sarq(r18);                                      //    sar r18
    __ sarq(r19);                                      //    sar r19
    __ sarq(r20);                                      //    sar r20
    __ sarq(r21);                                      //    sar r21
    __ sarq(r22);                                      //    sar r22
    __ sarq(r23);                                      //    sar r23
    __ sarq(r24);                                      //    sar r24
    __ sarq(r25);                                      //    sar r25
    __ sarq(r26);                                      //    sar r26
    __ sarq(r27);                                      //    sar r27
    __ sarq(r28);                                      //    sar r28
    __ sarq(r29);                                      //    sar r29
    __ sarq(r30);                                      //    sar r30
    __ sarq(r31);                                      //    sar r31
    __ shlq(rcx);                                      //    shl rcx
    __ shlq(rdx);                                      //    shl rdx
    __ shlq(rbx);                                      //    shl rbx
    __ shlq(r8);                                       //    shl r8
    __ shlq(r9);                                       //    shl r9
    __ shlq(r10);                                      //    shl r10
    __ shlq(r11);                                      //    shl r11
    __ shlq(r12);                                      //    shl r12
    __ shlq(r13);                                      //    shl r13
    __ shlq(r14);                                      //    shl r14
    __ shlq(r15);                                      //    shl r15
    __ shlq(r16);                                      //    shl r16
    __ shlq(r17);                                      //    shl r17
    __ shlq(r18);                                      //    shl r18
    __ shlq(r19);                                      //    shl r19
    __ shlq(r20);                                      //    shl r20
    __ shlq(r21);                                      //    shl r21
    __ shlq(r22);                                      //    shl r22
    __ shlq(r23);                                      //    shl r23
    __ shlq(r24);                                      //    shl r24
    __ shlq(r25);                                      //    shl r25
    __ shlq(r26);                                      //    shl r26
    __ shlq(r27);                                      //    shl r27
    __ shlq(r28);                                      //    shl r28
    __ shlq(r29);                                      //    shl r29
    __ shlq(r30);                                      //    shl r30
    __ shlq(r31);                                      //    shl r31
    __ shrq(rcx);                                      //    shr rcx
    __ shrq(rdx);                                      //    shr rdx
    __ shrq(rbx);                                      //    shr rbx
    __ shrq(r8);                                       //    shr r8
    __ shrq(r9);                                       //    shr r9
    __ shrq(r10);                                      //    shr r10
    __ shrq(r11);                                      //    shr r11
    __ shrq(r12);                                      //    shr r12
    __ shrq(r13);                                      //    shr r13
    __ shrq(r14);                                      //    shr r14
    __ shrq(r15);                                      //    shr r15
    __ shrq(r16);                                      //    shr r16
    __ shrq(r17);                                      //    shr r17
    __ shrq(r18);                                      //    shr r18
    __ shrq(r19);                                      //    shr r19
    __ shrq(r20);                                      //    shr r20
    __ shrq(r21);                                      //    shr r21
    __ shrq(r22);                                      //    shr r22
    __ shrq(r23);                                      //    shr r23
    __ shrq(r24);                                      //    shr r24
    __ shrq(r25);                                      //    shr r25
    __ shrq(r26);                                      //    shr r26
    __ shrq(r27);                                      //    shr r27
    __ shrq(r28);                                      //    shr r28
    __ shrq(r29);                                      //    shr r29
    __ shrq(r30);                                      //    shr r30
    __ shrq(r31);                                      //    shr r31
    __ incrementq(rcx);                                //    inc rcx
    __ incrementq(rdx);                                //    inc rdx
    __ incrementq(rbx);                                //    inc rbx
    __ incrementq(r8);                                 //    inc r8
    __ incrementq(r9);                                 //    inc r9
    __ incrementq(r10);                                //    inc r10
    __ incrementq(r11);                                //    inc r11
    __ incrementq(r12);                                //    inc r12
    __ incrementq(r13);                                //    inc r13
    __ incrementq(r14);                                //    inc r14
    __ incrementq(r15);                                //    inc r15
    __ incrementq(r16);                                //    inc r16
    __ incrementq(r17);                                //    inc r17
    __ incrementq(r18);                                //    inc r18
    __ incrementq(r19);                                //    inc r19
    __ incrementq(r20);                                //    inc r20
    __ incrementq(r21);                                //    inc r21
    __ incrementq(r22);                                //    inc r22
    __ incrementq(r23);                                //    inc r23
    __ incrementq(r24);                                //    inc r24
    __ incrementq(r25);                                //    inc r25
    __ incrementq(r26);                                //    inc r26
    __ incrementq(r27);                                //    inc r27
    __ incrementq(r28);                                //    inc r28
    __ incrementq(r29);                                //    inc r29
    __ incrementq(r30);                                //    inc r30
    __ incrementq(r31);                                //    inc r31
    __ decrementq(rcx);                                //    dec rcx
    __ decrementq(rdx);                                //    dec rdx
    __ decrementq(rbx);                                //    dec rbx
    __ decrementq(r8);                                 //    dec r8
    __ decrementq(r9);                                 //    dec r9
    __ decrementq(r10);                                //    dec r10
    __ decrementq(r11);                                //    dec r11
    __ decrementq(r12);                                //    dec r12
    __ decrementq(r13);                                //    dec r13
    __ decrementq(r14);                                //    dec r14
    __ decrementq(r15);                                //    dec r15
    __ decrementq(r16);                                //    dec r16
    __ decrementq(r17);                                //    dec r17
    __ decrementq(r18);                                //    dec r18
    __ decrementq(r19);                                //    dec r19
    __ decrementq(r20);                                //    dec r20
    __ decrementq(r21);                                //    dec r21
    __ decrementq(r22);                                //    dec r22
    __ decrementq(r23);                                //    dec r23
    __ decrementq(r24);                                //    dec r24
    __ decrementq(r25);                                //    dec r25
    __ decrementq(r26);                                //    dec r26
    __ decrementq(r27);                                //    dec r27
    __ decrementq(r28);                                //    dec r28
    __ decrementq(r29);                                //    dec r29
    __ decrementq(r30);                                //    dec r30
    __ decrementq(r31);                                //    dec r31
    __ mulq(Address(rcx, rdx));                        //    mul qword ptr [rcx + rdx]
    __ mulq(Address(rdx, rbx));                        //    mul qword ptr [rdx + rbx]
    __ mulq(Address(rbx, r8));                         //    mul qword ptr [rbx + r8]
    __ mulq(Address(r8, r9));                          //    mul qword ptr [r8 + r9]
    __ mulq(Address(r9, r10));                         //    mul qword ptr [r9 + r10]
    __ mulq(Address(r10, r11));                        //    mul qword ptr [r10 + r11]
    __ mulq(Address(r11, r12));                        //    mul qword ptr [r11 + r12]
    __ mulq(Address(r12, r13));                        //    mul qword ptr [r12 + r13]
    __ mulq(Address(r13, r14));                        //    mul qword ptr [r13 + r14]
    __ mulq(Address(r14, r15));                        //    mul qword ptr [r14 + r15]
    __ mulq(Address(r15, r16));                        //    mul qword ptr [r15 + r16]
    __ mulq(Address(r16, r17));                        //    mul qword ptr [r16 + r17]
    __ mulq(Address(r17, r18));                        //    mul qword ptr [r17 + r18]
    __ mulq(Address(r18, r19));                        //    mul qword ptr [r18 + r19]
    __ mulq(Address(r19, r20));                        //    mul qword ptr [r19 + r20]
    __ mulq(Address(r20, r21));                        //    mul qword ptr [r20 + r21]
    __ mulq(Address(r21, r22));                        //    mul qword ptr [r21 + r22]
    __ mulq(Address(r22, r23));                        //    mul qword ptr [r22 + r23]
    __ mulq(Address(r23, r24));                        //    mul qword ptr [r23 + r24]
    __ mulq(Address(r24, r25));                        //    mul qword ptr [r24 + r25]
    __ mulq(Address(r25, r26));                        //    mul qword ptr [r25 + r26]
    __ mulq(Address(r26, r27));                        //    mul qword ptr [r26 + r27]
    __ mulq(Address(r27, r28));                        //    mul qword ptr [r27 + r28]
    __ mulq(Address(r28, r29));                        //    mul qword ptr [r28 + r29]
    __ mulq(Address(r29, r30));                        //    mul qword ptr [r29 + r30]
    __ mulq(Address(r30, r31));                        //    mul qword ptr [r30 + r31]
    __ mulq(Address(r31, rcx));                        //    mul qword ptr [r31 + rcx]
    __ negq(Address(rcx, rdx));                        //    neg qword ptr [rcx + rdx]
    __ negq(Address(rdx, rbx));                        //    neg qword ptr [rdx + rbx]
    __ negq(Address(rbx, r8));                         //    neg qword ptr [rbx + r8]
    __ negq(Address(r8, r9));                          //    neg qword ptr [r8 + r9]
    __ negq(Address(r9, r10));                         //    neg qword ptr [r9 + r10]
    __ negq(Address(r10, r11));                        //    neg qword ptr [r10 + r11]
    __ negq(Address(r11, r12));                        //    neg qword ptr [r11 + r12]
    __ negq(Address(r12, r13));                        //    neg qword ptr [r12 + r13]
    __ negq(Address(r13, r14));                        //    neg qword ptr [r13 + r14]
    __ negq(Address(r14, r15));                        //    neg qword ptr [r14 + r15]
    __ negq(Address(r15, r16));                        //    neg qword ptr [r15 + r16]
    __ negq(Address(r16, r17));                        //    neg qword ptr [r16 + r17]
    __ negq(Address(r17, r18));                        //    neg qword ptr [r17 + r18]
    __ negq(Address(r18, r19));                        //    neg qword ptr [r18 + r19]
    __ negq(Address(r19, r20));                        //    neg qword ptr [r19 + r20]
    __ negq(Address(r20, r21));                        //    neg qword ptr [r20 + r21]
    __ negq(Address(r21, r22));                        //    neg qword ptr [r21 + r22]
    __ negq(Address(r22, r23));                        //    neg qword ptr [r22 + r23]
    __ negq(Address(r23, r24));                        //    neg qword ptr [r23 + r24]
    __ negq(Address(r24, r25));                        //    neg qword ptr [r24 + r25]
    __ negq(Address(r25, r26));                        //    neg qword ptr [r25 + r26]
    __ negq(Address(r26, r27));                        //    neg qword ptr [r26 + r27]
    __ negq(Address(r27, r28));                        //    neg qword ptr [r27 + r28]
    __ negq(Address(r28, r29));                        //    neg qword ptr [r28 + r29]
    __ negq(Address(r29, r30));                        //    neg qword ptr [r29 + r30]
    __ negq(Address(r30, r31));                        //    neg qword ptr [r30 + r31]
    __ negq(Address(r31, rcx));                        //    neg qword ptr [r31 + rcx]
    __ sarq(Address(rcx, rdx));                        //    sar qword ptr [rcx + rdx]
    __ sarq(Address(rdx, rbx));                        //    sar qword ptr [rdx + rbx]
    __ sarq(Address(rbx, r8));                         //    sar qword ptr [rbx + r8]
    __ sarq(Address(r8, r9));                          //    sar qword ptr [r8 + r9]
    __ sarq(Address(r9, r10));                         //    sar qword ptr [r9 + r10]
    __ sarq(Address(r10, r11));                        //    sar qword ptr [r10 + r11]
    __ sarq(Address(r11, r12));                        //    sar qword ptr [r11 + r12]
    __ sarq(Address(r12, r13));                        //    sar qword ptr [r12 + r13]
    __ sarq(Address(r13, r14));                        //    sar qword ptr [r13 + r14]
    __ sarq(Address(r14, r15));                        //    sar qword ptr [r14 + r15]
    __ sarq(Address(r15, r16));                        //    sar qword ptr [r15 + r16]
    __ sarq(Address(r16, r17));                        //    sar qword ptr [r16 + r17]
    __ sarq(Address(r17, r18));                        //    sar qword ptr [r17 + r18]
    __ sarq(Address(r18, r19));                        //    sar qword ptr [r18 + r19]
    __ sarq(Address(r19, r20));                        //    sar qword ptr [r19 + r20]
    __ sarq(Address(r20, r21));                        //    sar qword ptr [r20 + r21]
    __ sarq(Address(r21, r22));                        //    sar qword ptr [r21 + r22]
    __ sarq(Address(r22, r23));                        //    sar qword ptr [r22 + r23]
    __ sarq(Address(r23, r24));                        //    sar qword ptr [r23 + r24]
    __ sarq(Address(r24, r25));                        //    sar qword ptr [r24 + r25]
    __ sarq(Address(r25, r26));                        //    sar qword ptr [r25 + r26]
    __ sarq(Address(r26, r27));                        //    sar qword ptr [r26 + r27]
    __ sarq(Address(r27, r28));                        //    sar qword ptr [r27 + r28]
    __ sarq(Address(r28, r29));                        //    sar qword ptr [r28 + r29]
    __ sarq(Address(r29, r30));                        //    sar qword ptr [r29 + r30]
    __ sarq(Address(r30, r31));                        //    sar qword ptr [r30 + r31]
    __ sarq(Address(r31, rcx));                        //    sar qword ptr [r31 + rcx]
    __ shrq(Address(rcx, rdx));                        //    shr qword ptr [rcx + rdx]
    __ shrq(Address(rdx, rbx));                        //    shr qword ptr [rdx + rbx]
    __ shrq(Address(rbx, r8));                         //    shr qword ptr [rbx + r8]
    __ shrq(Address(r8, r9));                          //    shr qword ptr [r8 + r9]
    __ shrq(Address(r9, r10));                         //    shr qword ptr [r9 + r10]
    __ shrq(Address(r10, r11));                        //    shr qword ptr [r10 + r11]
    __ shrq(Address(r11, r12));                        //    shr qword ptr [r11 + r12]
    __ shrq(Address(r12, r13));                        //    shr qword ptr [r12 + r13]
    __ shrq(Address(r13, r14));                        //    shr qword ptr [r13 + r14]
    __ shrq(Address(r14, r15));                        //    shr qword ptr [r14 + r15]
    __ shrq(Address(r15, r16));                        //    shr qword ptr [r15 + r16]
    __ shrq(Address(r16, r17));                        //    shr qword ptr [r16 + r17]
    __ shrq(Address(r17, r18));                        //    shr qword ptr [r17 + r18]
    __ shrq(Address(r18, r19));                        //    shr qword ptr [r18 + r19]
    __ shrq(Address(r19, r20));                        //    shr qword ptr [r19 + r20]
    __ shrq(Address(r20, r21));                        //    shr qword ptr [r20 + r21]
    __ shrq(Address(r21, r22));                        //    shr qword ptr [r21 + r22]
    __ shrq(Address(r22, r23));                        //    shr qword ptr [r22 + r23]
    __ shrq(Address(r23, r24));                        //    shr qword ptr [r23 + r24]
    __ shrq(Address(r24, r25));                        //    shr qword ptr [r24 + r25]
    __ shrq(Address(r25, r26));                        //    shr qword ptr [r25 + r26]
    __ shrq(Address(r26, r27));                        //    shr qword ptr [r26 + r27]
    __ shrq(Address(r27, r28));                        //    shr qword ptr [r27 + r28]
    __ shrq(Address(r28, r29));                        //    shr qword ptr [r28 + r29]
    __ shrq(Address(r29, r30));                        //    shr qword ptr [r29 + r30]
    __ shrq(Address(r30, r31));                        //    shr qword ptr [r30 + r31]
    __ shrq(Address(r31, rcx));                        //    shr qword ptr [r31 + rcx]
    __ incrementq(Address(rcx, rdx));                  //    inc qword ptr [rcx + rdx]
    __ incrementq(Address(rdx, rbx));                  //    inc qword ptr [rdx + rbx]
    __ incrementq(Address(rbx, r8));                   //    inc qword ptr [rbx + r8]
    __ incrementq(Address(r8, r9));                    //    inc qword ptr [r8 + r9]
    __ incrementq(Address(r9, r10));                   //    inc qword ptr [r9 + r10]
    __ incrementq(Address(r10, r11));                  //    inc qword ptr [r10 + r11]
    __ incrementq(Address(r11, r12));                  //    inc qword ptr [r11 + r12]
    __ incrementq(Address(r12, r13));                  //    inc qword ptr [r12 + r13]
    __ incrementq(Address(r13, r14));                  //    inc qword ptr [r13 + r14]
    __ incrementq(Address(r14, r15));                  //    inc qword ptr [r14 + r15]
    __ incrementq(Address(r15, r16));                  //    inc qword ptr [r15 + r16]
    __ incrementq(Address(r16, r17));                  //    inc qword ptr [r16 + r17]
    __ incrementq(Address(r17, r18));                  //    inc qword ptr [r17 + r18]
    __ incrementq(Address(r18, r19));                  //    inc qword ptr [r18 + r19]
    __ incrementq(Address(r19, r20));                  //    inc qword ptr [r19 + r20]
    __ incrementq(Address(r20, r21));                  //    inc qword ptr [r20 + r21]
    __ incrementq(Address(r21, r22));                  //    inc qword ptr [r21 + r22]
    __ incrementq(Address(r22, r23));                  //    inc qword ptr [r22 + r23]
    __ incrementq(Address(r23, r24));                  //    inc qword ptr [r23 + r24]
    __ incrementq(Address(r24, r25));                  //    inc qword ptr [r24 + r25]
    __ incrementq(Address(r25, r26));                  //    inc qword ptr [r25 + r26]
    __ incrementq(Address(r26, r27));                  //    inc qword ptr [r26 + r27]
    __ incrementq(Address(r27, r28));                  //    inc qword ptr [r27 + r28]
    __ incrementq(Address(r28, r29));                  //    inc qword ptr [r28 + r29]
    __ incrementq(Address(r29, r30));                  //    inc qword ptr [r29 + r30]
    __ incrementq(Address(r30, r31));                  //    inc qword ptr [r30 + r31]
    __ incrementq(Address(r31, rcx));                  //    inc qword ptr [r31 + rcx]
    __ decrementq(Address(rcx, rdx));                  //    dec qword ptr [rcx + rdx]
    __ decrementq(Address(rdx, rbx));                  //    dec qword ptr [rdx + rbx]
    __ decrementq(Address(rbx, r8));                   //    dec qword ptr [rbx + r8]
    __ decrementq(Address(r8, r9));                    //    dec qword ptr [r8 + r9]
    __ decrementq(Address(r9, r10));                   //    dec qword ptr [r9 + r10]
    __ decrementq(Address(r10, r11));                  //    dec qword ptr [r10 + r11]
    __ decrementq(Address(r11, r12));                  //    dec qword ptr [r11 + r12]
    __ decrementq(Address(r12, r13));                  //    dec qword ptr [r12 + r13]
    __ decrementq(Address(r13, r14));                  //    dec qword ptr [r13 + r14]
    __ decrementq(Address(r14, r15));                  //    dec qword ptr [r14 + r15]
    __ decrementq(Address(r15, r16));                  //    dec qword ptr [r15 + r16]
    __ decrementq(Address(r16, r17));                  //    dec qword ptr [r16 + r17]
    __ decrementq(Address(r17, r18));                  //    dec qword ptr [r17 + r18]
    __ decrementq(Address(r18, r19));                  //    dec qword ptr [r18 + r19]
    __ decrementq(Address(r19, r20));                  //    dec qword ptr [r19 + r20]
    __ decrementq(Address(r20, r21));                  //    dec qword ptr [r20 + r21]
    __ decrementq(Address(r21, r22));                  //    dec qword ptr [r21 + r22]
    __ decrementq(Address(r22, r23));                  //    dec qword ptr [r22 + r23]
    __ decrementq(Address(r23, r24));                  //    dec qword ptr [r23 + r24]
    __ decrementq(Address(r24, r25));                  //    dec qword ptr [r24 + r25]
    __ decrementq(Address(r25, r26));                  //    dec qword ptr [r25 + r26]
    __ decrementq(Address(r26, r27));                  //    dec qword ptr [r26 + r27]
    __ decrementq(Address(r27, r28));                  //    dec qword ptr [r27 + r28]
    __ decrementq(Address(r28, r29));                  //    dec qword ptr [r28 + r29]
    __ decrementq(Address(r29, r30));                  //    dec qword ptr [r29 + r30]
    __ decrementq(Address(r30, r31));                  //    dec qword ptr [r30 + r31]
    __ decrementq(Address(r31, rcx));                  //    dec qword ptr [r31 + rcx]
    __ imulq(rcx, Address(rdx, rbx), 1);               //    imul rcx, qword ptr [rdx + rbx], 1
    __ imulq(rcx, Address(rdx, rbx), 16);              //    imul rcx, qword ptr [rdx + rbx], 16
    __ imulq(rcx, Address(rdx, rbx), 256);             //    imul rcx, qword ptr [rdx + rbx], 256
    __ imulq(rcx, Address(rdx, rbx), 4096);            //    imul rcx, qword ptr [rdx + rbx], 4096
    __ imulq(rcx, Address(rdx, rbx), 65536);           //    imul rcx, qword ptr [rdx + rbx], 65536
    __ imulq(rcx, Address(rdx, rbx), 1048576);         //    imul rcx, qword ptr [rdx + rbx], 1048576
    __ imulq(rcx, Address(rdx, rbx), 16777216);        //    imul rcx, qword ptr [rdx + rbx], 16777216
    __ imulq(rcx, Address(rdx, rbx), 268435456);       //    imul rcx, qword ptr [rdx + rbx], 268435456
    __ imulq(rdx, Address(rbx, r8), 1);                //    imul rdx, qword ptr [rbx + r8], 1
    __ imulq(rdx, Address(rbx, r8), 16);               //    imul rdx, qword ptr [rbx + r8], 16
    __ imulq(rdx, Address(rbx, r8), 256);              //    imul rdx, qword ptr [rbx + r8], 256
    __ imulq(rdx, Address(rbx, r8), 4096);             //    imul rdx, qword ptr [rbx + r8], 4096
    __ imulq(rdx, Address(rbx, r8), 65536);            //    imul rdx, qword ptr [rbx + r8], 65536
    __ imulq(rdx, Address(rbx, r8), 1048576);          //    imul rdx, qword ptr [rbx + r8], 1048576
    __ imulq(rdx, Address(rbx, r8), 16777216);         //    imul rdx, qword ptr [rbx + r8], 16777216
    __ imulq(rdx, Address(rbx, r8), 268435456);        //    imul rdx, qword ptr [rbx + r8], 268435456
    __ imulq(rbx, Address(r8, r9), 1);                 //    imul rbx, qword ptr [r8 + r9], 1
    __ imulq(rbx, Address(r8, r9), 16);                //    imul rbx, qword ptr [r8 + r9], 16
    __ imulq(rbx, Address(r8, r9), 256);               //    imul rbx, qword ptr [r8 + r9], 256
    __ imulq(rbx, Address(r8, r9), 4096);              //    imul rbx, qword ptr [r8 + r9], 4096
    __ imulq(rbx, Address(r8, r9), 65536);             //    imul rbx, qword ptr [r8 + r9], 65536
    __ imulq(rbx, Address(r8, r9), 1048576);           //    imul rbx, qword ptr [r8 + r9], 1048576
    __ imulq(rbx, Address(r8, r9), 16777216);          //    imul rbx, qword ptr [r8 + r9], 16777216
    __ imulq(rbx, Address(r8, r9), 268435456);         //    imul rbx, qword ptr [r8 + r9], 268435456
    __ imulq(r8, Address(r9, r10), 1);                 //    imul r8, qword ptr [r9 + r10], 1
    __ imulq(r8, Address(r9, r10), 16);                //    imul r8, qword ptr [r9 + r10], 16
    __ imulq(r8, Address(r9, r10), 256);               //    imul r8, qword ptr [r9 + r10], 256
    __ imulq(r8, Address(r9, r10), 4096);              //    imul r8, qword ptr [r9 + r10], 4096
    __ imulq(r8, Address(r9, r10), 65536);             //    imul r8, qword ptr [r9 + r10], 65536
    __ imulq(r8, Address(r9, r10), 1048576);           //    imul r8, qword ptr [r9 + r10], 1048576
    __ imulq(r8, Address(r9, r10), 16777216);          //    imul r8, qword ptr [r9 + r10], 16777216
    __ imulq(r8, Address(r9, r10), 268435456);         //    imul r8, qword ptr [r9 + r10], 268435456
    __ imulq(r9, Address(r10, r11), 1);                //    imul r9, qword ptr [r10 + r11], 1
    __ imulq(r9, Address(r10, r11), 16);               //    imul r9, qword ptr [r10 + r11], 16
    __ imulq(r9, Address(r10, r11), 256);              //    imul r9, qword ptr [r10 + r11], 256
    __ imulq(r9, Address(r10, r11), 4096);             //    imul r9, qword ptr [r10 + r11], 4096
    __ imulq(r9, Address(r10, r11), 65536);            //    imul r9, qword ptr [r10 + r11], 65536
    __ imulq(r9, Address(r10, r11), 1048576);          //    imul r9, qword ptr [r10 + r11], 1048576
    __ imulq(r9, Address(r10, r11), 16777216);         //    imul r9, qword ptr [r10 + r11], 16777216
    __ imulq(r9, Address(r10, r11), 268435456);        //    imul r9, qword ptr [r10 + r11], 268435456
    __ imulq(r10, Address(r11, r12), 1);               //    imul r10, qword ptr [r11 + r12], 1
    __ imulq(r10, Address(r11, r12), 16);              //    imul r10, qword ptr [r11 + r12], 16
    __ imulq(r10, Address(r11, r12), 256);             //    imul r10, qword ptr [r11 + r12], 256
    __ imulq(r10, Address(r11, r12), 4096);            //    imul r10, qword ptr [r11 + r12], 4096
    __ imulq(r10, Address(r11, r12), 65536);           //    imul r10, qword ptr [r11 + r12], 65536
    __ imulq(r10, Address(r11, r12), 1048576);         //    imul r10, qword ptr [r11 + r12], 1048576
    __ imulq(r10, Address(r11, r12), 16777216);        //    imul r10, qword ptr [r11 + r12], 16777216
    __ imulq(r10, Address(r11, r12), 268435456);       //    imul r10, qword ptr [r11 + r12], 268435456
    __ imulq(r11, Address(r12, r13), 1);               //    imul r11, qword ptr [r12 + r13], 1
    __ imulq(r11, Address(r12, r13), 16);              //    imul r11, qword ptr [r12 + r13], 16
    __ imulq(r11, Address(r12, r13), 256);             //    imul r11, qword ptr [r12 + r13], 256
    __ imulq(r11, Address(r12, r13), 4096);            //    imul r11, qword ptr [r12 + r13], 4096
    __ imulq(r11, Address(r12, r13), 65536);           //    imul r11, qword ptr [r12 + r13], 65536
    __ imulq(r11, Address(r12, r13), 1048576);         //    imul r11, qword ptr [r12 + r13], 1048576
    __ imulq(r11, Address(r12, r13), 16777216);        //    imul r11, qword ptr [r12 + r13], 16777216
    __ imulq(r11, Address(r12, r13), 268435456);       //    imul r11, qword ptr [r12 + r13], 268435456
    __ imulq(r12, Address(r13, r14), 1);               //    imul r12, qword ptr [r13 + r14], 1
    __ imulq(r12, Address(r13, r14), 16);              //    imul r12, qword ptr [r13 + r14], 16
    __ imulq(r12, Address(r13, r14), 256);             //    imul r12, qword ptr [r13 + r14], 256
    __ imulq(r12, Address(r13, r14), 4096);            //    imul r12, qword ptr [r13 + r14], 4096
    __ imulq(r12, Address(r13, r14), 65536);           //    imul r12, qword ptr [r13 + r14], 65536
    __ imulq(r12, Address(r13, r14), 1048576);         //    imul r12, qword ptr [r13 + r14], 1048576
    __ imulq(r12, Address(r13, r14), 16777216);        //    imul r12, qword ptr [r13 + r14], 16777216
    __ imulq(r12, Address(r13, r14), 268435456);       //    imul r12, qword ptr [r13 + r14], 268435456
    __ imulq(r13, Address(r14, r15), 1);               //    imul r13, qword ptr [r14 + r15], 1
    __ imulq(r13, Address(r14, r15), 16);              //    imul r13, qword ptr [r14 + r15], 16
    __ imulq(r13, Address(r14, r15), 256);             //    imul r13, qword ptr [r14 + r15], 256
    __ imulq(r13, Address(r14, r15), 4096);            //    imul r13, qword ptr [r14 + r15], 4096
    __ imulq(r13, Address(r14, r15), 65536);           //    imul r13, qword ptr [r14 + r15], 65536
    __ imulq(r13, Address(r14, r15), 1048576);         //    imul r13, qword ptr [r14 + r15], 1048576
    __ imulq(r13, Address(r14, r15), 16777216);        //    imul r13, qword ptr [r14 + r15], 16777216
    __ imulq(r13, Address(r14, r15), 268435456);       //    imul r13, qword ptr [r14 + r15], 268435456
    __ imulq(r14, Address(r15, r16), 1);               //    imul r14, qword ptr [r15 + r16], 1
    __ imulq(r14, Address(r15, r16), 16);              //    imul r14, qword ptr [r15 + r16], 16
    __ imulq(r14, Address(r15, r16), 256);             //    imul r14, qword ptr [r15 + r16], 256
    __ imulq(r14, Address(r15, r16), 4096);            //    imul r14, qword ptr [r15 + r16], 4096
    __ imulq(r14, Address(r15, r16), 65536);           //    imul r14, qword ptr [r15 + r16], 65536
    __ imulq(r14, Address(r15, r16), 1048576);         //    imul r14, qword ptr [r15 + r16], 1048576
    __ imulq(r14, Address(r15, r16), 16777216);        //    imul r14, qword ptr [r15 + r16], 16777216
    __ imulq(r14, Address(r15, r16), 268435456);       //    imul r14, qword ptr [r15 + r16], 268435456
    __ imulq(r15, Address(r16, r17), 1);               //    imul r15, qword ptr [r16 + r17], 1
    __ imulq(r15, Address(r16, r17), 16);              //    imul r15, qword ptr [r16 + r17], 16
    __ imulq(r15, Address(r16, r17), 256);             //    imul r15, qword ptr [r16 + r17], 256
    __ imulq(r15, Address(r16, r17), 4096);            //    imul r15, qword ptr [r16 + r17], 4096
    __ imulq(r15, Address(r16, r17), 65536);           //    imul r15, qword ptr [r16 + r17], 65536
    __ imulq(r15, Address(r16, r17), 1048576);         //    imul r15, qword ptr [r16 + r17], 1048576
    __ imulq(r15, Address(r16, r17), 16777216);        //    imul r15, qword ptr [r16 + r17], 16777216
    __ imulq(r15, Address(r16, r17), 268435456);       //    imul r15, qword ptr [r16 + r17], 268435456
    __ imulq(r16, Address(r17, r18), 1);               //    imul r16, qword ptr [r17 + r18], 1
    __ imulq(r16, Address(r17, r18), 16);              //    imul r16, qword ptr [r17 + r18], 16
    __ imulq(r16, Address(r17, r18), 256);             //    imul r16, qword ptr [r17 + r18], 256
    __ imulq(r16, Address(r17, r18), 4096);            //    imul r16, qword ptr [r17 + r18], 4096
    __ imulq(r16, Address(r17, r18), 65536);           //    imul r16, qword ptr [r17 + r18], 65536
    __ imulq(r16, Address(r17, r18), 1048576);         //    imul r16, qword ptr [r17 + r18], 1048576
    __ imulq(r16, Address(r17, r18), 16777216);        //    imul r16, qword ptr [r17 + r18], 16777216
    __ imulq(r16, Address(r17, r18), 268435456);       //    imul r16, qword ptr [r17 + r18], 268435456
    __ imulq(r17, Address(r18, r19), 1);               //    imul r17, qword ptr [r18 + r19], 1
    __ imulq(r17, Address(r18, r19), 16);              //    imul r17, qword ptr [r18 + r19], 16
    __ imulq(r17, Address(r18, r19), 256);             //    imul r17, qword ptr [r18 + r19], 256
    __ imulq(r17, Address(r18, r19), 4096);            //    imul r17, qword ptr [r18 + r19], 4096
    __ imulq(r17, Address(r18, r19), 65536);           //    imul r17, qword ptr [r18 + r19], 65536
    __ imulq(r17, Address(r18, r19), 1048576);         //    imul r17, qword ptr [r18 + r19], 1048576
    __ imulq(r17, Address(r18, r19), 16777216);        //    imul r17, qword ptr [r18 + r19], 16777216
    __ imulq(r17, Address(r18, r19), 268435456);       //    imul r17, qword ptr [r18 + r19], 268435456
    __ imulq(r18, Address(r19, r20), 1);               //    imul r18, qword ptr [r19 + r20], 1
    __ imulq(r18, Address(r19, r20), 16);              //    imul r18, qword ptr [r19 + r20], 16
    __ imulq(r18, Address(r19, r20), 256);             //    imul r18, qword ptr [r19 + r20], 256
    __ imulq(r18, Address(r19, r20), 4096);            //    imul r18, qword ptr [r19 + r20], 4096
    __ imulq(r18, Address(r19, r20), 65536);           //    imul r18, qword ptr [r19 + r20], 65536
    __ imulq(r18, Address(r19, r20), 1048576);         //    imul r18, qword ptr [r19 + r20], 1048576
    __ imulq(r18, Address(r19, r20), 16777216);        //    imul r18, qword ptr [r19 + r20], 16777216
    __ imulq(r18, Address(r19, r20), 268435456);       //    imul r18, qword ptr [r19 + r20], 268435456
    __ imulq(r19, Address(r20, r21), 1);               //    imul r19, qword ptr [r20 + r21], 1
    __ imulq(r19, Address(r20, r21), 16);              //    imul r19, qword ptr [r20 + r21], 16
    __ imulq(r19, Address(r20, r21), 256);             //    imul r19, qword ptr [r20 + r21], 256
    __ imulq(r19, Address(r20, r21), 4096);            //    imul r19, qword ptr [r20 + r21], 4096
    __ imulq(r19, Address(r20, r21), 65536);           //    imul r19, qword ptr [r20 + r21], 65536
    __ imulq(r19, Address(r20, r21), 1048576);         //    imul r19, qword ptr [r20 + r21], 1048576
    __ imulq(r19, Address(r20, r21), 16777216);        //    imul r19, qword ptr [r20 + r21], 16777216
    __ imulq(r19, Address(r20, r21), 268435456);       //    imul r19, qword ptr [r20 + r21], 268435456
    __ imulq(r20, Address(r21, r22), 1);               //    imul r20, qword ptr [r21 + r22], 1
    __ imulq(r20, Address(r21, r22), 16);              //    imul r20, qword ptr [r21 + r22], 16
    __ imulq(r20, Address(r21, r22), 256);             //    imul r20, qword ptr [r21 + r22], 256
    __ imulq(r20, Address(r21, r22), 4096);            //    imul r20, qword ptr [r21 + r22], 4096
    __ imulq(r20, Address(r21, r22), 65536);           //    imul r20, qword ptr [r21 + r22], 65536
    __ imulq(r20, Address(r21, r22), 1048576);         //    imul r20, qword ptr [r21 + r22], 1048576
    __ imulq(r20, Address(r21, r22), 16777216);        //    imul r20, qword ptr [r21 + r22], 16777216
    __ imulq(r20, Address(r21, r22), 268435456);       //    imul r20, qword ptr [r21 + r22], 268435456
    __ imulq(r21, Address(r22, r23), 1);               //    imul r21, qword ptr [r22 + r23], 1
    __ imulq(r21, Address(r22, r23), 16);              //    imul r21, qword ptr [r22 + r23], 16
    __ imulq(r21, Address(r22, r23), 256);             //    imul r21, qword ptr [r22 + r23], 256
    __ imulq(r21, Address(r22, r23), 4096);            //    imul r21, qword ptr [r22 + r23], 4096
    __ imulq(r21, Address(r22, r23), 65536);           //    imul r21, qword ptr [r22 + r23], 65536
    __ imulq(r21, Address(r22, r23), 1048576);         //    imul r21, qword ptr [r22 + r23], 1048576
    __ imulq(r21, Address(r22, r23), 16777216);        //    imul r21, qword ptr [r22 + r23], 16777216
    __ imulq(r21, Address(r22, r23), 268435456);       //    imul r21, qword ptr [r22 + r23], 268435456
    __ imulq(r22, Address(r23, r24), 1);               //    imul r22, qword ptr [r23 + r24], 1
    __ imulq(r22, Address(r23, r24), 16);              //    imul r22, qword ptr [r23 + r24], 16
    __ imulq(r22, Address(r23, r24), 256);             //    imul r22, qword ptr [r23 + r24], 256
    __ imulq(r22, Address(r23, r24), 4096);            //    imul r22, qword ptr [r23 + r24], 4096
    __ imulq(r22, Address(r23, r24), 65536);           //    imul r22, qword ptr [r23 + r24], 65536
    __ imulq(r22, Address(r23, r24), 1048576);         //    imul r22, qword ptr [r23 + r24], 1048576
    __ imulq(r22, Address(r23, r24), 16777216);        //    imul r22, qword ptr [r23 + r24], 16777216
    __ imulq(r22, Address(r23, r24), 268435456);       //    imul r22, qword ptr [r23 + r24], 268435456
    __ imulq(r23, Address(r24, r25), 1);               //    imul r23, qword ptr [r24 + r25], 1
    __ imulq(r23, Address(r24, r25), 16);              //    imul r23, qword ptr [r24 + r25], 16
    __ imulq(r23, Address(r24, r25), 256);             //    imul r23, qword ptr [r24 + r25], 256
    __ imulq(r23, Address(r24, r25), 4096);            //    imul r23, qword ptr [r24 + r25], 4096
    __ imulq(r23, Address(r24, r25), 65536);           //    imul r23, qword ptr [r24 + r25], 65536
    __ imulq(r23, Address(r24, r25), 1048576);         //    imul r23, qword ptr [r24 + r25], 1048576
    __ imulq(r23, Address(r24, r25), 16777216);        //    imul r23, qword ptr [r24 + r25], 16777216
    __ imulq(r23, Address(r24, r25), 268435456);       //    imul r23, qword ptr [r24 + r25], 268435456
    __ imulq(r24, Address(r25, r26), 1);               //    imul r24, qword ptr [r25 + r26], 1
    __ imulq(r24, Address(r25, r26), 16);              //    imul r24, qword ptr [r25 + r26], 16
    __ imulq(r24, Address(r25, r26), 256);             //    imul r24, qword ptr [r25 + r26], 256
    __ imulq(r24, Address(r25, r26), 4096);            //    imul r24, qword ptr [r25 + r26], 4096
    __ imulq(r24, Address(r25, r26), 65536);           //    imul r24, qword ptr [r25 + r26], 65536
    __ imulq(r24, Address(r25, r26), 1048576);         //    imul r24, qword ptr [r25 + r26], 1048576
    __ imulq(r24, Address(r25, r26), 16777216);        //    imul r24, qword ptr [r25 + r26], 16777216
    __ imulq(r24, Address(r25, r26), 268435456);       //    imul r24, qword ptr [r25 + r26], 268435456
    __ imulq(r25, Address(r26, r27), 1);               //    imul r25, qword ptr [r26 + r27], 1
    __ imulq(r25, Address(r26, r27), 16);              //    imul r25, qword ptr [r26 + r27], 16
    __ imulq(r25, Address(r26, r27), 256);             //    imul r25, qword ptr [r26 + r27], 256
    __ imulq(r25, Address(r26, r27), 4096);            //    imul r25, qword ptr [r26 + r27], 4096
    __ imulq(r25, Address(r26, r27), 65536);           //    imul r25, qword ptr [r26 + r27], 65536
    __ imulq(r25, Address(r26, r27), 1048576);         //    imul r25, qword ptr [r26 + r27], 1048576
    __ imulq(r25, Address(r26, r27), 16777216);        //    imul r25, qword ptr [r26 + r27], 16777216
    __ imulq(r25, Address(r26, r27), 268435456);       //    imul r25, qword ptr [r26 + r27], 268435456
    __ imulq(r26, Address(r27, r28), 1);               //    imul r26, qword ptr [r27 + r28], 1
    __ imulq(r26, Address(r27, r28), 16);              //    imul r26, qword ptr [r27 + r28], 16
    __ imulq(r26, Address(r27, r28), 256);             //    imul r26, qword ptr [r27 + r28], 256
    __ imulq(r26, Address(r27, r28), 4096);            //    imul r26, qword ptr [r27 + r28], 4096
    __ imulq(r26, Address(r27, r28), 65536);           //    imul r26, qword ptr [r27 + r28], 65536
    __ imulq(r26, Address(r27, r28), 1048576);         //    imul r26, qword ptr [r27 + r28], 1048576
    __ imulq(r26, Address(r27, r28), 16777216);        //    imul r26, qword ptr [r27 + r28], 16777216
    __ imulq(r26, Address(r27, r28), 268435456);       //    imul r26, qword ptr [r27 + r28], 268435456
    __ imulq(r27, Address(r28, r29), 1);               //    imul r27, qword ptr [r28 + r29], 1
    __ imulq(r27, Address(r28, r29), 16);              //    imul r27, qword ptr [r28 + r29], 16
    __ imulq(r27, Address(r28, r29), 256);             //    imul r27, qword ptr [r28 + r29], 256
    __ imulq(r27, Address(r28, r29), 4096);            //    imul r27, qword ptr [r28 + r29], 4096
    __ imulq(r27, Address(r28, r29), 65536);           //    imul r27, qword ptr [r28 + r29], 65536
    __ imulq(r27, Address(r28, r29), 1048576);         //    imul r27, qword ptr [r28 + r29], 1048576
    __ imulq(r27, Address(r28, r29), 16777216);        //    imul r27, qword ptr [r28 + r29], 16777216
    __ imulq(r27, Address(r28, r29), 268435456);       //    imul r27, qword ptr [r28 + r29], 268435456
    __ imulq(r28, Address(r29, r30), 1);               //    imul r28, qword ptr [r29 + r30], 1
    __ imulq(r28, Address(r29, r30), 16);              //    imul r28, qword ptr [r29 + r30], 16
    __ imulq(r28, Address(r29, r30), 256);             //    imul r28, qword ptr [r29 + r30], 256
    __ imulq(r28, Address(r29, r30), 4096);            //    imul r28, qword ptr [r29 + r30], 4096
    __ imulq(r28, Address(r29, r30), 65536);           //    imul r28, qword ptr [r29 + r30], 65536
    __ imulq(r28, Address(r29, r30), 1048576);         //    imul r28, qword ptr [r29 + r30], 1048576
    __ imulq(r28, Address(r29, r30), 16777216);        //    imul r28, qword ptr [r29 + r30], 16777216
    __ imulq(r28, Address(r29, r30), 268435456);       //    imul r28, qword ptr [r29 + r30], 268435456
    __ imulq(r29, Address(r30, r31), 1);               //    imul r29, qword ptr [r30 + r31], 1
    __ imulq(r29, Address(r30, r31), 16);              //    imul r29, qword ptr [r30 + r31], 16
    __ imulq(r29, Address(r30, r31), 256);             //    imul r29, qword ptr [r30 + r31], 256
    __ imulq(r29, Address(r30, r31), 4096);            //    imul r29, qword ptr [r30 + r31], 4096
    __ imulq(r29, Address(r30, r31), 65536);           //    imul r29, qword ptr [r30 + r31], 65536
    __ imulq(r29, Address(r30, r31), 1048576);         //    imul r29, qword ptr [r30 + r31], 1048576
    __ imulq(r29, Address(r30, r31), 16777216);        //    imul r29, qword ptr [r30 + r31], 16777216
    __ imulq(r29, Address(r30, r31), 268435456);       //    imul r29, qword ptr [r30 + r31], 268435456
    __ imulq(r30, Address(r31, rcx), 1);               //    imul r30, qword ptr [r31 + rcx], 1
    __ imulq(r30, Address(r31, rcx), 16);              //    imul r30, qword ptr [r31 + rcx], 16
    __ imulq(r30, Address(r31, rcx), 256);             //    imul r30, qword ptr [r31 + rcx], 256
    __ imulq(r30, Address(r31, rcx), 4096);            //    imul r30, qword ptr [r31 + rcx], 4096
    __ imulq(r30, Address(r31, rcx), 65536);           //    imul r30, qword ptr [r31 + rcx], 65536
    __ imulq(r30, Address(r31, rcx), 1048576);         //    imul r30, qword ptr [r31 + rcx], 1048576
    __ imulq(r30, Address(r31, rcx), 16777216);        //    imul r30, qword ptr [r31 + rcx], 16777216
    __ imulq(r30, Address(r31, rcx), 268435456);       //    imul r30, qword ptr [r31 + rcx], 268435456
    __ imulq(r31, Address(rcx, rdx), 1);               //    imul r31, qword ptr [rcx + rdx], 1
    __ imulq(r31, Address(rcx, rdx), 16);              //    imul r31, qword ptr [rcx + rdx], 16
    __ imulq(r31, Address(rcx, rdx), 256);             //    imul r31, qword ptr [rcx + rdx], 256
    __ imulq(r31, Address(rcx, rdx), 4096);            //    imul r31, qword ptr [rcx + rdx], 4096
    __ imulq(r31, Address(rcx, rdx), 65536);           //    imul r31, qword ptr [rcx + rdx], 65536
    __ imulq(r31, Address(rcx, rdx), 1048576);         //    imul r31, qword ptr [rcx + rdx], 1048576
    __ imulq(r31, Address(rcx, rdx), 16777216);        //    imul r31, qword ptr [rcx + rdx], 16777216
    __ imulq(r31, Address(rcx, rdx), 268435456);       //    imul r31, qword ptr [rcx + rdx], 268435456
    __ imulq(rcx, rdx, 1);                             //    imul rcx, rdx, 1
    __ imulq(rcx, rdx, 16);                            //    imul rcx, rdx, 16
    __ imulq(rcx, rdx, 256);                           //    imul rcx, rdx, 256
    __ imulq(rcx, rdx, 4096);                          //    imul rcx, rdx, 4096
    __ imulq(rcx, rdx, 65536);                         //    imul rcx, rdx, 65536
    __ imulq(rcx, rdx, 1048576);                       //    imul rcx, rdx, 1048576
    __ imulq(rcx, rdx, 16777216);                      //    imul rcx, rdx, 16777216
    __ imulq(rcx, rdx, 268435456);                     //    imul rcx, rdx, 268435456
    __ imulq(rdx, rbx, 1);                             //    imul rdx, rbx, 1
    __ imulq(rdx, rbx, 16);                            //    imul rdx, rbx, 16
    __ imulq(rdx, rbx, 256);                           //    imul rdx, rbx, 256
    __ imulq(rdx, rbx, 4096);                          //    imul rdx, rbx, 4096
    __ imulq(rdx, rbx, 65536);                         //    imul rdx, rbx, 65536
    __ imulq(rdx, rbx, 1048576);                       //    imul rdx, rbx, 1048576
    __ imulq(rdx, rbx, 16777216);                      //    imul rdx, rbx, 16777216
    __ imulq(rdx, rbx, 268435456);                     //    imul rdx, rbx, 268435456
    __ imulq(rbx, r8, 1);                              //    imul rbx, r8, 1
    __ imulq(rbx, r8, 16);                             //    imul rbx, r8, 16
    __ imulq(rbx, r8, 256);                            //    imul rbx, r8, 256
    __ imulq(rbx, r8, 4096);                           //    imul rbx, r8, 4096
    __ imulq(rbx, r8, 65536);                          //    imul rbx, r8, 65536
    __ imulq(rbx, r8, 1048576);                        //    imul rbx, r8, 1048576
    __ imulq(rbx, r8, 16777216);                       //    imul rbx, r8, 16777216
    __ imulq(rbx, r8, 268435456);                      //    imul rbx, r8, 268435456
    __ imulq(r8, r9, 1);                               //    imul r8, r9, 1
    __ imulq(r8, r9, 16);                              //    imul r8, r9, 16
    __ imulq(r8, r9, 256);                             //    imul r8, r9, 256
    __ imulq(r8, r9, 4096);                            //    imul r8, r9, 4096
    __ imulq(r8, r9, 65536);                           //    imul r8, r9, 65536
    __ imulq(r8, r9, 1048576);                         //    imul r8, r9, 1048576
    __ imulq(r8, r9, 16777216);                        //    imul r8, r9, 16777216
    __ imulq(r8, r9, 268435456);                       //    imul r8, r9, 268435456
    __ imulq(r9, r10, 1);                              //    imul r9, r10, 1
    __ imulq(r9, r10, 16);                             //    imul r9, r10, 16
    __ imulq(r9, r10, 256);                            //    imul r9, r10, 256
    __ imulq(r9, r10, 4096);                           //    imul r9, r10, 4096
    __ imulq(r9, r10, 65536);                          //    imul r9, r10, 65536
    __ imulq(r9, r10, 1048576);                        //    imul r9, r10, 1048576
    __ imulq(r9, r10, 16777216);                       //    imul r9, r10, 16777216
    __ imulq(r9, r10, 268435456);                      //    imul r9, r10, 268435456
    __ imulq(r10, r11, 1);                             //    imul r10, r11, 1
    __ imulq(r10, r11, 16);                            //    imul r10, r11, 16
    __ imulq(r10, r11, 256);                           //    imul r10, r11, 256
    __ imulq(r10, r11, 4096);                          //    imul r10, r11, 4096
    __ imulq(r10, r11, 65536);                         //    imul r10, r11, 65536
    __ imulq(r10, r11, 1048576);                       //    imul r10, r11, 1048576
    __ imulq(r10, r11, 16777216);                      //    imul r10, r11, 16777216
    __ imulq(r10, r11, 268435456);                     //    imul r10, r11, 268435456
    __ imulq(r11, r12, 1);                             //    imul r11, r12, 1
    __ imulq(r11, r12, 16);                            //    imul r11, r12, 16
    __ imulq(r11, r12, 256);                           //    imul r11, r12, 256
    __ imulq(r11, r12, 4096);                          //    imul r11, r12, 4096
    __ imulq(r11, r12, 65536);                         //    imul r11, r12, 65536
    __ imulq(r11, r12, 1048576);                       //    imul r11, r12, 1048576
    __ imulq(r11, r12, 16777216);                      //    imul r11, r12, 16777216
    __ imulq(r11, r12, 268435456);                     //    imul r11, r12, 268435456
    __ imulq(r12, r13, 1);                             //    imul r12, r13, 1
    __ imulq(r12, r13, 16);                            //    imul r12, r13, 16
    __ imulq(r12, r13, 256);                           //    imul r12, r13, 256
    __ imulq(r12, r13, 4096);                          //    imul r12, r13, 4096
    __ imulq(r12, r13, 65536);                         //    imul r12, r13, 65536
    __ imulq(r12, r13, 1048576);                       //    imul r12, r13, 1048576
    __ imulq(r12, r13, 16777216);                      //    imul r12, r13, 16777216
    __ imulq(r12, r13, 268435456);                     //    imul r12, r13, 268435456
    __ imulq(r13, r14, 1);                             //    imul r13, r14, 1
    __ imulq(r13, r14, 16);                            //    imul r13, r14, 16
    __ imulq(r13, r14, 256);                           //    imul r13, r14, 256
    __ imulq(r13, r14, 4096);                          //    imul r13, r14, 4096
    __ imulq(r13, r14, 65536);                         //    imul r13, r14, 65536
    __ imulq(r13, r14, 1048576);                       //    imul r13, r14, 1048576
    __ imulq(r13, r14, 16777216);                      //    imul r13, r14, 16777216
    __ imulq(r13, r14, 268435456);                     //    imul r13, r14, 268435456
    __ imulq(r14, r15, 1);                             //    imul r14, r15, 1
    __ imulq(r14, r15, 16);                            //    imul r14, r15, 16
    __ imulq(r14, r15, 256);                           //    imul r14, r15, 256
    __ imulq(r14, r15, 4096);                          //    imul r14, r15, 4096
    __ imulq(r14, r15, 65536);                         //    imul r14, r15, 65536
    __ imulq(r14, r15, 1048576);                       //    imul r14, r15, 1048576
    __ imulq(r14, r15, 16777216);                      //    imul r14, r15, 16777216
    __ imulq(r14, r15, 268435456);                     //    imul r14, r15, 268435456
    __ imulq(r15, r16, 1);                             //    imul r15, r16, 1
    __ imulq(r15, r16, 16);                            //    imul r15, r16, 16
    __ imulq(r15, r16, 256);                           //    imul r15, r16, 256
    __ imulq(r15, r16, 4096);                          //    imul r15, r16, 4096
    __ imulq(r15, r16, 65536);                         //    imul r15, r16, 65536
    __ imulq(r15, r16, 1048576);                       //    imul r15, r16, 1048576
    __ imulq(r15, r16, 16777216);                      //    imul r15, r16, 16777216
    __ imulq(r15, r16, 268435456);                     //    imul r15, r16, 268435456
    __ imulq(r16, r17, 1);                             //    imul r16, r17, 1
    __ imulq(r16, r17, 16);                            //    imul r16, r17, 16
    __ imulq(r16, r17, 256);                           //    imul r16, r17, 256
    __ imulq(r16, r17, 4096);                          //    imul r16, r17, 4096
    __ imulq(r16, r17, 65536);                         //    imul r16, r17, 65536
    __ imulq(r16, r17, 1048576);                       //    imul r16, r17, 1048576
    __ imulq(r16, r17, 16777216);                      //    imul r16, r17, 16777216
    __ imulq(r16, r17, 268435456);                     //    imul r16, r17, 268435456
    __ imulq(r17, r18, 1);                             //    imul r17, r18, 1
    __ imulq(r17, r18, 16);                            //    imul r17, r18, 16
    __ imulq(r17, r18, 256);                           //    imul r17, r18, 256
    __ imulq(r17, r18, 4096);                          //    imul r17, r18, 4096
    __ imulq(r17, r18, 65536);                         //    imul r17, r18, 65536
    __ imulq(r17, r18, 1048576);                       //    imul r17, r18, 1048576
    __ imulq(r17, r18, 16777216);                      //    imul r17, r18, 16777216
    __ imulq(r17, r18, 268435456);                     //    imul r17, r18, 268435456
    __ imulq(r18, r19, 1);                             //    imul r18, r19, 1
    __ imulq(r18, r19, 16);                            //    imul r18, r19, 16
    __ imulq(r18, r19, 256);                           //    imul r18, r19, 256
    __ imulq(r18, r19, 4096);                          //    imul r18, r19, 4096
    __ imulq(r18, r19, 65536);                         //    imul r18, r19, 65536
    __ imulq(r18, r19, 1048576);                       //    imul r18, r19, 1048576
    __ imulq(r18, r19, 16777216);                      //    imul r18, r19, 16777216
    __ imulq(r18, r19, 268435456);                     //    imul r18, r19, 268435456
    __ imulq(r19, r20, 1);                             //    imul r19, r20, 1
    __ imulq(r19, r20, 16);                            //    imul r19, r20, 16
    __ imulq(r19, r20, 256);                           //    imul r19, r20, 256
    __ imulq(r19, r20, 4096);                          //    imul r19, r20, 4096
    __ imulq(r19, r20, 65536);                         //    imul r19, r20, 65536
    __ imulq(r19, r20, 1048576);                       //    imul r19, r20, 1048576
    __ imulq(r19, r20, 16777216);                      //    imul r19, r20, 16777216
    __ imulq(r19, r20, 268435456);                     //    imul r19, r20, 268435456
    __ imulq(r20, r21, 1);                             //    imul r20, r21, 1
    __ imulq(r20, r21, 16);                            //    imul r20, r21, 16
    __ imulq(r20, r21, 256);                           //    imul r20, r21, 256
    __ imulq(r20, r21, 4096);                          //    imul r20, r21, 4096
    __ imulq(r20, r21, 65536);                         //    imul r20, r21, 65536
    __ imulq(r20, r21, 1048576);                       //    imul r20, r21, 1048576
    __ imulq(r20, r21, 16777216);                      //    imul r20, r21, 16777216
    __ imulq(r20, r21, 268435456);                     //    imul r20, r21, 268435456
    __ imulq(r21, r22, 1);                             //    imul r21, r22, 1
    __ imulq(r21, r22, 16);                            //    imul r21, r22, 16
    __ imulq(r21, r22, 256);                           //    imul r21, r22, 256
    __ imulq(r21, r22, 4096);                          //    imul r21, r22, 4096
    __ imulq(r21, r22, 65536);                         //    imul r21, r22, 65536
    __ imulq(r21, r22, 1048576);                       //    imul r21, r22, 1048576
    __ imulq(r21, r22, 16777216);                      //    imul r21, r22, 16777216
    __ imulq(r21, r22, 268435456);                     //    imul r21, r22, 268435456
    __ imulq(r22, r23, 1);                             //    imul r22, r23, 1
    __ imulq(r22, r23, 16);                            //    imul r22, r23, 16
    __ imulq(r22, r23, 256);                           //    imul r22, r23, 256
    __ imulq(r22, r23, 4096);                          //    imul r22, r23, 4096
    __ imulq(r22, r23, 65536);                         //    imul r22, r23, 65536
    __ imulq(r22, r23, 1048576);                       //    imul r22, r23, 1048576
    __ imulq(r22, r23, 16777216);                      //    imul r22, r23, 16777216
    __ imulq(r22, r23, 268435456);                     //    imul r22, r23, 268435456
    __ imulq(r23, r24, 1);                             //    imul r23, r24, 1
    __ imulq(r23, r24, 16);                            //    imul r23, r24, 16
    __ imulq(r23, r24, 256);                           //    imul r23, r24, 256
    __ imulq(r23, r24, 4096);                          //    imul r23, r24, 4096
    __ imulq(r23, r24, 65536);                         //    imul r23, r24, 65536
    __ imulq(r23, r24, 1048576);                       //    imul r23, r24, 1048576
    __ imulq(r23, r24, 16777216);                      //    imul r23, r24, 16777216
    __ imulq(r23, r24, 268435456);                     //    imul r23, r24, 268435456
    __ imulq(r24, r25, 1);                             //    imul r24, r25, 1
    __ imulq(r24, r25, 16);                            //    imul r24, r25, 16
    __ imulq(r24, r25, 256);                           //    imul r24, r25, 256
    __ imulq(r24, r25, 4096);                          //    imul r24, r25, 4096
    __ imulq(r24, r25, 65536);                         //    imul r24, r25, 65536
    __ imulq(r24, r25, 1048576);                       //    imul r24, r25, 1048576
    __ imulq(r24, r25, 16777216);                      //    imul r24, r25, 16777216
    __ imulq(r24, r25, 268435456);                     //    imul r24, r25, 268435456
    __ imulq(r25, r26, 1);                             //    imul r25, r26, 1
    __ imulq(r25, r26, 16);                            //    imul r25, r26, 16
    __ imulq(r25, r26, 256);                           //    imul r25, r26, 256
    __ imulq(r25, r26, 4096);                          //    imul r25, r26, 4096
    __ imulq(r25, r26, 65536);                         //    imul r25, r26, 65536
    __ imulq(r25, r26, 1048576);                       //    imul r25, r26, 1048576
    __ imulq(r25, r26, 16777216);                      //    imul r25, r26, 16777216
    __ imulq(r25, r26, 268435456);                     //    imul r25, r26, 268435456
    __ imulq(r26, r27, 1);                             //    imul r26, r27, 1
    __ imulq(r26, r27, 16);                            //    imul r26, r27, 16
    __ imulq(r26, r27, 256);                           //    imul r26, r27, 256
    __ imulq(r26, r27, 4096);                          //    imul r26, r27, 4096
    __ imulq(r26, r27, 65536);                         //    imul r26, r27, 65536
    __ imulq(r26, r27, 1048576);                       //    imul r26, r27, 1048576
    __ imulq(r26, r27, 16777216);                      //    imul r26, r27, 16777216
    __ imulq(r26, r27, 268435456);                     //    imul r26, r27, 268435456
    __ imulq(r27, r28, 1);                             //    imul r27, r28, 1
    __ imulq(r27, r28, 16);                            //    imul r27, r28, 16
    __ imulq(r27, r28, 256);                           //    imul r27, r28, 256
    __ imulq(r27, r28, 4096);                          //    imul r27, r28, 4096
    __ imulq(r27, r28, 65536);                         //    imul r27, r28, 65536
    __ imulq(r27, r28, 1048576);                       //    imul r27, r28, 1048576
    __ imulq(r27, r28, 16777216);                      //    imul r27, r28, 16777216
    __ imulq(r27, r28, 268435456);                     //    imul r27, r28, 268435456
    __ imulq(r28, r29, 1);                             //    imul r28, r29, 1
    __ imulq(r28, r29, 16);                            //    imul r28, r29, 16
    __ imulq(r28, r29, 256);                           //    imul r28, r29, 256
    __ imulq(r28, r29, 4096);                          //    imul r28, r29, 4096
    __ imulq(r28, r29, 65536);                         //    imul r28, r29, 65536
    __ imulq(r28, r29, 1048576);                       //    imul r28, r29, 1048576
    __ imulq(r28, r29, 16777216);                      //    imul r28, r29, 16777216
    __ imulq(r28, r29, 268435456);                     //    imul r28, r29, 268435456
    __ imulq(r29, r30, 1);                             //    imul r29, r30, 1
    __ imulq(r29, r30, 16);                            //    imul r29, r30, 16
    __ imulq(r29, r30, 256);                           //    imul r29, r30, 256
    __ imulq(r29, r30, 4096);                          //    imul r29, r30, 4096
    __ imulq(r29, r30, 65536);                         //    imul r29, r30, 65536
    __ imulq(r29, r30, 1048576);                       //    imul r29, r30, 1048576
    __ imulq(r29, r30, 16777216);                      //    imul r29, r30, 16777216
    __ imulq(r29, r30, 268435456);                     //    imul r29, r30, 268435456
    __ imulq(r30, r31, 1);                             //    imul r30, r31, 1
    __ imulq(r30, r31, 16);                            //    imul r30, r31, 16
    __ imulq(r30, r31, 256);                           //    imul r30, r31, 256
    __ imulq(r30, r31, 4096);                          //    imul r30, r31, 4096
    __ imulq(r30, r31, 65536);                         //    imul r30, r31, 65536
    __ imulq(r30, r31, 1048576);                       //    imul r30, r31, 1048576
    __ imulq(r30, r31, 16777216);                      //    imul r30, r31, 16777216
    __ imulq(r30, r31, 268435456);                     //    imul r30, r31, 268435456
    __ imulq(r31, rcx, 1);                             //    imul r31, rcx, 1
    __ imulq(r31, rcx, 16);                            //    imul r31, rcx, 16
    __ imulq(r31, rcx, 256);                           //    imul r31, rcx, 256
    __ imulq(r31, rcx, 4096);                          //    imul r31, rcx, 4096
    __ imulq(r31, rcx, 65536);                         //    imul r31, rcx, 65536
    __ imulq(r31, rcx, 1048576);                       //    imul r31, rcx, 1048576
    __ imulq(r31, rcx, 16777216);                      //    imul r31, rcx, 16777216
    __ imulq(r31, rcx, 268435456);                     //    imul r31, rcx, 268435456
    __ shldq(rcx, rdx, 1);                             //    shld rcx, rdx, 1
    __ shldq(rcx, rdx, 2);                             //    shld rcx, rdx, 2
    __ shldq(rcx, rdx, 4);                             //    shld rcx, rdx, 4
    __ shldq(rcx, rdx, 8);                             //    shld rcx, rdx, 8
    __ shldq(rcx, rdx, 16);                            //    shld rcx, rdx, 16
    __ shldq(rdx, rbx, 1);                             //    shld rdx, rbx, 1
    __ shldq(rdx, rbx, 2);                             //    shld rdx, rbx, 2
    __ shldq(rdx, rbx, 4);                             //    shld rdx, rbx, 4
    __ shldq(rdx, rbx, 8);                             //    shld rdx, rbx, 8
    __ shldq(rdx, rbx, 16);                            //    shld rdx, rbx, 16
    __ shldq(rbx, r8, 1);                              //    shld rbx, r8, 1
    __ shldq(rbx, r8, 2);                              //    shld rbx, r8, 2
    __ shldq(rbx, r8, 4);                              //    shld rbx, r8, 4
    __ shldq(rbx, r8, 8);                              //    shld rbx, r8, 8
    __ shldq(rbx, r8, 16);                             //    shld rbx, r8, 16
    __ shldq(r8, r9, 1);                               //    shld r8, r9, 1
    __ shldq(r8, r9, 2);                               //    shld r8, r9, 2
    __ shldq(r8, r9, 4);                               //    shld r8, r9, 4
    __ shldq(r8, r9, 8);                               //    shld r8, r9, 8
    __ shldq(r8, r9, 16);                              //    shld r8, r9, 16
    __ shldq(r9, r10, 1);                              //    shld r9, r10, 1
    __ shldq(r9, r10, 2);                              //    shld r9, r10, 2
    __ shldq(r9, r10, 4);                              //    shld r9, r10, 4
    __ shldq(r9, r10, 8);                              //    shld r9, r10, 8
    __ shldq(r9, r10, 16);                             //    shld r9, r10, 16
    __ shldq(r10, r11, 1);                             //    shld r10, r11, 1
    __ shldq(r10, r11, 2);                             //    shld r10, r11, 2
    __ shldq(r10, r11, 4);                             //    shld r10, r11, 4
    __ shldq(r10, r11, 8);                             //    shld r10, r11, 8
    __ shldq(r10, r11, 16);                            //    shld r10, r11, 16
    __ shldq(r11, r12, 1);                             //    shld r11, r12, 1
    __ shldq(r11, r12, 2);                             //    shld r11, r12, 2
    __ shldq(r11, r12, 4);                             //    shld r11, r12, 4
    __ shldq(r11, r12, 8);                             //    shld r11, r12, 8
    __ shldq(r11, r12, 16);                            //    shld r11, r12, 16
    __ shldq(r12, r13, 1);                             //    shld r12, r13, 1
    __ shldq(r12, r13, 2);                             //    shld r12, r13, 2
    __ shldq(r12, r13, 4);                             //    shld r12, r13, 4
    __ shldq(r12, r13, 8);                             //    shld r12, r13, 8
    __ shldq(r12, r13, 16);                            //    shld r12, r13, 16
    __ shldq(r13, r14, 1);                             //    shld r13, r14, 1
    __ shldq(r13, r14, 2);                             //    shld r13, r14, 2
    __ shldq(r13, r14, 4);                             //    shld r13, r14, 4
    __ shldq(r13, r14, 8);                             //    shld r13, r14, 8
    __ shldq(r13, r14, 16);                            //    shld r13, r14, 16
    __ shldq(r14, r15, 1);                             //    shld r14, r15, 1
    __ shldq(r14, r15, 2);                             //    shld r14, r15, 2
    __ shldq(r14, r15, 4);                             //    shld r14, r15, 4
    __ shldq(r14, r15, 8);                             //    shld r14, r15, 8
    __ shldq(r14, r15, 16);                            //    shld r14, r15, 16
    __ shldq(r15, r16, 1);                             //    shld r15, r16, 1
    __ shldq(r15, r16, 2);                             //    shld r15, r16, 2
    __ shldq(r15, r16, 4);                             //    shld r15, r16, 4
    __ shldq(r15, r16, 8);                             //    shld r15, r16, 8
    __ shldq(r15, r16, 16);                            //    shld r15, r16, 16
    __ shldq(r16, r17, 1);                             //    shld r16, r17, 1
    __ shldq(r16, r17, 2);                             //    shld r16, r17, 2
    __ shldq(r16, r17, 4);                             //    shld r16, r17, 4
    __ shldq(r16, r17, 8);                             //    shld r16, r17, 8
    __ shldq(r16, r17, 16);                            //    shld r16, r17, 16
    __ shldq(r17, r18, 1);                             //    shld r17, r18, 1
    __ shldq(r17, r18, 2);                             //    shld r17, r18, 2
    __ shldq(r17, r18, 4);                             //    shld r17, r18, 4
    __ shldq(r17, r18, 8);                             //    shld r17, r18, 8
    __ shldq(r17, r18, 16);                            //    shld r17, r18, 16
    __ shldq(r18, r19, 1);                             //    shld r18, r19, 1
    __ shldq(r18, r19, 2);                             //    shld r18, r19, 2
    __ shldq(r18, r19, 4);                             //    shld r18, r19, 4
    __ shldq(r18, r19, 8);                             //    shld r18, r19, 8
    __ shldq(r18, r19, 16);                            //    shld r18, r19, 16
    __ shldq(r19, r20, 1);                             //    shld r19, r20, 1
    __ shldq(r19, r20, 2);                             //    shld r19, r20, 2
    __ shldq(r19, r20, 4);                             //    shld r19, r20, 4
    __ shldq(r19, r20, 8);                             //    shld r19, r20, 8
    __ shldq(r19, r20, 16);                            //    shld r19, r20, 16
    __ shldq(r20, r21, 1);                             //    shld r20, r21, 1
    __ shldq(r20, r21, 2);                             //    shld r20, r21, 2
    __ shldq(r20, r21, 4);                             //    shld r20, r21, 4
    __ shldq(r20, r21, 8);                             //    shld r20, r21, 8
    __ shldq(r20, r21, 16);                            //    shld r20, r21, 16
    __ shldq(r21, r22, 1);                             //    shld r21, r22, 1
    __ shldq(r21, r22, 2);                             //    shld r21, r22, 2
    __ shldq(r21, r22, 4);                             //    shld r21, r22, 4
    __ shldq(r21, r22, 8);                             //    shld r21, r22, 8
    __ shldq(r21, r22, 16);                            //    shld r21, r22, 16
    __ shldq(r22, r23, 1);                             //    shld r22, r23, 1
    __ shldq(r22, r23, 2);                             //    shld r22, r23, 2
    __ shldq(r22, r23, 4);                             //    shld r22, r23, 4
    __ shldq(r22, r23, 8);                             //    shld r22, r23, 8
    __ shldq(r22, r23, 16);                            //    shld r22, r23, 16
    __ shldq(r23, r24, 1);                             //    shld r23, r24, 1
    __ shldq(r23, r24, 2);                             //    shld r23, r24, 2
    __ shldq(r23, r24, 4);                             //    shld r23, r24, 4
    __ shldq(r23, r24, 8);                             //    shld r23, r24, 8
    __ shldq(r23, r24, 16);                            //    shld r23, r24, 16
    __ shldq(r24, r25, 1);                             //    shld r24, r25, 1
    __ shldq(r24, r25, 2);                             //    shld r24, r25, 2
    __ shldq(r24, r25, 4);                             //    shld r24, r25, 4
    __ shldq(r24, r25, 8);                             //    shld r24, r25, 8
    __ shldq(r24, r25, 16);                            //    shld r24, r25, 16
    __ shldq(r25, r26, 1);                             //    shld r25, r26, 1
    __ shldq(r25, r26, 2);                             //    shld r25, r26, 2
    __ shldq(r25, r26, 4);                             //    shld r25, r26, 4
    __ shldq(r25, r26, 8);                             //    shld r25, r26, 8
    __ shldq(r25, r26, 16);                            //    shld r25, r26, 16
    __ shldq(r26, r27, 1);                             //    shld r26, r27, 1
    __ shldq(r26, r27, 2);                             //    shld r26, r27, 2
    __ shldq(r26, r27, 4);                             //    shld r26, r27, 4
    __ shldq(r26, r27, 8);                             //    shld r26, r27, 8
    __ shldq(r26, r27, 16);                            //    shld r26, r27, 16
    __ shldq(r27, r28, 1);                             //    shld r27, r28, 1
    __ shldq(r27, r28, 2);                             //    shld r27, r28, 2
    __ shldq(r27, r28, 4);                             //    shld r27, r28, 4
    __ shldq(r27, r28, 8);                             //    shld r27, r28, 8
    __ shldq(r27, r28, 16);                            //    shld r27, r28, 16
    __ shldq(r28, r29, 1);                             //    shld r28, r29, 1
    __ shldq(r28, r29, 2);                             //    shld r28, r29, 2
    __ shldq(r28, r29, 4);                             //    shld r28, r29, 4
    __ shldq(r28, r29, 8);                             //    shld r28, r29, 8
    __ shldq(r28, r29, 16);                            //    shld r28, r29, 16
    __ shldq(r29, r30, 1);                             //    shld r29, r30, 1
    __ shldq(r29, r30, 2);                             //    shld r29, r30, 2
    __ shldq(r29, r30, 4);                             //    shld r29, r30, 4
    __ shldq(r29, r30, 8);                             //    shld r29, r30, 8
    __ shldq(r29, r30, 16);                            //    shld r29, r30, 16
    __ shldq(r30, r31, 1);                             //    shld r30, r31, 1
    __ shldq(r30, r31, 2);                             //    shld r30, r31, 2
    __ shldq(r30, r31, 4);                             //    shld r30, r31, 4
    __ shldq(r30, r31, 8);                             //    shld r30, r31, 8
    __ shldq(r30, r31, 16);                            //    shld r30, r31, 16
    __ shldq(r31, rcx, 1);                             //    shld r31, rcx, 1
    __ shldq(r31, rcx, 2);                             //    shld r31, rcx, 2
    __ shldq(r31, rcx, 4);                             //    shld r31, rcx, 4
    __ shldq(r31, rcx, 8);                             //    shld r31, rcx, 8
    __ shldq(r31, rcx, 16);                            //    shld r31, rcx, 16
    __ shrdq(rcx, rdx, 1);                             //    shrd rcx, rdx, 1
    __ shrdq(rcx, rdx, 2);                             //    shrd rcx, rdx, 2
    __ shrdq(rcx, rdx, 4);                             //    shrd rcx, rdx, 4
    __ shrdq(rcx, rdx, 8);                             //    shrd rcx, rdx, 8
    __ shrdq(rcx, rdx, 16);                            //    shrd rcx, rdx, 16
    __ shrdq(rdx, rbx, 1);                             //    shrd rdx, rbx, 1
    __ shrdq(rdx, rbx, 2);                             //    shrd rdx, rbx, 2
    __ shrdq(rdx, rbx, 4);                             //    shrd rdx, rbx, 4
    __ shrdq(rdx, rbx, 8);                             //    shrd rdx, rbx, 8
    __ shrdq(rdx, rbx, 16);                            //    shrd rdx, rbx, 16
    __ shrdq(rbx, r8, 1);                              //    shrd rbx, r8, 1
    __ shrdq(rbx, r8, 2);                              //    shrd rbx, r8, 2
    __ shrdq(rbx, r8, 4);                              //    shrd rbx, r8, 4
    __ shrdq(rbx, r8, 8);                              //    shrd rbx, r8, 8
    __ shrdq(rbx, r8, 16);                             //    shrd rbx, r8, 16
    __ shrdq(r8, r9, 1);                               //    shrd r8, r9, 1
    __ shrdq(r8, r9, 2);                               //    shrd r8, r9, 2
    __ shrdq(r8, r9, 4);                               //    shrd r8, r9, 4
    __ shrdq(r8, r9, 8);                               //    shrd r8, r9, 8
    __ shrdq(r8, r9, 16);                              //    shrd r8, r9, 16
    __ shrdq(r9, r10, 1);                              //    shrd r9, r10, 1
    __ shrdq(r9, r10, 2);                              //    shrd r9, r10, 2
    __ shrdq(r9, r10, 4);                              //    shrd r9, r10, 4
    __ shrdq(r9, r10, 8);                              //    shrd r9, r10, 8
    __ shrdq(r9, r10, 16);                             //    shrd r9, r10, 16
    __ shrdq(r10, r11, 1);                             //    shrd r10, r11, 1
    __ shrdq(r10, r11, 2);                             //    shrd r10, r11, 2
    __ shrdq(r10, r11, 4);                             //    shrd r10, r11, 4
    __ shrdq(r10, r11, 8);                             //    shrd r10, r11, 8
    __ shrdq(r10, r11, 16);                            //    shrd r10, r11, 16
    __ shrdq(r11, r12, 1);                             //    shrd r11, r12, 1
    __ shrdq(r11, r12, 2);                             //    shrd r11, r12, 2
    __ shrdq(r11, r12, 4);                             //    shrd r11, r12, 4
    __ shrdq(r11, r12, 8);                             //    shrd r11, r12, 8
    __ shrdq(r11, r12, 16);                            //    shrd r11, r12, 16
    __ shrdq(r12, r13, 1);                             //    shrd r12, r13, 1
    __ shrdq(r12, r13, 2);                             //    shrd r12, r13, 2
    __ shrdq(r12, r13, 4);                             //    shrd r12, r13, 4
    __ shrdq(r12, r13, 8);                             //    shrd r12, r13, 8
    __ shrdq(r12, r13, 16);                            //    shrd r12, r13, 16
    __ shrdq(r13, r14, 1);                             //    shrd r13, r14, 1
    __ shrdq(r13, r14, 2);                             //    shrd r13, r14, 2
    __ shrdq(r13, r14, 4);                             //    shrd r13, r14, 4
    __ shrdq(r13, r14, 8);                             //    shrd r13, r14, 8
    __ shrdq(r13, r14, 16);                            //    shrd r13, r14, 16
    __ shrdq(r14, r15, 1);                             //    shrd r14, r15, 1
    __ shrdq(r14, r15, 2);                             //    shrd r14, r15, 2
    __ shrdq(r14, r15, 4);                             //    shrd r14, r15, 4
    __ shrdq(r14, r15, 8);                             //    shrd r14, r15, 8
    __ shrdq(r14, r15, 16);                            //    shrd r14, r15, 16
    __ shrdq(r15, r16, 1);                             //    shrd r15, r16, 1
    __ shrdq(r15, r16, 2);                             //    shrd r15, r16, 2
    __ shrdq(r15, r16, 4);                             //    shrd r15, r16, 4
    __ shrdq(r15, r16, 8);                             //    shrd r15, r16, 8
    __ shrdq(r15, r16, 16);                            //    shrd r15, r16, 16
    __ shrdq(r16, r17, 1);                             //    shrd r16, r17, 1
    __ shrdq(r16, r17, 2);                             //    shrd r16, r17, 2
    __ shrdq(r16, r17, 4);                             //    shrd r16, r17, 4
    __ shrdq(r16, r17, 8);                             //    shrd r16, r17, 8
    __ shrdq(r16, r17, 16);                            //    shrd r16, r17, 16
    __ shrdq(r17, r18, 1);                             //    shrd r17, r18, 1
    __ shrdq(r17, r18, 2);                             //    shrd r17, r18, 2
    __ shrdq(r17, r18, 4);                             //    shrd r17, r18, 4
    __ shrdq(r17, r18, 8);                             //    shrd r17, r18, 8
    __ shrdq(r17, r18, 16);                            //    shrd r17, r18, 16
    __ shrdq(r18, r19, 1);                             //    shrd r18, r19, 1
    __ shrdq(r18, r19, 2);                             //    shrd r18, r19, 2
    __ shrdq(r18, r19, 4);                             //    shrd r18, r19, 4
    __ shrdq(r18, r19, 8);                             //    shrd r18, r19, 8
    __ shrdq(r18, r19, 16);                            //    shrd r18, r19, 16
    __ shrdq(r19, r20, 1);                             //    shrd r19, r20, 1
    __ shrdq(r19, r20, 2);                             //    shrd r19, r20, 2
    __ shrdq(r19, r20, 4);                             //    shrd r19, r20, 4
    __ shrdq(r19, r20, 8);                             //    shrd r19, r20, 8
    __ shrdq(r19, r20, 16);                            //    shrd r19, r20, 16
    __ shrdq(r20, r21, 1);                             //    shrd r20, r21, 1
    __ shrdq(r20, r21, 2);                             //    shrd r20, r21, 2
    __ shrdq(r20, r21, 4);                             //    shrd r20, r21, 4
    __ shrdq(r20, r21, 8);                             //    shrd r20, r21, 8
    __ shrdq(r20, r21, 16);                            //    shrd r20, r21, 16
    __ shrdq(r21, r22, 1);                             //    shrd r21, r22, 1
    __ shrdq(r21, r22, 2);                             //    shrd r21, r22, 2
    __ shrdq(r21, r22, 4);                             //    shrd r21, r22, 4
    __ shrdq(r21, r22, 8);                             //    shrd r21, r22, 8
    __ shrdq(r21, r22, 16);                            //    shrd r21, r22, 16
    __ shrdq(r22, r23, 1);                             //    shrd r22, r23, 1
    __ shrdq(r22, r23, 2);                             //    shrd r22, r23, 2
    __ shrdq(r22, r23, 4);                             //    shrd r22, r23, 4
    __ shrdq(r22, r23, 8);                             //    shrd r22, r23, 8
    __ shrdq(r22, r23, 16);                            //    shrd r22, r23, 16
    __ shrdq(r23, r24, 1);                             //    shrd r23, r24, 1
    __ shrdq(r23, r24, 2);                             //    shrd r23, r24, 2
    __ shrdq(r23, r24, 4);                             //    shrd r23, r24, 4
    __ shrdq(r23, r24, 8);                             //    shrd r23, r24, 8
    __ shrdq(r23, r24, 16);                            //    shrd r23, r24, 16
    __ shrdq(r24, r25, 1);                             //    shrd r24, r25, 1
    __ shrdq(r24, r25, 2);                             //    shrd r24, r25, 2
    __ shrdq(r24, r25, 4);                             //    shrd r24, r25, 4
    __ shrdq(r24, r25, 8);                             //    shrd r24, r25, 8
    __ shrdq(r24, r25, 16);                            //    shrd r24, r25, 16
    __ shrdq(r25, r26, 1);                             //    shrd r25, r26, 1
    __ shrdq(r25, r26, 2);                             //    shrd r25, r26, 2
    __ shrdq(r25, r26, 4);                             //    shrd r25, r26, 4
    __ shrdq(r25, r26, 8);                             //    shrd r25, r26, 8
    __ shrdq(r25, r26, 16);                            //    shrd r25, r26, 16
    __ shrdq(r26, r27, 1);                             //    shrd r26, r27, 1
    __ shrdq(r26, r27, 2);                             //    shrd r26, r27, 2
    __ shrdq(r26, r27, 4);                             //    shrd r26, r27, 4
    __ shrdq(r26, r27, 8);                             //    shrd r26, r27, 8
    __ shrdq(r26, r27, 16);                            //    shrd r26, r27, 16
    __ shrdq(r27, r28, 1);                             //    shrd r27, r28, 1
    __ shrdq(r27, r28, 2);                             //    shrd r27, r28, 2
    __ shrdq(r27, r28, 4);                             //    shrd r27, r28, 4
    __ shrdq(r27, r28, 8);                             //    shrd r27, r28, 8
    __ shrdq(r27, r28, 16);                            //    shrd r27, r28, 16
    __ shrdq(r28, r29, 1);                             //    shrd r28, r29, 1
    __ shrdq(r28, r29, 2);                             //    shrd r28, r29, 2
    __ shrdq(r28, r29, 4);                             //    shrd r28, r29, 4
    __ shrdq(r28, r29, 8);                             //    shrd r28, r29, 8
    __ shrdq(r28, r29, 16);                            //    shrd r28, r29, 16
    __ shrdq(r29, r30, 1);                             //    shrd r29, r30, 1
    __ shrdq(r29, r30, 2);                             //    shrd r29, r30, 2
    __ shrdq(r29, r30, 4);                             //    shrd r29, r30, 4
    __ shrdq(r29, r30, 8);                             //    shrd r29, r30, 8
    __ shrdq(r29, r30, 16);                            //    shrd r29, r30, 16
    __ shrdq(r30, r31, 1);                             //    shrd r30, r31, 1
    __ shrdq(r30, r31, 2);                             //    shrd r30, r31, 2
    __ shrdq(r30, r31, 4);                             //    shrd r30, r31, 4
    __ shrdq(r30, r31, 8);                             //    shrd r30, r31, 8
    __ shrdq(r30, r31, 16);                            //    shrd r30, r31, 16
    __ shrdq(r31, rcx, 1);                             //    shrd r31, rcx, 1
    __ shrdq(r31, rcx, 2);                             //    shrd r31, rcx, 2
    __ shrdq(r31, rcx, 4);                             //    shrd r31, rcx, 4
    __ shrdq(r31, rcx, 8);                             //    shrd r31, rcx, 8
    __ shrdq(r31, rcx, 16);                            //    shrd r31, rcx, 16
    __ orq_imm32 (rcx, 65536);                         //    or rcx, 65536
    __ orq_imm32 (rcx, 262144);                        //    or rcx, 262144
    __ orq_imm32 (rcx, 1048576);                       //    or rcx, 1048576
    __ orq_imm32 (rcx, 4194304);                       //    or rcx, 4194304
    __ orq_imm32 (rcx, 16777216);                      //    or rcx, 16777216
    __ orq_imm32 (rcx, 67108864);                      //    or rcx, 67108864
    __ orq_imm32 (rcx, 268435456);                     //    or rcx, 268435456
    __ orq_imm32 (rcx, 1073741824);                    //    or rcx, 1073741824
    __ orq_imm32 (rdx, 65536);                         //    or rdx, 65536
    __ orq_imm32 (rdx, 262144);                        //    or rdx, 262144
    __ orq_imm32 (rdx, 1048576);                       //    or rdx, 1048576
    __ orq_imm32 (rdx, 4194304);                       //    or rdx, 4194304
    __ orq_imm32 (rdx, 16777216);                      //    or rdx, 16777216
    __ orq_imm32 (rdx, 67108864);                      //    or rdx, 67108864
    __ orq_imm32 (rdx, 268435456);                     //    or rdx, 268435456
    __ orq_imm32 (rdx, 1073741824);                    //    or rdx, 1073741824
    __ orq_imm32 (rbx, 65536);                         //    or rbx, 65536
    __ orq_imm32 (rbx, 262144);                        //    or rbx, 262144
    __ orq_imm32 (rbx, 1048576);                       //    or rbx, 1048576
    __ orq_imm32 (rbx, 4194304);                       //    or rbx, 4194304
    __ orq_imm32 (rbx, 16777216);                      //    or rbx, 16777216
    __ orq_imm32 (rbx, 67108864);                      //    or rbx, 67108864
    __ orq_imm32 (rbx, 268435456);                     //    or rbx, 268435456
    __ orq_imm32 (rbx, 1073741824);                    //    or rbx, 1073741824
    __ orq_imm32 (r8, 65536);                          //    or r8, 65536
    __ orq_imm32 (r8, 262144);                         //    or r8, 262144
    __ orq_imm32 (r8, 1048576);                        //    or r8, 1048576
    __ orq_imm32 (r8, 4194304);                        //    or r8, 4194304
    __ orq_imm32 (r8, 16777216);                       //    or r8, 16777216
    __ orq_imm32 (r8, 67108864);                       //    or r8, 67108864
    __ orq_imm32 (r8, 268435456);                      //    or r8, 268435456
    __ orq_imm32 (r8, 1073741824);                     //    or r8, 1073741824
    __ orq_imm32 (r9, 65536);                          //    or r9, 65536
    __ orq_imm32 (r9, 262144);                         //    or r9, 262144
    __ orq_imm32 (r9, 1048576);                        //    or r9, 1048576
    __ orq_imm32 (r9, 4194304);                        //    or r9, 4194304
    __ orq_imm32 (r9, 16777216);                       //    or r9, 16777216
    __ orq_imm32 (r9, 67108864);                       //    or r9, 67108864
    __ orq_imm32 (r9, 268435456);                      //    or r9, 268435456
    __ orq_imm32 (r9, 1073741824);                     //    or r9, 1073741824
    __ orq_imm32 (r10, 65536);                         //    or r10, 65536
    __ orq_imm32 (r10, 262144);                        //    or r10, 262144
    __ orq_imm32 (r10, 1048576);                       //    or r10, 1048576
    __ orq_imm32 (r10, 4194304);                       //    or r10, 4194304
    __ orq_imm32 (r10, 16777216);                      //    or r10, 16777216
    __ orq_imm32 (r10, 67108864);                      //    or r10, 67108864
    __ orq_imm32 (r10, 268435456);                     //    or r10, 268435456
    __ orq_imm32 (r10, 1073741824);                    //    or r10, 1073741824
    __ orq_imm32 (r11, 65536);                         //    or r11, 65536
    __ orq_imm32 (r11, 262144);                        //    or r11, 262144
    __ orq_imm32 (r11, 1048576);                       //    or r11, 1048576
    __ orq_imm32 (r11, 4194304);                       //    or r11, 4194304
    __ orq_imm32 (r11, 16777216);                      //    or r11, 16777216
    __ orq_imm32 (r11, 67108864);                      //    or r11, 67108864
    __ orq_imm32 (r11, 268435456);                     //    or r11, 268435456
    __ orq_imm32 (r11, 1073741824);                    //    or r11, 1073741824
    __ orq_imm32 (r12, 65536);                         //    or r12, 65536
    __ orq_imm32 (r12, 262144);                        //    or r12, 262144
    __ orq_imm32 (r12, 1048576);                       //    or r12, 1048576
    __ orq_imm32 (r12, 4194304);                       //    or r12, 4194304
    __ orq_imm32 (r12, 16777216);                      //    or r12, 16777216
    __ orq_imm32 (r12, 67108864);                      //    or r12, 67108864
    __ orq_imm32 (r12, 268435456);                     //    or r12, 268435456
    __ orq_imm32 (r12, 1073741824);                    //    or r12, 1073741824
    __ orq_imm32 (r13, 65536);                         //    or r13, 65536
    __ orq_imm32 (r13, 262144);                        //    or r13, 262144
    __ orq_imm32 (r13, 1048576);                       //    or r13, 1048576
    __ orq_imm32 (r13, 4194304);                       //    or r13, 4194304
    __ orq_imm32 (r13, 16777216);                      //    or r13, 16777216
    __ orq_imm32 (r13, 67108864);                      //    or r13, 67108864
    __ orq_imm32 (r13, 268435456);                     //    or r13, 268435456
    __ orq_imm32 (r13, 1073741824);                    //    or r13, 1073741824
    __ orq_imm32 (r14, 65536);                         //    or r14, 65536
    __ orq_imm32 (r14, 262144);                        //    or r14, 262144
    __ orq_imm32 (r14, 1048576);                       //    or r14, 1048576
    __ orq_imm32 (r14, 4194304);                       //    or r14, 4194304
    __ orq_imm32 (r14, 16777216);                      //    or r14, 16777216
    __ orq_imm32 (r14, 67108864);                      //    or r14, 67108864
    __ orq_imm32 (r14, 268435456);                     //    or r14, 268435456
    __ orq_imm32 (r14, 1073741824);                    //    or r14, 1073741824
    __ orq_imm32 (r15, 65536);                         //    or r15, 65536
    __ orq_imm32 (r15, 262144);                        //    or r15, 262144
    __ orq_imm32 (r15, 1048576);                       //    or r15, 1048576
    __ orq_imm32 (r15, 4194304);                       //    or r15, 4194304
    __ orq_imm32 (r15, 16777216);                      //    or r15, 16777216
    __ orq_imm32 (r15, 67108864);                      //    or r15, 67108864
    __ orq_imm32 (r15, 268435456);                     //    or r15, 268435456
    __ orq_imm32 (r15, 1073741824);                    //    or r15, 1073741824
    __ orq_imm32 (r16, 65536);                         //    or r16, 65536
    __ orq_imm32 (r16, 262144);                        //    or r16, 262144
    __ orq_imm32 (r16, 1048576);                       //    or r16, 1048576
    __ orq_imm32 (r16, 4194304);                       //    or r16, 4194304
    __ orq_imm32 (r16, 16777216);                      //    or r16, 16777216
    __ orq_imm32 (r16, 67108864);                      //    or r16, 67108864
    __ orq_imm32 (r16, 268435456);                     //    or r16, 268435456
    __ orq_imm32 (r16, 1073741824);                    //    or r16, 1073741824
    __ orq_imm32 (r17, 65536);                         //    or r17, 65536
    __ orq_imm32 (r17, 262144);                        //    or r17, 262144
    __ orq_imm32 (r17, 1048576);                       //    or r17, 1048576
    __ orq_imm32 (r17, 4194304);                       //    or r17, 4194304
    __ orq_imm32 (r17, 16777216);                      //    or r17, 16777216
    __ orq_imm32 (r17, 67108864);                      //    or r17, 67108864
    __ orq_imm32 (r17, 268435456);                     //    or r17, 268435456
    __ orq_imm32 (r17, 1073741824);                    //    or r17, 1073741824
    __ orq_imm32 (r18, 65536);                         //    or r18, 65536
    __ orq_imm32 (r18, 262144);                        //    or r18, 262144
    __ orq_imm32 (r18, 1048576);                       //    or r18, 1048576
    __ orq_imm32 (r18, 4194304);                       //    or r18, 4194304
    __ orq_imm32 (r18, 16777216);                      //    or r18, 16777216
    __ orq_imm32 (r18, 67108864);                      //    or r18, 67108864
    __ orq_imm32 (r18, 268435456);                     //    or r18, 268435456
    __ orq_imm32 (r18, 1073741824);                    //    or r18, 1073741824
    __ orq_imm32 (r19, 65536);                         //    or r19, 65536
    __ orq_imm32 (r19, 262144);                        //    or r19, 262144
    __ orq_imm32 (r19, 1048576);                       //    or r19, 1048576
    __ orq_imm32 (r19, 4194304);                       //    or r19, 4194304
    __ orq_imm32 (r19, 16777216);                      //    or r19, 16777216
    __ orq_imm32 (r19, 67108864);                      //    or r19, 67108864
    __ orq_imm32 (r19, 268435456);                     //    or r19, 268435456
    __ orq_imm32 (r19, 1073741824);                    //    or r19, 1073741824
    __ orq_imm32 (r20, 65536);                         //    or r20, 65536
    __ orq_imm32 (r20, 262144);                        //    or r20, 262144
    __ orq_imm32 (r20, 1048576);                       //    or r20, 1048576
    __ orq_imm32 (r20, 4194304);                       //    or r20, 4194304
    __ orq_imm32 (r20, 16777216);                      //    or r20, 16777216
    __ orq_imm32 (r20, 67108864);                      //    or r20, 67108864
    __ orq_imm32 (r20, 268435456);                     //    or r20, 268435456
    __ orq_imm32 (r20, 1073741824);                    //    or r20, 1073741824
    __ orq_imm32 (r21, 65536);                         //    or r21, 65536
    __ orq_imm32 (r21, 262144);                        //    or r21, 262144
    __ orq_imm32 (r21, 1048576);                       //    or r21, 1048576
    __ orq_imm32 (r21, 4194304);                       //    or r21, 4194304
    __ orq_imm32 (r21, 16777216);                      //    or r21, 16777216
    __ orq_imm32 (r21, 67108864);                      //    or r21, 67108864
    __ orq_imm32 (r21, 268435456);                     //    or r21, 268435456
    __ orq_imm32 (r21, 1073741824);                    //    or r21, 1073741824
    __ orq_imm32 (r22, 65536);                         //    or r22, 65536
    __ orq_imm32 (r22, 262144);                        //    or r22, 262144
    __ orq_imm32 (r22, 1048576);                       //    or r22, 1048576
    __ orq_imm32 (r22, 4194304);                       //    or r22, 4194304
    __ orq_imm32 (r22, 16777216);                      //    or r22, 16777216
    __ orq_imm32 (r22, 67108864);                      //    or r22, 67108864
    __ orq_imm32 (r22, 268435456);                     //    or r22, 268435456
    __ orq_imm32 (r22, 1073741824);                    //    or r22, 1073741824
    __ orq_imm32 (r23, 65536);                         //    or r23, 65536
    __ orq_imm32 (r23, 262144);                        //    or r23, 262144
    __ orq_imm32 (r23, 1048576);                       //    or r23, 1048576
    __ orq_imm32 (r23, 4194304);                       //    or r23, 4194304
    __ orq_imm32 (r23, 16777216);                      //    or r23, 16777216
    __ orq_imm32 (r23, 67108864);                      //    or r23, 67108864
    __ orq_imm32 (r23, 268435456);                     //    or r23, 268435456
    __ orq_imm32 (r23, 1073741824);                    //    or r23, 1073741824
    __ orq_imm32 (r24, 65536);                         //    or r24, 65536
    __ orq_imm32 (r24, 262144);                        //    or r24, 262144
    __ orq_imm32 (r24, 1048576);                       //    or r24, 1048576
    __ orq_imm32 (r24, 4194304);                       //    or r24, 4194304
    __ orq_imm32 (r24, 16777216);                      //    or r24, 16777216
    __ orq_imm32 (r24, 67108864);                      //    or r24, 67108864
    __ orq_imm32 (r24, 268435456);                     //    or r24, 268435456
    __ orq_imm32 (r24, 1073741824);                    //    or r24, 1073741824
    __ orq_imm32 (r25, 65536);                         //    or r25, 65536
    __ orq_imm32 (r25, 262144);                        //    or r25, 262144
    __ orq_imm32 (r25, 1048576);                       //    or r25, 1048576
    __ orq_imm32 (r25, 4194304);                       //    or r25, 4194304
    __ orq_imm32 (r25, 16777216);                      //    or r25, 16777216
    __ orq_imm32 (r25, 67108864);                      //    or r25, 67108864
    __ orq_imm32 (r25, 268435456);                     //    or r25, 268435456
    __ orq_imm32 (r25, 1073741824);                    //    or r25, 1073741824
    __ orq_imm32 (r26, 65536);                         //    or r26, 65536
    __ orq_imm32 (r26, 262144);                        //    or r26, 262144
    __ orq_imm32 (r26, 1048576);                       //    or r26, 1048576
    __ orq_imm32 (r26, 4194304);                       //    or r26, 4194304
    __ orq_imm32 (r26, 16777216);                      //    or r26, 16777216
    __ orq_imm32 (r26, 67108864);                      //    or r26, 67108864
    __ orq_imm32 (r26, 268435456);                     //    or r26, 268435456
    __ orq_imm32 (r26, 1073741824);                    //    or r26, 1073741824
    __ orq_imm32 (r27, 65536);                         //    or r27, 65536
    __ orq_imm32 (r27, 262144);                        //    or r27, 262144
    __ orq_imm32 (r27, 1048576);                       //    or r27, 1048576
    __ orq_imm32 (r27, 4194304);                       //    or r27, 4194304
    __ orq_imm32 (r27, 16777216);                      //    or r27, 16777216
    __ orq_imm32 (r27, 67108864);                      //    or r27, 67108864
    __ orq_imm32 (r27, 268435456);                     //    or r27, 268435456
    __ orq_imm32 (r27, 1073741824);                    //    or r27, 1073741824
    __ orq_imm32 (r28, 65536);                         //    or r28, 65536
    __ orq_imm32 (r28, 262144);                        //    or r28, 262144
    __ orq_imm32 (r28, 1048576);                       //    or r28, 1048576
    __ orq_imm32 (r28, 4194304);                       //    or r28, 4194304
    __ orq_imm32 (r28, 16777216);                      //    or r28, 16777216
    __ orq_imm32 (r28, 67108864);                      //    or r28, 67108864
    __ orq_imm32 (r28, 268435456);                     //    or r28, 268435456
    __ orq_imm32 (r28, 1073741824);                    //    or r28, 1073741824
    __ orq_imm32 (r29, 65536);                         //    or r29, 65536
    __ orq_imm32 (r29, 262144);                        //    or r29, 262144
    __ orq_imm32 (r29, 1048576);                       //    or r29, 1048576
    __ orq_imm32 (r29, 4194304);                       //    or r29, 4194304
    __ orq_imm32 (r29, 16777216);                      //    or r29, 16777216
    __ orq_imm32 (r29, 67108864);                      //    or r29, 67108864
    __ orq_imm32 (r29, 268435456);                     //    or r29, 268435456
    __ orq_imm32 (r29, 1073741824);                    //    or r29, 1073741824
    __ orq_imm32 (r30, 65536);                         //    or r30, 65536
    __ orq_imm32 (r30, 262144);                        //    or r30, 262144
    __ orq_imm32 (r30, 1048576);                       //    or r30, 1048576
    __ orq_imm32 (r30, 4194304);                       //    or r30, 4194304
    __ orq_imm32 (r30, 16777216);                      //    or r30, 16777216
    __ orq_imm32 (r30, 67108864);                      //    or r30, 67108864
    __ orq_imm32 (r30, 268435456);                     //    or r30, 268435456
    __ orq_imm32 (r30, 1073741824);                    //    or r30, 1073741824
    __ orq_imm32 (r31, 65536);                         //    or r31, 65536
    __ orq_imm32 (r31, 262144);                        //    or r31, 262144
    __ orq_imm32 (r31, 1048576);                       //    or r31, 1048576
    __ orq_imm32 (r31, 4194304);                       //    or r31, 4194304
    __ orq_imm32 (r31, 16777216);                      //    or r31, 16777216
    __ orq_imm32 (r31, 67108864);                      //    or r31, 67108864
    __ orq_imm32 (r31, 268435456);                     //    or r31, 268435456
    __ orq_imm32 (r31, 1073741824);                    //    or r31, 1073741824
    __ subq_imm32 (rcx, 65536);                        //    sub rcx, 65536
    __ subq_imm32 (rcx, 262144);                       //    sub rcx, 262144
    __ subq_imm32 (rcx, 1048576);                      //    sub rcx, 1048576
    __ subq_imm32 (rcx, 4194304);                      //    sub rcx, 4194304
    __ subq_imm32 (rcx, 16777216);                     //    sub rcx, 16777216
    __ subq_imm32 (rcx, 67108864);                     //    sub rcx, 67108864
    __ subq_imm32 (rcx, 268435456);                    //    sub rcx, 268435456
    __ subq_imm32 (rcx, 1073741824);                   //    sub rcx, 1073741824
    __ subq_imm32 (rdx, 65536);                        //    sub rdx, 65536
    __ subq_imm32 (rdx, 262144);                       //    sub rdx, 262144
    __ subq_imm32 (rdx, 1048576);                      //    sub rdx, 1048576
    __ subq_imm32 (rdx, 4194304);                      //    sub rdx, 4194304
    __ subq_imm32 (rdx, 16777216);                     //    sub rdx, 16777216
    __ subq_imm32 (rdx, 67108864);                     //    sub rdx, 67108864
    __ subq_imm32 (rdx, 268435456);                    //    sub rdx, 268435456
    __ subq_imm32 (rdx, 1073741824);                   //    sub rdx, 1073741824
    __ subq_imm32 (rbx, 65536);                        //    sub rbx, 65536
    __ subq_imm32 (rbx, 262144);                       //    sub rbx, 262144
    __ subq_imm32 (rbx, 1048576);                      //    sub rbx, 1048576
    __ subq_imm32 (rbx, 4194304);                      //    sub rbx, 4194304
    __ subq_imm32 (rbx, 16777216);                     //    sub rbx, 16777216
    __ subq_imm32 (rbx, 67108864);                     //    sub rbx, 67108864
    __ subq_imm32 (rbx, 268435456);                    //    sub rbx, 268435456
    __ subq_imm32 (rbx, 1073741824);                   //    sub rbx, 1073741824
    __ subq_imm32 (r8, 65536);                         //    sub r8, 65536
    __ subq_imm32 (r8, 262144);                        //    sub r8, 262144
    __ subq_imm32 (r8, 1048576);                       //    sub r8, 1048576
    __ subq_imm32 (r8, 4194304);                       //    sub r8, 4194304
    __ subq_imm32 (r8, 16777216);                      //    sub r8, 16777216
    __ subq_imm32 (r8, 67108864);                      //    sub r8, 67108864
    __ subq_imm32 (r8, 268435456);                     //    sub r8, 268435456
    __ subq_imm32 (r8, 1073741824);                    //    sub r8, 1073741824
    __ subq_imm32 (r9, 65536);                         //    sub r9, 65536
    __ subq_imm32 (r9, 262144);                        //    sub r9, 262144
    __ subq_imm32 (r9, 1048576);                       //    sub r9, 1048576
    __ subq_imm32 (r9, 4194304);                       //    sub r9, 4194304
    __ subq_imm32 (r9, 16777216);                      //    sub r9, 16777216
    __ subq_imm32 (r9, 67108864);                      //    sub r9, 67108864
    __ subq_imm32 (r9, 268435456);                     //    sub r9, 268435456
    __ subq_imm32 (r9, 1073741824);                    //    sub r9, 1073741824
    __ subq_imm32 (r10, 65536);                        //    sub r10, 65536
    __ subq_imm32 (r10, 262144);                       //    sub r10, 262144
    __ subq_imm32 (r10, 1048576);                      //    sub r10, 1048576
    __ subq_imm32 (r10, 4194304);                      //    sub r10, 4194304
    __ subq_imm32 (r10, 16777216);                     //    sub r10, 16777216
    __ subq_imm32 (r10, 67108864);                     //    sub r10, 67108864
    __ subq_imm32 (r10, 268435456);                    //    sub r10, 268435456
    __ subq_imm32 (r10, 1073741824);                   //    sub r10, 1073741824
    __ subq_imm32 (r11, 65536);                        //    sub r11, 65536
    __ subq_imm32 (r11, 262144);                       //    sub r11, 262144
    __ subq_imm32 (r11, 1048576);                      //    sub r11, 1048576
    __ subq_imm32 (r11, 4194304);                      //    sub r11, 4194304
    __ subq_imm32 (r11, 16777216);                     //    sub r11, 16777216
    __ subq_imm32 (r11, 67108864);                     //    sub r11, 67108864
    __ subq_imm32 (r11, 268435456);                    //    sub r11, 268435456
    __ subq_imm32 (r11, 1073741824);                   //    sub r11, 1073741824
    __ subq_imm32 (r12, 65536);                        //    sub r12, 65536
    __ subq_imm32 (r12, 262144);                       //    sub r12, 262144
    __ subq_imm32 (r12, 1048576);                      //    sub r12, 1048576
    __ subq_imm32 (r12, 4194304);                      //    sub r12, 4194304
    __ subq_imm32 (r12, 16777216);                     //    sub r12, 16777216
    __ subq_imm32 (r12, 67108864);                     //    sub r12, 67108864
    __ subq_imm32 (r12, 268435456);                    //    sub r12, 268435456
    __ subq_imm32 (r12, 1073741824);                   //    sub r12, 1073741824
    __ subq_imm32 (r13, 65536);                        //    sub r13, 65536
    __ subq_imm32 (r13, 262144);                       //    sub r13, 262144
    __ subq_imm32 (r13, 1048576);                      //    sub r13, 1048576
    __ subq_imm32 (r13, 4194304);                      //    sub r13, 4194304
    __ subq_imm32 (r13, 16777216);                     //    sub r13, 16777216
    __ subq_imm32 (r13, 67108864);                     //    sub r13, 67108864
    __ subq_imm32 (r13, 268435456);                    //    sub r13, 268435456
    __ subq_imm32 (r13, 1073741824);                   //    sub r13, 1073741824
    __ subq_imm32 (r14, 65536);                        //    sub r14, 65536
    __ subq_imm32 (r14, 262144);                       //    sub r14, 262144
    __ subq_imm32 (r14, 1048576);                      //    sub r14, 1048576
    __ subq_imm32 (r14, 4194304);                      //    sub r14, 4194304
    __ subq_imm32 (r14, 16777216);                     //    sub r14, 16777216
    __ subq_imm32 (r14, 67108864);                     //    sub r14, 67108864
    __ subq_imm32 (r14, 268435456);                    //    sub r14, 268435456
    __ subq_imm32 (r14, 1073741824);                   //    sub r14, 1073741824
    __ subq_imm32 (r15, 65536);                        //    sub r15, 65536
    __ subq_imm32 (r15, 262144);                       //    sub r15, 262144
    __ subq_imm32 (r15, 1048576);                      //    sub r15, 1048576
    __ subq_imm32 (r15, 4194304);                      //    sub r15, 4194304
    __ subq_imm32 (r15, 16777216);                     //    sub r15, 16777216
    __ subq_imm32 (r15, 67108864);                     //    sub r15, 67108864
    __ subq_imm32 (r15, 268435456);                    //    sub r15, 268435456
    __ subq_imm32 (r15, 1073741824);                   //    sub r15, 1073741824
    __ subq_imm32 (r16, 65536);                        //    sub r16, 65536
    __ subq_imm32 (r16, 262144);                       //    sub r16, 262144
    __ subq_imm32 (r16, 1048576);                      //    sub r16, 1048576
    __ subq_imm32 (r16, 4194304);                      //    sub r16, 4194304
    __ subq_imm32 (r16, 16777216);                     //    sub r16, 16777216
    __ subq_imm32 (r16, 67108864);                     //    sub r16, 67108864
    __ subq_imm32 (r16, 268435456);                    //    sub r16, 268435456
    __ subq_imm32 (r16, 1073741824);                   //    sub r16, 1073741824
    __ subq_imm32 (r17, 65536);                        //    sub r17, 65536
    __ subq_imm32 (r17, 262144);                       //    sub r17, 262144
    __ subq_imm32 (r17, 1048576);                      //    sub r17, 1048576
    __ subq_imm32 (r17, 4194304);                      //    sub r17, 4194304
    __ subq_imm32 (r17, 16777216);                     //    sub r17, 16777216
    __ subq_imm32 (r17, 67108864);                     //    sub r17, 67108864
    __ subq_imm32 (r17, 268435456);                    //    sub r17, 268435456
    __ subq_imm32 (r17, 1073741824);                   //    sub r17, 1073741824
    __ subq_imm32 (r18, 65536);                        //    sub r18, 65536
    __ subq_imm32 (r18, 262144);                       //    sub r18, 262144
    __ subq_imm32 (r18, 1048576);                      //    sub r18, 1048576
    __ subq_imm32 (r18, 4194304);                      //    sub r18, 4194304
    __ subq_imm32 (r18, 16777216);                     //    sub r18, 16777216
    __ subq_imm32 (r18, 67108864);                     //    sub r18, 67108864
    __ subq_imm32 (r18, 268435456);                    //    sub r18, 268435456
    __ subq_imm32 (r18, 1073741824);                   //    sub r18, 1073741824
    __ subq_imm32 (r19, 65536);                        //    sub r19, 65536
    __ subq_imm32 (r19, 262144);                       //    sub r19, 262144
    __ subq_imm32 (r19, 1048576);                      //    sub r19, 1048576
    __ subq_imm32 (r19, 4194304);                      //    sub r19, 4194304
    __ subq_imm32 (r19, 16777216);                     //    sub r19, 16777216
    __ subq_imm32 (r19, 67108864);                     //    sub r19, 67108864
    __ subq_imm32 (r19, 268435456);                    //    sub r19, 268435456
    __ subq_imm32 (r19, 1073741824);                   //    sub r19, 1073741824
    __ subq_imm32 (r20, 65536);                        //    sub r20, 65536
    __ subq_imm32 (r20, 262144);                       //    sub r20, 262144
    __ subq_imm32 (r20, 1048576);                      //    sub r20, 1048576
    __ subq_imm32 (r20, 4194304);                      //    sub r20, 4194304
    __ subq_imm32 (r20, 16777216);                     //    sub r20, 16777216
    __ subq_imm32 (r20, 67108864);                     //    sub r20, 67108864
    __ subq_imm32 (r20, 268435456);                    //    sub r20, 268435456
    __ subq_imm32 (r20, 1073741824);                   //    sub r20, 1073741824
    __ subq_imm32 (r21, 65536);                        //    sub r21, 65536
    __ subq_imm32 (r21, 262144);                       //    sub r21, 262144
    __ subq_imm32 (r21, 1048576);                      //    sub r21, 1048576
    __ subq_imm32 (r21, 4194304);                      //    sub r21, 4194304
    __ subq_imm32 (r21, 16777216);                     //    sub r21, 16777216
    __ subq_imm32 (r21, 67108864);                     //    sub r21, 67108864
    __ subq_imm32 (r21, 268435456);                    //    sub r21, 268435456
    __ subq_imm32 (r21, 1073741824);                   //    sub r21, 1073741824
    __ subq_imm32 (r22, 65536);                        //    sub r22, 65536
    __ subq_imm32 (r22, 262144);                       //    sub r22, 262144
    __ subq_imm32 (r22, 1048576);                      //    sub r22, 1048576
    __ subq_imm32 (r22, 4194304);                      //    sub r22, 4194304
    __ subq_imm32 (r22, 16777216);                     //    sub r22, 16777216
    __ subq_imm32 (r22, 67108864);                     //    sub r22, 67108864
    __ subq_imm32 (r22, 268435456);                    //    sub r22, 268435456
    __ subq_imm32 (r22, 1073741824);                   //    sub r22, 1073741824
    __ subq_imm32 (r23, 65536);                        //    sub r23, 65536
    __ subq_imm32 (r23, 262144);                       //    sub r23, 262144
    __ subq_imm32 (r23, 1048576);                      //    sub r23, 1048576
    __ subq_imm32 (r23, 4194304);                      //    sub r23, 4194304
    __ subq_imm32 (r23, 16777216);                     //    sub r23, 16777216
    __ subq_imm32 (r23, 67108864);                     //    sub r23, 67108864
    __ subq_imm32 (r23, 268435456);                    //    sub r23, 268435456
    __ subq_imm32 (r23, 1073741824);                   //    sub r23, 1073741824
    __ subq_imm32 (r24, 65536);                        //    sub r24, 65536
    __ subq_imm32 (r24, 262144);                       //    sub r24, 262144
    __ subq_imm32 (r24, 1048576);                      //    sub r24, 1048576
    __ subq_imm32 (r24, 4194304);                      //    sub r24, 4194304
    __ subq_imm32 (r24, 16777216);                     //    sub r24, 16777216
    __ subq_imm32 (r24, 67108864);                     //    sub r24, 67108864
    __ subq_imm32 (r24, 268435456);                    //    sub r24, 268435456
    __ subq_imm32 (r24, 1073741824);                   //    sub r24, 1073741824
    __ subq_imm32 (r25, 65536);                        //    sub r25, 65536
    __ subq_imm32 (r25, 262144);                       //    sub r25, 262144
    __ subq_imm32 (r25, 1048576);                      //    sub r25, 1048576
    __ subq_imm32 (r25, 4194304);                      //    sub r25, 4194304
    __ subq_imm32 (r25, 16777216);                     //    sub r25, 16777216
    __ subq_imm32 (r25, 67108864);                     //    sub r25, 67108864
    __ subq_imm32 (r25, 268435456);                    //    sub r25, 268435456
    __ subq_imm32 (r25, 1073741824);                   //    sub r25, 1073741824
    __ subq_imm32 (r26, 65536);                        //    sub r26, 65536
    __ subq_imm32 (r26, 262144);                       //    sub r26, 262144
    __ subq_imm32 (r26, 1048576);                      //    sub r26, 1048576
    __ subq_imm32 (r26, 4194304);                      //    sub r26, 4194304
    __ subq_imm32 (r26, 16777216);                     //    sub r26, 16777216
    __ subq_imm32 (r26, 67108864);                     //    sub r26, 67108864
    __ subq_imm32 (r26, 268435456);                    //    sub r26, 268435456
    __ subq_imm32 (r26, 1073741824);                   //    sub r26, 1073741824
    __ subq_imm32 (r27, 65536);                        //    sub r27, 65536
    __ subq_imm32 (r27, 262144);                       //    sub r27, 262144
    __ subq_imm32 (r27, 1048576);                      //    sub r27, 1048576
    __ subq_imm32 (r27, 4194304);                      //    sub r27, 4194304
    __ subq_imm32 (r27, 16777216);                     //    sub r27, 16777216
    __ subq_imm32 (r27, 67108864);                     //    sub r27, 67108864
    __ subq_imm32 (r27, 268435456);                    //    sub r27, 268435456
    __ subq_imm32 (r27, 1073741824);                   //    sub r27, 1073741824
    __ subq_imm32 (r28, 65536);                        //    sub r28, 65536
    __ subq_imm32 (r28, 262144);                       //    sub r28, 262144
    __ subq_imm32 (r28, 1048576);                      //    sub r28, 1048576
    __ subq_imm32 (r28, 4194304);                      //    sub r28, 4194304
    __ subq_imm32 (r28, 16777216);                     //    sub r28, 16777216
    __ subq_imm32 (r28, 67108864);                     //    sub r28, 67108864
    __ subq_imm32 (r28, 268435456);                    //    sub r28, 268435456
    __ subq_imm32 (r28, 1073741824);                   //    sub r28, 1073741824
    __ subq_imm32 (r29, 65536);                        //    sub r29, 65536
    __ subq_imm32 (r29, 262144);                       //    sub r29, 262144
    __ subq_imm32 (r29, 1048576);                      //    sub r29, 1048576
    __ subq_imm32 (r29, 4194304);                      //    sub r29, 4194304
    __ subq_imm32 (r29, 16777216);                     //    sub r29, 16777216
    __ subq_imm32 (r29, 67108864);                     //    sub r29, 67108864
    __ subq_imm32 (r29, 268435456);                    //    sub r29, 268435456
    __ subq_imm32 (r29, 1073741824);                   //    sub r29, 1073741824
    __ subq_imm32 (r30, 65536);                        //    sub r30, 65536
    __ subq_imm32 (r30, 262144);                       //    sub r30, 262144
    __ subq_imm32 (r30, 1048576);                      //    sub r30, 1048576
    __ subq_imm32 (r30, 4194304);                      //    sub r30, 4194304
    __ subq_imm32 (r30, 16777216);                     //    sub r30, 16777216
    __ subq_imm32 (r30, 67108864);                     //    sub r30, 67108864
    __ subq_imm32 (r30, 268435456);                    //    sub r30, 268435456
    __ subq_imm32 (r30, 1073741824);                   //    sub r30, 1073741824
    __ subq_imm32 (r31, 65536);                        //    sub r31, 65536
    __ subq_imm32 (r31, 262144);                       //    sub r31, 262144
    __ subq_imm32 (r31, 1048576);                      //    sub r31, 1048576
    __ subq_imm32 (r31, 4194304);                      //    sub r31, 4194304
    __ subq_imm32 (r31, 16777216);                     //    sub r31, 16777216
    __ subq_imm32 (r31, 67108864);                     //    sub r31, 67108864
    __ subq_imm32 (r31, 268435456);                    //    sub r31, 268435456
    __ subq_imm32 (r31, 1073741824);                   //    sub r31, 1073741824
    __ pop2 (rdx, rcx);                                //    {load}pop2 rcx, rdx
    __ pop2 (rbx, rdx);                                //    {load}pop2 rdx, rbx
    __ pop2 (r8, rbx);                                 //    {load}pop2 rbx, r8
    __ pop2 (r9, r8);                                  //    {load}pop2 r8, r9
    __ pop2 (r10, r9);                                 //    {load}pop2 r9, r10
    __ pop2 (r11, r10);                                //    {load}pop2 r10, r11
    __ pop2 (r12, r11);                                //    {load}pop2 r11, r12
    __ pop2 (r13, r12);                                //    {load}pop2 r12, r13
    __ pop2 (r14, r13);                                //    {load}pop2 r13, r14
    __ pop2 (r15, r14);                                //    {load}pop2 r14, r15
    __ pop2 (r16, r15);                                //    {load}pop2 r15, r16
    __ pop2 (r17, r16);                                //    {load}pop2 r16, r17
    __ pop2 (r18, r17);                                //    {load}pop2 r17, r18
    __ pop2 (r19, r18);                                //    {load}pop2 r18, r19
    __ pop2 (r20, r19);                                //    {load}pop2 r19, r20
    __ pop2 (r21, r20);                                //    {load}pop2 r20, r21
    __ pop2 (r22, r21);                                //    {load}pop2 r21, r22
    __ pop2 (r23, r22);                                //    {load}pop2 r22, r23
    __ pop2 (r24, r23);                                //    {load}pop2 r23, r24
    __ pop2 (r25, r24);                                //    {load}pop2 r24, r25
    __ pop2 (r26, r25);                                //    {load}pop2 r25, r26
    __ pop2 (r27, r26);                                //    {load}pop2 r26, r27
    __ pop2 (r28, r27);                                //    {load}pop2 r27, r28
    __ pop2 (r29, r28);                                //    {load}pop2 r28, r29
    __ pop2 (r30, r29);                                //    {load}pop2 r29, r30
    __ pop2 (r31, r30);                                //    {load}pop2 r30, r31
    __ pop2 (rcx, r31);                                //    {load}pop2 r31, rcx
    __ pop2p (rdx, rcx);                               //    {load}pop2p rcx, rdx
    __ pop2p (rbx, rdx);                               //    {load}pop2p rdx, rbx
    __ pop2p (r8, rbx);                                //    {load}pop2p rbx, r8
    __ pop2p (r9, r8);                                 //    {load}pop2p r8, r9
    __ pop2p (r10, r9);                                //    {load}pop2p r9, r10
    __ pop2p (r11, r10);                               //    {load}pop2p r10, r11
    __ pop2p (r12, r11);                               //    {load}pop2p r11, r12
    __ pop2p (r13, r12);                               //    {load}pop2p r12, r13
    __ pop2p (r14, r13);                               //    {load}pop2p r13, r14
    __ pop2p (r15, r14);                               //    {load}pop2p r14, r15
    __ pop2p (r16, r15);                               //    {load}pop2p r15, r16
    __ pop2p (r17, r16);                               //    {load}pop2p r16, r17
    __ pop2p (r18, r17);                               //    {load}pop2p r17, r18
    __ pop2p (r19, r18);                               //    {load}pop2p r18, r19
    __ pop2p (r20, r19);                               //    {load}pop2p r19, r20
    __ pop2p (r21, r20);                               //    {load}pop2p r20, r21
    __ pop2p (r22, r21);                               //    {load}pop2p r21, r22
    __ pop2p (r23, r22);                               //    {load}pop2p r22, r23
    __ pop2p (r24, r23);                               //    {load}pop2p r23, r24
    __ pop2p (r25, r24);                               //    {load}pop2p r24, r25
    __ pop2p (r26, r25);                               //    {load}pop2p r25, r26
    __ pop2p (r27, r26);                               //    {load}pop2p r26, r27
    __ pop2p (r28, r27);                               //    {load}pop2p r27, r28
    __ pop2p (r29, r28);                               //    {load}pop2p r28, r29
    __ pop2p (r30, r29);                               //    {load}pop2p r29, r30
    __ pop2p (r31, r30);                               //    {load}pop2p r30, r31
    __ pop2p (rcx, r31);                               //    {load}pop2p r31, rcx
    __ push2 (rdx, rcx);                               //    {load}push2 rcx, rdx
    __ push2 (rbx, rdx);                               //    {load}push2 rdx, rbx
    __ push2 (r8, rbx);                                //    {load}push2 rbx, r8
    __ push2 (r9, r8);                                 //    {load}push2 r8, r9
    __ push2 (r10, r9);                                //    {load}push2 r9, r10
    __ push2 (r11, r10);                               //    {load}push2 r10, r11
    __ push2 (r12, r11);                               //    {load}push2 r11, r12
    __ push2 (r13, r12);                               //    {load}push2 r12, r13
    __ push2 (r14, r13);                               //    {load}push2 r13, r14
    __ push2 (r15, r14);                               //    {load}push2 r14, r15
    __ push2 (r16, r15);                               //    {load}push2 r15, r16
    __ push2 (r17, r16);                               //    {load}push2 r16, r17
    __ push2 (r18, r17);                               //    {load}push2 r17, r18
    __ push2 (r19, r18);                               //    {load}push2 r18, r19
    __ push2 (r20, r19);                               //    {load}push2 r19, r20
    __ push2 (r21, r20);                               //    {load}push2 r20, r21
    __ push2 (r22, r21);                               //    {load}push2 r21, r22
    __ push2 (r23, r22);                               //    {load}push2 r22, r23
    __ push2 (r24, r23);                               //    {load}push2 r23, r24
    __ push2 (r25, r24);                               //    {load}push2 r24, r25
    __ push2 (r26, r25);                               //    {load}push2 r25, r26
    __ push2 (r27, r26);                               //    {load}push2 r26, r27
    __ push2 (r28, r27);                               //    {load}push2 r27, r28
    __ push2 (r29, r28);                               //    {load}push2 r28, r29
    __ push2 (r30, r29);                               //    {load}push2 r29, r30
    __ push2 (r31, r30);                               //    {load}push2 r30, r31
    __ push2 (rcx, r31);                               //    {load}push2 r31, rcx
    __ push2p (rdx, rcx);                              //    {load}push2p rcx, rdx
    __ push2p (rbx, rdx);                              //    {load}push2p rdx, rbx
    __ push2p (r8, rbx);                               //    {load}push2p rbx, r8
    __ push2p (r9, r8);                                //    {load}push2p r8, r9
    __ push2p (r10, r9);                               //    {load}push2p r9, r10
    __ push2p (r11, r10);                              //    {load}push2p r10, r11
    __ push2p (r12, r11);                              //    {load}push2p r11, r12
    __ push2p (r13, r12);                              //    {load}push2p r12, r13
    __ push2p (r14, r13);                              //    {load}push2p r13, r14
    __ push2p (r15, r14);                              //    {load}push2p r14, r15
    __ push2p (r16, r15);                              //    {load}push2p r15, r16
    __ push2p (r17, r16);                              //    {load}push2p r16, r17
    __ push2p (r18, r17);                              //    {load}push2p r17, r18
    __ push2p (r19, r18);                              //    {load}push2p r18, r19
    __ push2p (r20, r19);                              //    {load}push2p r19, r20
    __ push2p (r21, r20);                              //    {load}push2p r20, r21
    __ push2p (r22, r21);                              //    {load}push2p r21, r22
    __ push2p (r23, r22);                              //    {load}push2p r22, r23
    __ push2p (r24, r23);                              //    {load}push2p r23, r24
    __ push2p (r25, r24);                              //    {load}push2p r24, r25
    __ push2p (r26, r25);                              //    {load}push2p r25, r26
    __ push2p (r27, r26);                              //    {load}push2p r26, r27
    __ push2p (r28, r27);                              //    {load}push2p r27, r28
    __ push2p (r29, r28);                              //    {load}push2p r28, r29
    __ push2p (r30, r29);                              //    {load}push2p r29, r30
    __ push2p (r31, r30);                              //    {load}push2p r30, r31
    __ push2p (rcx, r31);                              //    {load}push2p r31, rcx
#endif // _LP64

  static const uint8_t insns[] =
  {
    0x0f, 0xa5, 0xd1,
    0x0f, 0xa5, 0xda,
#ifdef _LP64
    0x44, 0x0f, 0xa5, 0xc3,
    0x45, 0x0f, 0xa5, 0xc8,
    0x45, 0x0f, 0xa5, 0xd1,
    0x45, 0x0f, 0xa5, 0xda,
    0x45, 0x0f, 0xa5, 0xe3,
    0x45, 0x0f, 0xa5, 0xec,
    0x45, 0x0f, 0xa5, 0xf5,
    0x45, 0x0f, 0xa5, 0xfe,
    0xd5, 0xc1, 0xa5, 0xc7,
    0xd5, 0xd0, 0xa5, 0xc8,
    0xd5, 0xd0, 0xa5, 0xd1,
    0xd5, 0xd0, 0xa5, 0xda,
    0xd5, 0xd0, 0xa5, 0xe3,
    0xd5, 0xd0, 0xa5, 0xec,
    0xd5, 0xd0, 0xa5, 0xf5,
    0xd5, 0xd0, 0xa5, 0xfe,
    0xd5, 0xd4, 0xa5, 0xc7,
    0xd5, 0xd5, 0xa5, 0xc8,
    0xd5, 0xd5, 0xa5, 0xd1,
    0xd5, 0xd5, 0xa5, 0xda,
    0xd5, 0xd5, 0xa5, 0xe3,
    0xd5, 0xd5, 0xa5, 0xec,
    0xd5, 0xd5, 0xa5, 0xf5,
    0xd5, 0xd5, 0xa5, 0xfe,
    0xd5, 0x91, 0xa5, 0xcf,
#endif // _LP64
    0x0f, 0xad, 0xd1,
    0x0f, 0xad, 0xda,
#ifdef _LP64
    0x44, 0x0f, 0xad, 0xc3,
    0x45, 0x0f, 0xad, 0xc8,
    0x45, 0x0f, 0xad, 0xd1,
    0x45, 0x0f, 0xad, 0xda,
    0x45, 0x0f, 0xad, 0xe3,
    0x45, 0x0f, 0xad, 0xec,
    0x45, 0x0f, 0xad, 0xf5,
    0x45, 0x0f, 0xad, 0xfe,
    0xd5, 0xc1, 0xad, 0xc7,
    0xd5, 0xd0, 0xad, 0xc8,
    0xd5, 0xd0, 0xad, 0xd1,
    0xd5, 0xd0, 0xad, 0xda,
    0xd5, 0xd0, 0xad, 0xe3,
    0xd5, 0xd0, 0xad, 0xec,
    0xd5, 0xd0, 0xad, 0xf5,
    0xd5, 0xd0, 0xad, 0xfe,
    0xd5, 0xd4, 0xad, 0xc7,
    0xd5, 0xd5, 0xad, 0xc8,
    0xd5, 0xd5, 0xad, 0xd1,
    0xd5, 0xd5, 0xad, 0xda,
    0xd5, 0xd5, 0xad, 0xe3,
    0xd5, 0xd5, 0xad, 0xec,
    0xd5, 0xd5, 0xad, 0xf5,
    0xd5, 0xd5, 0xad, 0xfe,
    0xd5, 0x91, 0xad, 0xcf,
#endif // _LP64
    0x13, 0xca,
    0x13, 0xd3,
#ifdef _LP64
    0x41, 0x13, 0xd8,
    0x45, 0x13, 0xc1,
    0x45, 0x13, 0xca,
    0x45, 0x13, 0xd3,
    0x45, 0x13, 0xdc,
    0x45, 0x13, 0xe5,
    0x45, 0x13, 0xee,
    0x45, 0x13, 0xf7,
    0xd5, 0x14, 0x13, 0xf8,
    0xd5, 0x50, 0x13, 0xc1,
    0xd5, 0x50, 0x13, 0xca,
    0xd5, 0x50, 0x13, 0xd3,
    0xd5, 0x50, 0x13, 0xdc,
    0xd5, 0x50, 0x13, 0xe5,
    0xd5, 0x50, 0x13, 0xee,
    0xd5, 0x50, 0x13, 0xf7,
    0xd5, 0x51, 0x13, 0xf8,
    0xd5, 0x55, 0x13, 0xc1,
    0xd5, 0x55, 0x13, 0xca,
    0xd5, 0x55, 0x13, 0xd3,
    0xd5, 0x55, 0x13, 0xdc,
    0xd5, 0x55, 0x13, 0xe5,
    0xd5, 0x55, 0x13, 0xee,
    0xd5, 0x55, 0x13, 0xf7,
    0xd5, 0x44, 0x13, 0xf9,
#endif // _LP64
    0x0f, 0xaf, 0xca,
    0x0f, 0xaf, 0xd3,
#ifdef _LP64
    0x41, 0x0f, 0xaf, 0xd8,
    0x45, 0x0f, 0xaf, 0xc1,
    0x45, 0x0f, 0xaf, 0xca,
    0x45, 0x0f, 0xaf, 0xd3,
    0x45, 0x0f, 0xaf, 0xdc,
    0x45, 0x0f, 0xaf, 0xe5,
    0x45, 0x0f, 0xaf, 0xee,
    0x45, 0x0f, 0xaf, 0xf7,
    0xd5, 0x94, 0xaf, 0xf8,
    0xd5, 0xd0, 0xaf, 0xc1,
    0xd5, 0xd0, 0xaf, 0xca,
    0xd5, 0xd0, 0xaf, 0xd3,
    0xd5, 0xd0, 0xaf, 0xdc,
    0xd5, 0xd0, 0xaf, 0xe5,
    0xd5, 0xd0, 0xaf, 0xee,
    0xd5, 0xd0, 0xaf, 0xf7,
    0xd5, 0xd1, 0xaf, 0xf8,
    0xd5, 0xd5, 0xaf, 0xc1,
    0xd5, 0xd5, 0xaf, 0xca,
    0xd5, 0xd5, 0xaf, 0xd3,
    0xd5, 0xd5, 0xaf, 0xdc,
    0xd5, 0xd5, 0xaf, 0xe5,
    0xd5, 0xd5, 0xaf, 0xee,
    0xd5, 0xd5, 0xaf, 0xf7,
    0xd5, 0xc4, 0xaf, 0xf9,
#endif // _LP64
    0xf3, 0x0f, 0xb8, 0xca,
    0xf3, 0x0f, 0xb8, 0xd3,
#ifdef _LP64
    0xf3, 0x41, 0x0f, 0xb8, 0xd8,
    0xf3, 0x45, 0x0f, 0xb8, 0xc1,
    0xf3, 0x45, 0x0f, 0xb8, 0xca,
    0xf3, 0x45, 0x0f, 0xb8, 0xd3,
    0xf3, 0x45, 0x0f, 0xb8, 0xdc,
    0xf3, 0x45, 0x0f, 0xb8, 0xe5,
    0xf3, 0x45, 0x0f, 0xb8, 0xee,
    0xf3, 0x45, 0x0f, 0xb8, 0xf7,
    0xf3, 0xd5, 0x94, 0xb8, 0xf8,
    0xf3, 0xd5, 0xd0, 0xb8, 0xc1,
    0xf3, 0xd5, 0xd0, 0xb8, 0xca,
    0xf3, 0xd5, 0xd0, 0xb8, 0xd3,
    0xf3, 0xd5, 0xd0, 0xb8, 0xdc,
    0xf3, 0xd5, 0xd0, 0xb8, 0xe5,
    0xf3, 0xd5, 0xd0, 0xb8, 0xee,
    0xf3, 0xd5, 0xd0, 0xb8, 0xf7,
    0xf3, 0xd5, 0xd1, 0xb8, 0xf8,
    0xf3, 0xd5, 0xd5, 0xb8, 0xc1,
    0xf3, 0xd5, 0xd5, 0xb8, 0xca,
    0xf3, 0xd5, 0xd5, 0xb8, 0xd3,
    0xf3, 0xd5, 0xd5, 0xb8, 0xdc,
    0xf3, 0xd5, 0xd5, 0xb8, 0xe5,
    0xf3, 0xd5, 0xd5, 0xb8, 0xee,
    0xf3, 0xd5, 0xd5, 0xb8, 0xf7,
    0xf3, 0xd5, 0xc4, 0xb8, 0xf9,
#endif // _LP64
    0x1b, 0xca,
    0x1b, 0xd3,
#ifdef _LP64
    0x41, 0x1b, 0xd8,
    0x45, 0x1b, 0xc1,
    0x45, 0x1b, 0xca,
    0x45, 0x1b, 0xd3,
    0x45, 0x1b, 0xdc,
    0x45, 0x1b, 0xe5,
    0x45, 0x1b, 0xee,
    0x45, 0x1b, 0xf7,
    0xd5, 0x14, 0x1b, 0xf8,
    0xd5, 0x50, 0x1b, 0xc1,
    0xd5, 0x50, 0x1b, 0xca,
    0xd5, 0x50, 0x1b, 0xd3,
    0xd5, 0x50, 0x1b, 0xdc,
    0xd5, 0x50, 0x1b, 0xe5,
    0xd5, 0x50, 0x1b, 0xee,
    0xd5, 0x50, 0x1b, 0xf7,
    0xd5, 0x51, 0x1b, 0xf8,
    0xd5, 0x55, 0x1b, 0xc1,
    0xd5, 0x55, 0x1b, 0xca,
    0xd5, 0x55, 0x1b, 0xd3,
    0xd5, 0x55, 0x1b, 0xdc,
    0xd5, 0x55, 0x1b, 0xe5,
    0xd5, 0x55, 0x1b, 0xee,
    0xd5, 0x55, 0x1b, 0xf7,
    0xd5, 0x44, 0x1b, 0xf9,
#endif // _LP64
    0x2b, 0xca,
    0x2b, 0xd3,
#ifdef _LP64
    0x41, 0x2b, 0xd8,
    0x45, 0x2b, 0xc1,
    0x45, 0x2b, 0xca,
    0x45, 0x2b, 0xd3,
    0x45, 0x2b, 0xdc,
    0x45, 0x2b, 0xe5,
    0x45, 0x2b, 0xee,
    0x45, 0x2b, 0xf7,
    0xd5, 0x14, 0x2b, 0xf8,
    0xd5, 0x50, 0x2b, 0xc1,
    0xd5, 0x50, 0x2b, 0xca,
    0xd5, 0x50, 0x2b, 0xd3,
    0xd5, 0x50, 0x2b, 0xdc,
    0xd5, 0x50, 0x2b, 0xe5,
    0xd5, 0x50, 0x2b, 0xee,
    0xd5, 0x50, 0x2b, 0xf7,
    0xd5, 0x51, 0x2b, 0xf8,
    0xd5, 0x55, 0x2b, 0xc1,
    0xd5, 0x55, 0x2b, 0xca,
    0xd5, 0x55, 0x2b, 0xd3,
    0xd5, 0x55, 0x2b, 0xdc,
    0xd5, 0x55, 0x2b, 0xe5,
    0xd5, 0x55, 0x2b, 0xee,
    0xd5, 0x55, 0x2b, 0xf7,
    0xd5, 0x44, 0x2b, 0xf9,
#endif // _LP64
    0xf3, 0x0f, 0xbc, 0xca,
    0xf3, 0x0f, 0xbc, 0xd3,
#ifdef _LP64
    0xf3, 0x41, 0x0f, 0xbc, 0xd8,
    0xf3, 0x45, 0x0f, 0xbc, 0xc1,
    0xf3, 0x45, 0x0f, 0xbc, 0xca,
    0xf3, 0x45, 0x0f, 0xbc, 0xd3,
    0xf3, 0x45, 0x0f, 0xbc, 0xdc,
    0xf3, 0x45, 0x0f, 0xbc, 0xe5,
    0xf3, 0x45, 0x0f, 0xbc, 0xee,
    0xf3, 0x45, 0x0f, 0xbc, 0xf7,
    0xf3, 0xd5, 0x94, 0xbc, 0xf8,
    0xf3, 0xd5, 0xd0, 0xbc, 0xc1,
    0xf3, 0xd5, 0xd0, 0xbc, 0xca,
    0xf3, 0xd5, 0xd0, 0xbc, 0xd3,
    0xf3, 0xd5, 0xd0, 0xbc, 0xdc,
    0xf3, 0xd5, 0xd0, 0xbc, 0xe5,
    0xf3, 0xd5, 0xd0, 0xbc, 0xee,
    0xf3, 0xd5, 0xd0, 0xbc, 0xf7,
    0xf3, 0xd5, 0xd1, 0xbc, 0xf8,
    0xf3, 0xd5, 0xd5, 0xbc, 0xc1,
    0xf3, 0xd5, 0xd5, 0xbc, 0xca,
    0xf3, 0xd5, 0xd5, 0xbc, 0xd3,
    0xf3, 0xd5, 0xd5, 0xbc, 0xdc,
    0xf3, 0xd5, 0xd5, 0xbc, 0xe5,
    0xf3, 0xd5, 0xd5, 0xbc, 0xee,
    0xf3, 0xd5, 0xd5, 0xbc, 0xf7,
    0xf3, 0xd5, 0xc4, 0xbc, 0xf9,
#endif // _LP64
    0xf3, 0x0f, 0xbd, 0xca,
    0xf3, 0x0f, 0xbd, 0xd3,
#ifdef _LP64
    0xf3, 0x41, 0x0f, 0xbd, 0xd8,
    0xf3, 0x45, 0x0f, 0xbd, 0xc1,
    0xf3, 0x45, 0x0f, 0xbd, 0xca,
    0xf3, 0x45, 0x0f, 0xbd, 0xd3,
    0xf3, 0x45, 0x0f, 0xbd, 0xdc,
    0xf3, 0x45, 0x0f, 0xbd, 0xe5,
    0xf3, 0x45, 0x0f, 0xbd, 0xee,
    0xf3, 0x45, 0x0f, 0xbd, 0xf7,
    0xf3, 0xd5, 0x94, 0xbd, 0xf8,
    0xf3, 0xd5, 0xd0, 0xbd, 0xc1,
    0xf3, 0xd5, 0xd0, 0xbd, 0xca,
    0xf3, 0xd5, 0xd0, 0xbd, 0xd3,
    0xf3, 0xd5, 0xd0, 0xbd, 0xdc,
    0xf3, 0xd5, 0xd0, 0xbd, 0xe5,
    0xf3, 0xd5, 0xd0, 0xbd, 0xee,
    0xf3, 0xd5, 0xd0, 0xbd, 0xf7,
    0xf3, 0xd5, 0xd1, 0xbd, 0xf8,
    0xf3, 0xd5, 0xd5, 0xbd, 0xc1,
    0xf3, 0xd5, 0xd5, 0xbd, 0xca,
    0xf3, 0xd5, 0xd5, 0xbd, 0xd3,
    0xf3, 0xd5, 0xd5, 0xbd, 0xdc,
    0xf3, 0xd5, 0xd5, 0xbd, 0xe5,
    0xf3, 0xd5, 0xd5, 0xbd, 0xee,
    0xf3, 0xd5, 0xd5, 0xbd, 0xf7,
    0xf3, 0xd5, 0xc4, 0xbd, 0xf9,
#endif // _LP64
    0x03, 0xca,
    0x03, 0xd3,
#ifdef _LP64
    0x41, 0x03, 0xd8,
    0x45, 0x03, 0xc1,
    0x45, 0x03, 0xca,
    0x45, 0x03, 0xd3,
    0x45, 0x03, 0xdc,
    0x45, 0x03, 0xe5,
    0x45, 0x03, 0xee,
    0x45, 0x03, 0xf7,
    0xd5, 0x14, 0x03, 0xf8,
    0xd5, 0x50, 0x03, 0xc1,
    0xd5, 0x50, 0x03, 0xca,
    0xd5, 0x50, 0x03, 0xd3,
    0xd5, 0x50, 0x03, 0xdc,
    0xd5, 0x50, 0x03, 0xe5,
    0xd5, 0x50, 0x03, 0xee,
    0xd5, 0x50, 0x03, 0xf7,
    0xd5, 0x51, 0x03, 0xf8,
    0xd5, 0x55, 0x03, 0xc1,
    0xd5, 0x55, 0x03, 0xca,
    0xd5, 0x55, 0x03, 0xd3,
    0xd5, 0x55, 0x03, 0xdc,
    0xd5, 0x55, 0x03, 0xe5,
    0xd5, 0x55, 0x03, 0xee,
    0xd5, 0x55, 0x03, 0xf7,
    0xd5, 0x44, 0x03, 0xf9,
#endif // _LP64
    0x23, 0xca,
    0x23, 0xd3,
#ifdef _LP64
    0x41, 0x23, 0xd8,
    0x45, 0x23, 0xc1,
    0x45, 0x23, 0xca,
    0x45, 0x23, 0xd3,
    0x45, 0x23, 0xdc,
    0x45, 0x23, 0xe5,
    0x45, 0x23, 0xee,
    0x45, 0x23, 0xf7,
    0xd5, 0x14, 0x23, 0xf8,
    0xd5, 0x50, 0x23, 0xc1,
    0xd5, 0x50, 0x23, 0xca,
    0xd5, 0x50, 0x23, 0xd3,
    0xd5, 0x50, 0x23, 0xdc,
    0xd5, 0x50, 0x23, 0xe5,
    0xd5, 0x50, 0x23, 0xee,
    0xd5, 0x50, 0x23, 0xf7,
    0xd5, 0x51, 0x23, 0xf8,
    0xd5, 0x55, 0x23, 0xc1,
    0xd5, 0x55, 0x23, 0xca,
    0xd5, 0x55, 0x23, 0xd3,
    0xd5, 0x55, 0x23, 0xdc,
    0xd5, 0x55, 0x23, 0xe5,
    0xd5, 0x55, 0x23, 0xee,
    0xd5, 0x55, 0x23, 0xf7,
    0xd5, 0x44, 0x23, 0xf9,
#endif // _LP64
    0x0b, 0xca,
    0x0b, 0xd3,
#ifdef _LP64
    0x41, 0x0b, 0xd8,
    0x45, 0x0b, 0xc1,
    0x45, 0x0b, 0xca,
    0x45, 0x0b, 0xd3,
    0x45, 0x0b, 0xdc,
    0x45, 0x0b, 0xe5,
    0x45, 0x0b, 0xee,
    0x45, 0x0b, 0xf7,
    0xd5, 0x14, 0x0b, 0xf8,
    0xd5, 0x50, 0x0b, 0xc1,
    0xd5, 0x50, 0x0b, 0xca,
    0xd5, 0x50, 0x0b, 0xd3,
    0xd5, 0x50, 0x0b, 0xdc,
    0xd5, 0x50, 0x0b, 0xe5,
    0xd5, 0x50, 0x0b, 0xee,
    0xd5, 0x50, 0x0b, 0xf7,
    0xd5, 0x51, 0x0b, 0xf8,
    0xd5, 0x55, 0x0b, 0xc1,
    0xd5, 0x55, 0x0b, 0xca,
    0xd5, 0x55, 0x0b, 0xd3,
    0xd5, 0x55, 0x0b, 0xdc,
    0xd5, 0x55, 0x0b, 0xe5,
    0xd5, 0x55, 0x0b, 0xee,
    0xd5, 0x55, 0x0b, 0xf7,
    0xd5, 0x44, 0x0b, 0xf9,
#endif // _LP64
    0x33, 0xca,
    0x33, 0xd3,
#ifdef _LP64
    0x41, 0x33, 0xd8,
    0x45, 0x33, 0xc1,
    0x45, 0x33, 0xca,
    0x45, 0x33, 0xd3,
    0x45, 0x33, 0xdc,
    0x45, 0x33, 0xe5,
    0x45, 0x33, 0xee,
    0x45, 0x33, 0xf7,
    0xd5, 0x14, 0x33, 0xf8,
    0xd5, 0x50, 0x33, 0xc1,
    0xd5, 0x50, 0x33, 0xca,
    0xd5, 0x50, 0x33, 0xd3,
    0xd5, 0x50, 0x33, 0xdc,
    0xd5, 0x50, 0x33, 0xe5,
    0xd5, 0x50, 0x33, 0xee,
    0xd5, 0x50, 0x33, 0xf7,
    0xd5, 0x51, 0x33, 0xf8,
    0xd5, 0x55, 0x33, 0xc1,
    0xd5, 0x55, 0x33, 0xca,
    0xd5, 0x55, 0x33, 0xd3,
    0xd5, 0x55, 0x33, 0xdc,
    0xd5, 0x55, 0x33, 0xe5,
    0xd5, 0x55, 0x33, 0xee,
    0xd5, 0x55, 0x33, 0xf7,
    0xd5, 0x44, 0x33, 0xf9,
#endif // _LP64
    0x00, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x00, 0x14, 0x03,
    0x43, 0x00, 0x1c, 0x08,
    0x47, 0x00, 0x04, 0x11,
    0x47, 0x00, 0x0c, 0x1a,
    0x47, 0x00, 0x14, 0x23,
    0x47, 0x00, 0x1c, 0x2c,
    0x47, 0x00, 0x64, 0x35, 0x00,
    0x47, 0x00, 0x2c, 0x3e,
    0xd5, 0x25, 0x00, 0x34, 0x07,
    0xd5, 0x34, 0x00, 0x3c, 0x08,
    0xd5, 0x70, 0x00, 0x04, 0x11,
    0xd5, 0x70, 0x00, 0x0c, 0x1a,
    0xd5, 0x70, 0x00, 0x14, 0x23,
    0xd5, 0x70, 0x00, 0x1c, 0x2c,
    0xd5, 0x70, 0x00, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x00, 0x2c, 0x3e,
    0xd5, 0x72, 0x00, 0x34, 0x07,
    0xd5, 0x73, 0x00, 0x3c, 0x08,
    0xd5, 0x77, 0x00, 0x04, 0x11,
    0xd5, 0x77, 0x00, 0x0c, 0x1a,
    0xd5, 0x77, 0x00, 0x14, 0x23,
    0xd5, 0x77, 0x00, 0x1c, 0x2c,
    0xd5, 0x77, 0x00, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x00, 0x2c, 0x3e,
    0xd5, 0x55, 0x00, 0x34, 0x0f,
    0xd5, 0x44, 0x00, 0x3c, 0x11,
#endif // _LP64
    0x66, 0x01, 0x0c, 0x1a,
#ifdef _LP64
    0x66, 0x42, 0x01, 0x14, 0x03,
    0x66, 0x43, 0x01, 0x1c, 0x08,
    0x66, 0x47, 0x01, 0x04, 0x11,
    0x66, 0x47, 0x01, 0x0c, 0x1a,
    0x66, 0x47, 0x01, 0x14, 0x23,
    0x66, 0x47, 0x01, 0x1c, 0x2c,
    0x66, 0x47, 0x01, 0x64, 0x35, 0x00,
    0x66, 0x47, 0x01, 0x2c, 0x3e,
    0x66, 0xd5, 0x25, 0x01, 0x34, 0x07,
    0x66, 0xd5, 0x34, 0x01, 0x3c, 0x08,
    0x66, 0xd5, 0x70, 0x01, 0x04, 0x11,
    0x66, 0xd5, 0x70, 0x01, 0x0c, 0x1a,
    0x66, 0xd5, 0x70, 0x01, 0x14, 0x23,
    0x66, 0xd5, 0x70, 0x01, 0x1c, 0x2c,
    0x66, 0xd5, 0x70, 0x01, 0x64, 0x35, 0x00,
    0x66, 0xd5, 0x70, 0x01, 0x2c, 0x3e,
    0x66, 0xd5, 0x72, 0x01, 0x34, 0x07,
    0x66, 0xd5, 0x73, 0x01, 0x3c, 0x08,
    0x66, 0xd5, 0x77, 0x01, 0x04, 0x11,
    0x66, 0xd5, 0x77, 0x01, 0x0c, 0x1a,
    0x66, 0xd5, 0x77, 0x01, 0x14, 0x23,
    0x66, 0xd5, 0x77, 0x01, 0x1c, 0x2c,
    0x66, 0xd5, 0x77, 0x01, 0x64, 0x35, 0x00,
    0x66, 0xd5, 0x77, 0x01, 0x2c, 0x3e,
    0x66, 0xd5, 0x55, 0x01, 0x34, 0x0f,
    0x66, 0xd5, 0x44, 0x01, 0x3c, 0x11,
#endif // _LP64
    0x01, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x01, 0x14, 0x03,
    0x43, 0x01, 0x1c, 0x08,
    0x47, 0x01, 0x04, 0x11,
    0x47, 0x01, 0x0c, 0x1a,
    0x47, 0x01, 0x14, 0x23,
    0x47, 0x01, 0x1c, 0x2c,
    0x47, 0x01, 0x64, 0x35, 0x00,
    0x47, 0x01, 0x2c, 0x3e,
    0xd5, 0x25, 0x01, 0x34, 0x07,
    0xd5, 0x34, 0x01, 0x3c, 0x08,
    0xd5, 0x70, 0x01, 0x04, 0x11,
    0xd5, 0x70, 0x01, 0x0c, 0x1a,
    0xd5, 0x70, 0x01, 0x14, 0x23,
    0xd5, 0x70, 0x01, 0x1c, 0x2c,
    0xd5, 0x70, 0x01, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x01, 0x2c, 0x3e,
    0xd5, 0x72, 0x01, 0x34, 0x07,
    0xd5, 0x73, 0x01, 0x3c, 0x08,
    0xd5, 0x77, 0x01, 0x04, 0x11,
    0xd5, 0x77, 0x01, 0x0c, 0x1a,
    0xd5, 0x77, 0x01, 0x14, 0x23,
    0xd5, 0x77, 0x01, 0x1c, 0x2c,
    0xd5, 0x77, 0x01, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x01, 0x2c, 0x3e,
    0xd5, 0x55, 0x01, 0x34, 0x0f,
    0xd5, 0x44, 0x01, 0x3c, 0x11,
#endif // _LP64
    0x11, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x11, 0x14, 0x03,
    0x43, 0x11, 0x1c, 0x08,
    0x47, 0x11, 0x04, 0x11,
    0x47, 0x11, 0x0c, 0x1a,
    0x47, 0x11, 0x14, 0x23,
    0x47, 0x11, 0x1c, 0x2c,
    0x47, 0x11, 0x64, 0x35, 0x00,
    0x47, 0x11, 0x2c, 0x3e,
    0xd5, 0x25, 0x11, 0x34, 0x07,
    0xd5, 0x34, 0x11, 0x3c, 0x08,
    0xd5, 0x70, 0x11, 0x04, 0x11,
    0xd5, 0x70, 0x11, 0x0c, 0x1a,
    0xd5, 0x70, 0x11, 0x14, 0x23,
    0xd5, 0x70, 0x11, 0x1c, 0x2c,
    0xd5, 0x70, 0x11, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x11, 0x2c, 0x3e,
    0xd5, 0x72, 0x11, 0x34, 0x07,
    0xd5, 0x73, 0x11, 0x3c, 0x08,
    0xd5, 0x77, 0x11, 0x04, 0x11,
    0xd5, 0x77, 0x11, 0x0c, 0x1a,
    0xd5, 0x77, 0x11, 0x14, 0x23,
    0xd5, 0x77, 0x11, 0x1c, 0x2c,
    0xd5, 0x77, 0x11, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x11, 0x2c, 0x3e,
    0xd5, 0x55, 0x11, 0x34, 0x0f,
    0xd5, 0x44, 0x11, 0x3c, 0x11,
#endif // _LP64
    0x20, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x20, 0x14, 0x03,
    0x43, 0x20, 0x1c, 0x08,
    0x47, 0x20, 0x04, 0x11,
    0x47, 0x20, 0x0c, 0x1a,
    0x47, 0x20, 0x14, 0x23,
    0x47, 0x20, 0x1c, 0x2c,
    0x47, 0x20, 0x64, 0x35, 0x00,
    0x47, 0x20, 0x2c, 0x3e,
    0xd5, 0x25, 0x20, 0x34, 0x07,
    0xd5, 0x34, 0x20, 0x3c, 0x08,
    0xd5, 0x70, 0x20, 0x04, 0x11,
    0xd5, 0x70, 0x20, 0x0c, 0x1a,
    0xd5, 0x70, 0x20, 0x14, 0x23,
    0xd5, 0x70, 0x20, 0x1c, 0x2c,
    0xd5, 0x70, 0x20, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x20, 0x2c, 0x3e,
    0xd5, 0x72, 0x20, 0x34, 0x07,
    0xd5, 0x73, 0x20, 0x3c, 0x08,
    0xd5, 0x77, 0x20, 0x04, 0x11,
    0xd5, 0x77, 0x20, 0x0c, 0x1a,
    0xd5, 0x77, 0x20, 0x14, 0x23,
    0xd5, 0x77, 0x20, 0x1c, 0x2c,
    0xd5, 0x77, 0x20, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x20, 0x2c, 0x3e,
    0xd5, 0x55, 0x20, 0x34, 0x0f,
    0xd5, 0x44, 0x20, 0x3c, 0x11,
#endif // _LP64
    0x21, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x21, 0x14, 0x03,
    0x43, 0x21, 0x1c, 0x08,
    0x47, 0x21, 0x04, 0x11,
    0x47, 0x21, 0x0c, 0x1a,
    0x47, 0x21, 0x14, 0x23,
    0x47, 0x21, 0x1c, 0x2c,
    0x47, 0x21, 0x64, 0x35, 0x00,
    0x47, 0x21, 0x2c, 0x3e,
    0xd5, 0x25, 0x21, 0x34, 0x07,
    0xd5, 0x34, 0x21, 0x3c, 0x08,
    0xd5, 0x70, 0x21, 0x04, 0x11,
    0xd5, 0x70, 0x21, 0x0c, 0x1a,
    0xd5, 0x70, 0x21, 0x14, 0x23,
    0xd5, 0x70, 0x21, 0x1c, 0x2c,
    0xd5, 0x70, 0x21, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x21, 0x2c, 0x3e,
    0xd5, 0x72, 0x21, 0x34, 0x07,
    0xd5, 0x73, 0x21, 0x3c, 0x08,
    0xd5, 0x77, 0x21, 0x04, 0x11,
    0xd5, 0x77, 0x21, 0x0c, 0x1a,
    0xd5, 0x77, 0x21, 0x14, 0x23,
    0xd5, 0x77, 0x21, 0x1c, 0x2c,
    0xd5, 0x77, 0x21, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x21, 0x2c, 0x3e,
    0xd5, 0x55, 0x21, 0x34, 0x0f,
    0xd5, 0x44, 0x21, 0x3c, 0x11,
#endif // _LP64
    0x08, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x08, 0x14, 0x03,
    0x43, 0x08, 0x1c, 0x08,
    0x47, 0x08, 0x04, 0x11,
    0x47, 0x08, 0x0c, 0x1a,
    0x47, 0x08, 0x14, 0x23,
    0x47, 0x08, 0x1c, 0x2c,
    0x47, 0x08, 0x64, 0x35, 0x00,
    0x47, 0x08, 0x2c, 0x3e,
    0xd5, 0x25, 0x08, 0x34, 0x07,
    0xd5, 0x34, 0x08, 0x3c, 0x08,
    0xd5, 0x70, 0x08, 0x04, 0x11,
    0xd5, 0x70, 0x08, 0x0c, 0x1a,
    0xd5, 0x70, 0x08, 0x14, 0x23,
    0xd5, 0x70, 0x08, 0x1c, 0x2c,
    0xd5, 0x70, 0x08, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x08, 0x2c, 0x3e,
    0xd5, 0x72, 0x08, 0x34, 0x07,
    0xd5, 0x73, 0x08, 0x3c, 0x08,
    0xd5, 0x77, 0x08, 0x04, 0x11,
    0xd5, 0x77, 0x08, 0x0c, 0x1a,
    0xd5, 0x77, 0x08, 0x14, 0x23,
    0xd5, 0x77, 0x08, 0x1c, 0x2c,
    0xd5, 0x77, 0x08, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x08, 0x2c, 0x3e,
    0xd5, 0x55, 0x08, 0x34, 0x0f,
    0xd5, 0x44, 0x08, 0x3c, 0x11,
#endif // _LP64
    0x09, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x09, 0x14, 0x03,
    0x43, 0x09, 0x1c, 0x08,
    0x47, 0x09, 0x04, 0x11,
    0x47, 0x09, 0x0c, 0x1a,
    0x47, 0x09, 0x14, 0x23,
    0x47, 0x09, 0x1c, 0x2c,
    0x47, 0x09, 0x64, 0x35, 0x00,
    0x47, 0x09, 0x2c, 0x3e,
    0xd5, 0x25, 0x09, 0x34, 0x07,
    0xd5, 0x34, 0x09, 0x3c, 0x08,
    0xd5, 0x70, 0x09, 0x04, 0x11,
    0xd5, 0x70, 0x09, 0x0c, 0x1a,
    0xd5, 0x70, 0x09, 0x14, 0x23,
    0xd5, 0x70, 0x09, 0x1c, 0x2c,
    0xd5, 0x70, 0x09, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x09, 0x2c, 0x3e,
    0xd5, 0x72, 0x09, 0x34, 0x07,
    0xd5, 0x73, 0x09, 0x3c, 0x08,
    0xd5, 0x77, 0x09, 0x04, 0x11,
    0xd5, 0x77, 0x09, 0x0c, 0x1a,
    0xd5, 0x77, 0x09, 0x14, 0x23,
    0xd5, 0x77, 0x09, 0x1c, 0x2c,
    0xd5, 0x77, 0x09, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x09, 0x2c, 0x3e,
    0xd5, 0x55, 0x09, 0x34, 0x0f,
    0xd5, 0x44, 0x09, 0x3c, 0x11,
#endif // _LP64
    0x30, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x30, 0x14, 0x03,
    0x43, 0x30, 0x1c, 0x08,
    0x47, 0x30, 0x04, 0x11,
    0x47, 0x30, 0x0c, 0x1a,
    0x47, 0x30, 0x14, 0x23,
    0x47, 0x30, 0x1c, 0x2c,
    0x47, 0x30, 0x64, 0x35, 0x00,
    0x47, 0x30, 0x2c, 0x3e,
    0xd5, 0x25, 0x30, 0x34, 0x07,
    0xd5, 0x34, 0x30, 0x3c, 0x08,
    0xd5, 0x70, 0x30, 0x04, 0x11,
    0xd5, 0x70, 0x30, 0x0c, 0x1a,
    0xd5, 0x70, 0x30, 0x14, 0x23,
    0xd5, 0x70, 0x30, 0x1c, 0x2c,
    0xd5, 0x70, 0x30, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x30, 0x2c, 0x3e,
    0xd5, 0x72, 0x30, 0x34, 0x07,
    0xd5, 0x73, 0x30, 0x3c, 0x08,
    0xd5, 0x77, 0x30, 0x04, 0x11,
    0xd5, 0x77, 0x30, 0x0c, 0x1a,
    0xd5, 0x77, 0x30, 0x14, 0x23,
    0xd5, 0x77, 0x30, 0x1c, 0x2c,
    0xd5, 0x77, 0x30, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x30, 0x2c, 0x3e,
    0xd5, 0x55, 0x30, 0x34, 0x0f,
    0xd5, 0x44, 0x30, 0x3c, 0x11,
#endif // _LP64
    0x31, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x31, 0x14, 0x03,
    0x43, 0x31, 0x1c, 0x08,
    0x47, 0x31, 0x04, 0x11,
    0x47, 0x31, 0x0c, 0x1a,
    0x47, 0x31, 0x14, 0x23,
    0x47, 0x31, 0x1c, 0x2c,
    0x47, 0x31, 0x64, 0x35, 0x00,
    0x47, 0x31, 0x2c, 0x3e,
    0xd5, 0x25, 0x31, 0x34, 0x07,
    0xd5, 0x34, 0x31, 0x3c, 0x08,
    0xd5, 0x70, 0x31, 0x04, 0x11,
    0xd5, 0x70, 0x31, 0x0c, 0x1a,
    0xd5, 0x70, 0x31, 0x14, 0x23,
    0xd5, 0x70, 0x31, 0x1c, 0x2c,
    0xd5, 0x70, 0x31, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x31, 0x2c, 0x3e,
    0xd5, 0x72, 0x31, 0x34, 0x07,
    0xd5, 0x73, 0x31, 0x3c, 0x08,
    0xd5, 0x77, 0x31, 0x04, 0x11,
    0xd5, 0x77, 0x31, 0x0c, 0x1a,
    0xd5, 0x77, 0x31, 0x14, 0x23,
    0xd5, 0x77, 0x31, 0x1c, 0x2c,
    0xd5, 0x77, 0x31, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x31, 0x2c, 0x3e,
    0xd5, 0x55, 0x31, 0x34, 0x0f,
    0xd5, 0x44, 0x31, 0x3c, 0x11,
#endif // _LP64
    0x29, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x29, 0x14, 0x03,
    0x43, 0x29, 0x1c, 0x08,
    0x47, 0x29, 0x04, 0x11,
    0x47, 0x29, 0x0c, 0x1a,
    0x47, 0x29, 0x14, 0x23,
    0x47, 0x29, 0x1c, 0x2c,
    0x47, 0x29, 0x64, 0x35, 0x00,
    0x47, 0x29, 0x2c, 0x3e,
    0xd5, 0x25, 0x29, 0x34, 0x07,
    0xd5, 0x34, 0x29, 0x3c, 0x08,
    0xd5, 0x70, 0x29, 0x04, 0x11,
    0xd5, 0x70, 0x29, 0x0c, 0x1a,
    0xd5, 0x70, 0x29, 0x14, 0x23,
    0xd5, 0x70, 0x29, 0x1c, 0x2c,
    0xd5, 0x70, 0x29, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x29, 0x2c, 0x3e,
    0xd5, 0x72, 0x29, 0x34, 0x07,
    0xd5, 0x73, 0x29, 0x3c, 0x08,
    0xd5, 0x77, 0x29, 0x04, 0x11,
    0xd5, 0x77, 0x29, 0x0c, 0x1a,
    0xd5, 0x77, 0x29, 0x14, 0x23,
    0xd5, 0x77, 0x29, 0x1c, 0x2c,
    0xd5, 0x77, 0x29, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x29, 0x2c, 0x3e,
    0xd5, 0x55, 0x29, 0x34, 0x0f,
    0xd5, 0x44, 0x29, 0x3c, 0x11,
#endif // _LP64
    0x83, 0x14, 0x11, 0x01,
    0x83, 0x14, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x14, 0x03, 0x01,
    0x43, 0x83, 0x14, 0x08, 0x01,
    0x43, 0x83, 0x14, 0x11, 0x01,
    0x43, 0x83, 0x14, 0x1a, 0x01,
    0x43, 0x83, 0x14, 0x23, 0x01,
    0x43, 0x83, 0x14, 0x2c, 0x01,
    0x43, 0x83, 0x54, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x14, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x14, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x14, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x14, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x14, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x14, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x14, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x54, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x14, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x14, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x14, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x14, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x14, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x14, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x14, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x54, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x14, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x14, 0x0f, 0x01,
    0x83, 0x14, 0x11, 0x10,
    0x83, 0x14, 0x1a, 0x10,
    0x42, 0x83, 0x14, 0x03, 0x10,
    0x43, 0x83, 0x14, 0x08, 0x10,
    0x43, 0x83, 0x14, 0x11, 0x10,
    0x43, 0x83, 0x14, 0x1a, 0x10,
    0x43, 0x83, 0x14, 0x23, 0x10,
    0x43, 0x83, 0x14, 0x2c, 0x10,
    0x43, 0x83, 0x54, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x14, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x14, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x14, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x14, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x14, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x14, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x14, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x54, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x14, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x14, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x14, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x14, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x14, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x14, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x14, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x54, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x14, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x14, 0x0f, 0x10,
    0x81, 0x14, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x14, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x14, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x54, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x14, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x54, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x14, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x54, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x14, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x14, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x14, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x14, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x54, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x14, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x14, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x54, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x14, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x54, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x14, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x14, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x14, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x14, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x14, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x14, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x14, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x14, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x14, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x14, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x14, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x14, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x14, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x14, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x14, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x14, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x14, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x14, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x14, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x14, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x14, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x14, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x14, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x14, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x14, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x14, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x14, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x14, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x14, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x14, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x14, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x14, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x14, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x83, 0x24, 0x11, 0x01,
    0x83, 0x24, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x24, 0x03, 0x01,
    0x43, 0x83, 0x24, 0x08, 0x01,
    0x43, 0x83, 0x24, 0x11, 0x01,
    0x43, 0x83, 0x24, 0x1a, 0x01,
    0x43, 0x83, 0x24, 0x23, 0x01,
    0x43, 0x83, 0x24, 0x2c, 0x01,
    0x43, 0x83, 0x64, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x24, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x24, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x24, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x24, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x24, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x24, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x24, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x24, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x24, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x24, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x24, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x24, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x24, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x24, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x24, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x24, 0x0f, 0x01,
    0x83, 0x24, 0x11, 0x10,
    0x83, 0x24, 0x1a, 0x10,
    0x42, 0x83, 0x24, 0x03, 0x10,
    0x43, 0x83, 0x24, 0x08, 0x10,
    0x43, 0x83, 0x24, 0x11, 0x10,
    0x43, 0x83, 0x24, 0x1a, 0x10,
    0x43, 0x83, 0x24, 0x23, 0x10,
    0x43, 0x83, 0x24, 0x2c, 0x10,
    0x43, 0x83, 0x64, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x24, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x24, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x24, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x24, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x24, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x24, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x24, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x24, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x24, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x24, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x24, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x24, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x24, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x24, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x24, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x24, 0x0f, 0x10,
    0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x24, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x24, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x24, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x24, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x24, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x24, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x24, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x24, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x24, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x24, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x24, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x24, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x24, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x24, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x24, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x24, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x24, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x80, 0x04, 0x11, 0x01,
    0x80, 0x04, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x80, 0x04, 0x03, 0x01,
    0x43, 0x80, 0x04, 0x08, 0x01,
    0x43, 0x80, 0x04, 0x11, 0x01,
    0x43, 0x80, 0x04, 0x1a, 0x01,
    0x43, 0x80, 0x04, 0x23, 0x01,
    0x43, 0x80, 0x04, 0x2c, 0x01,
    0x43, 0x80, 0x44, 0x35, 0x00, 0x01,
    0x43, 0x80, 0x04, 0x3e, 0x01,
    0xd5, 0x21, 0x80, 0x04, 0x07, 0x01,
    0xd5, 0x30, 0x80, 0x04, 0x08, 0x01,
    0xd5, 0x30, 0x80, 0x04, 0x11, 0x01,
    0xd5, 0x30, 0x80, 0x04, 0x1a, 0x01,
    0xd5, 0x30, 0x80, 0x04, 0x23, 0x01,
    0xd5, 0x30, 0x80, 0x04, 0x2c, 0x01,
    0xd5, 0x30, 0x80, 0x44, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x80, 0x04, 0x3e, 0x01,
    0xd5, 0x32, 0x80, 0x04, 0x07, 0x01,
    0xd5, 0x33, 0x80, 0x04, 0x08, 0x01,
    0xd5, 0x33, 0x80, 0x04, 0x11, 0x01,
    0xd5, 0x33, 0x80, 0x04, 0x1a, 0x01,
    0xd5, 0x33, 0x80, 0x04, 0x23, 0x01,
    0xd5, 0x33, 0x80, 0x04, 0x2c, 0x01,
    0xd5, 0x33, 0x80, 0x44, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x80, 0x04, 0x3e, 0x01,
    0xd5, 0x11, 0x80, 0x04, 0x0f, 0x01,
    0x80, 0x04, 0x11, 0x04,
    0x80, 0x04, 0x1a, 0x04,
    0x42, 0x80, 0x04, 0x03, 0x04,
    0x43, 0x80, 0x04, 0x08, 0x04,
    0x43, 0x80, 0x04, 0x11, 0x04,
    0x43, 0x80, 0x04, 0x1a, 0x04,
    0x43, 0x80, 0x04, 0x23, 0x04,
    0x43, 0x80, 0x04, 0x2c, 0x04,
    0x43, 0x80, 0x44, 0x35, 0x00, 0x04,
    0x43, 0x80, 0x04, 0x3e, 0x04,
    0xd5, 0x21, 0x80, 0x04, 0x07, 0x04,
    0xd5, 0x30, 0x80, 0x04, 0x08, 0x04,
    0xd5, 0x30, 0x80, 0x04, 0x11, 0x04,
    0xd5, 0x30, 0x80, 0x04, 0x1a, 0x04,
    0xd5, 0x30, 0x80, 0x04, 0x23, 0x04,
    0xd5, 0x30, 0x80, 0x04, 0x2c, 0x04,
    0xd5, 0x30, 0x80, 0x44, 0x35, 0x00, 0x04,
    0xd5, 0x30, 0x80, 0x04, 0x3e, 0x04,
    0xd5, 0x32, 0x80, 0x04, 0x07, 0x04,
    0xd5, 0x33, 0x80, 0x04, 0x08, 0x04,
    0xd5, 0x33, 0x80, 0x04, 0x11, 0x04,
    0xd5, 0x33, 0x80, 0x04, 0x1a, 0x04,
    0xd5, 0x33, 0x80, 0x04, 0x23, 0x04,
    0xd5, 0x33, 0x80, 0x04, 0x2c, 0x04,
    0xd5, 0x33, 0x80, 0x44, 0x35, 0x00, 0x04,
    0xd5, 0x33, 0x80, 0x04, 0x3e, 0x04,
    0xd5, 0x11, 0x80, 0x04, 0x0f, 0x04,
    0x80, 0x04, 0x11, 0x10,
    0x80, 0x04, 0x1a, 0x10,
    0x42, 0x80, 0x04, 0x03, 0x10,
    0x43, 0x80, 0x04, 0x08, 0x10,
    0x43, 0x80, 0x04, 0x11, 0x10,
    0x43, 0x80, 0x04, 0x1a, 0x10,
    0x43, 0x80, 0x04, 0x23, 0x10,
    0x43, 0x80, 0x04, 0x2c, 0x10,
    0x43, 0x80, 0x44, 0x35, 0x00, 0x10,
    0x43, 0x80, 0x04, 0x3e, 0x10,
    0xd5, 0x21, 0x80, 0x04, 0x07, 0x10,
    0xd5, 0x30, 0x80, 0x04, 0x08, 0x10,
    0xd5, 0x30, 0x80, 0x04, 0x11, 0x10,
    0xd5, 0x30, 0x80, 0x04, 0x1a, 0x10,
    0xd5, 0x30, 0x80, 0x04, 0x23, 0x10,
    0xd5, 0x30, 0x80, 0x04, 0x2c, 0x10,
    0xd5, 0x30, 0x80, 0x44, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x80, 0x04, 0x3e, 0x10,
    0xd5, 0x32, 0x80, 0x04, 0x07, 0x10,
    0xd5, 0x33, 0x80, 0x04, 0x08, 0x10,
    0xd5, 0x33, 0x80, 0x04, 0x11, 0x10,
    0xd5, 0x33, 0x80, 0x04, 0x1a, 0x10,
    0xd5, 0x33, 0x80, 0x04, 0x23, 0x10,
    0xd5, 0x33, 0x80, 0x04, 0x2c, 0x10,
    0xd5, 0x33, 0x80, 0x44, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x80, 0x04, 0x3e, 0x10,
    0xd5, 0x11, 0x80, 0x04, 0x0f, 0x10,
    0x80, 0x04, 0x11, 0x40,
    0x80, 0x04, 0x1a, 0x40,
    0x42, 0x80, 0x04, 0x03, 0x40,
    0x43, 0x80, 0x04, 0x08, 0x40,
    0x43, 0x80, 0x04, 0x11, 0x40,
    0x43, 0x80, 0x04, 0x1a, 0x40,
    0x43, 0x80, 0x04, 0x23, 0x40,
    0x43, 0x80, 0x04, 0x2c, 0x40,
    0x43, 0x80, 0x44, 0x35, 0x00, 0x40,
    0x43, 0x80, 0x04, 0x3e, 0x40,
    0xd5, 0x21, 0x80, 0x04, 0x07, 0x40,
    0xd5, 0x30, 0x80, 0x04, 0x08, 0x40,
    0xd5, 0x30, 0x80, 0x04, 0x11, 0x40,
    0xd5, 0x30, 0x80, 0x04, 0x1a, 0x40,
    0xd5, 0x30, 0x80, 0x04, 0x23, 0x40,
    0xd5, 0x30, 0x80, 0x04, 0x2c, 0x40,
    0xd5, 0x30, 0x80, 0x44, 0x35, 0x00, 0x40,
    0xd5, 0x30, 0x80, 0x04, 0x3e, 0x40,
    0xd5, 0x32, 0x80, 0x04, 0x07, 0x40,
    0xd5, 0x33, 0x80, 0x04, 0x08, 0x40,
    0xd5, 0x33, 0x80, 0x04, 0x11, 0x40,
    0xd5, 0x33, 0x80, 0x04, 0x1a, 0x40,
    0xd5, 0x33, 0x80, 0x04, 0x23, 0x40,
    0xd5, 0x33, 0x80, 0x04, 0x2c, 0x40,
    0xd5, 0x33, 0x80, 0x44, 0x35, 0x00, 0x40,
    0xd5, 0x33, 0x80, 0x04, 0x3e, 0x40,
    0xd5, 0x11, 0x80, 0x04, 0x0f, 0x40,
#endif // _LP64
    0x66, 0x81, 0x04, 0x11, 0x00, 0x01,
    0x66, 0x81, 0x04, 0x1a, 0x00, 0x01,
#ifdef _LP64
    0x66, 0x42, 0x81, 0x04, 0x03, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x04, 0x08, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x04, 0x11, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x04, 0x1a, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x04, 0x23, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x04, 0x2c, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01,
    0x66, 0x43, 0x81, 0x04, 0x3e, 0x00, 0x01,
    0x66, 0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x01,
    0x66, 0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x01,
    0x66, 0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x01,
    0x66, 0x81, 0x04, 0x11, 0x00, 0x04,
    0x66, 0x81, 0x04, 0x1a, 0x00, 0x04,
    0x66, 0x42, 0x81, 0x04, 0x03, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x04, 0x08, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x04, 0x11, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x04, 0x1a, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x04, 0x23, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x04, 0x2c, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x04,
    0x66, 0x43, 0x81, 0x04, 0x3e, 0x00, 0x04,
    0x66, 0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x04,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x04,
    0x66, 0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x04,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x04,
    0x66, 0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x04,
    0x66, 0x81, 0x04, 0x11, 0x00, 0x10,
    0x66, 0x81, 0x04, 0x1a, 0x00, 0x10,
    0x66, 0x42, 0x81, 0x04, 0x03, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x04, 0x08, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x04, 0x11, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x04, 0x1a, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x04, 0x23, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x04, 0x2c, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10,
    0x66, 0x43, 0x81, 0x04, 0x3e, 0x00, 0x10,
    0x66, 0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x10,
    0x66, 0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x10,
    0x66, 0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x10,
    0x66, 0x81, 0x04, 0x11, 0x00, 0x40,
    0x66, 0x81, 0x04, 0x1a, 0x00, 0x40,
    0x66, 0x42, 0x81, 0x04, 0x03, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x04, 0x08, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x04, 0x11, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x04, 0x1a, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x04, 0x23, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x04, 0x2c, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x40,
    0x66, 0x43, 0x81, 0x04, 0x3e, 0x00, 0x40,
    0x66, 0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x40,
    0x66, 0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x40,
    0x66, 0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x40,
    0x66, 0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x40,
    0x66, 0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x40,
#endif // _LP64
    0x83, 0x04, 0x11, 0x01,
    0x83, 0x04, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x04, 0x03, 0x01,
    0x43, 0x83, 0x04, 0x08, 0x01,
    0x43, 0x83, 0x04, 0x11, 0x01,
    0x43, 0x83, 0x04, 0x1a, 0x01,
    0x43, 0x83, 0x04, 0x23, 0x01,
    0x43, 0x83, 0x04, 0x2c, 0x01,
    0x43, 0x83, 0x44, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x04, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x04, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x04, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x04, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x04, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x04, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x04, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x44, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x04, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x04, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x04, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x04, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x04, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x04, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x04, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x44, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x04, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x04, 0x0f, 0x01,
    0x83, 0x04, 0x11, 0x10,
    0x83, 0x04, 0x1a, 0x10,
    0x42, 0x83, 0x04, 0x03, 0x10,
    0x43, 0x83, 0x04, 0x08, 0x10,
    0x43, 0x83, 0x04, 0x11, 0x10,
    0x43, 0x83, 0x04, 0x1a, 0x10,
    0x43, 0x83, 0x04, 0x23, 0x10,
    0x43, 0x83, 0x04, 0x2c, 0x10,
    0x43, 0x83, 0x44, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x04, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x04, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x04, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x04, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x04, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x04, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x04, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x44, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x04, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x04, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x04, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x04, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x04, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x04, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x04, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x44, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x04, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x04, 0x0f, 0x10,
    0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x04, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x04, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x04, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x04, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x04, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x04, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x04, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x04, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x04, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x04, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x04, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0xd1, 0x3c, 0x11,
    0xd1, 0x3c, 0x1a,
#ifdef _LP64
    0x42, 0xd1, 0x3c, 0x03,
    0x43, 0xd1, 0x3c, 0x08,
    0x43, 0xd1, 0x3c, 0x11,
    0x43, 0xd1, 0x3c, 0x1a,
    0x43, 0xd1, 0x3c, 0x23,
    0x43, 0xd1, 0x3c, 0x2c,
    0x43, 0xd1, 0x7c, 0x35, 0x00,
    0x43, 0xd1, 0x3c, 0x3e,
    0xd5, 0x21, 0xd1, 0x3c, 0x07,
    0xd5, 0x30, 0xd1, 0x3c, 0x08,
    0xd5, 0x30, 0xd1, 0x3c, 0x11,
    0xd5, 0x30, 0xd1, 0x3c, 0x1a,
    0xd5, 0x30, 0xd1, 0x3c, 0x23,
    0xd5, 0x30, 0xd1, 0x3c, 0x2c,
    0xd5, 0x30, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x30, 0xd1, 0x3c, 0x3e,
    0xd5, 0x32, 0xd1, 0x3c, 0x07,
    0xd5, 0x33, 0xd1, 0x3c, 0x08,
    0xd5, 0x33, 0xd1, 0x3c, 0x11,
    0xd5, 0x33, 0xd1, 0x3c, 0x1a,
    0xd5, 0x33, 0xd1, 0x3c, 0x23,
    0xd5, 0x33, 0xd1, 0x3c, 0x2c,
    0xd5, 0x33, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x33, 0xd1, 0x3c, 0x3e,
    0xd5, 0x11, 0xd1, 0x3c, 0x0f,
    0xc1, 0x3c, 0x11, 0x02,
    0xc1, 0x3c, 0x1a, 0x02,
    0x42, 0xc1, 0x3c, 0x03, 0x02,
    0x43, 0xc1, 0x3c, 0x08, 0x02,
    0x43, 0xc1, 0x3c, 0x11, 0x02,
    0x43, 0xc1, 0x3c, 0x1a, 0x02,
    0x43, 0xc1, 0x3c, 0x23, 0x02,
    0x43, 0xc1, 0x3c, 0x2c, 0x02,
    0x43, 0xc1, 0x7c, 0x35, 0x00, 0x02,
    0x43, 0xc1, 0x3c, 0x3e, 0x02,
    0xd5, 0x21, 0xc1, 0x3c, 0x07, 0x02,
    0xd5, 0x30, 0xc1, 0x3c, 0x08, 0x02,
    0xd5, 0x30, 0xc1, 0x3c, 0x11, 0x02,
    0xd5, 0x30, 0xc1, 0x3c, 0x1a, 0x02,
    0xd5, 0x30, 0xc1, 0x3c, 0x23, 0x02,
    0xd5, 0x30, 0xc1, 0x3c, 0x2c, 0x02,
    0xd5, 0x30, 0xc1, 0x7c, 0x35, 0x00, 0x02,
    0xd5, 0x30, 0xc1, 0x3c, 0x3e, 0x02,
    0xd5, 0x32, 0xc1, 0x3c, 0x07, 0x02,
    0xd5, 0x33, 0xc1, 0x3c, 0x08, 0x02,
    0xd5, 0x33, 0xc1, 0x3c, 0x11, 0x02,
    0xd5, 0x33, 0xc1, 0x3c, 0x1a, 0x02,
    0xd5, 0x33, 0xc1, 0x3c, 0x23, 0x02,
    0xd5, 0x33, 0xc1, 0x3c, 0x2c, 0x02,
    0xd5, 0x33, 0xc1, 0x7c, 0x35, 0x00, 0x02,
    0xd5, 0x33, 0xc1, 0x3c, 0x3e, 0x02,
    0xd5, 0x11, 0xc1, 0x3c, 0x0f, 0x02,
    0xc1, 0x3c, 0x11, 0x04,
    0xc1, 0x3c, 0x1a, 0x04,
    0x42, 0xc1, 0x3c, 0x03, 0x04,
    0x43, 0xc1, 0x3c, 0x08, 0x04,
    0x43, 0xc1, 0x3c, 0x11, 0x04,
    0x43, 0xc1, 0x3c, 0x1a, 0x04,
    0x43, 0xc1, 0x3c, 0x23, 0x04,
    0x43, 0xc1, 0x3c, 0x2c, 0x04,
    0x43, 0xc1, 0x7c, 0x35, 0x00, 0x04,
    0x43, 0xc1, 0x3c, 0x3e, 0x04,
    0xd5, 0x21, 0xc1, 0x3c, 0x07, 0x04,
    0xd5, 0x30, 0xc1, 0x3c, 0x08, 0x04,
    0xd5, 0x30, 0xc1, 0x3c, 0x11, 0x04,
    0xd5, 0x30, 0xc1, 0x3c, 0x1a, 0x04,
    0xd5, 0x30, 0xc1, 0x3c, 0x23, 0x04,
    0xd5, 0x30, 0xc1, 0x3c, 0x2c, 0x04,
    0xd5, 0x30, 0xc1, 0x7c, 0x35, 0x00, 0x04,
    0xd5, 0x30, 0xc1, 0x3c, 0x3e, 0x04,
    0xd5, 0x32, 0xc1, 0x3c, 0x07, 0x04,
    0xd5, 0x33, 0xc1, 0x3c, 0x08, 0x04,
    0xd5, 0x33, 0xc1, 0x3c, 0x11, 0x04,
    0xd5, 0x33, 0xc1, 0x3c, 0x1a, 0x04,
    0xd5, 0x33, 0xc1, 0x3c, 0x23, 0x04,
    0xd5, 0x33, 0xc1, 0x3c, 0x2c, 0x04,
    0xd5, 0x33, 0xc1, 0x7c, 0x35, 0x00, 0x04,
    0xd5, 0x33, 0xc1, 0x3c, 0x3e, 0x04,
    0xd5, 0x11, 0xc1, 0x3c, 0x0f, 0x04,
    0xc1, 0x3c, 0x11, 0x08,
    0xc1, 0x3c, 0x1a, 0x08,
    0x42, 0xc1, 0x3c, 0x03, 0x08,
    0x43, 0xc1, 0x3c, 0x08, 0x08,
    0x43, 0xc1, 0x3c, 0x11, 0x08,
    0x43, 0xc1, 0x3c, 0x1a, 0x08,
    0x43, 0xc1, 0x3c, 0x23, 0x08,
    0x43, 0xc1, 0x3c, 0x2c, 0x08,
    0x43, 0xc1, 0x7c, 0x35, 0x00, 0x08,
    0x43, 0xc1, 0x3c, 0x3e, 0x08,
    0xd5, 0x21, 0xc1, 0x3c, 0x07, 0x08,
    0xd5, 0x30, 0xc1, 0x3c, 0x08, 0x08,
    0xd5, 0x30, 0xc1, 0x3c, 0x11, 0x08,
    0xd5, 0x30, 0xc1, 0x3c, 0x1a, 0x08,
    0xd5, 0x30, 0xc1, 0x3c, 0x23, 0x08,
    0xd5, 0x30, 0xc1, 0x3c, 0x2c, 0x08,
    0xd5, 0x30, 0xc1, 0x7c, 0x35, 0x00, 0x08,
    0xd5, 0x30, 0xc1, 0x3c, 0x3e, 0x08,
    0xd5, 0x32, 0xc1, 0x3c, 0x07, 0x08,
    0xd5, 0x33, 0xc1, 0x3c, 0x08, 0x08,
    0xd5, 0x33, 0xc1, 0x3c, 0x11, 0x08,
    0xd5, 0x33, 0xc1, 0x3c, 0x1a, 0x08,
    0xd5, 0x33, 0xc1, 0x3c, 0x23, 0x08,
    0xd5, 0x33, 0xc1, 0x3c, 0x2c, 0x08,
    0xd5, 0x33, 0xc1, 0x7c, 0x35, 0x00, 0x08,
    0xd5, 0x33, 0xc1, 0x3c, 0x3e, 0x08,
    0xd5, 0x11, 0xc1, 0x3c, 0x0f, 0x08,
    0xc1, 0x3c, 0x11, 0x10,
    0xc1, 0x3c, 0x1a, 0x10,
    0x42, 0xc1, 0x3c, 0x03, 0x10,
    0x43, 0xc1, 0x3c, 0x08, 0x10,
    0x43, 0xc1, 0x3c, 0x11, 0x10,
    0x43, 0xc1, 0x3c, 0x1a, 0x10,
    0x43, 0xc1, 0x3c, 0x23, 0x10,
    0x43, 0xc1, 0x3c, 0x2c, 0x10,
    0x43, 0xc1, 0x7c, 0x35, 0x00, 0x10,
    0x43, 0xc1, 0x3c, 0x3e, 0x10,
    0xd5, 0x21, 0xc1, 0x3c, 0x07, 0x10,
    0xd5, 0x30, 0xc1, 0x3c, 0x08, 0x10,
    0xd5, 0x30, 0xc1, 0x3c, 0x11, 0x10,
    0xd5, 0x30, 0xc1, 0x3c, 0x1a, 0x10,
    0xd5, 0x30, 0xc1, 0x3c, 0x23, 0x10,
    0xd5, 0x30, 0xc1, 0x3c, 0x2c, 0x10,
    0xd5, 0x30, 0xc1, 0x7c, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0xc1, 0x3c, 0x3e, 0x10,
    0xd5, 0x32, 0xc1, 0x3c, 0x07, 0x10,
    0xd5, 0x33, 0xc1, 0x3c, 0x08, 0x10,
    0xd5, 0x33, 0xc1, 0x3c, 0x11, 0x10,
    0xd5, 0x33, 0xc1, 0x3c, 0x1a, 0x10,
    0xd5, 0x33, 0xc1, 0x3c, 0x23, 0x10,
    0xd5, 0x33, 0xc1, 0x3c, 0x2c, 0x10,
    0xd5, 0x33, 0xc1, 0x7c, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0xc1, 0x3c, 0x3e, 0x10,
    0xd5, 0x11, 0xc1, 0x3c, 0x0f, 0x10,
#endif // _LP64
    0x83, 0x1c, 0x11, 0x01,
    0x83, 0x1c, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x1c, 0x03, 0x01,
    0x43, 0x83, 0x1c, 0x08, 0x01,
    0x43, 0x83, 0x1c, 0x11, 0x01,
    0x43, 0x83, 0x1c, 0x1a, 0x01,
    0x43, 0x83, 0x1c, 0x23, 0x01,
    0x43, 0x83, 0x1c, 0x2c, 0x01,
    0x43, 0x83, 0x5c, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x1c, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x1c, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x1c, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x1c, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x1c, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x1c, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x1c, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x5c, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x1c, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x1c, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x1c, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x1c, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x1c, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x1c, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x1c, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x5c, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x1c, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x1c, 0x0f, 0x01,
    0x83, 0x1c, 0x11, 0x10,
    0x83, 0x1c, 0x1a, 0x10,
    0x42, 0x83, 0x1c, 0x03, 0x10,
    0x43, 0x83, 0x1c, 0x08, 0x10,
    0x43, 0x83, 0x1c, 0x11, 0x10,
    0x43, 0x83, 0x1c, 0x1a, 0x10,
    0x43, 0x83, 0x1c, 0x23, 0x10,
    0x43, 0x83, 0x1c, 0x2c, 0x10,
    0x43, 0x83, 0x5c, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x1c, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x1c, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x1c, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x1c, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x1c, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x1c, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x1c, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x5c, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x1c, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x1c, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x1c, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x1c, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x1c, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x1c, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x1c, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x5c, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x1c, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x1c, 0x0f, 0x10,
    0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x1c, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x1c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x1c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x1c, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x1c, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x1c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x1c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x1c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x1c, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0xd1, 0x2c, 0x11,
    0xd1, 0x2c, 0x1a,
#ifdef _LP64
    0x42, 0xd1, 0x2c, 0x03,
    0x43, 0xd1, 0x2c, 0x08,
    0x43, 0xd1, 0x2c, 0x11,
    0x43, 0xd1, 0x2c, 0x1a,
    0x43, 0xd1, 0x2c, 0x23,
    0x43, 0xd1, 0x2c, 0x2c,
    0x43, 0xd1, 0x6c, 0x35, 0x00,
    0x43, 0xd1, 0x2c, 0x3e,
    0xd5, 0x21, 0xd1, 0x2c, 0x07,
    0xd5, 0x30, 0xd1, 0x2c, 0x08,
    0xd5, 0x30, 0xd1, 0x2c, 0x11,
    0xd5, 0x30, 0xd1, 0x2c, 0x1a,
    0xd5, 0x30, 0xd1, 0x2c, 0x23,
    0xd5, 0x30, 0xd1, 0x2c, 0x2c,
    0xd5, 0x30, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x30, 0xd1, 0x2c, 0x3e,
    0xd5, 0x32, 0xd1, 0x2c, 0x07,
    0xd5, 0x33, 0xd1, 0x2c, 0x08,
    0xd5, 0x33, 0xd1, 0x2c, 0x11,
    0xd5, 0x33, 0xd1, 0x2c, 0x1a,
    0xd5, 0x33, 0xd1, 0x2c, 0x23,
    0xd5, 0x33, 0xd1, 0x2c, 0x2c,
    0xd5, 0x33, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x33, 0xd1, 0x2c, 0x3e,
    0xd5, 0x11, 0xd1, 0x2c, 0x0f,
    0xc1, 0x2c, 0x11, 0x02,
    0xc1, 0x2c, 0x1a, 0x02,
    0x42, 0xc1, 0x2c, 0x03, 0x02,
    0x43, 0xc1, 0x2c, 0x08, 0x02,
    0x43, 0xc1, 0x2c, 0x11, 0x02,
    0x43, 0xc1, 0x2c, 0x1a, 0x02,
    0x43, 0xc1, 0x2c, 0x23, 0x02,
    0x43, 0xc1, 0x2c, 0x2c, 0x02,
    0x43, 0xc1, 0x6c, 0x35, 0x00, 0x02,
    0x43, 0xc1, 0x2c, 0x3e, 0x02,
    0xd5, 0x21, 0xc1, 0x2c, 0x07, 0x02,
    0xd5, 0x30, 0xc1, 0x2c, 0x08, 0x02,
    0xd5, 0x30, 0xc1, 0x2c, 0x11, 0x02,
    0xd5, 0x30, 0xc1, 0x2c, 0x1a, 0x02,
    0xd5, 0x30, 0xc1, 0x2c, 0x23, 0x02,
    0xd5, 0x30, 0xc1, 0x2c, 0x2c, 0x02,
    0xd5, 0x30, 0xc1, 0x6c, 0x35, 0x00, 0x02,
    0xd5, 0x30, 0xc1, 0x2c, 0x3e, 0x02,
    0xd5, 0x32, 0xc1, 0x2c, 0x07, 0x02,
    0xd5, 0x33, 0xc1, 0x2c, 0x08, 0x02,
    0xd5, 0x33, 0xc1, 0x2c, 0x11, 0x02,
    0xd5, 0x33, 0xc1, 0x2c, 0x1a, 0x02,
    0xd5, 0x33, 0xc1, 0x2c, 0x23, 0x02,
    0xd5, 0x33, 0xc1, 0x2c, 0x2c, 0x02,
    0xd5, 0x33, 0xc1, 0x6c, 0x35, 0x00, 0x02,
    0xd5, 0x33, 0xc1, 0x2c, 0x3e, 0x02,
    0xd5, 0x11, 0xc1, 0x2c, 0x0f, 0x02,
    0xc1, 0x2c, 0x11, 0x04,
    0xc1, 0x2c, 0x1a, 0x04,
    0x42, 0xc1, 0x2c, 0x03, 0x04,
    0x43, 0xc1, 0x2c, 0x08, 0x04,
    0x43, 0xc1, 0x2c, 0x11, 0x04,
    0x43, 0xc1, 0x2c, 0x1a, 0x04,
    0x43, 0xc1, 0x2c, 0x23, 0x04,
    0x43, 0xc1, 0x2c, 0x2c, 0x04,
    0x43, 0xc1, 0x6c, 0x35, 0x00, 0x04,
    0x43, 0xc1, 0x2c, 0x3e, 0x04,
    0xd5, 0x21, 0xc1, 0x2c, 0x07, 0x04,
    0xd5, 0x30, 0xc1, 0x2c, 0x08, 0x04,
    0xd5, 0x30, 0xc1, 0x2c, 0x11, 0x04,
    0xd5, 0x30, 0xc1, 0x2c, 0x1a, 0x04,
    0xd5, 0x30, 0xc1, 0x2c, 0x23, 0x04,
    0xd5, 0x30, 0xc1, 0x2c, 0x2c, 0x04,
    0xd5, 0x30, 0xc1, 0x6c, 0x35, 0x00, 0x04,
    0xd5, 0x30, 0xc1, 0x2c, 0x3e, 0x04,
    0xd5, 0x32, 0xc1, 0x2c, 0x07, 0x04,
    0xd5, 0x33, 0xc1, 0x2c, 0x08, 0x04,
    0xd5, 0x33, 0xc1, 0x2c, 0x11, 0x04,
    0xd5, 0x33, 0xc1, 0x2c, 0x1a, 0x04,
    0xd5, 0x33, 0xc1, 0x2c, 0x23, 0x04,
    0xd5, 0x33, 0xc1, 0x2c, 0x2c, 0x04,
    0xd5, 0x33, 0xc1, 0x6c, 0x35, 0x00, 0x04,
    0xd5, 0x33, 0xc1, 0x2c, 0x3e, 0x04,
    0xd5, 0x11, 0xc1, 0x2c, 0x0f, 0x04,
    0xc1, 0x2c, 0x11, 0x08,
    0xc1, 0x2c, 0x1a, 0x08,
    0x42, 0xc1, 0x2c, 0x03, 0x08,
    0x43, 0xc1, 0x2c, 0x08, 0x08,
    0x43, 0xc1, 0x2c, 0x11, 0x08,
    0x43, 0xc1, 0x2c, 0x1a, 0x08,
    0x43, 0xc1, 0x2c, 0x23, 0x08,
    0x43, 0xc1, 0x2c, 0x2c, 0x08,
    0x43, 0xc1, 0x6c, 0x35, 0x00, 0x08,
    0x43, 0xc1, 0x2c, 0x3e, 0x08,
    0xd5, 0x21, 0xc1, 0x2c, 0x07, 0x08,
    0xd5, 0x30, 0xc1, 0x2c, 0x08, 0x08,
    0xd5, 0x30, 0xc1, 0x2c, 0x11, 0x08,
    0xd5, 0x30, 0xc1, 0x2c, 0x1a, 0x08,
    0xd5, 0x30, 0xc1, 0x2c, 0x23, 0x08,
    0xd5, 0x30, 0xc1, 0x2c, 0x2c, 0x08,
    0xd5, 0x30, 0xc1, 0x6c, 0x35, 0x00, 0x08,
    0xd5, 0x30, 0xc1, 0x2c, 0x3e, 0x08,
    0xd5, 0x32, 0xc1, 0x2c, 0x07, 0x08,
    0xd5, 0x33, 0xc1, 0x2c, 0x08, 0x08,
    0xd5, 0x33, 0xc1, 0x2c, 0x11, 0x08,
    0xd5, 0x33, 0xc1, 0x2c, 0x1a, 0x08,
    0xd5, 0x33, 0xc1, 0x2c, 0x23, 0x08,
    0xd5, 0x33, 0xc1, 0x2c, 0x2c, 0x08,
    0xd5, 0x33, 0xc1, 0x6c, 0x35, 0x00, 0x08,
    0xd5, 0x33, 0xc1, 0x2c, 0x3e, 0x08,
    0xd5, 0x11, 0xc1, 0x2c, 0x0f, 0x08,
    0xc1, 0x2c, 0x11, 0x10,
    0xc1, 0x2c, 0x1a, 0x10,
    0x42, 0xc1, 0x2c, 0x03, 0x10,
    0x43, 0xc1, 0x2c, 0x08, 0x10,
    0x43, 0xc1, 0x2c, 0x11, 0x10,
    0x43, 0xc1, 0x2c, 0x1a, 0x10,
    0x43, 0xc1, 0x2c, 0x23, 0x10,
    0x43, 0xc1, 0x2c, 0x2c, 0x10,
    0x43, 0xc1, 0x6c, 0x35, 0x00, 0x10,
    0x43, 0xc1, 0x2c, 0x3e, 0x10,
    0xd5, 0x21, 0xc1, 0x2c, 0x07, 0x10,
    0xd5, 0x30, 0xc1, 0x2c, 0x08, 0x10,
    0xd5, 0x30, 0xc1, 0x2c, 0x11, 0x10,
    0xd5, 0x30, 0xc1, 0x2c, 0x1a, 0x10,
    0xd5, 0x30, 0xc1, 0x2c, 0x23, 0x10,
    0xd5, 0x30, 0xc1, 0x2c, 0x2c, 0x10,
    0xd5, 0x30, 0xc1, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0xc1, 0x2c, 0x3e, 0x10,
    0xd5, 0x32, 0xc1, 0x2c, 0x07, 0x10,
    0xd5, 0x33, 0xc1, 0x2c, 0x08, 0x10,
    0xd5, 0x33, 0xc1, 0x2c, 0x11, 0x10,
    0xd5, 0x33, 0xc1, 0x2c, 0x1a, 0x10,
    0xd5, 0x33, 0xc1, 0x2c, 0x23, 0x10,
    0xd5, 0x33, 0xc1, 0x2c, 0x2c, 0x10,
    0xd5, 0x33, 0xc1, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0xc1, 0x2c, 0x3e, 0x10,
    0xd5, 0x11, 0xc1, 0x2c, 0x0f, 0x10,
#endif // _LP64
    0x83, 0x2c, 0x11, 0x01,
    0x83, 0x2c, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x2c, 0x03, 0x01,
    0x43, 0x83, 0x2c, 0x08, 0x01,
    0x43, 0x83, 0x2c, 0x11, 0x01,
    0x43, 0x83, 0x2c, 0x1a, 0x01,
    0x43, 0x83, 0x2c, 0x23, 0x01,
    0x43, 0x83, 0x2c, 0x2c, 0x01,
    0x43, 0x83, 0x6c, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x2c, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x2c, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x2c, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x2c, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x2c, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x2c, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x2c, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x6c, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x2c, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x2c, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x2c, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x2c, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x2c, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x2c, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x2c, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x6c, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x2c, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x2c, 0x0f, 0x01,
    0x83, 0x2c, 0x11, 0x10,
    0x83, 0x2c, 0x1a, 0x10,
    0x42, 0x83, 0x2c, 0x03, 0x10,
    0x43, 0x83, 0x2c, 0x08, 0x10,
    0x43, 0x83, 0x2c, 0x11, 0x10,
    0x43, 0x83, 0x2c, 0x1a, 0x10,
    0x43, 0x83, 0x2c, 0x23, 0x10,
    0x43, 0x83, 0x2c, 0x2c, 0x10,
    0x43, 0x83, 0x6c, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x2c, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x2c, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x2c, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x2c, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x2c, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x2c, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x2c, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x2c, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x2c, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x2c, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x2c, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x2c, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x2c, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x2c, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x2c, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x2c, 0x0f, 0x10,
    0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x2c, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x2c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x2c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x2c, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x2c, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x2c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x2c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x2c, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x83, 0x34, 0x11, 0x01,
    0x83, 0x34, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x34, 0x03, 0x01,
    0x43, 0x83, 0x34, 0x08, 0x01,
    0x43, 0x83, 0x34, 0x11, 0x01,
    0x43, 0x83, 0x34, 0x1a, 0x01,
    0x43, 0x83, 0x34, 0x23, 0x01,
    0x43, 0x83, 0x34, 0x2c, 0x01,
    0x43, 0x83, 0x74, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x34, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x34, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x34, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x34, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x34, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x34, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x34, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x74, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x34, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x34, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x34, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x34, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x34, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x34, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x34, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x74, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x34, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x34, 0x0f, 0x01,
    0x83, 0x34, 0x11, 0x10,
    0x83, 0x34, 0x1a, 0x10,
    0x42, 0x83, 0x34, 0x03, 0x10,
    0x43, 0x83, 0x34, 0x08, 0x10,
    0x43, 0x83, 0x34, 0x11, 0x10,
    0x43, 0x83, 0x34, 0x1a, 0x10,
    0x43, 0x83, 0x34, 0x23, 0x10,
    0x43, 0x83, 0x34, 0x2c, 0x10,
    0x43, 0x83, 0x74, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x34, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x34, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x34, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x34, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x34, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x34, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x34, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x74, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x34, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x34, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x34, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x34, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x34, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x34, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x34, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x74, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x34, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x34, 0x0f, 0x10,
    0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x34, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x74, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x74, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x74, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x34, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x34, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x74, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x34, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x74, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x74, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x34, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x34, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x34, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x34, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x34, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x34, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x34, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x34, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x34, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x80, 0x0c, 0x11, 0x01,
    0x80, 0x0c, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x80, 0x0c, 0x03, 0x01,
    0x43, 0x80, 0x0c, 0x08, 0x01,
    0x43, 0x80, 0x0c, 0x11, 0x01,
    0x43, 0x80, 0x0c, 0x1a, 0x01,
    0x43, 0x80, 0x0c, 0x23, 0x01,
    0x43, 0x80, 0x0c, 0x2c, 0x01,
    0x43, 0x80, 0x4c, 0x35, 0x00, 0x01,
    0x43, 0x80, 0x0c, 0x3e, 0x01,
    0xd5, 0x21, 0x80, 0x0c, 0x07, 0x01,
    0xd5, 0x30, 0x80, 0x0c, 0x08, 0x01,
    0xd5, 0x30, 0x80, 0x0c, 0x11, 0x01,
    0xd5, 0x30, 0x80, 0x0c, 0x1a, 0x01,
    0xd5, 0x30, 0x80, 0x0c, 0x23, 0x01,
    0xd5, 0x30, 0x80, 0x0c, 0x2c, 0x01,
    0xd5, 0x30, 0x80, 0x4c, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x80, 0x0c, 0x3e, 0x01,
    0xd5, 0x32, 0x80, 0x0c, 0x07, 0x01,
    0xd5, 0x33, 0x80, 0x0c, 0x08, 0x01,
    0xd5, 0x33, 0x80, 0x0c, 0x11, 0x01,
    0xd5, 0x33, 0x80, 0x0c, 0x1a, 0x01,
    0xd5, 0x33, 0x80, 0x0c, 0x23, 0x01,
    0xd5, 0x33, 0x80, 0x0c, 0x2c, 0x01,
    0xd5, 0x33, 0x80, 0x4c, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x80, 0x0c, 0x3e, 0x01,
    0xd5, 0x11, 0x80, 0x0c, 0x0f, 0x01,
    0x80, 0x0c, 0x11, 0x04,
    0x80, 0x0c, 0x1a, 0x04,
    0x42, 0x80, 0x0c, 0x03, 0x04,
    0x43, 0x80, 0x0c, 0x08, 0x04,
    0x43, 0x80, 0x0c, 0x11, 0x04,
    0x43, 0x80, 0x0c, 0x1a, 0x04,
    0x43, 0x80, 0x0c, 0x23, 0x04,
    0x43, 0x80, 0x0c, 0x2c, 0x04,
    0x43, 0x80, 0x4c, 0x35, 0x00, 0x04,
    0x43, 0x80, 0x0c, 0x3e, 0x04,
    0xd5, 0x21, 0x80, 0x0c, 0x07, 0x04,
    0xd5, 0x30, 0x80, 0x0c, 0x08, 0x04,
    0xd5, 0x30, 0x80, 0x0c, 0x11, 0x04,
    0xd5, 0x30, 0x80, 0x0c, 0x1a, 0x04,
    0xd5, 0x30, 0x80, 0x0c, 0x23, 0x04,
    0xd5, 0x30, 0x80, 0x0c, 0x2c, 0x04,
    0xd5, 0x30, 0x80, 0x4c, 0x35, 0x00, 0x04,
    0xd5, 0x30, 0x80, 0x0c, 0x3e, 0x04,
    0xd5, 0x32, 0x80, 0x0c, 0x07, 0x04,
    0xd5, 0x33, 0x80, 0x0c, 0x08, 0x04,
    0xd5, 0x33, 0x80, 0x0c, 0x11, 0x04,
    0xd5, 0x33, 0x80, 0x0c, 0x1a, 0x04,
    0xd5, 0x33, 0x80, 0x0c, 0x23, 0x04,
    0xd5, 0x33, 0x80, 0x0c, 0x2c, 0x04,
    0xd5, 0x33, 0x80, 0x4c, 0x35, 0x00, 0x04,
    0xd5, 0x33, 0x80, 0x0c, 0x3e, 0x04,
    0xd5, 0x11, 0x80, 0x0c, 0x0f, 0x04,
    0x80, 0x0c, 0x11, 0x10,
    0x80, 0x0c, 0x1a, 0x10,
    0x42, 0x80, 0x0c, 0x03, 0x10,
    0x43, 0x80, 0x0c, 0x08, 0x10,
    0x43, 0x80, 0x0c, 0x11, 0x10,
    0x43, 0x80, 0x0c, 0x1a, 0x10,
    0x43, 0x80, 0x0c, 0x23, 0x10,
    0x43, 0x80, 0x0c, 0x2c, 0x10,
    0x43, 0x80, 0x4c, 0x35, 0x00, 0x10,
    0x43, 0x80, 0x0c, 0x3e, 0x10,
    0xd5, 0x21, 0x80, 0x0c, 0x07, 0x10,
    0xd5, 0x30, 0x80, 0x0c, 0x08, 0x10,
    0xd5, 0x30, 0x80, 0x0c, 0x11, 0x10,
    0xd5, 0x30, 0x80, 0x0c, 0x1a, 0x10,
    0xd5, 0x30, 0x80, 0x0c, 0x23, 0x10,
    0xd5, 0x30, 0x80, 0x0c, 0x2c, 0x10,
    0xd5, 0x30, 0x80, 0x4c, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x80, 0x0c, 0x3e, 0x10,
    0xd5, 0x32, 0x80, 0x0c, 0x07, 0x10,
    0xd5, 0x33, 0x80, 0x0c, 0x08, 0x10,
    0xd5, 0x33, 0x80, 0x0c, 0x11, 0x10,
    0xd5, 0x33, 0x80, 0x0c, 0x1a, 0x10,
    0xd5, 0x33, 0x80, 0x0c, 0x23, 0x10,
    0xd5, 0x33, 0x80, 0x0c, 0x2c, 0x10,
    0xd5, 0x33, 0x80, 0x4c, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x80, 0x0c, 0x3e, 0x10,
    0xd5, 0x11, 0x80, 0x0c, 0x0f, 0x10,
    0x80, 0x0c, 0x11, 0x40,
    0x80, 0x0c, 0x1a, 0x40,
    0x42, 0x80, 0x0c, 0x03, 0x40,
    0x43, 0x80, 0x0c, 0x08, 0x40,
    0x43, 0x80, 0x0c, 0x11, 0x40,
    0x43, 0x80, 0x0c, 0x1a, 0x40,
    0x43, 0x80, 0x0c, 0x23, 0x40,
    0x43, 0x80, 0x0c, 0x2c, 0x40,
    0x43, 0x80, 0x4c, 0x35, 0x00, 0x40,
    0x43, 0x80, 0x0c, 0x3e, 0x40,
    0xd5, 0x21, 0x80, 0x0c, 0x07, 0x40,
    0xd5, 0x30, 0x80, 0x0c, 0x08, 0x40,
    0xd5, 0x30, 0x80, 0x0c, 0x11, 0x40,
    0xd5, 0x30, 0x80, 0x0c, 0x1a, 0x40,
    0xd5, 0x30, 0x80, 0x0c, 0x23, 0x40,
    0xd5, 0x30, 0x80, 0x0c, 0x2c, 0x40,
    0xd5, 0x30, 0x80, 0x4c, 0x35, 0x00, 0x40,
    0xd5, 0x30, 0x80, 0x0c, 0x3e, 0x40,
    0xd5, 0x32, 0x80, 0x0c, 0x07, 0x40,
    0xd5, 0x33, 0x80, 0x0c, 0x08, 0x40,
    0xd5, 0x33, 0x80, 0x0c, 0x11, 0x40,
    0xd5, 0x33, 0x80, 0x0c, 0x1a, 0x40,
    0xd5, 0x33, 0x80, 0x0c, 0x23, 0x40,
    0xd5, 0x33, 0x80, 0x0c, 0x2c, 0x40,
    0xd5, 0x33, 0x80, 0x4c, 0x35, 0x00, 0x40,
    0xd5, 0x33, 0x80, 0x0c, 0x3e, 0x40,
    0xd5, 0x11, 0x80, 0x0c, 0x0f, 0x40,
#endif // _LP64
    0x83, 0x0c, 0x11, 0x01,
    0x83, 0x0c, 0x1a, 0x01,
#ifdef _LP64
    0x42, 0x83, 0x0c, 0x03, 0x01,
    0x43, 0x83, 0x0c, 0x08, 0x01,
    0x43, 0x83, 0x0c, 0x11, 0x01,
    0x43, 0x83, 0x0c, 0x1a, 0x01,
    0x43, 0x83, 0x0c, 0x23, 0x01,
    0x43, 0x83, 0x0c, 0x2c, 0x01,
    0x43, 0x83, 0x4c, 0x35, 0x00, 0x01,
    0x43, 0x83, 0x0c, 0x3e, 0x01,
    0xd5, 0x21, 0x83, 0x0c, 0x07, 0x01,
    0xd5, 0x30, 0x83, 0x0c, 0x08, 0x01,
    0xd5, 0x30, 0x83, 0x0c, 0x11, 0x01,
    0xd5, 0x30, 0x83, 0x0c, 0x1a, 0x01,
    0xd5, 0x30, 0x83, 0x0c, 0x23, 0x01,
    0xd5, 0x30, 0x83, 0x0c, 0x2c, 0x01,
    0xd5, 0x30, 0x83, 0x4c, 0x35, 0x00, 0x01,
    0xd5, 0x30, 0x83, 0x0c, 0x3e, 0x01,
    0xd5, 0x32, 0x83, 0x0c, 0x07, 0x01,
    0xd5, 0x33, 0x83, 0x0c, 0x08, 0x01,
    0xd5, 0x33, 0x83, 0x0c, 0x11, 0x01,
    0xd5, 0x33, 0x83, 0x0c, 0x1a, 0x01,
    0xd5, 0x33, 0x83, 0x0c, 0x23, 0x01,
    0xd5, 0x33, 0x83, 0x0c, 0x2c, 0x01,
    0xd5, 0x33, 0x83, 0x4c, 0x35, 0x00, 0x01,
    0xd5, 0x33, 0x83, 0x0c, 0x3e, 0x01,
    0xd5, 0x11, 0x83, 0x0c, 0x0f, 0x01,
    0x83, 0x0c, 0x11, 0x10,
    0x83, 0x0c, 0x1a, 0x10,
    0x42, 0x83, 0x0c, 0x03, 0x10,
    0x43, 0x83, 0x0c, 0x08, 0x10,
    0x43, 0x83, 0x0c, 0x11, 0x10,
    0x43, 0x83, 0x0c, 0x1a, 0x10,
    0x43, 0x83, 0x0c, 0x23, 0x10,
    0x43, 0x83, 0x0c, 0x2c, 0x10,
    0x43, 0x83, 0x4c, 0x35, 0x00, 0x10,
    0x43, 0x83, 0x0c, 0x3e, 0x10,
    0xd5, 0x21, 0x83, 0x0c, 0x07, 0x10,
    0xd5, 0x30, 0x83, 0x0c, 0x08, 0x10,
    0xd5, 0x30, 0x83, 0x0c, 0x11, 0x10,
    0xd5, 0x30, 0x83, 0x0c, 0x1a, 0x10,
    0xd5, 0x30, 0x83, 0x0c, 0x23, 0x10,
    0xd5, 0x30, 0x83, 0x0c, 0x2c, 0x10,
    0xd5, 0x30, 0x83, 0x4c, 0x35, 0x00, 0x10,
    0xd5, 0x30, 0x83, 0x0c, 0x3e, 0x10,
    0xd5, 0x32, 0x83, 0x0c, 0x07, 0x10,
    0xd5, 0x33, 0x83, 0x0c, 0x08, 0x10,
    0xd5, 0x33, 0x83, 0x0c, 0x11, 0x10,
    0xd5, 0x33, 0x83, 0x0c, 0x1a, 0x10,
    0xd5, 0x33, 0x83, 0x0c, 0x23, 0x10,
    0xd5, 0x33, 0x83, 0x0c, 0x2c, 0x10,
    0xd5, 0x33, 0x83, 0x4c, 0x35, 0x00, 0x10,
    0xd5, 0x33, 0x83, 0x0c, 0x3e, 0x10,
    0xd5, 0x11, 0x83, 0x0c, 0x0f, 0x10,
    0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x81, 0x0c, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x0c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x0c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x0c, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x81, 0x0c, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x81, 0x0c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x21, 0x81, 0x0c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x32, 0x81, 0x0c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0x0c, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x21, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x32, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x21, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x30, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x32, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x33, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x21, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x30, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x32, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x33, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x42, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x21, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x30, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x32, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x33, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x03, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x03, 0x14, 0x03,
    0x43, 0x03, 0x1c, 0x08,
    0x47, 0x03, 0x04, 0x11,
    0x47, 0x03, 0x0c, 0x1a,
    0x47, 0x03, 0x14, 0x23,
    0x47, 0x03, 0x1c, 0x2c,
    0x47, 0x03, 0x64, 0x35, 0x00,
    0x47, 0x03, 0x2c, 0x3e,
    0xd5, 0x25, 0x03, 0x34, 0x07,
    0xd5, 0x34, 0x03, 0x3c, 0x08,
    0xd5, 0x70, 0x03, 0x04, 0x11,
    0xd5, 0x70, 0x03, 0x0c, 0x1a,
    0xd5, 0x70, 0x03, 0x14, 0x23,
    0xd5, 0x70, 0x03, 0x1c, 0x2c,
    0xd5, 0x70, 0x03, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x03, 0x2c, 0x3e,
    0xd5, 0x72, 0x03, 0x34, 0x07,
    0xd5, 0x73, 0x03, 0x3c, 0x08,
    0xd5, 0x77, 0x03, 0x04, 0x11,
    0xd5, 0x77, 0x03, 0x0c, 0x1a,
    0xd5, 0x77, 0x03, 0x14, 0x23,
    0xd5, 0x77, 0x03, 0x1c, 0x2c,
    0xd5, 0x77, 0x03, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x03, 0x2c, 0x3e,
    0xd5, 0x55, 0x03, 0x34, 0x0f,
    0xd5, 0x44, 0x03, 0x3c, 0x11,
#endif // _LP64
    0x23, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x23, 0x14, 0x03,
    0x43, 0x23, 0x1c, 0x08,
    0x47, 0x23, 0x04, 0x11,
    0x47, 0x23, 0x0c, 0x1a,
    0x47, 0x23, 0x14, 0x23,
    0x47, 0x23, 0x1c, 0x2c,
    0x47, 0x23, 0x64, 0x35, 0x00,
    0x47, 0x23, 0x2c, 0x3e,
    0xd5, 0x25, 0x23, 0x34, 0x07,
    0xd5, 0x34, 0x23, 0x3c, 0x08,
    0xd5, 0x70, 0x23, 0x04, 0x11,
    0xd5, 0x70, 0x23, 0x0c, 0x1a,
    0xd5, 0x70, 0x23, 0x14, 0x23,
    0xd5, 0x70, 0x23, 0x1c, 0x2c,
    0xd5, 0x70, 0x23, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x23, 0x2c, 0x3e,
    0xd5, 0x72, 0x23, 0x34, 0x07,
    0xd5, 0x73, 0x23, 0x3c, 0x08,
    0xd5, 0x77, 0x23, 0x04, 0x11,
    0xd5, 0x77, 0x23, 0x0c, 0x1a,
    0xd5, 0x77, 0x23, 0x14, 0x23,
    0xd5, 0x77, 0x23, 0x1c, 0x2c,
    0xd5, 0x77, 0x23, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x23, 0x2c, 0x3e,
    0xd5, 0x55, 0x23, 0x34, 0x0f,
    0xd5, 0x44, 0x23, 0x3c, 0x11,
#endif // _LP64
    0xf3, 0x0f, 0xbd, 0x0c, 0x1a,
#ifdef _LP64
    0xf3, 0x42, 0x0f, 0xbd, 0x14, 0x03,
    0xf3, 0x43, 0x0f, 0xbd, 0x1c, 0x08,
    0xf3, 0x47, 0x0f, 0xbd, 0x04, 0x11,
    0xf3, 0x47, 0x0f, 0xbd, 0x0c, 0x1a,
    0xf3, 0x47, 0x0f, 0xbd, 0x14, 0x23,
    0xf3, 0x47, 0x0f, 0xbd, 0x1c, 0x2c,
    0xf3, 0x47, 0x0f, 0xbd, 0x64, 0x35, 0x00,
    0xf3, 0x47, 0x0f, 0xbd, 0x2c, 0x3e,
    0xf3, 0xd5, 0xa5, 0xbd, 0x34, 0x07,
    0xf3, 0xd5, 0xb4, 0xbd, 0x3c, 0x08,
    0xf3, 0xd5, 0xf0, 0xbd, 0x04, 0x11,
    0xf3, 0xd5, 0xf0, 0xbd, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf0, 0xbd, 0x14, 0x23,
    0xf3, 0xd5, 0xf0, 0xbd, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf0, 0xbd, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf0, 0xbd, 0x2c, 0x3e,
    0xf3, 0xd5, 0xf2, 0xbd, 0x34, 0x07,
    0xf3, 0xd5, 0xf3, 0xbd, 0x3c, 0x08,
    0xf3, 0xd5, 0xf7, 0xbd, 0x04, 0x11,
    0xf3, 0xd5, 0xf7, 0xbd, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf7, 0xbd, 0x14, 0x23,
    0xf3, 0xd5, 0xf7, 0xbd, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf7, 0xbd, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf7, 0xbd, 0x2c, 0x3e,
    0xf3, 0xd5, 0xd5, 0xbd, 0x34, 0x0f,
    0xf3, 0xd5, 0xc4, 0xbd, 0x3c, 0x11,
#endif // _LP64
    0x0b, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0b, 0x14, 0x03,
    0x43, 0x0b, 0x1c, 0x08,
    0x47, 0x0b, 0x04, 0x11,
    0x47, 0x0b, 0x0c, 0x1a,
    0x47, 0x0b, 0x14, 0x23,
    0x47, 0x0b, 0x1c, 0x2c,
    0x47, 0x0b, 0x64, 0x35, 0x00,
    0x47, 0x0b, 0x2c, 0x3e,
    0xd5, 0x25, 0x0b, 0x34, 0x07,
    0xd5, 0x34, 0x0b, 0x3c, 0x08,
    0xd5, 0x70, 0x0b, 0x04, 0x11,
    0xd5, 0x70, 0x0b, 0x0c, 0x1a,
    0xd5, 0x70, 0x0b, 0x14, 0x23,
    0xd5, 0x70, 0x0b, 0x1c, 0x2c,
    0xd5, 0x70, 0x0b, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x0b, 0x2c, 0x3e,
    0xd5, 0x72, 0x0b, 0x34, 0x07,
    0xd5, 0x73, 0x0b, 0x3c, 0x08,
    0xd5, 0x77, 0x0b, 0x04, 0x11,
    0xd5, 0x77, 0x0b, 0x0c, 0x1a,
    0xd5, 0x77, 0x0b, 0x14, 0x23,
    0xd5, 0x77, 0x0b, 0x1c, 0x2c,
    0xd5, 0x77, 0x0b, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x0b, 0x2c, 0x3e,
    0xd5, 0x55, 0x0b, 0x34, 0x0f,
    0xd5, 0x44, 0x0b, 0x3c, 0x11,
#endif // _LP64
    0x13, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x13, 0x14, 0x03,
    0x43, 0x13, 0x1c, 0x08,
    0x47, 0x13, 0x04, 0x11,
    0x47, 0x13, 0x0c, 0x1a,
    0x47, 0x13, 0x14, 0x23,
    0x47, 0x13, 0x1c, 0x2c,
    0x47, 0x13, 0x64, 0x35, 0x00,
    0x47, 0x13, 0x2c, 0x3e,
    0xd5, 0x25, 0x13, 0x34, 0x07,
    0xd5, 0x34, 0x13, 0x3c, 0x08,
    0xd5, 0x70, 0x13, 0x04, 0x11,
    0xd5, 0x70, 0x13, 0x0c, 0x1a,
    0xd5, 0x70, 0x13, 0x14, 0x23,
    0xd5, 0x70, 0x13, 0x1c, 0x2c,
    0xd5, 0x70, 0x13, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x13, 0x2c, 0x3e,
    0xd5, 0x72, 0x13, 0x34, 0x07,
    0xd5, 0x73, 0x13, 0x3c, 0x08,
    0xd5, 0x77, 0x13, 0x04, 0x11,
    0xd5, 0x77, 0x13, 0x0c, 0x1a,
    0xd5, 0x77, 0x13, 0x14, 0x23,
    0xd5, 0x77, 0x13, 0x1c, 0x2c,
    0xd5, 0x77, 0x13, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x13, 0x2c, 0x3e,
    0xd5, 0x55, 0x13, 0x34, 0x0f,
    0xd5, 0x44, 0x13, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0xaf, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0xaf, 0x14, 0x03,
    0x43, 0x0f, 0xaf, 0x1c, 0x08,
    0x47, 0x0f, 0xaf, 0x04, 0x11,
    0x47, 0x0f, 0xaf, 0x0c, 0x1a,
    0x47, 0x0f, 0xaf, 0x14, 0x23,
    0x47, 0x0f, 0xaf, 0x1c, 0x2c,
    0x47, 0x0f, 0xaf, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0xaf, 0x2c, 0x3e,
    0xd5, 0xa5, 0xaf, 0x34, 0x07,
    0xd5, 0xb4, 0xaf, 0x3c, 0x08,
    0xd5, 0xf0, 0xaf, 0x04, 0x11,
    0xd5, 0xf0, 0xaf, 0x0c, 0x1a,
    0xd5, 0xf0, 0xaf, 0x14, 0x23,
    0xd5, 0xf0, 0xaf, 0x1c, 0x2c,
    0xd5, 0xf0, 0xaf, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0xaf, 0x2c, 0x3e,
    0xd5, 0xf2, 0xaf, 0x34, 0x07,
    0xd5, 0xf3, 0xaf, 0x3c, 0x08,
    0xd5, 0xf7, 0xaf, 0x04, 0x11,
    0xd5, 0xf7, 0xaf, 0x0c, 0x1a,
    0xd5, 0xf7, 0xaf, 0x14, 0x23,
    0xd5, 0xf7, 0xaf, 0x1c, 0x2c,
    0xd5, 0xf7, 0xaf, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0xaf, 0x2c, 0x3e,
    0xd5, 0xd5, 0xaf, 0x34, 0x0f,
    0xd5, 0xc4, 0xaf, 0x3c, 0x11,
#endif // _LP64
    0xf3, 0x0f, 0xb8, 0x0c, 0x1a,
#ifdef _LP64
    0xf3, 0x42, 0x0f, 0xb8, 0x14, 0x03,
    0xf3, 0x43, 0x0f, 0xb8, 0x1c, 0x08,
    0xf3, 0x47, 0x0f, 0xb8, 0x04, 0x11,
    0xf3, 0x47, 0x0f, 0xb8, 0x0c, 0x1a,
    0xf3, 0x47, 0x0f, 0xb8, 0x14, 0x23,
    0xf3, 0x47, 0x0f, 0xb8, 0x1c, 0x2c,
    0xf3, 0x47, 0x0f, 0xb8, 0x64, 0x35, 0x00,
    0xf3, 0x47, 0x0f, 0xb8, 0x2c, 0x3e,
    0xf3, 0xd5, 0xa5, 0xb8, 0x34, 0x07,
    0xf3, 0xd5, 0xb4, 0xb8, 0x3c, 0x08,
    0xf3, 0xd5, 0xf0, 0xb8, 0x04, 0x11,
    0xf3, 0xd5, 0xf0, 0xb8, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf0, 0xb8, 0x14, 0x23,
    0xf3, 0xd5, 0xf0, 0xb8, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf0, 0xb8, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf0, 0xb8, 0x2c, 0x3e,
    0xf3, 0xd5, 0xf2, 0xb8, 0x34, 0x07,
    0xf3, 0xd5, 0xf3, 0xb8, 0x3c, 0x08,
    0xf3, 0xd5, 0xf7, 0xb8, 0x04, 0x11,
    0xf3, 0xd5, 0xf7, 0xb8, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf7, 0xb8, 0x14, 0x23,
    0xf3, 0xd5, 0xf7, 0xb8, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf7, 0xb8, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf7, 0xb8, 0x2c, 0x3e,
    0xf3, 0xd5, 0xd5, 0xb8, 0x34, 0x0f,
    0xf3, 0xd5, 0xc4, 0xb8, 0x3c, 0x11,
#endif // _LP64
    0x1b, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x1b, 0x14, 0x03,
    0x43, 0x1b, 0x1c, 0x08,
    0x47, 0x1b, 0x04, 0x11,
    0x47, 0x1b, 0x0c, 0x1a,
    0x47, 0x1b, 0x14, 0x23,
    0x47, 0x1b, 0x1c, 0x2c,
    0x47, 0x1b, 0x64, 0x35, 0x00,
    0x47, 0x1b, 0x2c, 0x3e,
    0xd5, 0x25, 0x1b, 0x34, 0x07,
    0xd5, 0x34, 0x1b, 0x3c, 0x08,
    0xd5, 0x70, 0x1b, 0x04, 0x11,
    0xd5, 0x70, 0x1b, 0x0c, 0x1a,
    0xd5, 0x70, 0x1b, 0x14, 0x23,
    0xd5, 0x70, 0x1b, 0x1c, 0x2c,
    0xd5, 0x70, 0x1b, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x1b, 0x2c, 0x3e,
    0xd5, 0x72, 0x1b, 0x34, 0x07,
    0xd5, 0x73, 0x1b, 0x3c, 0x08,
    0xd5, 0x77, 0x1b, 0x04, 0x11,
    0xd5, 0x77, 0x1b, 0x0c, 0x1a,
    0xd5, 0x77, 0x1b, 0x14, 0x23,
    0xd5, 0x77, 0x1b, 0x1c, 0x2c,
    0xd5, 0x77, 0x1b, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x1b, 0x2c, 0x3e,
    0xd5, 0x55, 0x1b, 0x34, 0x0f,
    0xd5, 0x44, 0x1b, 0x3c, 0x11,
#endif // _LP64
    0x2b, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x2b, 0x14, 0x03,
    0x43, 0x2b, 0x1c, 0x08,
    0x47, 0x2b, 0x04, 0x11,
    0x47, 0x2b, 0x0c, 0x1a,
    0x47, 0x2b, 0x14, 0x23,
    0x47, 0x2b, 0x1c, 0x2c,
    0x47, 0x2b, 0x64, 0x35, 0x00,
    0x47, 0x2b, 0x2c, 0x3e,
    0xd5, 0x25, 0x2b, 0x34, 0x07,
    0xd5, 0x34, 0x2b, 0x3c, 0x08,
    0xd5, 0x70, 0x2b, 0x04, 0x11,
    0xd5, 0x70, 0x2b, 0x0c, 0x1a,
    0xd5, 0x70, 0x2b, 0x14, 0x23,
    0xd5, 0x70, 0x2b, 0x1c, 0x2c,
    0xd5, 0x70, 0x2b, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x2b, 0x2c, 0x3e,
    0xd5, 0x72, 0x2b, 0x34, 0x07,
    0xd5, 0x73, 0x2b, 0x3c, 0x08,
    0xd5, 0x77, 0x2b, 0x04, 0x11,
    0xd5, 0x77, 0x2b, 0x0c, 0x1a,
    0xd5, 0x77, 0x2b, 0x14, 0x23,
    0xd5, 0x77, 0x2b, 0x1c, 0x2c,
    0xd5, 0x77, 0x2b, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x2b, 0x2c, 0x3e,
    0xd5, 0x55, 0x2b, 0x34, 0x0f,
    0xd5, 0x44, 0x2b, 0x3c, 0x11,
#endif // _LP64
    0xf3, 0x0f, 0xbc, 0x0c, 0x1a,
#ifdef _LP64
    0xf3, 0x42, 0x0f, 0xbc, 0x14, 0x03,
    0xf3, 0x43, 0x0f, 0xbc, 0x1c, 0x08,
    0xf3, 0x47, 0x0f, 0xbc, 0x04, 0x11,
    0xf3, 0x47, 0x0f, 0xbc, 0x0c, 0x1a,
    0xf3, 0x47, 0x0f, 0xbc, 0x14, 0x23,
    0xf3, 0x47, 0x0f, 0xbc, 0x1c, 0x2c,
    0xf3, 0x47, 0x0f, 0xbc, 0x64, 0x35, 0x00,
    0xf3, 0x47, 0x0f, 0xbc, 0x2c, 0x3e,
    0xf3, 0xd5, 0xa5, 0xbc, 0x34, 0x07,
    0xf3, 0xd5, 0xb4, 0xbc, 0x3c, 0x08,
    0xf3, 0xd5, 0xf0, 0xbc, 0x04, 0x11,
    0xf3, 0xd5, 0xf0, 0xbc, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf0, 0xbc, 0x14, 0x23,
    0xf3, 0xd5, 0xf0, 0xbc, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf0, 0xbc, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf0, 0xbc, 0x2c, 0x3e,
    0xf3, 0xd5, 0xf2, 0xbc, 0x34, 0x07,
    0xf3, 0xd5, 0xf3, 0xbc, 0x3c, 0x08,
    0xf3, 0xd5, 0xf7, 0xbc, 0x04, 0x11,
    0xf3, 0xd5, 0xf7, 0xbc, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf7, 0xbc, 0x14, 0x23,
    0xf3, 0xd5, 0xf7, 0xbc, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf7, 0xbc, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf7, 0xbc, 0x2c, 0x3e,
    0xf3, 0xd5, 0xd5, 0xbc, 0x34, 0x0f,
    0xf3, 0xd5, 0xc4, 0xbc, 0x3c, 0x11,
#endif // _LP64
    0x32, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x32, 0x14, 0x03,
    0x43, 0x32, 0x1c, 0x08,
    0x47, 0x32, 0x04, 0x11,
    0x47, 0x32, 0x0c, 0x1a,
    0x47, 0x32, 0x14, 0x23,
    0x47, 0x32, 0x1c, 0x2c,
    0x47, 0x32, 0x64, 0x35, 0x00,
    0x47, 0x32, 0x2c, 0x3e,
    0xd5, 0x25, 0x32, 0x34, 0x07,
    0xd5, 0x34, 0x32, 0x3c, 0x08,
    0xd5, 0x70, 0x32, 0x04, 0x11,
    0xd5, 0x70, 0x32, 0x0c, 0x1a,
    0xd5, 0x70, 0x32, 0x14, 0x23,
    0xd5, 0x70, 0x32, 0x1c, 0x2c,
    0xd5, 0x70, 0x32, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x32, 0x2c, 0x3e,
    0xd5, 0x72, 0x32, 0x34, 0x07,
    0xd5, 0x73, 0x32, 0x3c, 0x08,
    0xd5, 0x77, 0x32, 0x04, 0x11,
    0xd5, 0x77, 0x32, 0x0c, 0x1a,
    0xd5, 0x77, 0x32, 0x14, 0x23,
    0xd5, 0x77, 0x32, 0x1c, 0x2c,
    0xd5, 0x77, 0x32, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x32, 0x2c, 0x3e,
    0xd5, 0x55, 0x32, 0x34, 0x0f,
    0xd5, 0x44, 0x32, 0x3c, 0x11,
#endif // _LP64
    0x66, 0x33, 0x0c, 0x1a,
#ifdef _LP64
    0x66, 0x42, 0x33, 0x14, 0x03,
    0x66, 0x43, 0x33, 0x1c, 0x08,
    0x66, 0x47, 0x33, 0x04, 0x11,
    0x66, 0x47, 0x33, 0x0c, 0x1a,
    0x66, 0x47, 0x33, 0x14, 0x23,
    0x66, 0x47, 0x33, 0x1c, 0x2c,
    0x66, 0x47, 0x33, 0x64, 0x35, 0x00,
    0x66, 0x47, 0x33, 0x2c, 0x3e,
    0x66, 0xd5, 0x25, 0x33, 0x34, 0x07,
    0x66, 0xd5, 0x34, 0x33, 0x3c, 0x08,
    0x66, 0xd5, 0x70, 0x33, 0x04, 0x11,
    0x66, 0xd5, 0x70, 0x33, 0x0c, 0x1a,
    0x66, 0xd5, 0x70, 0x33, 0x14, 0x23,
    0x66, 0xd5, 0x70, 0x33, 0x1c, 0x2c,
    0x66, 0xd5, 0x70, 0x33, 0x64, 0x35, 0x00,
    0x66, 0xd5, 0x70, 0x33, 0x2c, 0x3e,
    0x66, 0xd5, 0x72, 0x33, 0x34, 0x07,
    0x66, 0xd5, 0x73, 0x33, 0x3c, 0x08,
    0x66, 0xd5, 0x77, 0x33, 0x04, 0x11,
    0x66, 0xd5, 0x77, 0x33, 0x0c, 0x1a,
    0x66, 0xd5, 0x77, 0x33, 0x14, 0x23,
    0x66, 0xd5, 0x77, 0x33, 0x1c, 0x2c,
    0x66, 0xd5, 0x77, 0x33, 0x64, 0x35, 0x00,
    0x66, 0xd5, 0x77, 0x33, 0x2c, 0x3e,
    0x66, 0xd5, 0x55, 0x33, 0x34, 0x0f,
    0x66, 0xd5, 0x44, 0x33, 0x3c, 0x11,
#endif // _LP64
    0x33, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x33, 0x14, 0x03,
    0x43, 0x33, 0x1c, 0x08,
    0x47, 0x33, 0x04, 0x11,
    0x47, 0x33, 0x0c, 0x1a,
    0x47, 0x33, 0x14, 0x23,
    0x47, 0x33, 0x1c, 0x2c,
    0x47, 0x33, 0x64, 0x35, 0x00,
    0x47, 0x33, 0x2c, 0x3e,
    0xd5, 0x25, 0x33, 0x34, 0x07,
    0xd5, 0x34, 0x33, 0x3c, 0x08,
    0xd5, 0x70, 0x33, 0x04, 0x11,
    0xd5, 0x70, 0x33, 0x0c, 0x1a,
    0xd5, 0x70, 0x33, 0x14, 0x23,
    0xd5, 0x70, 0x33, 0x1c, 0x2c,
    0xd5, 0x70, 0x33, 0x64, 0x35, 0x00,
    0xd5, 0x70, 0x33, 0x2c, 0x3e,
    0xd5, 0x72, 0x33, 0x34, 0x07,
    0xd5, 0x73, 0x33, 0x3c, 0x08,
    0xd5, 0x77, 0x33, 0x04, 0x11,
    0xd5, 0x77, 0x33, 0x0c, 0x1a,
    0xd5, 0x77, 0x33, 0x14, 0x23,
    0xd5, 0x77, 0x33, 0x1c, 0x2c,
    0xd5, 0x77, 0x33, 0x64, 0x35, 0x00,
    0xd5, 0x77, 0x33, 0x2c, 0x3e,
    0xd5, 0x55, 0x33, 0x34, 0x0f,
    0xd5, 0x44, 0x33, 0x3c, 0x11,
#endif // _LP64
    0x80, 0xc1, 0x01,
    0x80, 0xc1, 0x04,
    0x80, 0xc1, 0x10,
    0x80, 0xc1, 0x40,
    0x80, 0xc2, 0x01,
    0x80, 0xc2, 0x04,
    0x80, 0xc2, 0x10,
    0x80, 0xc2, 0x40,
    0x80, 0xc3, 0x01,
    0x80, 0xc3, 0x04,
    0x80, 0xc3, 0x10,
    0x80, 0xc3, 0x40,
#ifdef _LP64
    0x41, 0x80, 0xc0, 0x01,
    0x41, 0x80, 0xc0, 0x04,
    0x41, 0x80, 0xc0, 0x10,
    0x41, 0x80, 0xc0, 0x40,
    0x41, 0x80, 0xc1, 0x01,
    0x41, 0x80, 0xc1, 0x04,
    0x41, 0x80, 0xc1, 0x10,
    0x41, 0x80, 0xc1, 0x40,
    0x41, 0x80, 0xc2, 0x01,
    0x41, 0x80, 0xc2, 0x04,
    0x41, 0x80, 0xc2, 0x10,
    0x41, 0x80, 0xc2, 0x40,
    0x41, 0x80, 0xc3, 0x01,
    0x41, 0x80, 0xc3, 0x04,
    0x41, 0x80, 0xc3, 0x10,
    0x41, 0x80, 0xc3, 0x40,
    0x41, 0x80, 0xc4, 0x01,
    0x41, 0x80, 0xc4, 0x04,
    0x41, 0x80, 0xc4, 0x10,
    0x41, 0x80, 0xc4, 0x40,
    0x41, 0x80, 0xc5, 0x01,
    0x41, 0x80, 0xc5, 0x04,
    0x41, 0x80, 0xc5, 0x10,
    0x41, 0x80, 0xc5, 0x40,
    0x41, 0x80, 0xc6, 0x01,
    0x41, 0x80, 0xc6, 0x04,
    0x41, 0x80, 0xc6, 0x10,
    0x41, 0x80, 0xc6, 0x40,
    0x41, 0x80, 0xc7, 0x01,
    0x41, 0x80, 0xc7, 0x04,
    0x41, 0x80, 0xc7, 0x10,
    0x41, 0x80, 0xc7, 0x40,
    0xd5, 0x10, 0x80, 0xc0, 0x01,
    0xd5, 0x10, 0x80, 0xc0, 0x04,
    0xd5, 0x10, 0x80, 0xc0, 0x10,
    0xd5, 0x10, 0x80, 0xc0, 0x40,
    0xd5, 0x10, 0x80, 0xc1, 0x01,
    0xd5, 0x10, 0x80, 0xc1, 0x04,
    0xd5, 0x10, 0x80, 0xc1, 0x10,
    0xd5, 0x10, 0x80, 0xc1, 0x40,
    0xd5, 0x10, 0x80, 0xc2, 0x01,
    0xd5, 0x10, 0x80, 0xc2, 0x04,
    0xd5, 0x10, 0x80, 0xc2, 0x10,
    0xd5, 0x10, 0x80, 0xc2, 0x40,
    0xd5, 0x10, 0x80, 0xc3, 0x01,
    0xd5, 0x10, 0x80, 0xc3, 0x04,
    0xd5, 0x10, 0x80, 0xc3, 0x10,
    0xd5, 0x10, 0x80, 0xc3, 0x40,
    0xd5, 0x10, 0x80, 0xc4, 0x01,
    0xd5, 0x10, 0x80, 0xc4, 0x04,
    0xd5, 0x10, 0x80, 0xc4, 0x10,
    0xd5, 0x10, 0x80, 0xc4, 0x40,
    0xd5, 0x10, 0x80, 0xc5, 0x01,
    0xd5, 0x10, 0x80, 0xc5, 0x04,
    0xd5, 0x10, 0x80, 0xc5, 0x10,
    0xd5, 0x10, 0x80, 0xc5, 0x40,
    0xd5, 0x10, 0x80, 0xc6, 0x01,
    0xd5, 0x10, 0x80, 0xc6, 0x04,
    0xd5, 0x10, 0x80, 0xc6, 0x10,
    0xd5, 0x10, 0x80, 0xc6, 0x40,
    0xd5, 0x10, 0x80, 0xc7, 0x01,
    0xd5, 0x10, 0x80, 0xc7, 0x04,
    0xd5, 0x10, 0x80, 0xc7, 0x10,
    0xd5, 0x10, 0x80, 0xc7, 0x40,
    0xd5, 0x11, 0x80, 0xc0, 0x01,
    0xd5, 0x11, 0x80, 0xc0, 0x04,
    0xd5, 0x11, 0x80, 0xc0, 0x10,
    0xd5, 0x11, 0x80, 0xc0, 0x40,
    0xd5, 0x11, 0x80, 0xc1, 0x01,
    0xd5, 0x11, 0x80, 0xc1, 0x04,
    0xd5, 0x11, 0x80, 0xc1, 0x10,
    0xd5, 0x11, 0x80, 0xc1, 0x40,
    0xd5, 0x11, 0x80, 0xc2, 0x01,
    0xd5, 0x11, 0x80, 0xc2, 0x04,
    0xd5, 0x11, 0x80, 0xc2, 0x10,
    0xd5, 0x11, 0x80, 0xc2, 0x40,
    0xd5, 0x11, 0x80, 0xc3, 0x01,
    0xd5, 0x11, 0x80, 0xc3, 0x04,
    0xd5, 0x11, 0x80, 0xc3, 0x10,
    0xd5, 0x11, 0x80, 0xc3, 0x40,
    0xd5, 0x11, 0x80, 0xc4, 0x01,
    0xd5, 0x11, 0x80, 0xc4, 0x04,
    0xd5, 0x11, 0x80, 0xc4, 0x10,
    0xd5, 0x11, 0x80, 0xc4, 0x40,
    0xd5, 0x11, 0x80, 0xc5, 0x01,
    0xd5, 0x11, 0x80, 0xc5, 0x04,
    0xd5, 0x11, 0x80, 0xc5, 0x10,
    0xd5, 0x11, 0x80, 0xc5, 0x40,
    0xd5, 0x11, 0x80, 0xc6, 0x01,
    0xd5, 0x11, 0x80, 0xc6, 0x04,
    0xd5, 0x11, 0x80, 0xc6, 0x10,
    0xd5, 0x11, 0x80, 0xc6, 0x40,
    0xd5, 0x11, 0x80, 0xc7, 0x01,
    0xd5, 0x11, 0x80, 0xc7, 0x04,
    0xd5, 0x11, 0x80, 0xc7, 0x10,
    0xd5, 0x11, 0x80, 0xc7, 0x40,
#endif // _LP64
    0x83, 0xc1, 0x01,
    0x83, 0xc1, 0x10,
    0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xc2, 0x01,
    0x83, 0xc2, 0x10,
    0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xc3, 0x01,
    0x83, 0xc3, 0x10,
    0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x83, 0xc0, 0x01,
    0x41, 0x83, 0xc0, 0x10,
    0x41, 0x81, 0xc0, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc0, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc1, 0x01,
    0x41, 0x83, 0xc1, 0x10,
    0x41, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc2, 0x01,
    0x41, 0x83, 0xc2, 0x10,
    0x41, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc3, 0x01,
    0x41, 0x83, 0xc3, 0x10,
    0x41, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc4, 0x01,
    0x41, 0x83, 0xc4, 0x10,
    0x41, 0x81, 0xc4, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc4, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc4, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc5, 0x01,
    0x41, 0x83, 0xc5, 0x10,
    0x41, 0x81, 0xc5, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc5, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc5, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc6, 0x01,
    0x41, 0x83, 0xc6, 0x10,
    0x41, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc6, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc6, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc6, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xc7, 0x01,
    0x41, 0x83, 0xc7, 0x10,
    0x41, 0x81, 0xc7, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xc7, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xc7, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xc7, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc0, 0x01,
    0xd5, 0x10, 0x83, 0xc0, 0x10,
    0xd5, 0x10, 0x81, 0xc0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc1, 0x01,
    0xd5, 0x10, 0x83, 0xc1, 0x10,
    0xd5, 0x10, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc2, 0x01,
    0xd5, 0x10, 0x83, 0xc2, 0x10,
    0xd5, 0x10, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc3, 0x01,
    0xd5, 0x10, 0x83, 0xc3, 0x10,
    0xd5, 0x10, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc4, 0x01,
    0xd5, 0x10, 0x83, 0xc4, 0x10,
    0xd5, 0x10, 0x81, 0xc4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc5, 0x01,
    0xd5, 0x10, 0x83, 0xc5, 0x10,
    0xd5, 0x10, 0x81, 0xc5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc6, 0x01,
    0xd5, 0x10, 0x83, 0xc6, 0x10,
    0xd5, 0x10, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xc7, 0x01,
    0xd5, 0x10, 0x83, 0xc7, 0x10,
    0xd5, 0x10, 0x81, 0xc7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xc7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xc7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc0, 0x01,
    0xd5, 0x11, 0x83, 0xc0, 0x10,
    0xd5, 0x11, 0x81, 0xc0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc1, 0x01,
    0xd5, 0x11, 0x83, 0xc1, 0x10,
    0xd5, 0x11, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc2, 0x01,
    0xd5, 0x11, 0x83, 0xc2, 0x10,
    0xd5, 0x11, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc3, 0x01,
    0xd5, 0x11, 0x83, 0xc3, 0x10,
    0xd5, 0x11, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc4, 0x01,
    0xd5, 0x11, 0x83, 0xc4, 0x10,
    0xd5, 0x11, 0x81, 0xc4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc5, 0x01,
    0xd5, 0x11, 0x83, 0xc5, 0x10,
    0xd5, 0x11, 0x81, 0xc5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc6, 0x01,
    0xd5, 0x11, 0x83, 0xc6, 0x10,
    0xd5, 0x11, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xc7, 0x01,
    0xd5, 0x11, 0x83, 0xc7, 0x10,
    0xd5, 0x11, 0x81, 0xc7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xc7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xc7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x83, 0xe1, 0x01,
    0x83, 0xe1, 0x10,
    0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xe2, 0x01,
    0x83, 0xe2, 0x10,
    0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xe3, 0x01,
    0x83, 0xe3, 0x10,
    0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x83, 0xe0, 0x01,
    0x41, 0x83, 0xe0, 0x10,
    0x41, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe0, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe0, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe1, 0x01,
    0x41, 0x83, 0xe1, 0x10,
    0x41, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe2, 0x01,
    0x41, 0x83, 0xe2, 0x10,
    0x41, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe3, 0x01,
    0x41, 0x83, 0xe3, 0x10,
    0x41, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe4, 0x01,
    0x41, 0x83, 0xe4, 0x10,
    0x41, 0x81, 0xe4, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe4, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe4, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe4, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe5, 0x01,
    0x41, 0x83, 0xe5, 0x10,
    0x41, 0x81, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe6, 0x01,
    0x41, 0x83, 0xe6, 0x10,
    0x41, 0x81, 0xe6, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe6, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe6, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe6, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe7, 0x01,
    0x41, 0x83, 0xe7, 0x10,
    0x41, 0x81, 0xe7, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe7, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe7, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe7, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe0, 0x01,
    0xd5, 0x10, 0x83, 0xe0, 0x10,
    0xd5, 0x10, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe1, 0x01,
    0xd5, 0x10, 0x83, 0xe1, 0x10,
    0xd5, 0x10, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe2, 0x01,
    0xd5, 0x10, 0x83, 0xe2, 0x10,
    0xd5, 0x10, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe3, 0x01,
    0xd5, 0x10, 0x83, 0xe3, 0x10,
    0xd5, 0x10, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe4, 0x01,
    0xd5, 0x10, 0x83, 0xe4, 0x10,
    0xd5, 0x10, 0x81, 0xe4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe5, 0x01,
    0xd5, 0x10, 0x83, 0xe5, 0x10,
    0xd5, 0x10, 0x81, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe6, 0x01,
    0xd5, 0x10, 0x83, 0xe6, 0x10,
    0xd5, 0x10, 0x81, 0xe6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe7, 0x01,
    0xd5, 0x10, 0x83, 0xe7, 0x10,
    0xd5, 0x10, 0x81, 0xe7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe0, 0x01,
    0xd5, 0x11, 0x83, 0xe0, 0x10,
    0xd5, 0x11, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe1, 0x01,
    0xd5, 0x11, 0x83, 0xe1, 0x10,
    0xd5, 0x11, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe2, 0x01,
    0xd5, 0x11, 0x83, 0xe2, 0x10,
    0xd5, 0x11, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe3, 0x01,
    0xd5, 0x11, 0x83, 0xe3, 0x10,
    0xd5, 0x11, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe4, 0x01,
    0xd5, 0x11, 0x83, 0xe4, 0x10,
    0xd5, 0x11, 0x81, 0xe4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe5, 0x01,
    0xd5, 0x11, 0x83, 0xe5, 0x10,
    0xd5, 0x11, 0x81, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe6, 0x01,
    0xd5, 0x11, 0x83, 0xe6, 0x10,
    0xd5, 0x11, 0x81, 0xe6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe7, 0x01,
    0xd5, 0x11, 0x83, 0xe7, 0x10,
    0xd5, 0x11, 0x81, 0xe7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x83, 0xd1, 0x01,
    0x83, 0xd1, 0x10,
    0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xd2, 0x01,
    0x83, 0xd2, 0x10,
    0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xd3, 0x01,
    0x83, 0xd3, 0x10,
    0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x83, 0xd0, 0x01,
    0x41, 0x83, 0xd0, 0x10,
    0x41, 0x81, 0xd0, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd0, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd0, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd0, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd1, 0x01,
    0x41, 0x83, 0xd1, 0x10,
    0x41, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd2, 0x01,
    0x41, 0x83, 0xd2, 0x10,
    0x41, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd3, 0x01,
    0x41, 0x83, 0xd3, 0x10,
    0x41, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd4, 0x01,
    0x41, 0x83, 0xd4, 0x10,
    0x41, 0x81, 0xd4, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd4, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd4, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd4, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd5, 0x01,
    0x41, 0x83, 0xd5, 0x10,
    0x41, 0x81, 0xd5, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd5, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd5, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd5, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd6, 0x01,
    0x41, 0x83, 0xd6, 0x10,
    0x41, 0x81, 0xd6, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd6, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd6, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd6, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd7, 0x01,
    0x41, 0x83, 0xd7, 0x10,
    0x41, 0x81, 0xd7, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd7, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd7, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd7, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd0, 0x01,
    0xd5, 0x10, 0x83, 0xd0, 0x10,
    0xd5, 0x10, 0x81, 0xd0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd1, 0x01,
    0xd5, 0x10, 0x83, 0xd1, 0x10,
    0xd5, 0x10, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd2, 0x01,
    0xd5, 0x10, 0x83, 0xd2, 0x10,
    0xd5, 0x10, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd3, 0x01,
    0xd5, 0x10, 0x83, 0xd3, 0x10,
    0xd5, 0x10, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd4, 0x01,
    0xd5, 0x10, 0x83, 0xd4, 0x10,
    0xd5, 0x10, 0x81, 0xd4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd5, 0x01,
    0xd5, 0x10, 0x83, 0xd5, 0x10,
    0xd5, 0x10, 0x81, 0xd5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd6, 0x01,
    0xd5, 0x10, 0x83, 0xd6, 0x10,
    0xd5, 0x10, 0x81, 0xd6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd7, 0x01,
    0xd5, 0x10, 0x83, 0xd7, 0x10,
    0xd5, 0x10, 0x81, 0xd7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd0, 0x01,
    0xd5, 0x11, 0x83, 0xd0, 0x10,
    0xd5, 0x11, 0x81, 0xd0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd1, 0x01,
    0xd5, 0x11, 0x83, 0xd1, 0x10,
    0xd5, 0x11, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd2, 0x01,
    0xd5, 0x11, 0x83, 0xd2, 0x10,
    0xd5, 0x11, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd3, 0x01,
    0xd5, 0x11, 0x83, 0xd3, 0x10,
    0xd5, 0x11, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd4, 0x01,
    0xd5, 0x11, 0x83, 0xd4, 0x10,
    0xd5, 0x11, 0x81, 0xd4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd5, 0x01,
    0xd5, 0x11, 0x83, 0xd5, 0x10,
    0xd5, 0x11, 0x81, 0xd5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd6, 0x01,
    0xd5, 0x11, 0x83, 0xd6, 0x10,
    0xd5, 0x11, 0x81, 0xd6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd7, 0x01,
    0xd5, 0x11, 0x83, 0xd7, 0x10,
    0xd5, 0x11, 0x81, 0xd7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0xd1, 0xd1,
    0xc1, 0xd1, 0x02,
    0xc1, 0xd1, 0x04,
    0xc1, 0xd1, 0x08,
    0xc1, 0xd1, 0x10,
    0xd1, 0xd2,
    0xc1, 0xd2, 0x02,
    0xc1, 0xd2, 0x04,
    0xc1, 0xd2, 0x08,
    0xc1, 0xd2, 0x10,
    0xd1, 0xd3,
    0xc1, 0xd3, 0x02,
    0xc1, 0xd3, 0x04,
    0xc1, 0xd3, 0x08,
    0xc1, 0xd3, 0x10,
#ifdef _LP64
    0x41, 0xd1, 0xd0,
    0x41, 0xc1, 0xd0, 0x02,
    0x41, 0xc1, 0xd0, 0x04,
    0x41, 0xc1, 0xd0, 0x08,
    0x41, 0xc1, 0xd0, 0x10,
    0x41, 0xd1, 0xd1,
    0x41, 0xc1, 0xd1, 0x02,
    0x41, 0xc1, 0xd1, 0x04,
    0x41, 0xc1, 0xd1, 0x08,
    0x41, 0xc1, 0xd1, 0x10,
    0x41, 0xd1, 0xd2,
    0x41, 0xc1, 0xd2, 0x02,
    0x41, 0xc1, 0xd2, 0x04,
    0x41, 0xc1, 0xd2, 0x08,
    0x41, 0xc1, 0xd2, 0x10,
    0x41, 0xd1, 0xd3,
    0x41, 0xc1, 0xd3, 0x02,
    0x41, 0xc1, 0xd3, 0x04,
    0x41, 0xc1, 0xd3, 0x08,
    0x41, 0xc1, 0xd3, 0x10,
    0x41, 0xd1, 0xd4,
    0x41, 0xc1, 0xd4, 0x02,
    0x41, 0xc1, 0xd4, 0x04,
    0x41, 0xc1, 0xd4, 0x08,
    0x41, 0xc1, 0xd4, 0x10,
    0x41, 0xd1, 0xd5,
    0x41, 0xc1, 0xd5, 0x02,
    0x41, 0xc1, 0xd5, 0x04,
    0x41, 0xc1, 0xd5, 0x08,
    0x41, 0xc1, 0xd5, 0x10,
    0x41, 0xd1, 0xd6,
    0x41, 0xc1, 0xd6, 0x02,
    0x41, 0xc1, 0xd6, 0x04,
    0x41, 0xc1, 0xd6, 0x08,
    0x41, 0xc1, 0xd6, 0x10,
    0x41, 0xd1, 0xd7,
    0x41, 0xc1, 0xd7, 0x02,
    0x41, 0xc1, 0xd7, 0x04,
    0x41, 0xc1, 0xd7, 0x08,
    0x41, 0xc1, 0xd7, 0x10,
    0xd5, 0x10, 0xd1, 0xd0,
    0xd5, 0x10, 0xc1, 0xd0, 0x02,
    0xd5, 0x10, 0xc1, 0xd0, 0x04,
    0xd5, 0x10, 0xc1, 0xd0, 0x08,
    0xd5, 0x10, 0xc1, 0xd0, 0x10,
    0xd5, 0x10, 0xd1, 0xd1,
    0xd5, 0x10, 0xc1, 0xd1, 0x02,
    0xd5, 0x10, 0xc1, 0xd1, 0x04,
    0xd5, 0x10, 0xc1, 0xd1, 0x08,
    0xd5, 0x10, 0xc1, 0xd1, 0x10,
    0xd5, 0x10, 0xd1, 0xd2,
    0xd5, 0x10, 0xc1, 0xd2, 0x02,
    0xd5, 0x10, 0xc1, 0xd2, 0x04,
    0xd5, 0x10, 0xc1, 0xd2, 0x08,
    0xd5, 0x10, 0xc1, 0xd2, 0x10,
    0xd5, 0x10, 0xd1, 0xd3,
    0xd5, 0x10, 0xc1, 0xd3, 0x02,
    0xd5, 0x10, 0xc1, 0xd3, 0x04,
    0xd5, 0x10, 0xc1, 0xd3, 0x08,
    0xd5, 0x10, 0xc1, 0xd3, 0x10,
    0xd5, 0x10, 0xd1, 0xd4,
    0xd5, 0x10, 0xc1, 0xd4, 0x02,
    0xd5, 0x10, 0xc1, 0xd4, 0x04,
    0xd5, 0x10, 0xc1, 0xd4, 0x08,
    0xd5, 0x10, 0xc1, 0xd4, 0x10,
    0xd5, 0x10, 0xd1, 0xd5,
    0xd5, 0x10, 0xc1, 0xd5, 0x02,
    0xd5, 0x10, 0xc1, 0xd5, 0x04,
    0xd5, 0x10, 0xc1, 0xd5, 0x08,
    0xd5, 0x10, 0xc1, 0xd5, 0x10,
    0xd5, 0x10, 0xd1, 0xd6,
    0xd5, 0x10, 0xc1, 0xd6, 0x02,
    0xd5, 0x10, 0xc1, 0xd6, 0x04,
    0xd5, 0x10, 0xc1, 0xd6, 0x08,
    0xd5, 0x10, 0xc1, 0xd6, 0x10,
    0xd5, 0x10, 0xd1, 0xd7,
    0xd5, 0x10, 0xc1, 0xd7, 0x02,
    0xd5, 0x10, 0xc1, 0xd7, 0x04,
    0xd5, 0x10, 0xc1, 0xd7, 0x08,
    0xd5, 0x10, 0xc1, 0xd7, 0x10,
    0xd5, 0x11, 0xd1, 0xd0,
    0xd5, 0x11, 0xc1, 0xd0, 0x02,
    0xd5, 0x11, 0xc1, 0xd0, 0x04,
    0xd5, 0x11, 0xc1, 0xd0, 0x08,
    0xd5, 0x11, 0xc1, 0xd0, 0x10,
    0xd5, 0x11, 0xd1, 0xd1,
    0xd5, 0x11, 0xc1, 0xd1, 0x02,
    0xd5, 0x11, 0xc1, 0xd1, 0x04,
    0xd5, 0x11, 0xc1, 0xd1, 0x08,
    0xd5, 0x11, 0xc1, 0xd1, 0x10,
    0xd5, 0x11, 0xd1, 0xd2,
    0xd5, 0x11, 0xc1, 0xd2, 0x02,
    0xd5, 0x11, 0xc1, 0xd2, 0x04,
    0xd5, 0x11, 0xc1, 0xd2, 0x08,
    0xd5, 0x11, 0xc1, 0xd2, 0x10,
    0xd5, 0x11, 0xd1, 0xd3,
    0xd5, 0x11, 0xc1, 0xd3, 0x02,
    0xd5, 0x11, 0xc1, 0xd3, 0x04,
    0xd5, 0x11, 0xc1, 0xd3, 0x08,
    0xd5, 0x11, 0xc1, 0xd3, 0x10,
    0xd5, 0x11, 0xd1, 0xd4,
    0xd5, 0x11, 0xc1, 0xd4, 0x02,
    0xd5, 0x11, 0xc1, 0xd4, 0x04,
    0xd5, 0x11, 0xc1, 0xd4, 0x08,
    0xd5, 0x11, 0xc1, 0xd4, 0x10,
    0xd5, 0x11, 0xd1, 0xd5,
    0xd5, 0x11, 0xc1, 0xd5, 0x02,
    0xd5, 0x11, 0xc1, 0xd5, 0x04,
    0xd5, 0x11, 0xc1, 0xd5, 0x08,
    0xd5, 0x11, 0xc1, 0xd5, 0x10,
    0xd5, 0x11, 0xd1, 0xd6,
    0xd5, 0x11, 0xc1, 0xd6, 0x02,
    0xd5, 0x11, 0xc1, 0xd6, 0x04,
    0xd5, 0x11, 0xc1, 0xd6, 0x08,
    0xd5, 0x11, 0xc1, 0xd6, 0x10,
    0xd5, 0x11, 0xd1, 0xd7,
    0xd5, 0x11, 0xc1, 0xd7, 0x02,
    0xd5, 0x11, 0xc1, 0xd7, 0x04,
    0xd5, 0x11, 0xc1, 0xd7, 0x08,
    0xd5, 0x11, 0xc1, 0xd7, 0x10,
#endif // _LP64
    0xd1, 0xc1,
    0xc1, 0xc1, 0x02,
    0xc1, 0xc1, 0x04,
    0xc1, 0xc1, 0x08,
    0xc1, 0xc1, 0x10,
    0xd1, 0xc2,
    0xc1, 0xc2, 0x02,
    0xc1, 0xc2, 0x04,
    0xc1, 0xc2, 0x08,
    0xc1, 0xc2, 0x10,
    0xd1, 0xc3,
    0xc1, 0xc3, 0x02,
    0xc1, 0xc3, 0x04,
    0xc1, 0xc3, 0x08,
    0xc1, 0xc3, 0x10,
#ifdef _LP64
    0x41, 0xd1, 0xc0,
    0x41, 0xc1, 0xc0, 0x02,
    0x41, 0xc1, 0xc0, 0x04,
    0x41, 0xc1, 0xc0, 0x08,
    0x41, 0xc1, 0xc0, 0x10,
    0x41, 0xd1, 0xc1,
    0x41, 0xc1, 0xc1, 0x02,
    0x41, 0xc1, 0xc1, 0x04,
    0x41, 0xc1, 0xc1, 0x08,
    0x41, 0xc1, 0xc1, 0x10,
    0x41, 0xd1, 0xc2,
    0x41, 0xc1, 0xc2, 0x02,
    0x41, 0xc1, 0xc2, 0x04,
    0x41, 0xc1, 0xc2, 0x08,
    0x41, 0xc1, 0xc2, 0x10,
    0x41, 0xd1, 0xc3,
    0x41, 0xc1, 0xc3, 0x02,
    0x41, 0xc1, 0xc3, 0x04,
    0x41, 0xc1, 0xc3, 0x08,
    0x41, 0xc1, 0xc3, 0x10,
    0x41, 0xd1, 0xc4,
    0x41, 0xc1, 0xc4, 0x02,
    0x41, 0xc1, 0xc4, 0x04,
    0x41, 0xc1, 0xc4, 0x08,
    0x41, 0xc1, 0xc4, 0x10,
    0x41, 0xd1, 0xc5,
    0x41, 0xc1, 0xc5, 0x02,
    0x41, 0xc1, 0xc5, 0x04,
    0x41, 0xc1, 0xc5, 0x08,
    0x41, 0xc1, 0xc5, 0x10,
    0x41, 0xd1, 0xc6,
    0x41, 0xc1, 0xc6, 0x02,
    0x41, 0xc1, 0xc6, 0x04,
    0x41, 0xc1, 0xc6, 0x08,
    0x41, 0xc1, 0xc6, 0x10,
    0x41, 0xd1, 0xc7,
    0x41, 0xc1, 0xc7, 0x02,
    0x41, 0xc1, 0xc7, 0x04,
    0x41, 0xc1, 0xc7, 0x08,
    0x41, 0xc1, 0xc7, 0x10,
    0xd5, 0x10, 0xd1, 0xc0,
    0xd5, 0x10, 0xc1, 0xc0, 0x02,
    0xd5, 0x10, 0xc1, 0xc0, 0x04,
    0xd5, 0x10, 0xc1, 0xc0, 0x08,
    0xd5, 0x10, 0xc1, 0xc0, 0x10,
    0xd5, 0x10, 0xd1, 0xc1,
    0xd5, 0x10, 0xc1, 0xc1, 0x02,
    0xd5, 0x10, 0xc1, 0xc1, 0x04,
    0xd5, 0x10, 0xc1, 0xc1, 0x08,
    0xd5, 0x10, 0xc1, 0xc1, 0x10,
    0xd5, 0x10, 0xd1, 0xc2,
    0xd5, 0x10, 0xc1, 0xc2, 0x02,
    0xd5, 0x10, 0xc1, 0xc2, 0x04,
    0xd5, 0x10, 0xc1, 0xc2, 0x08,
    0xd5, 0x10, 0xc1, 0xc2, 0x10,
    0xd5, 0x10, 0xd1, 0xc3,
    0xd5, 0x10, 0xc1, 0xc3, 0x02,
    0xd5, 0x10, 0xc1, 0xc3, 0x04,
    0xd5, 0x10, 0xc1, 0xc3, 0x08,
    0xd5, 0x10, 0xc1, 0xc3, 0x10,
    0xd5, 0x10, 0xd1, 0xc4,
    0xd5, 0x10, 0xc1, 0xc4, 0x02,
    0xd5, 0x10, 0xc1, 0xc4, 0x04,
    0xd5, 0x10, 0xc1, 0xc4, 0x08,
    0xd5, 0x10, 0xc1, 0xc4, 0x10,
    0xd5, 0x10, 0xd1, 0xc5,
    0xd5, 0x10, 0xc1, 0xc5, 0x02,
    0xd5, 0x10, 0xc1, 0xc5, 0x04,
    0xd5, 0x10, 0xc1, 0xc5, 0x08,
    0xd5, 0x10, 0xc1, 0xc5, 0x10,
    0xd5, 0x10, 0xd1, 0xc6,
    0xd5, 0x10, 0xc1, 0xc6, 0x02,
    0xd5, 0x10, 0xc1, 0xc6, 0x04,
    0xd5, 0x10, 0xc1, 0xc6, 0x08,
    0xd5, 0x10, 0xc1, 0xc6, 0x10,
    0xd5, 0x10, 0xd1, 0xc7,
    0xd5, 0x10, 0xc1, 0xc7, 0x02,
    0xd5, 0x10, 0xc1, 0xc7, 0x04,
    0xd5, 0x10, 0xc1, 0xc7, 0x08,
    0xd5, 0x10, 0xc1, 0xc7, 0x10,
    0xd5, 0x11, 0xd1, 0xc0,
    0xd5, 0x11, 0xc1, 0xc0, 0x02,
    0xd5, 0x11, 0xc1, 0xc0, 0x04,
    0xd5, 0x11, 0xc1, 0xc0, 0x08,
    0xd5, 0x11, 0xc1, 0xc0, 0x10,
    0xd5, 0x11, 0xd1, 0xc1,
    0xd5, 0x11, 0xc1, 0xc1, 0x02,
    0xd5, 0x11, 0xc1, 0xc1, 0x04,
    0xd5, 0x11, 0xc1, 0xc1, 0x08,
    0xd5, 0x11, 0xc1, 0xc1, 0x10,
    0xd5, 0x11, 0xd1, 0xc2,
    0xd5, 0x11, 0xc1, 0xc2, 0x02,
    0xd5, 0x11, 0xc1, 0xc2, 0x04,
    0xd5, 0x11, 0xc1, 0xc2, 0x08,
    0xd5, 0x11, 0xc1, 0xc2, 0x10,
    0xd5, 0x11, 0xd1, 0xc3,
    0xd5, 0x11, 0xc1, 0xc3, 0x02,
    0xd5, 0x11, 0xc1, 0xc3, 0x04,
    0xd5, 0x11, 0xc1, 0xc3, 0x08,
    0xd5, 0x11, 0xc1, 0xc3, 0x10,
    0xd5, 0x11, 0xd1, 0xc4,
    0xd5, 0x11, 0xc1, 0xc4, 0x02,
    0xd5, 0x11, 0xc1, 0xc4, 0x04,
    0xd5, 0x11, 0xc1, 0xc4, 0x08,
    0xd5, 0x11, 0xc1, 0xc4, 0x10,
    0xd5, 0x11, 0xd1, 0xc5,
    0xd5, 0x11, 0xc1, 0xc5, 0x02,
    0xd5, 0x11, 0xc1, 0xc5, 0x04,
    0xd5, 0x11, 0xc1, 0xc5, 0x08,
    0xd5, 0x11, 0xc1, 0xc5, 0x10,
    0xd5, 0x11, 0xd1, 0xc6,
    0xd5, 0x11, 0xc1, 0xc6, 0x02,
    0xd5, 0x11, 0xc1, 0xc6, 0x04,
    0xd5, 0x11, 0xc1, 0xc6, 0x08,
    0xd5, 0x11, 0xc1, 0xc6, 0x10,
    0xd5, 0x11, 0xd1, 0xc7,
    0xd5, 0x11, 0xc1, 0xc7, 0x02,
    0xd5, 0x11, 0xc1, 0xc7, 0x04,
    0xd5, 0x11, 0xc1, 0xc7, 0x08,
    0xd5, 0x11, 0xc1, 0xc7, 0x10,
#endif // _LP64
    0xd1, 0xc9,
    0xc1, 0xc9, 0x02,
    0xc1, 0xc9, 0x04,
    0xc1, 0xc9, 0x08,
    0xc1, 0xc9, 0x10,
    0xd1, 0xca,
    0xc1, 0xca, 0x02,
    0xc1, 0xca, 0x04,
    0xc1, 0xca, 0x08,
    0xc1, 0xca, 0x10,
    0xd1, 0xcb,
    0xc1, 0xcb, 0x02,
    0xc1, 0xcb, 0x04,
    0xc1, 0xcb, 0x08,
    0xc1, 0xcb, 0x10,
#ifdef _LP64
    0x41, 0xd1, 0xc8,
    0x41, 0xc1, 0xc8, 0x02,
    0x41, 0xc1, 0xc8, 0x04,
    0x41, 0xc1, 0xc8, 0x08,
    0x41, 0xc1, 0xc8, 0x10,
    0x41, 0xd1, 0xc9,
    0x41, 0xc1, 0xc9, 0x02,
    0x41, 0xc1, 0xc9, 0x04,
    0x41, 0xc1, 0xc9, 0x08,
    0x41, 0xc1, 0xc9, 0x10,
    0x41, 0xd1, 0xca,
    0x41, 0xc1, 0xca, 0x02,
    0x41, 0xc1, 0xca, 0x04,
    0x41, 0xc1, 0xca, 0x08,
    0x41, 0xc1, 0xca, 0x10,
    0x41, 0xd1, 0xcb,
    0x41, 0xc1, 0xcb, 0x02,
    0x41, 0xc1, 0xcb, 0x04,
    0x41, 0xc1, 0xcb, 0x08,
    0x41, 0xc1, 0xcb, 0x10,
    0x41, 0xd1, 0xcc,
    0x41, 0xc1, 0xcc, 0x02,
    0x41, 0xc1, 0xcc, 0x04,
    0x41, 0xc1, 0xcc, 0x08,
    0x41, 0xc1, 0xcc, 0x10,
    0x41, 0xd1, 0xcd,
    0x41, 0xc1, 0xcd, 0x02,
    0x41, 0xc1, 0xcd, 0x04,
    0x41, 0xc1, 0xcd, 0x08,
    0x41, 0xc1, 0xcd, 0x10,
    0x41, 0xd1, 0xce,
    0x41, 0xc1, 0xce, 0x02,
    0x41, 0xc1, 0xce, 0x04,
    0x41, 0xc1, 0xce, 0x08,
    0x41, 0xc1, 0xce, 0x10,
    0x41, 0xd1, 0xcf,
    0x41, 0xc1, 0xcf, 0x02,
    0x41, 0xc1, 0xcf, 0x04,
    0x41, 0xc1, 0xcf, 0x08,
    0x41, 0xc1, 0xcf, 0x10,
    0xd5, 0x10, 0xd1, 0xc8,
    0xd5, 0x10, 0xc1, 0xc8, 0x02,
    0xd5, 0x10, 0xc1, 0xc8, 0x04,
    0xd5, 0x10, 0xc1, 0xc8, 0x08,
    0xd5, 0x10, 0xc1, 0xc8, 0x10,
    0xd5, 0x10, 0xd1, 0xc9,
    0xd5, 0x10, 0xc1, 0xc9, 0x02,
    0xd5, 0x10, 0xc1, 0xc9, 0x04,
    0xd5, 0x10, 0xc1, 0xc9, 0x08,
    0xd5, 0x10, 0xc1, 0xc9, 0x10,
    0xd5, 0x10, 0xd1, 0xca,
    0xd5, 0x10, 0xc1, 0xca, 0x02,
    0xd5, 0x10, 0xc1, 0xca, 0x04,
    0xd5, 0x10, 0xc1, 0xca, 0x08,
    0xd5, 0x10, 0xc1, 0xca, 0x10,
    0xd5, 0x10, 0xd1, 0xcb,
    0xd5, 0x10, 0xc1, 0xcb, 0x02,
    0xd5, 0x10, 0xc1, 0xcb, 0x04,
    0xd5, 0x10, 0xc1, 0xcb, 0x08,
    0xd5, 0x10, 0xc1, 0xcb, 0x10,
    0xd5, 0x10, 0xd1, 0xcc,
    0xd5, 0x10, 0xc1, 0xcc, 0x02,
    0xd5, 0x10, 0xc1, 0xcc, 0x04,
    0xd5, 0x10, 0xc1, 0xcc, 0x08,
    0xd5, 0x10, 0xc1, 0xcc, 0x10,
    0xd5, 0x10, 0xd1, 0xcd,
    0xd5, 0x10, 0xc1, 0xcd, 0x02,
    0xd5, 0x10, 0xc1, 0xcd, 0x04,
    0xd5, 0x10, 0xc1, 0xcd, 0x08,
    0xd5, 0x10, 0xc1, 0xcd, 0x10,
    0xd5, 0x10, 0xd1, 0xce,
    0xd5, 0x10, 0xc1, 0xce, 0x02,
    0xd5, 0x10, 0xc1, 0xce, 0x04,
    0xd5, 0x10, 0xc1, 0xce, 0x08,
    0xd5, 0x10, 0xc1, 0xce, 0x10,
    0xd5, 0x10, 0xd1, 0xcf,
    0xd5, 0x10, 0xc1, 0xcf, 0x02,
    0xd5, 0x10, 0xc1, 0xcf, 0x04,
    0xd5, 0x10, 0xc1, 0xcf, 0x08,
    0xd5, 0x10, 0xc1, 0xcf, 0x10,
    0xd5, 0x11, 0xd1, 0xc8,
    0xd5, 0x11, 0xc1, 0xc8, 0x02,
    0xd5, 0x11, 0xc1, 0xc8, 0x04,
    0xd5, 0x11, 0xc1, 0xc8, 0x08,
    0xd5, 0x11, 0xc1, 0xc8, 0x10,
    0xd5, 0x11, 0xd1, 0xc9,
    0xd5, 0x11, 0xc1, 0xc9, 0x02,
    0xd5, 0x11, 0xc1, 0xc9, 0x04,
    0xd5, 0x11, 0xc1, 0xc9, 0x08,
    0xd5, 0x11, 0xc1, 0xc9, 0x10,
    0xd5, 0x11, 0xd1, 0xca,
    0xd5, 0x11, 0xc1, 0xca, 0x02,
    0xd5, 0x11, 0xc1, 0xca, 0x04,
    0xd5, 0x11, 0xc1, 0xca, 0x08,
    0xd5, 0x11, 0xc1, 0xca, 0x10,
    0xd5, 0x11, 0xd1, 0xcb,
    0xd5, 0x11, 0xc1, 0xcb, 0x02,
    0xd5, 0x11, 0xc1, 0xcb, 0x04,
    0xd5, 0x11, 0xc1, 0xcb, 0x08,
    0xd5, 0x11, 0xc1, 0xcb, 0x10,
    0xd5, 0x11, 0xd1, 0xcc,
    0xd5, 0x11, 0xc1, 0xcc, 0x02,
    0xd5, 0x11, 0xc1, 0xcc, 0x04,
    0xd5, 0x11, 0xc1, 0xcc, 0x08,
    0xd5, 0x11, 0xc1, 0xcc, 0x10,
    0xd5, 0x11, 0xd1, 0xcd,
    0xd5, 0x11, 0xc1, 0xcd, 0x02,
    0xd5, 0x11, 0xc1, 0xcd, 0x04,
    0xd5, 0x11, 0xc1, 0xcd, 0x08,
    0xd5, 0x11, 0xc1, 0xcd, 0x10,
    0xd5, 0x11, 0xd1, 0xce,
    0xd5, 0x11, 0xc1, 0xce, 0x02,
    0xd5, 0x11, 0xc1, 0xce, 0x04,
    0xd5, 0x11, 0xc1, 0xce, 0x08,
    0xd5, 0x11, 0xc1, 0xce, 0x10,
    0xd5, 0x11, 0xd1, 0xcf,
    0xd5, 0x11, 0xc1, 0xcf, 0x02,
    0xd5, 0x11, 0xc1, 0xcf, 0x04,
    0xd5, 0x11, 0xc1, 0xcf, 0x08,
    0xd5, 0x11, 0xc1, 0xcf, 0x10,
#endif // _LP64
    0xd1, 0xf9,
    0xc1, 0xf9, 0x02,
    0xc1, 0xf9, 0x04,
    0xc1, 0xf9, 0x08,
    0xc1, 0xf9, 0x10,
    0xd1, 0xfa,
    0xc1, 0xfa, 0x02,
    0xc1, 0xfa, 0x04,
    0xc1, 0xfa, 0x08,
    0xc1, 0xfa, 0x10,
    0xd1, 0xfb,
    0xc1, 0xfb, 0x02,
    0xc1, 0xfb, 0x04,
    0xc1, 0xfb, 0x08,
    0xc1, 0xfb, 0x10,
#ifdef _LP64
    0x41, 0xd1, 0xf8,
    0x41, 0xc1, 0xf8, 0x02,
    0x41, 0xc1, 0xf8, 0x04,
    0x41, 0xc1, 0xf8, 0x08,
    0x41, 0xc1, 0xf8, 0x10,
    0x41, 0xd1, 0xf9,
    0x41, 0xc1, 0xf9, 0x02,
    0x41, 0xc1, 0xf9, 0x04,
    0x41, 0xc1, 0xf9, 0x08,
    0x41, 0xc1, 0xf9, 0x10,
    0x41, 0xd1, 0xfa,
    0x41, 0xc1, 0xfa, 0x02,
    0x41, 0xc1, 0xfa, 0x04,
    0x41, 0xc1, 0xfa, 0x08,
    0x41, 0xc1, 0xfa, 0x10,
    0x41, 0xd1, 0xfb,
    0x41, 0xc1, 0xfb, 0x02,
    0x41, 0xc1, 0xfb, 0x04,
    0x41, 0xc1, 0xfb, 0x08,
    0x41, 0xc1, 0xfb, 0x10,
    0x41, 0xd1, 0xfc,
    0x41, 0xc1, 0xfc, 0x02,
    0x41, 0xc1, 0xfc, 0x04,
    0x41, 0xc1, 0xfc, 0x08,
    0x41, 0xc1, 0xfc, 0x10,
    0x41, 0xd1, 0xfd,
    0x41, 0xc1, 0xfd, 0x02,
    0x41, 0xc1, 0xfd, 0x04,
    0x41, 0xc1, 0xfd, 0x08,
    0x41, 0xc1, 0xfd, 0x10,
    0x41, 0xd1, 0xfe,
    0x41, 0xc1, 0xfe, 0x02,
    0x41, 0xc1, 0xfe, 0x04,
    0x41, 0xc1, 0xfe, 0x08,
    0x41, 0xc1, 0xfe, 0x10,
    0x41, 0xd1, 0xff,
    0x41, 0xc1, 0xff, 0x02,
    0x41, 0xc1, 0xff, 0x04,
    0x41, 0xc1, 0xff, 0x08,
    0x41, 0xc1, 0xff, 0x10,
    0xd5, 0x10, 0xd1, 0xf8,
    0xd5, 0x10, 0xc1, 0xf8, 0x02,
    0xd5, 0x10, 0xc1, 0xf8, 0x04,
    0xd5, 0x10, 0xc1, 0xf8, 0x08,
    0xd5, 0x10, 0xc1, 0xf8, 0x10,
    0xd5, 0x10, 0xd1, 0xf9,
    0xd5, 0x10, 0xc1, 0xf9, 0x02,
    0xd5, 0x10, 0xc1, 0xf9, 0x04,
    0xd5, 0x10, 0xc1, 0xf9, 0x08,
    0xd5, 0x10, 0xc1, 0xf9, 0x10,
    0xd5, 0x10, 0xd1, 0xfa,
    0xd5, 0x10, 0xc1, 0xfa, 0x02,
    0xd5, 0x10, 0xc1, 0xfa, 0x04,
    0xd5, 0x10, 0xc1, 0xfa, 0x08,
    0xd5, 0x10, 0xc1, 0xfa, 0x10,
    0xd5, 0x10, 0xd1, 0xfb,
    0xd5, 0x10, 0xc1, 0xfb, 0x02,
    0xd5, 0x10, 0xc1, 0xfb, 0x04,
    0xd5, 0x10, 0xc1, 0xfb, 0x08,
    0xd5, 0x10, 0xc1, 0xfb, 0x10,
    0xd5, 0x10, 0xd1, 0xfc,
    0xd5, 0x10, 0xc1, 0xfc, 0x02,
    0xd5, 0x10, 0xc1, 0xfc, 0x04,
    0xd5, 0x10, 0xc1, 0xfc, 0x08,
    0xd5, 0x10, 0xc1, 0xfc, 0x10,
    0xd5, 0x10, 0xd1, 0xfd,
    0xd5, 0x10, 0xc1, 0xfd, 0x02,
    0xd5, 0x10, 0xc1, 0xfd, 0x04,
    0xd5, 0x10, 0xc1, 0xfd, 0x08,
    0xd5, 0x10, 0xc1, 0xfd, 0x10,
    0xd5, 0x10, 0xd1, 0xfe,
    0xd5, 0x10, 0xc1, 0xfe, 0x02,
    0xd5, 0x10, 0xc1, 0xfe, 0x04,
    0xd5, 0x10, 0xc1, 0xfe, 0x08,
    0xd5, 0x10, 0xc1, 0xfe, 0x10,
    0xd5, 0x10, 0xd1, 0xff,
    0xd5, 0x10, 0xc1, 0xff, 0x02,
    0xd5, 0x10, 0xc1, 0xff, 0x04,
    0xd5, 0x10, 0xc1, 0xff, 0x08,
    0xd5, 0x10, 0xc1, 0xff, 0x10,
    0xd5, 0x11, 0xd1, 0xf8,
    0xd5, 0x11, 0xc1, 0xf8, 0x02,
    0xd5, 0x11, 0xc1, 0xf8, 0x04,
    0xd5, 0x11, 0xc1, 0xf8, 0x08,
    0xd5, 0x11, 0xc1, 0xf8, 0x10,
    0xd5, 0x11, 0xd1, 0xf9,
    0xd5, 0x11, 0xc1, 0xf9, 0x02,
    0xd5, 0x11, 0xc1, 0xf9, 0x04,
    0xd5, 0x11, 0xc1, 0xf9, 0x08,
    0xd5, 0x11, 0xc1, 0xf9, 0x10,
    0xd5, 0x11, 0xd1, 0xfa,
    0xd5, 0x11, 0xc1, 0xfa, 0x02,
    0xd5, 0x11, 0xc1, 0xfa, 0x04,
    0xd5, 0x11, 0xc1, 0xfa, 0x08,
    0xd5, 0x11, 0xc1, 0xfa, 0x10,
    0xd5, 0x11, 0xd1, 0xfb,
    0xd5, 0x11, 0xc1, 0xfb, 0x02,
    0xd5, 0x11, 0xc1, 0xfb, 0x04,
    0xd5, 0x11, 0xc1, 0xfb, 0x08,
    0xd5, 0x11, 0xc1, 0xfb, 0x10,
    0xd5, 0x11, 0xd1, 0xfc,
    0xd5, 0x11, 0xc1, 0xfc, 0x02,
    0xd5, 0x11, 0xc1, 0xfc, 0x04,
    0xd5, 0x11, 0xc1, 0xfc, 0x08,
    0xd5, 0x11, 0xc1, 0xfc, 0x10,
    0xd5, 0x11, 0xd1, 0xfd,
    0xd5, 0x11, 0xc1, 0xfd, 0x02,
    0xd5, 0x11, 0xc1, 0xfd, 0x04,
    0xd5, 0x11, 0xc1, 0xfd, 0x08,
    0xd5, 0x11, 0xc1, 0xfd, 0x10,
    0xd5, 0x11, 0xd1, 0xfe,
    0xd5, 0x11, 0xc1, 0xfe, 0x02,
    0xd5, 0x11, 0xc1, 0xfe, 0x04,
    0xd5, 0x11, 0xc1, 0xfe, 0x08,
    0xd5, 0x11, 0xc1, 0xfe, 0x10,
    0xd5, 0x11, 0xd1, 0xff,
    0xd5, 0x11, 0xc1, 0xff, 0x02,
    0xd5, 0x11, 0xc1, 0xff, 0x04,
    0xd5, 0x11, 0xc1, 0xff, 0x08,
    0xd5, 0x11, 0xc1, 0xff, 0x10,
#endif // _LP64
    0x83, 0xd9, 0x01,
    0x83, 0xd9, 0x10,
    0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xda, 0x01,
    0x83, 0xda, 0x10,
    0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xdb, 0x01,
    0x83, 0xdb, 0x10,
    0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x83, 0xd8, 0x01,
    0x41, 0x83, 0xd8, 0x10,
    0x41, 0x81, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xd9, 0x01,
    0x41, 0x83, 0xd9, 0x10,
    0x41, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xda, 0x01,
    0x41, 0x83, 0xda, 0x10,
    0x41, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xdb, 0x01,
    0x41, 0x83, 0xdb, 0x10,
    0x41, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xdc, 0x01,
    0x41, 0x83, 0xdc, 0x10,
    0x41, 0x81, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xdd, 0x01,
    0x41, 0x83, 0xdd, 0x10,
    0x41, 0x81, 0xdd, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xdd, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xdd, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xdd, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xde, 0x01,
    0x41, 0x83, 0xde, 0x10,
    0x41, 0x81, 0xde, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xde, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xde, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xde, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xde, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xde, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xdf, 0x01,
    0x41, 0x83, 0xdf, 0x10,
    0x41, 0x81, 0xdf, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xdf, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xdf, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xdf, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd8, 0x01,
    0xd5, 0x10, 0x83, 0xd8, 0x10,
    0xd5, 0x10, 0x81, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xd9, 0x01,
    0xd5, 0x10, 0x83, 0xd9, 0x10,
    0xd5, 0x10, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xda, 0x01,
    0xd5, 0x10, 0x83, 0xda, 0x10,
    0xd5, 0x10, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xdb, 0x01,
    0xd5, 0x10, 0x83, 0xdb, 0x10,
    0xd5, 0x10, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xdc, 0x01,
    0xd5, 0x10, 0x83, 0xdc, 0x10,
    0xd5, 0x10, 0x81, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xdd, 0x01,
    0xd5, 0x10, 0x83, 0xdd, 0x10,
    0xd5, 0x10, 0x81, 0xdd, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdd, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdd, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xdd, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xde, 0x01,
    0xd5, 0x10, 0x83, 0xde, 0x10,
    0xd5, 0x10, 0x81, 0xde, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xde, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xde, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xde, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xde, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xde, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xdf, 0x01,
    0xd5, 0x10, 0x83, 0xdf, 0x10,
    0xd5, 0x10, 0x81, 0xdf, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdf, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xdf, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xdf, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd8, 0x01,
    0xd5, 0x11, 0x83, 0xd8, 0x10,
    0xd5, 0x11, 0x81, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xd9, 0x01,
    0xd5, 0x11, 0x83, 0xd9, 0x10,
    0xd5, 0x11, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xda, 0x01,
    0xd5, 0x11, 0x83, 0xda, 0x10,
    0xd5, 0x11, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xdb, 0x01,
    0xd5, 0x11, 0x83, 0xdb, 0x10,
    0xd5, 0x11, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xdc, 0x01,
    0xd5, 0x11, 0x83, 0xdc, 0x10,
    0xd5, 0x11, 0x81, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xdd, 0x01,
    0xd5, 0x11, 0x83, 0xdd, 0x10,
    0xd5, 0x11, 0x81, 0xdd, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdd, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdd, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xdd, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xde, 0x01,
    0xd5, 0x11, 0x83, 0xde, 0x10,
    0xd5, 0x11, 0x81, 0xde, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xde, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xde, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xde, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xde, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xde, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xdf, 0x01,
    0xd5, 0x11, 0x83, 0xdf, 0x10,
    0xd5, 0x11, 0x81, 0xdf, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdf, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xdf, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xdf, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0xd1, 0xe1,
    0xc1, 0xe1, 0x02,
    0xc1, 0xe1, 0x04,
    0xc1, 0xe1, 0x08,
    0xc1, 0xe1, 0x10,
    0xd1, 0xe2,
    0xc1, 0xe2, 0x02,
    0xc1, 0xe2, 0x04,
    0xc1, 0xe2, 0x08,
    0xc1, 0xe2, 0x10,
    0xd1, 0xe3,
    0xc1, 0xe3, 0x02,
    0xc1, 0xe3, 0x04,
    0xc1, 0xe3, 0x08,
    0xc1, 0xe3, 0x10,
#ifdef _LP64
    0x41, 0xd1, 0xe0,
    0x41, 0xc1, 0xe0, 0x02,
    0x41, 0xc1, 0xe0, 0x04,
    0x41, 0xc1, 0xe0, 0x08,
    0x41, 0xc1, 0xe0, 0x10,
    0x41, 0xd1, 0xe1,
    0x41, 0xc1, 0xe1, 0x02,
    0x41, 0xc1, 0xe1, 0x04,
    0x41, 0xc1, 0xe1, 0x08,
    0x41, 0xc1, 0xe1, 0x10,
    0x41, 0xd1, 0xe2,
    0x41, 0xc1, 0xe2, 0x02,
    0x41, 0xc1, 0xe2, 0x04,
    0x41, 0xc1, 0xe2, 0x08,
    0x41, 0xc1, 0xe2, 0x10,
    0x41, 0xd1, 0xe3,
    0x41, 0xc1, 0xe3, 0x02,
    0x41, 0xc1, 0xe3, 0x04,
    0x41, 0xc1, 0xe3, 0x08,
    0x41, 0xc1, 0xe3, 0x10,
    0x41, 0xd1, 0xe4,
    0x41, 0xc1, 0xe4, 0x02,
    0x41, 0xc1, 0xe4, 0x04,
    0x41, 0xc1, 0xe4, 0x08,
    0x41, 0xc1, 0xe4, 0x10,
    0x41, 0xd1, 0xe5,
    0x41, 0xc1, 0xe5, 0x02,
    0x41, 0xc1, 0xe5, 0x04,
    0x41, 0xc1, 0xe5, 0x08,
    0x41, 0xc1, 0xe5, 0x10,
    0x41, 0xd1, 0xe6,
    0x41, 0xc1, 0xe6, 0x02,
    0x41, 0xc1, 0xe6, 0x04,
    0x41, 0xc1, 0xe6, 0x08,
    0x41, 0xc1, 0xe6, 0x10,
    0x41, 0xd1, 0xe7,
    0x41, 0xc1, 0xe7, 0x02,
    0x41, 0xc1, 0xe7, 0x04,
    0x41, 0xc1, 0xe7, 0x08,
    0x41, 0xc1, 0xe7, 0x10,
    0xd5, 0x10, 0xd1, 0xe0,
    0xd5, 0x10, 0xc1, 0xe0, 0x02,
    0xd5, 0x10, 0xc1, 0xe0, 0x04,
    0xd5, 0x10, 0xc1, 0xe0, 0x08,
    0xd5, 0x10, 0xc1, 0xe0, 0x10,
    0xd5, 0x10, 0xd1, 0xe1,
    0xd5, 0x10, 0xc1, 0xe1, 0x02,
    0xd5, 0x10, 0xc1, 0xe1, 0x04,
    0xd5, 0x10, 0xc1, 0xe1, 0x08,
    0xd5, 0x10, 0xc1, 0xe1, 0x10,
    0xd5, 0x10, 0xd1, 0xe2,
    0xd5, 0x10, 0xc1, 0xe2, 0x02,
    0xd5, 0x10, 0xc1, 0xe2, 0x04,
    0xd5, 0x10, 0xc1, 0xe2, 0x08,
    0xd5, 0x10, 0xc1, 0xe2, 0x10,
    0xd5, 0x10, 0xd1, 0xe3,
    0xd5, 0x10, 0xc1, 0xe3, 0x02,
    0xd5, 0x10, 0xc1, 0xe3, 0x04,
    0xd5, 0x10, 0xc1, 0xe3, 0x08,
    0xd5, 0x10, 0xc1, 0xe3, 0x10,
    0xd5, 0x10, 0xd1, 0xe4,
    0xd5, 0x10, 0xc1, 0xe4, 0x02,
    0xd5, 0x10, 0xc1, 0xe4, 0x04,
    0xd5, 0x10, 0xc1, 0xe4, 0x08,
    0xd5, 0x10, 0xc1, 0xe4, 0x10,
    0xd5, 0x10, 0xd1, 0xe5,
    0xd5, 0x10, 0xc1, 0xe5, 0x02,
    0xd5, 0x10, 0xc1, 0xe5, 0x04,
    0xd5, 0x10, 0xc1, 0xe5, 0x08,
    0xd5, 0x10, 0xc1, 0xe5, 0x10,
    0xd5, 0x10, 0xd1, 0xe6,
    0xd5, 0x10, 0xc1, 0xe6, 0x02,
    0xd5, 0x10, 0xc1, 0xe6, 0x04,
    0xd5, 0x10, 0xc1, 0xe6, 0x08,
    0xd5, 0x10, 0xc1, 0xe6, 0x10,
    0xd5, 0x10, 0xd1, 0xe7,
    0xd5, 0x10, 0xc1, 0xe7, 0x02,
    0xd5, 0x10, 0xc1, 0xe7, 0x04,
    0xd5, 0x10, 0xc1, 0xe7, 0x08,
    0xd5, 0x10, 0xc1, 0xe7, 0x10,
    0xd5, 0x11, 0xd1, 0xe0,
    0xd5, 0x11, 0xc1, 0xe0, 0x02,
    0xd5, 0x11, 0xc1, 0xe0, 0x04,
    0xd5, 0x11, 0xc1, 0xe0, 0x08,
    0xd5, 0x11, 0xc1, 0xe0, 0x10,
    0xd5, 0x11, 0xd1, 0xe1,
    0xd5, 0x11, 0xc1, 0xe1, 0x02,
    0xd5, 0x11, 0xc1, 0xe1, 0x04,
    0xd5, 0x11, 0xc1, 0xe1, 0x08,
    0xd5, 0x11, 0xc1, 0xe1, 0x10,
    0xd5, 0x11, 0xd1, 0xe2,
    0xd5, 0x11, 0xc1, 0xe2, 0x02,
    0xd5, 0x11, 0xc1, 0xe2, 0x04,
    0xd5, 0x11, 0xc1, 0xe2, 0x08,
    0xd5, 0x11, 0xc1, 0xe2, 0x10,
    0xd5, 0x11, 0xd1, 0xe3,
    0xd5, 0x11, 0xc1, 0xe3, 0x02,
    0xd5, 0x11, 0xc1, 0xe3, 0x04,
    0xd5, 0x11, 0xc1, 0xe3, 0x08,
    0xd5, 0x11, 0xc1, 0xe3, 0x10,
    0xd5, 0x11, 0xd1, 0xe4,
    0xd5, 0x11, 0xc1, 0xe4, 0x02,
    0xd5, 0x11, 0xc1, 0xe4, 0x04,
    0xd5, 0x11, 0xc1, 0xe4, 0x08,
    0xd5, 0x11, 0xc1, 0xe4, 0x10,
    0xd5, 0x11, 0xd1, 0xe5,
    0xd5, 0x11, 0xc1, 0xe5, 0x02,
    0xd5, 0x11, 0xc1, 0xe5, 0x04,
    0xd5, 0x11, 0xc1, 0xe5, 0x08,
    0xd5, 0x11, 0xc1, 0xe5, 0x10,
    0xd5, 0x11, 0xd1, 0xe6,
    0xd5, 0x11, 0xc1, 0xe6, 0x02,
    0xd5, 0x11, 0xc1, 0xe6, 0x04,
    0xd5, 0x11, 0xc1, 0xe6, 0x08,
    0xd5, 0x11, 0xc1, 0xe6, 0x10,
    0xd5, 0x11, 0xd1, 0xe7,
    0xd5, 0x11, 0xc1, 0xe7, 0x02,
    0xd5, 0x11, 0xc1, 0xe7, 0x04,
    0xd5, 0x11, 0xc1, 0xe7, 0x08,
    0xd5, 0x11, 0xc1, 0xe7, 0x10,
#endif // _LP64
    0xd1, 0xe9,
    0xc1, 0xe9, 0x02,
    0xc1, 0xe9, 0x04,
    0xc1, 0xe9, 0x08,
    0xc1, 0xe9, 0x10,
    0xd1, 0xea,
    0xc1, 0xea, 0x02,
    0xc1, 0xea, 0x04,
    0xc1, 0xea, 0x08,
    0xc1, 0xea, 0x10,
    0xd1, 0xeb,
    0xc1, 0xeb, 0x02,
    0xc1, 0xeb, 0x04,
    0xc1, 0xeb, 0x08,
    0xc1, 0xeb, 0x10,
#ifdef _LP64
    0x41, 0xd1, 0xe8,
    0x41, 0xc1, 0xe8, 0x02,
    0x41, 0xc1, 0xe8, 0x04,
    0x41, 0xc1, 0xe8, 0x08,
    0x41, 0xc1, 0xe8, 0x10,
    0x41, 0xd1, 0xe9,
    0x41, 0xc1, 0xe9, 0x02,
    0x41, 0xc1, 0xe9, 0x04,
    0x41, 0xc1, 0xe9, 0x08,
    0x41, 0xc1, 0xe9, 0x10,
    0x41, 0xd1, 0xea,
    0x41, 0xc1, 0xea, 0x02,
    0x41, 0xc1, 0xea, 0x04,
    0x41, 0xc1, 0xea, 0x08,
    0x41, 0xc1, 0xea, 0x10,
    0x41, 0xd1, 0xeb,
    0x41, 0xc1, 0xeb, 0x02,
    0x41, 0xc1, 0xeb, 0x04,
    0x41, 0xc1, 0xeb, 0x08,
    0x41, 0xc1, 0xeb, 0x10,
    0x41, 0xd1, 0xec,
    0x41, 0xc1, 0xec, 0x02,
    0x41, 0xc1, 0xec, 0x04,
    0x41, 0xc1, 0xec, 0x08,
    0x41, 0xc1, 0xec, 0x10,
    0x41, 0xd1, 0xed,
    0x41, 0xc1, 0xed, 0x02,
    0x41, 0xc1, 0xed, 0x04,
    0x41, 0xc1, 0xed, 0x08,
    0x41, 0xc1, 0xed, 0x10,
    0x41, 0xd1, 0xee,
    0x41, 0xc1, 0xee, 0x02,
    0x41, 0xc1, 0xee, 0x04,
    0x41, 0xc1, 0xee, 0x08,
    0x41, 0xc1, 0xee, 0x10,
    0x41, 0xd1, 0xef,
    0x41, 0xc1, 0xef, 0x02,
    0x41, 0xc1, 0xef, 0x04,
    0x41, 0xc1, 0xef, 0x08,
    0x41, 0xc1, 0xef, 0x10,
    0xd5, 0x10, 0xd1, 0xe8,
    0xd5, 0x10, 0xc1, 0xe8, 0x02,
    0xd5, 0x10, 0xc1, 0xe8, 0x04,
    0xd5, 0x10, 0xc1, 0xe8, 0x08,
    0xd5, 0x10, 0xc1, 0xe8, 0x10,
    0xd5, 0x10, 0xd1, 0xe9,
    0xd5, 0x10, 0xc1, 0xe9, 0x02,
    0xd5, 0x10, 0xc1, 0xe9, 0x04,
    0xd5, 0x10, 0xc1, 0xe9, 0x08,
    0xd5, 0x10, 0xc1, 0xe9, 0x10,
    0xd5, 0x10, 0xd1, 0xea,
    0xd5, 0x10, 0xc1, 0xea, 0x02,
    0xd5, 0x10, 0xc1, 0xea, 0x04,
    0xd5, 0x10, 0xc1, 0xea, 0x08,
    0xd5, 0x10, 0xc1, 0xea, 0x10,
    0xd5, 0x10, 0xd1, 0xeb,
    0xd5, 0x10, 0xc1, 0xeb, 0x02,
    0xd5, 0x10, 0xc1, 0xeb, 0x04,
    0xd5, 0x10, 0xc1, 0xeb, 0x08,
    0xd5, 0x10, 0xc1, 0xeb, 0x10,
    0xd5, 0x10, 0xd1, 0xec,
    0xd5, 0x10, 0xc1, 0xec, 0x02,
    0xd5, 0x10, 0xc1, 0xec, 0x04,
    0xd5, 0x10, 0xc1, 0xec, 0x08,
    0xd5, 0x10, 0xc1, 0xec, 0x10,
    0xd5, 0x10, 0xd1, 0xed,
    0xd5, 0x10, 0xc1, 0xed, 0x02,
    0xd5, 0x10, 0xc1, 0xed, 0x04,
    0xd5, 0x10, 0xc1, 0xed, 0x08,
    0xd5, 0x10, 0xc1, 0xed, 0x10,
    0xd5, 0x10, 0xd1, 0xee,
    0xd5, 0x10, 0xc1, 0xee, 0x02,
    0xd5, 0x10, 0xc1, 0xee, 0x04,
    0xd5, 0x10, 0xc1, 0xee, 0x08,
    0xd5, 0x10, 0xc1, 0xee, 0x10,
    0xd5, 0x10, 0xd1, 0xef,
    0xd5, 0x10, 0xc1, 0xef, 0x02,
    0xd5, 0x10, 0xc1, 0xef, 0x04,
    0xd5, 0x10, 0xc1, 0xef, 0x08,
    0xd5, 0x10, 0xc1, 0xef, 0x10,
    0xd5, 0x11, 0xd1, 0xe8,
    0xd5, 0x11, 0xc1, 0xe8, 0x02,
    0xd5, 0x11, 0xc1, 0xe8, 0x04,
    0xd5, 0x11, 0xc1, 0xe8, 0x08,
    0xd5, 0x11, 0xc1, 0xe8, 0x10,
    0xd5, 0x11, 0xd1, 0xe9,
    0xd5, 0x11, 0xc1, 0xe9, 0x02,
    0xd5, 0x11, 0xc1, 0xe9, 0x04,
    0xd5, 0x11, 0xc1, 0xe9, 0x08,
    0xd5, 0x11, 0xc1, 0xe9, 0x10,
    0xd5, 0x11, 0xd1, 0xea,
    0xd5, 0x11, 0xc1, 0xea, 0x02,
    0xd5, 0x11, 0xc1, 0xea, 0x04,
    0xd5, 0x11, 0xc1, 0xea, 0x08,
    0xd5, 0x11, 0xc1, 0xea, 0x10,
    0xd5, 0x11, 0xd1, 0xeb,
    0xd5, 0x11, 0xc1, 0xeb, 0x02,
    0xd5, 0x11, 0xc1, 0xeb, 0x04,
    0xd5, 0x11, 0xc1, 0xeb, 0x08,
    0xd5, 0x11, 0xc1, 0xeb, 0x10,
    0xd5, 0x11, 0xd1, 0xec,
    0xd5, 0x11, 0xc1, 0xec, 0x02,
    0xd5, 0x11, 0xc1, 0xec, 0x04,
    0xd5, 0x11, 0xc1, 0xec, 0x08,
    0xd5, 0x11, 0xc1, 0xec, 0x10,
    0xd5, 0x11, 0xd1, 0xed,
    0xd5, 0x11, 0xc1, 0xed, 0x02,
    0xd5, 0x11, 0xc1, 0xed, 0x04,
    0xd5, 0x11, 0xc1, 0xed, 0x08,
    0xd5, 0x11, 0xc1, 0xed, 0x10,
    0xd5, 0x11, 0xd1, 0xee,
    0xd5, 0x11, 0xc1, 0xee, 0x02,
    0xd5, 0x11, 0xc1, 0xee, 0x04,
    0xd5, 0x11, 0xc1, 0xee, 0x08,
    0xd5, 0x11, 0xc1, 0xee, 0x10,
    0xd5, 0x11, 0xd1, 0xef,
    0xd5, 0x11, 0xc1, 0xef, 0x02,
    0xd5, 0x11, 0xc1, 0xef, 0x04,
    0xd5, 0x11, 0xc1, 0xef, 0x08,
    0xd5, 0x11, 0xc1, 0xef, 0x10,
#endif // _LP64
    0x83, 0xe9, 0x01,
    0x83, 0xe9, 0x10,
    0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xea, 0x01,
    0x83, 0xea, 0x10,
    0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xeb, 0x01,
    0x83, 0xeb, 0x10,
    0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x83, 0xe8, 0x01,
    0x41, 0x83, 0xe8, 0x10,
    0x41, 0x81, 0xe8, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xe9, 0x01,
    0x41, 0x83, 0xe9, 0x10,
    0x41, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xea, 0x01,
    0x41, 0x83, 0xea, 0x10,
    0x41, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xeb, 0x01,
    0x41, 0x83, 0xeb, 0x10,
    0x41, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xec, 0x01,
    0x41, 0x83, 0xec, 0x10,
    0x41, 0x81, 0xec, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xed, 0x01,
    0x41, 0x83, 0xed, 0x10,
    0x41, 0x81, 0xed, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xee, 0x01,
    0x41, 0x83, 0xee, 0x10,
    0x41, 0x81, 0xee, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xef, 0x01,
    0x41, 0x83, 0xef, 0x10,
    0x41, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe8, 0x01,
    0xd5, 0x10, 0x83, 0xe8, 0x10,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xe9, 0x01,
    0xd5, 0x10, 0x83, 0xe9, 0x10,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xea, 0x01,
    0xd5, 0x10, 0x83, 0xea, 0x10,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xeb, 0x01,
    0xd5, 0x10, 0x83, 0xeb, 0x10,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xec, 0x01,
    0xd5, 0x10, 0x83, 0xec, 0x10,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xed, 0x01,
    0xd5, 0x10, 0x83, 0xed, 0x10,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xee, 0x01,
    0xd5, 0x10, 0x83, 0xee, 0x10,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xef, 0x01,
    0xd5, 0x10, 0x83, 0xef, 0x10,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe8, 0x01,
    0xd5, 0x11, 0x83, 0xe8, 0x10,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xe9, 0x01,
    0xd5, 0x11, 0x83, 0xe9, 0x10,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xea, 0x01,
    0xd5, 0x11, 0x83, 0xea, 0x10,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xeb, 0x01,
    0xd5, 0x11, 0x83, 0xeb, 0x10,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xec, 0x01,
    0xd5, 0x11, 0x83, 0xec, 0x10,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xed, 0x01,
    0xd5, 0x11, 0x83, 0xed, 0x10,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xee, 0x01,
    0xd5, 0x11, 0x83, 0xee, 0x10,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xef, 0x01,
    0xd5, 0x11, 0x83, 0xef, 0x10,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x83, 0xf1, 0x01,
    0x83, 0xf1, 0x10,
    0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xf2, 0x01,
    0x83, 0xf2, 0x10,
    0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0x83, 0xf3, 0x01,
    0x83, 0xf3, 0x10,
    0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x83, 0xf0, 0x01,
    0x41, 0x83, 0xf0, 0x10,
    0x41, 0x81, 0xf0, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf0, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf0, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf0, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf1, 0x01,
    0x41, 0x83, 0xf1, 0x10,
    0x41, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf2, 0x01,
    0x41, 0x83, 0xf2, 0x10,
    0x41, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf3, 0x01,
    0x41, 0x83, 0xf3, 0x10,
    0x41, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf4, 0x01,
    0x41, 0x83, 0xf4, 0x10,
    0x41, 0x81, 0xf4, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf4, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf4, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf4, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf5, 0x01,
    0x41, 0x83, 0xf5, 0x10,
    0x41, 0x81, 0xf5, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf5, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf5, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf5, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf6, 0x01,
    0x41, 0x83, 0xf6, 0x10,
    0x41, 0x81, 0xf6, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf6, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf6, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf6, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x83, 0xf7, 0x01,
    0x41, 0x83, 0xf7, 0x10,
    0x41, 0x81, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x81, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf0, 0x01,
    0xd5, 0x10, 0x83, 0xf0, 0x10,
    0xd5, 0x10, 0x81, 0xf0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf1, 0x01,
    0xd5, 0x10, 0x83, 0xf1, 0x10,
    0xd5, 0x10, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf2, 0x01,
    0xd5, 0x10, 0x83, 0xf2, 0x10,
    0xd5, 0x10, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf3, 0x01,
    0xd5, 0x10, 0x83, 0xf3, 0x10,
    0xd5, 0x10, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf4, 0x01,
    0xd5, 0x10, 0x83, 0xf4, 0x10,
    0xd5, 0x10, 0x81, 0xf4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf5, 0x01,
    0xd5, 0x10, 0x83, 0xf5, 0x10,
    0xd5, 0x10, 0x81, 0xf5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf6, 0x01,
    0xd5, 0x10, 0x83, 0xf6, 0x10,
    0xd5, 0x10, 0x81, 0xf6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x83, 0xf7, 0x01,
    0xd5, 0x10, 0x83, 0xf7, 0x10,
    0xd5, 0x10, 0x81, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x10, 0x81, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf0, 0x01,
    0xd5, 0x11, 0x83, 0xf0, 0x10,
    0xd5, 0x11, 0x81, 0xf0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf1, 0x01,
    0xd5, 0x11, 0x83, 0xf1, 0x10,
    0xd5, 0x11, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf2, 0x01,
    0xd5, 0x11, 0x83, 0xf2, 0x10,
    0xd5, 0x11, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf3, 0x01,
    0xd5, 0x11, 0x83, 0xf3, 0x10,
    0xd5, 0x11, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf4, 0x01,
    0xd5, 0x11, 0x83, 0xf4, 0x10,
    0xd5, 0x11, 0x81, 0xf4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf5, 0x01,
    0xd5, 0x11, 0x83, 0xf5, 0x10,
    0xd5, 0x11, 0x81, 0xf5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf6, 0x01,
    0xd5, 0x11, 0x83, 0xf6, 0x10,
    0xd5, 0x11, 0x81, 0xf6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x83, 0xf7, 0x01,
    0xd5, 0x11, 0x83, 0xf7, 0x10,
    0xd5, 0x11, 0x81, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x11, 0x81, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x0f, 0x40, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x40, 0x14, 0x03,
    0x43, 0x0f, 0x40, 0x1c, 0x08,
    0x47, 0x0f, 0x40, 0x04, 0x11,
    0x47, 0x0f, 0x40, 0x0c, 0x1a,
    0x47, 0x0f, 0x40, 0x14, 0x23,
    0x47, 0x0f, 0x40, 0x1c, 0x2c,
    0x47, 0x0f, 0x40, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x40, 0x2c, 0x3e,
    0xd5, 0xa5, 0x40, 0x34, 0x07,
    0xd5, 0xb4, 0x40, 0x3c, 0x08,
    0xd5, 0xf0, 0x40, 0x04, 0x11,
    0xd5, 0xf0, 0x40, 0x0c, 0x1a,
    0xd5, 0xf0, 0x40, 0x14, 0x23,
    0xd5, 0xf0, 0x40, 0x1c, 0x2c,
    0xd5, 0xf0, 0x40, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x40, 0x2c, 0x3e,
    0xd5, 0xf2, 0x40, 0x34, 0x07,
    0xd5, 0xf3, 0x40, 0x3c, 0x08,
    0xd5, 0xf7, 0x40, 0x04, 0x11,
    0xd5, 0xf7, 0x40, 0x0c, 0x1a,
    0xd5, 0xf7, 0x40, 0x14, 0x23,
    0xd5, 0xf7, 0x40, 0x1c, 0x2c,
    0xd5, 0xf7, 0x40, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x40, 0x2c, 0x3e,
    0xd5, 0xd5, 0x40, 0x34, 0x0f,
    0xd5, 0xc4, 0x40, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x41, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x41, 0x14, 0x03,
    0x43, 0x0f, 0x41, 0x1c, 0x08,
    0x47, 0x0f, 0x41, 0x04, 0x11,
    0x47, 0x0f, 0x41, 0x0c, 0x1a,
    0x47, 0x0f, 0x41, 0x14, 0x23,
    0x47, 0x0f, 0x41, 0x1c, 0x2c,
    0x47, 0x0f, 0x41, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x41, 0x2c, 0x3e,
    0xd5, 0xa5, 0x41, 0x34, 0x07,
    0xd5, 0xb4, 0x41, 0x3c, 0x08,
    0xd5, 0xf0, 0x41, 0x04, 0x11,
    0xd5, 0xf0, 0x41, 0x0c, 0x1a,
    0xd5, 0xf0, 0x41, 0x14, 0x23,
    0xd5, 0xf0, 0x41, 0x1c, 0x2c,
    0xd5, 0xf0, 0x41, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x41, 0x2c, 0x3e,
    0xd5, 0xf2, 0x41, 0x34, 0x07,
    0xd5, 0xf3, 0x41, 0x3c, 0x08,
    0xd5, 0xf7, 0x41, 0x04, 0x11,
    0xd5, 0xf7, 0x41, 0x0c, 0x1a,
    0xd5, 0xf7, 0x41, 0x14, 0x23,
    0xd5, 0xf7, 0x41, 0x1c, 0x2c,
    0xd5, 0xf7, 0x41, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x41, 0x2c, 0x3e,
    0xd5, 0xd5, 0x41, 0x34, 0x0f,
    0xd5, 0xc4, 0x41, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x42, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x42, 0x14, 0x03,
    0x43, 0x0f, 0x42, 0x1c, 0x08,
    0x47, 0x0f, 0x42, 0x04, 0x11,
    0x47, 0x0f, 0x42, 0x0c, 0x1a,
    0x47, 0x0f, 0x42, 0x14, 0x23,
    0x47, 0x0f, 0x42, 0x1c, 0x2c,
    0x47, 0x0f, 0x42, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x42, 0x2c, 0x3e,
    0xd5, 0xa5, 0x42, 0x34, 0x07,
    0xd5, 0xb4, 0x42, 0x3c, 0x08,
    0xd5, 0xf0, 0x42, 0x04, 0x11,
    0xd5, 0xf0, 0x42, 0x0c, 0x1a,
    0xd5, 0xf0, 0x42, 0x14, 0x23,
    0xd5, 0xf0, 0x42, 0x1c, 0x2c,
    0xd5, 0xf0, 0x42, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x42, 0x2c, 0x3e,
    0xd5, 0xf2, 0x42, 0x34, 0x07,
    0xd5, 0xf3, 0x42, 0x3c, 0x08,
    0xd5, 0xf7, 0x42, 0x04, 0x11,
    0xd5, 0xf7, 0x42, 0x0c, 0x1a,
    0xd5, 0xf7, 0x42, 0x14, 0x23,
    0xd5, 0xf7, 0x42, 0x1c, 0x2c,
    0xd5, 0xf7, 0x42, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x42, 0x2c, 0x3e,
    0xd5, 0xd5, 0x42, 0x34, 0x0f,
    0xd5, 0xc4, 0x42, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x43, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x43, 0x14, 0x03,
    0x43, 0x0f, 0x43, 0x1c, 0x08,
    0x47, 0x0f, 0x43, 0x04, 0x11,
    0x47, 0x0f, 0x43, 0x0c, 0x1a,
    0x47, 0x0f, 0x43, 0x14, 0x23,
    0x47, 0x0f, 0x43, 0x1c, 0x2c,
    0x47, 0x0f, 0x43, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x43, 0x2c, 0x3e,
    0xd5, 0xa5, 0x43, 0x34, 0x07,
    0xd5, 0xb4, 0x43, 0x3c, 0x08,
    0xd5, 0xf0, 0x43, 0x04, 0x11,
    0xd5, 0xf0, 0x43, 0x0c, 0x1a,
    0xd5, 0xf0, 0x43, 0x14, 0x23,
    0xd5, 0xf0, 0x43, 0x1c, 0x2c,
    0xd5, 0xf0, 0x43, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x43, 0x2c, 0x3e,
    0xd5, 0xf2, 0x43, 0x34, 0x07,
    0xd5, 0xf3, 0x43, 0x3c, 0x08,
    0xd5, 0xf7, 0x43, 0x04, 0x11,
    0xd5, 0xf7, 0x43, 0x0c, 0x1a,
    0xd5, 0xf7, 0x43, 0x14, 0x23,
    0xd5, 0xf7, 0x43, 0x1c, 0x2c,
    0xd5, 0xf7, 0x43, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x43, 0x2c, 0x3e,
    0xd5, 0xd5, 0x43, 0x34, 0x0f,
    0xd5, 0xc4, 0x43, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x44, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x44, 0x14, 0x03,
    0x43, 0x0f, 0x44, 0x1c, 0x08,
    0x47, 0x0f, 0x44, 0x04, 0x11,
    0x47, 0x0f, 0x44, 0x0c, 0x1a,
    0x47, 0x0f, 0x44, 0x14, 0x23,
    0x47, 0x0f, 0x44, 0x1c, 0x2c,
    0x47, 0x0f, 0x44, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x44, 0x2c, 0x3e,
    0xd5, 0xa5, 0x44, 0x34, 0x07,
    0xd5, 0xb4, 0x44, 0x3c, 0x08,
    0xd5, 0xf0, 0x44, 0x04, 0x11,
    0xd5, 0xf0, 0x44, 0x0c, 0x1a,
    0xd5, 0xf0, 0x44, 0x14, 0x23,
    0xd5, 0xf0, 0x44, 0x1c, 0x2c,
    0xd5, 0xf0, 0x44, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x44, 0x2c, 0x3e,
    0xd5, 0xf2, 0x44, 0x34, 0x07,
    0xd5, 0xf3, 0x44, 0x3c, 0x08,
    0xd5, 0xf7, 0x44, 0x04, 0x11,
    0xd5, 0xf7, 0x44, 0x0c, 0x1a,
    0xd5, 0xf7, 0x44, 0x14, 0x23,
    0xd5, 0xf7, 0x44, 0x1c, 0x2c,
    0xd5, 0xf7, 0x44, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x44, 0x2c, 0x3e,
    0xd5, 0xd5, 0x44, 0x34, 0x0f,
    0xd5, 0xc4, 0x44, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x45, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x45, 0x14, 0x03,
    0x43, 0x0f, 0x45, 0x1c, 0x08,
    0x47, 0x0f, 0x45, 0x04, 0x11,
    0x47, 0x0f, 0x45, 0x0c, 0x1a,
    0x47, 0x0f, 0x45, 0x14, 0x23,
    0x47, 0x0f, 0x45, 0x1c, 0x2c,
    0x47, 0x0f, 0x45, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x45, 0x2c, 0x3e,
    0xd5, 0xa5, 0x45, 0x34, 0x07,
    0xd5, 0xb4, 0x45, 0x3c, 0x08,
    0xd5, 0xf0, 0x45, 0x04, 0x11,
    0xd5, 0xf0, 0x45, 0x0c, 0x1a,
    0xd5, 0xf0, 0x45, 0x14, 0x23,
    0xd5, 0xf0, 0x45, 0x1c, 0x2c,
    0xd5, 0xf0, 0x45, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x45, 0x2c, 0x3e,
    0xd5, 0xf2, 0x45, 0x34, 0x07,
    0xd5, 0xf3, 0x45, 0x3c, 0x08,
    0xd5, 0xf7, 0x45, 0x04, 0x11,
    0xd5, 0xf7, 0x45, 0x0c, 0x1a,
    0xd5, 0xf7, 0x45, 0x14, 0x23,
    0xd5, 0xf7, 0x45, 0x1c, 0x2c,
    0xd5, 0xf7, 0x45, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x45, 0x2c, 0x3e,
    0xd5, 0xd5, 0x45, 0x34, 0x0f,
    0xd5, 0xc4, 0x45, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x46, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x46, 0x14, 0x03,
    0x43, 0x0f, 0x46, 0x1c, 0x08,
    0x47, 0x0f, 0x46, 0x04, 0x11,
    0x47, 0x0f, 0x46, 0x0c, 0x1a,
    0x47, 0x0f, 0x46, 0x14, 0x23,
    0x47, 0x0f, 0x46, 0x1c, 0x2c,
    0x47, 0x0f, 0x46, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x46, 0x2c, 0x3e,
    0xd5, 0xa5, 0x46, 0x34, 0x07,
    0xd5, 0xb4, 0x46, 0x3c, 0x08,
    0xd5, 0xf0, 0x46, 0x04, 0x11,
    0xd5, 0xf0, 0x46, 0x0c, 0x1a,
    0xd5, 0xf0, 0x46, 0x14, 0x23,
    0xd5, 0xf0, 0x46, 0x1c, 0x2c,
    0xd5, 0xf0, 0x46, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x46, 0x2c, 0x3e,
    0xd5, 0xf2, 0x46, 0x34, 0x07,
    0xd5, 0xf3, 0x46, 0x3c, 0x08,
    0xd5, 0xf7, 0x46, 0x04, 0x11,
    0xd5, 0xf7, 0x46, 0x0c, 0x1a,
    0xd5, 0xf7, 0x46, 0x14, 0x23,
    0xd5, 0xf7, 0x46, 0x1c, 0x2c,
    0xd5, 0xf7, 0x46, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x46, 0x2c, 0x3e,
    0xd5, 0xd5, 0x46, 0x34, 0x0f,
    0xd5, 0xc4, 0x46, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x47, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x47, 0x14, 0x03,
    0x43, 0x0f, 0x47, 0x1c, 0x08,
    0x47, 0x0f, 0x47, 0x04, 0x11,
    0x47, 0x0f, 0x47, 0x0c, 0x1a,
    0x47, 0x0f, 0x47, 0x14, 0x23,
    0x47, 0x0f, 0x47, 0x1c, 0x2c,
    0x47, 0x0f, 0x47, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x47, 0x2c, 0x3e,
    0xd5, 0xa5, 0x47, 0x34, 0x07,
    0xd5, 0xb4, 0x47, 0x3c, 0x08,
    0xd5, 0xf0, 0x47, 0x04, 0x11,
    0xd5, 0xf0, 0x47, 0x0c, 0x1a,
    0xd5, 0xf0, 0x47, 0x14, 0x23,
    0xd5, 0xf0, 0x47, 0x1c, 0x2c,
    0xd5, 0xf0, 0x47, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x47, 0x2c, 0x3e,
    0xd5, 0xf2, 0x47, 0x34, 0x07,
    0xd5, 0xf3, 0x47, 0x3c, 0x08,
    0xd5, 0xf7, 0x47, 0x04, 0x11,
    0xd5, 0xf7, 0x47, 0x0c, 0x1a,
    0xd5, 0xf7, 0x47, 0x14, 0x23,
    0xd5, 0xf7, 0x47, 0x1c, 0x2c,
    0xd5, 0xf7, 0x47, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x47, 0x2c, 0x3e,
    0xd5, 0xd5, 0x47, 0x34, 0x0f,
    0xd5, 0xc4, 0x47, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x48, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x48, 0x14, 0x03,
    0x43, 0x0f, 0x48, 0x1c, 0x08,
    0x47, 0x0f, 0x48, 0x04, 0x11,
    0x47, 0x0f, 0x48, 0x0c, 0x1a,
    0x47, 0x0f, 0x48, 0x14, 0x23,
    0x47, 0x0f, 0x48, 0x1c, 0x2c,
    0x47, 0x0f, 0x48, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x48, 0x2c, 0x3e,
    0xd5, 0xa5, 0x48, 0x34, 0x07,
    0xd5, 0xb4, 0x48, 0x3c, 0x08,
    0xd5, 0xf0, 0x48, 0x04, 0x11,
    0xd5, 0xf0, 0x48, 0x0c, 0x1a,
    0xd5, 0xf0, 0x48, 0x14, 0x23,
    0xd5, 0xf0, 0x48, 0x1c, 0x2c,
    0xd5, 0xf0, 0x48, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x48, 0x2c, 0x3e,
    0xd5, 0xf2, 0x48, 0x34, 0x07,
    0xd5, 0xf3, 0x48, 0x3c, 0x08,
    0xd5, 0xf7, 0x48, 0x04, 0x11,
    0xd5, 0xf7, 0x48, 0x0c, 0x1a,
    0xd5, 0xf7, 0x48, 0x14, 0x23,
    0xd5, 0xf7, 0x48, 0x1c, 0x2c,
    0xd5, 0xf7, 0x48, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x48, 0x2c, 0x3e,
    0xd5, 0xd5, 0x48, 0x34, 0x0f,
    0xd5, 0xc4, 0x48, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x49, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x49, 0x14, 0x03,
    0x43, 0x0f, 0x49, 0x1c, 0x08,
    0x47, 0x0f, 0x49, 0x04, 0x11,
    0x47, 0x0f, 0x49, 0x0c, 0x1a,
    0x47, 0x0f, 0x49, 0x14, 0x23,
    0x47, 0x0f, 0x49, 0x1c, 0x2c,
    0x47, 0x0f, 0x49, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x49, 0x2c, 0x3e,
    0xd5, 0xa5, 0x49, 0x34, 0x07,
    0xd5, 0xb4, 0x49, 0x3c, 0x08,
    0xd5, 0xf0, 0x49, 0x04, 0x11,
    0xd5, 0xf0, 0x49, 0x0c, 0x1a,
    0xd5, 0xf0, 0x49, 0x14, 0x23,
    0xd5, 0xf0, 0x49, 0x1c, 0x2c,
    0xd5, 0xf0, 0x49, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x49, 0x2c, 0x3e,
    0xd5, 0xf2, 0x49, 0x34, 0x07,
    0xd5, 0xf3, 0x49, 0x3c, 0x08,
    0xd5, 0xf7, 0x49, 0x04, 0x11,
    0xd5, 0xf7, 0x49, 0x0c, 0x1a,
    0xd5, 0xf7, 0x49, 0x14, 0x23,
    0xd5, 0xf7, 0x49, 0x1c, 0x2c,
    0xd5, 0xf7, 0x49, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x49, 0x2c, 0x3e,
    0xd5, 0xd5, 0x49, 0x34, 0x0f,
    0xd5, 0xc4, 0x49, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x4a, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x4a, 0x14, 0x03,
    0x43, 0x0f, 0x4a, 0x1c, 0x08,
    0x47, 0x0f, 0x4a, 0x04, 0x11,
    0x47, 0x0f, 0x4a, 0x0c, 0x1a,
    0x47, 0x0f, 0x4a, 0x14, 0x23,
    0x47, 0x0f, 0x4a, 0x1c, 0x2c,
    0x47, 0x0f, 0x4a, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x4a, 0x2c, 0x3e,
    0xd5, 0xa5, 0x4a, 0x34, 0x07,
    0xd5, 0xb4, 0x4a, 0x3c, 0x08,
    0xd5, 0xf0, 0x4a, 0x04, 0x11,
    0xd5, 0xf0, 0x4a, 0x0c, 0x1a,
    0xd5, 0xf0, 0x4a, 0x14, 0x23,
    0xd5, 0xf0, 0x4a, 0x1c, 0x2c,
    0xd5, 0xf0, 0x4a, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x4a, 0x2c, 0x3e,
    0xd5, 0xf2, 0x4a, 0x34, 0x07,
    0xd5, 0xf3, 0x4a, 0x3c, 0x08,
    0xd5, 0xf7, 0x4a, 0x04, 0x11,
    0xd5, 0xf7, 0x4a, 0x0c, 0x1a,
    0xd5, 0xf7, 0x4a, 0x14, 0x23,
    0xd5, 0xf7, 0x4a, 0x1c, 0x2c,
    0xd5, 0xf7, 0x4a, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x4a, 0x2c, 0x3e,
    0xd5, 0xd5, 0x4a, 0x34, 0x0f,
    0xd5, 0xc4, 0x4a, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x4b, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x4b, 0x14, 0x03,
    0x43, 0x0f, 0x4b, 0x1c, 0x08,
    0x47, 0x0f, 0x4b, 0x04, 0x11,
    0x47, 0x0f, 0x4b, 0x0c, 0x1a,
    0x47, 0x0f, 0x4b, 0x14, 0x23,
    0x47, 0x0f, 0x4b, 0x1c, 0x2c,
    0x47, 0x0f, 0x4b, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x4b, 0x2c, 0x3e,
    0xd5, 0xa5, 0x4b, 0x34, 0x07,
    0xd5, 0xb4, 0x4b, 0x3c, 0x08,
    0xd5, 0xf0, 0x4b, 0x04, 0x11,
    0xd5, 0xf0, 0x4b, 0x0c, 0x1a,
    0xd5, 0xf0, 0x4b, 0x14, 0x23,
    0xd5, 0xf0, 0x4b, 0x1c, 0x2c,
    0xd5, 0xf0, 0x4b, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x4b, 0x2c, 0x3e,
    0xd5, 0xf2, 0x4b, 0x34, 0x07,
    0xd5, 0xf3, 0x4b, 0x3c, 0x08,
    0xd5, 0xf7, 0x4b, 0x04, 0x11,
    0xd5, 0xf7, 0x4b, 0x0c, 0x1a,
    0xd5, 0xf7, 0x4b, 0x14, 0x23,
    0xd5, 0xf7, 0x4b, 0x1c, 0x2c,
    0xd5, 0xf7, 0x4b, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x4b, 0x2c, 0x3e,
    0xd5, 0xd5, 0x4b, 0x34, 0x0f,
    0xd5, 0xc4, 0x4b, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x4c, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x4c, 0x14, 0x03,
    0x43, 0x0f, 0x4c, 0x1c, 0x08,
    0x47, 0x0f, 0x4c, 0x04, 0x11,
    0x47, 0x0f, 0x4c, 0x0c, 0x1a,
    0x47, 0x0f, 0x4c, 0x14, 0x23,
    0x47, 0x0f, 0x4c, 0x1c, 0x2c,
    0x47, 0x0f, 0x4c, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x4c, 0x2c, 0x3e,
    0xd5, 0xa5, 0x4c, 0x34, 0x07,
    0xd5, 0xb4, 0x4c, 0x3c, 0x08,
    0xd5, 0xf0, 0x4c, 0x04, 0x11,
    0xd5, 0xf0, 0x4c, 0x0c, 0x1a,
    0xd5, 0xf0, 0x4c, 0x14, 0x23,
    0xd5, 0xf0, 0x4c, 0x1c, 0x2c,
    0xd5, 0xf0, 0x4c, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x4c, 0x2c, 0x3e,
    0xd5, 0xf2, 0x4c, 0x34, 0x07,
    0xd5, 0xf3, 0x4c, 0x3c, 0x08,
    0xd5, 0xf7, 0x4c, 0x04, 0x11,
    0xd5, 0xf7, 0x4c, 0x0c, 0x1a,
    0xd5, 0xf7, 0x4c, 0x14, 0x23,
    0xd5, 0xf7, 0x4c, 0x1c, 0x2c,
    0xd5, 0xf7, 0x4c, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x4c, 0x2c, 0x3e,
    0xd5, 0xd5, 0x4c, 0x34, 0x0f,
    0xd5, 0xc4, 0x4c, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x4d, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x4d, 0x14, 0x03,
    0x43, 0x0f, 0x4d, 0x1c, 0x08,
    0x47, 0x0f, 0x4d, 0x04, 0x11,
    0x47, 0x0f, 0x4d, 0x0c, 0x1a,
    0x47, 0x0f, 0x4d, 0x14, 0x23,
    0x47, 0x0f, 0x4d, 0x1c, 0x2c,
    0x47, 0x0f, 0x4d, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x4d, 0x2c, 0x3e,
    0xd5, 0xa5, 0x4d, 0x34, 0x07,
    0xd5, 0xb4, 0x4d, 0x3c, 0x08,
    0xd5, 0xf0, 0x4d, 0x04, 0x11,
    0xd5, 0xf0, 0x4d, 0x0c, 0x1a,
    0xd5, 0xf0, 0x4d, 0x14, 0x23,
    0xd5, 0xf0, 0x4d, 0x1c, 0x2c,
    0xd5, 0xf0, 0x4d, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x4d, 0x2c, 0x3e,
    0xd5, 0xf2, 0x4d, 0x34, 0x07,
    0xd5, 0xf3, 0x4d, 0x3c, 0x08,
    0xd5, 0xf7, 0x4d, 0x04, 0x11,
    0xd5, 0xf7, 0x4d, 0x0c, 0x1a,
    0xd5, 0xf7, 0x4d, 0x14, 0x23,
    0xd5, 0xf7, 0x4d, 0x1c, 0x2c,
    0xd5, 0xf7, 0x4d, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x4d, 0x2c, 0x3e,
    0xd5, 0xd5, 0x4d, 0x34, 0x0f,
    0xd5, 0xc4, 0x4d, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x4e, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x4e, 0x14, 0x03,
    0x43, 0x0f, 0x4e, 0x1c, 0x08,
    0x47, 0x0f, 0x4e, 0x04, 0x11,
    0x47, 0x0f, 0x4e, 0x0c, 0x1a,
    0x47, 0x0f, 0x4e, 0x14, 0x23,
    0x47, 0x0f, 0x4e, 0x1c, 0x2c,
    0x47, 0x0f, 0x4e, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x4e, 0x2c, 0x3e,
    0xd5, 0xa5, 0x4e, 0x34, 0x07,
    0xd5, 0xb4, 0x4e, 0x3c, 0x08,
    0xd5, 0xf0, 0x4e, 0x04, 0x11,
    0xd5, 0xf0, 0x4e, 0x0c, 0x1a,
    0xd5, 0xf0, 0x4e, 0x14, 0x23,
    0xd5, 0xf0, 0x4e, 0x1c, 0x2c,
    0xd5, 0xf0, 0x4e, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x4e, 0x2c, 0x3e,
    0xd5, 0xf2, 0x4e, 0x34, 0x07,
    0xd5, 0xf3, 0x4e, 0x3c, 0x08,
    0xd5, 0xf7, 0x4e, 0x04, 0x11,
    0xd5, 0xf7, 0x4e, 0x0c, 0x1a,
    0xd5, 0xf7, 0x4e, 0x14, 0x23,
    0xd5, 0xf7, 0x4e, 0x1c, 0x2c,
    0xd5, 0xf7, 0x4e, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x4e, 0x2c, 0x3e,
    0xd5, 0xd5, 0x4e, 0x34, 0x0f,
    0xd5, 0xc4, 0x4e, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x4f, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0x0f, 0x4f, 0x14, 0x03,
    0x43, 0x0f, 0x4f, 0x1c, 0x08,
    0x47, 0x0f, 0x4f, 0x04, 0x11,
    0x47, 0x0f, 0x4f, 0x0c, 0x1a,
    0x47, 0x0f, 0x4f, 0x14, 0x23,
    0x47, 0x0f, 0x4f, 0x1c, 0x2c,
    0x47, 0x0f, 0x4f, 0x64, 0x35, 0x00,
    0x47, 0x0f, 0x4f, 0x2c, 0x3e,
    0xd5, 0xa5, 0x4f, 0x34, 0x07,
    0xd5, 0xb4, 0x4f, 0x3c, 0x08,
    0xd5, 0xf0, 0x4f, 0x04, 0x11,
    0xd5, 0xf0, 0x4f, 0x0c, 0x1a,
    0xd5, 0xf0, 0x4f, 0x14, 0x23,
    0xd5, 0xf0, 0x4f, 0x1c, 0x2c,
    0xd5, 0xf0, 0x4f, 0x64, 0x35, 0x00,
    0xd5, 0xf0, 0x4f, 0x2c, 0x3e,
    0xd5, 0xf2, 0x4f, 0x34, 0x07,
    0xd5, 0xf3, 0x4f, 0x3c, 0x08,
    0xd5, 0xf7, 0x4f, 0x04, 0x11,
    0xd5, 0xf7, 0x4f, 0x0c, 0x1a,
    0xd5, 0xf7, 0x4f, 0x14, 0x23,
    0xd5, 0xf7, 0x4f, 0x1c, 0x2c,
    0xd5, 0xf7, 0x4f, 0x64, 0x35, 0x00,
    0xd5, 0xf7, 0x4f, 0x2c, 0x3e,
    0xd5, 0xd5, 0x4f, 0x34, 0x0f,
    0xd5, 0xc4, 0x4f, 0x3c, 0x11,
#endif // _LP64
    0x0f, 0x90, 0xc1,
    0x0f, 0x90, 0xc2,
    0x0f, 0x90, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x90, 0xc0,
    0x41, 0x0f, 0x90, 0xc1,
    0x41, 0x0f, 0x90, 0xc2,
    0x41, 0x0f, 0x90, 0xc3,
    0x41, 0x0f, 0x90, 0xc4,
    0x41, 0x0f, 0x90, 0xc5,
    0x41, 0x0f, 0x90, 0xc6,
    0x41, 0x0f, 0x90, 0xc7,
    0xd5, 0x90, 0x90, 0xc0,
    0xd5, 0x90, 0x90, 0xc1,
    0xd5, 0x90, 0x90, 0xc2,
    0xd5, 0x90, 0x90, 0xc3,
    0xd5, 0x90, 0x90, 0xc4,
    0xd5, 0x90, 0x90, 0xc5,
    0xd5, 0x90, 0x90, 0xc6,
    0xd5, 0x90, 0x90, 0xc7,
    0xd5, 0x91, 0x90, 0xc0,
    0xd5, 0x91, 0x90, 0xc1,
    0xd5, 0x91, 0x90, 0xc2,
    0xd5, 0x91, 0x90, 0xc3,
    0xd5, 0x91, 0x90, 0xc4,
    0xd5, 0x91, 0x90, 0xc5,
    0xd5, 0x91, 0x90, 0xc6,
    0xd5, 0x91, 0x90, 0xc7,
#endif // _LP64
    0x0f, 0x91, 0xc1,
    0x0f, 0x91, 0xc2,
    0x0f, 0x91, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x91, 0xc0,
    0x41, 0x0f, 0x91, 0xc1,
    0x41, 0x0f, 0x91, 0xc2,
    0x41, 0x0f, 0x91, 0xc3,
    0x41, 0x0f, 0x91, 0xc4,
    0x41, 0x0f, 0x91, 0xc5,
    0x41, 0x0f, 0x91, 0xc6,
    0x41, 0x0f, 0x91, 0xc7,
    0xd5, 0x90, 0x91, 0xc0,
    0xd5, 0x90, 0x91, 0xc1,
    0xd5, 0x90, 0x91, 0xc2,
    0xd5, 0x90, 0x91, 0xc3,
    0xd5, 0x90, 0x91, 0xc4,
    0xd5, 0x90, 0x91, 0xc5,
    0xd5, 0x90, 0x91, 0xc6,
    0xd5, 0x90, 0x91, 0xc7,
    0xd5, 0x91, 0x91, 0xc0,
    0xd5, 0x91, 0x91, 0xc1,
    0xd5, 0x91, 0x91, 0xc2,
    0xd5, 0x91, 0x91, 0xc3,
    0xd5, 0x91, 0x91, 0xc4,
    0xd5, 0x91, 0x91, 0xc5,
    0xd5, 0x91, 0x91, 0xc6,
    0xd5, 0x91, 0x91, 0xc7,
#endif // _LP64
    0x0f, 0x92, 0xc1,
    0x0f, 0x92, 0xc2,
    0x0f, 0x92, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x92, 0xc0,
    0x41, 0x0f, 0x92, 0xc1,
    0x41, 0x0f, 0x92, 0xc2,
    0x41, 0x0f, 0x92, 0xc3,
    0x41, 0x0f, 0x92, 0xc4,
    0x41, 0x0f, 0x92, 0xc5,
    0x41, 0x0f, 0x92, 0xc6,
    0x41, 0x0f, 0x92, 0xc7,
    0xd5, 0x90, 0x92, 0xc0,
    0xd5, 0x90, 0x92, 0xc1,
    0xd5, 0x90, 0x92, 0xc2,
    0xd5, 0x90, 0x92, 0xc3,
    0xd5, 0x90, 0x92, 0xc4,
    0xd5, 0x90, 0x92, 0xc5,
    0xd5, 0x90, 0x92, 0xc6,
    0xd5, 0x90, 0x92, 0xc7,
    0xd5, 0x91, 0x92, 0xc0,
    0xd5, 0x91, 0x92, 0xc1,
    0xd5, 0x91, 0x92, 0xc2,
    0xd5, 0x91, 0x92, 0xc3,
    0xd5, 0x91, 0x92, 0xc4,
    0xd5, 0x91, 0x92, 0xc5,
    0xd5, 0x91, 0x92, 0xc6,
    0xd5, 0x91, 0x92, 0xc7,
#endif // _LP64
    0x0f, 0x93, 0xc1,
    0x0f, 0x93, 0xc2,
    0x0f, 0x93, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x93, 0xc0,
    0x41, 0x0f, 0x93, 0xc1,
    0x41, 0x0f, 0x93, 0xc2,
    0x41, 0x0f, 0x93, 0xc3,
    0x41, 0x0f, 0x93, 0xc4,
    0x41, 0x0f, 0x93, 0xc5,
    0x41, 0x0f, 0x93, 0xc6,
    0x41, 0x0f, 0x93, 0xc7,
    0xd5, 0x90, 0x93, 0xc0,
    0xd5, 0x90, 0x93, 0xc1,
    0xd5, 0x90, 0x93, 0xc2,
    0xd5, 0x90, 0x93, 0xc3,
    0xd5, 0x90, 0x93, 0xc4,
    0xd5, 0x90, 0x93, 0xc5,
    0xd5, 0x90, 0x93, 0xc6,
    0xd5, 0x90, 0x93, 0xc7,
    0xd5, 0x91, 0x93, 0xc0,
    0xd5, 0x91, 0x93, 0xc1,
    0xd5, 0x91, 0x93, 0xc2,
    0xd5, 0x91, 0x93, 0xc3,
    0xd5, 0x91, 0x93, 0xc4,
    0xd5, 0x91, 0x93, 0xc5,
    0xd5, 0x91, 0x93, 0xc6,
    0xd5, 0x91, 0x93, 0xc7,
#endif // _LP64
    0x0f, 0x94, 0xc1,
    0x0f, 0x94, 0xc2,
    0x0f, 0x94, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x94, 0xc0,
    0x41, 0x0f, 0x94, 0xc1,
    0x41, 0x0f, 0x94, 0xc2,
    0x41, 0x0f, 0x94, 0xc3,
    0x41, 0x0f, 0x94, 0xc4,
    0x41, 0x0f, 0x94, 0xc5,
    0x41, 0x0f, 0x94, 0xc6,
    0x41, 0x0f, 0x94, 0xc7,
    0xd5, 0x90, 0x94, 0xc0,
    0xd5, 0x90, 0x94, 0xc1,
    0xd5, 0x90, 0x94, 0xc2,
    0xd5, 0x90, 0x94, 0xc3,
    0xd5, 0x90, 0x94, 0xc4,
    0xd5, 0x90, 0x94, 0xc5,
    0xd5, 0x90, 0x94, 0xc6,
    0xd5, 0x90, 0x94, 0xc7,
    0xd5, 0x91, 0x94, 0xc0,
    0xd5, 0x91, 0x94, 0xc1,
    0xd5, 0x91, 0x94, 0xc2,
    0xd5, 0x91, 0x94, 0xc3,
    0xd5, 0x91, 0x94, 0xc4,
    0xd5, 0x91, 0x94, 0xc5,
    0xd5, 0x91, 0x94, 0xc6,
    0xd5, 0x91, 0x94, 0xc7,
#endif // _LP64
    0x0f, 0x95, 0xc1,
    0x0f, 0x95, 0xc2,
    0x0f, 0x95, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x95, 0xc0,
    0x41, 0x0f, 0x95, 0xc1,
    0x41, 0x0f, 0x95, 0xc2,
    0x41, 0x0f, 0x95, 0xc3,
    0x41, 0x0f, 0x95, 0xc4,
    0x41, 0x0f, 0x95, 0xc5,
    0x41, 0x0f, 0x95, 0xc6,
    0x41, 0x0f, 0x95, 0xc7,
    0xd5, 0x90, 0x95, 0xc0,
    0xd5, 0x90, 0x95, 0xc1,
    0xd5, 0x90, 0x95, 0xc2,
    0xd5, 0x90, 0x95, 0xc3,
    0xd5, 0x90, 0x95, 0xc4,
    0xd5, 0x90, 0x95, 0xc5,
    0xd5, 0x90, 0x95, 0xc6,
    0xd5, 0x90, 0x95, 0xc7,
    0xd5, 0x91, 0x95, 0xc0,
    0xd5, 0x91, 0x95, 0xc1,
    0xd5, 0x91, 0x95, 0xc2,
    0xd5, 0x91, 0x95, 0xc3,
    0xd5, 0x91, 0x95, 0xc4,
    0xd5, 0x91, 0x95, 0xc5,
    0xd5, 0x91, 0x95, 0xc6,
    0xd5, 0x91, 0x95, 0xc7,
#endif // _LP64
    0x0f, 0x96, 0xc1,
    0x0f, 0x96, 0xc2,
    0x0f, 0x96, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x96, 0xc0,
    0x41, 0x0f, 0x96, 0xc1,
    0x41, 0x0f, 0x96, 0xc2,
    0x41, 0x0f, 0x96, 0xc3,
    0x41, 0x0f, 0x96, 0xc4,
    0x41, 0x0f, 0x96, 0xc5,
    0x41, 0x0f, 0x96, 0xc6,
    0x41, 0x0f, 0x96, 0xc7,
    0xd5, 0x90, 0x96, 0xc0,
    0xd5, 0x90, 0x96, 0xc1,
    0xd5, 0x90, 0x96, 0xc2,
    0xd5, 0x90, 0x96, 0xc3,
    0xd5, 0x90, 0x96, 0xc4,
    0xd5, 0x90, 0x96, 0xc5,
    0xd5, 0x90, 0x96, 0xc6,
    0xd5, 0x90, 0x96, 0xc7,
    0xd5, 0x91, 0x96, 0xc0,
    0xd5, 0x91, 0x96, 0xc1,
    0xd5, 0x91, 0x96, 0xc2,
    0xd5, 0x91, 0x96, 0xc3,
    0xd5, 0x91, 0x96, 0xc4,
    0xd5, 0x91, 0x96, 0xc5,
    0xd5, 0x91, 0x96, 0xc6,
    0xd5, 0x91, 0x96, 0xc7,
#endif // _LP64
    0x0f, 0x97, 0xc1,
    0x0f, 0x97, 0xc2,
    0x0f, 0x97, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x97, 0xc0,
    0x41, 0x0f, 0x97, 0xc1,
    0x41, 0x0f, 0x97, 0xc2,
    0x41, 0x0f, 0x97, 0xc3,
    0x41, 0x0f, 0x97, 0xc4,
    0x41, 0x0f, 0x97, 0xc5,
    0x41, 0x0f, 0x97, 0xc6,
    0x41, 0x0f, 0x97, 0xc7,
    0xd5, 0x90, 0x97, 0xc0,
    0xd5, 0x90, 0x97, 0xc1,
    0xd5, 0x90, 0x97, 0xc2,
    0xd5, 0x90, 0x97, 0xc3,
    0xd5, 0x90, 0x97, 0xc4,
    0xd5, 0x90, 0x97, 0xc5,
    0xd5, 0x90, 0x97, 0xc6,
    0xd5, 0x90, 0x97, 0xc7,
    0xd5, 0x91, 0x97, 0xc0,
    0xd5, 0x91, 0x97, 0xc1,
    0xd5, 0x91, 0x97, 0xc2,
    0xd5, 0x91, 0x97, 0xc3,
    0xd5, 0x91, 0x97, 0xc4,
    0xd5, 0x91, 0x97, 0xc5,
    0xd5, 0x91, 0x97, 0xc6,
    0xd5, 0x91, 0x97, 0xc7,
#endif // _LP64
    0x0f, 0x98, 0xc1,
    0x0f, 0x98, 0xc2,
    0x0f, 0x98, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x98, 0xc0,
    0x41, 0x0f, 0x98, 0xc1,
    0x41, 0x0f, 0x98, 0xc2,
    0x41, 0x0f, 0x98, 0xc3,
    0x41, 0x0f, 0x98, 0xc4,
    0x41, 0x0f, 0x98, 0xc5,
    0x41, 0x0f, 0x98, 0xc6,
    0x41, 0x0f, 0x98, 0xc7,
    0xd5, 0x90, 0x98, 0xc0,
    0xd5, 0x90, 0x98, 0xc1,
    0xd5, 0x90, 0x98, 0xc2,
    0xd5, 0x90, 0x98, 0xc3,
    0xd5, 0x90, 0x98, 0xc4,
    0xd5, 0x90, 0x98, 0xc5,
    0xd5, 0x90, 0x98, 0xc6,
    0xd5, 0x90, 0x98, 0xc7,
    0xd5, 0x91, 0x98, 0xc0,
    0xd5, 0x91, 0x98, 0xc1,
    0xd5, 0x91, 0x98, 0xc2,
    0xd5, 0x91, 0x98, 0xc3,
    0xd5, 0x91, 0x98, 0xc4,
    0xd5, 0x91, 0x98, 0xc5,
    0xd5, 0x91, 0x98, 0xc6,
    0xd5, 0x91, 0x98, 0xc7,
#endif // _LP64
    0x0f, 0x99, 0xc1,
    0x0f, 0x99, 0xc2,
    0x0f, 0x99, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x99, 0xc0,
    0x41, 0x0f, 0x99, 0xc1,
    0x41, 0x0f, 0x99, 0xc2,
    0x41, 0x0f, 0x99, 0xc3,
    0x41, 0x0f, 0x99, 0xc4,
    0x41, 0x0f, 0x99, 0xc5,
    0x41, 0x0f, 0x99, 0xc6,
    0x41, 0x0f, 0x99, 0xc7,
    0xd5, 0x90, 0x99, 0xc0,
    0xd5, 0x90, 0x99, 0xc1,
    0xd5, 0x90, 0x99, 0xc2,
    0xd5, 0x90, 0x99, 0xc3,
    0xd5, 0x90, 0x99, 0xc4,
    0xd5, 0x90, 0x99, 0xc5,
    0xd5, 0x90, 0x99, 0xc6,
    0xd5, 0x90, 0x99, 0xc7,
    0xd5, 0x91, 0x99, 0xc0,
    0xd5, 0x91, 0x99, 0xc1,
    0xd5, 0x91, 0x99, 0xc2,
    0xd5, 0x91, 0x99, 0xc3,
    0xd5, 0x91, 0x99, 0xc4,
    0xd5, 0x91, 0x99, 0xc5,
    0xd5, 0x91, 0x99, 0xc6,
    0xd5, 0x91, 0x99, 0xc7,
#endif // _LP64
    0x0f, 0x9a, 0xc1,
    0x0f, 0x9a, 0xc2,
    0x0f, 0x9a, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x9a, 0xc0,
    0x41, 0x0f, 0x9a, 0xc1,
    0x41, 0x0f, 0x9a, 0xc2,
    0x41, 0x0f, 0x9a, 0xc3,
    0x41, 0x0f, 0x9a, 0xc4,
    0x41, 0x0f, 0x9a, 0xc5,
    0x41, 0x0f, 0x9a, 0xc6,
    0x41, 0x0f, 0x9a, 0xc7,
    0xd5, 0x90, 0x9a, 0xc0,
    0xd5, 0x90, 0x9a, 0xc1,
    0xd5, 0x90, 0x9a, 0xc2,
    0xd5, 0x90, 0x9a, 0xc3,
    0xd5, 0x90, 0x9a, 0xc4,
    0xd5, 0x90, 0x9a, 0xc5,
    0xd5, 0x90, 0x9a, 0xc6,
    0xd5, 0x90, 0x9a, 0xc7,
    0xd5, 0x91, 0x9a, 0xc0,
    0xd5, 0x91, 0x9a, 0xc1,
    0xd5, 0x91, 0x9a, 0xc2,
    0xd5, 0x91, 0x9a, 0xc3,
    0xd5, 0x91, 0x9a, 0xc4,
    0xd5, 0x91, 0x9a, 0xc5,
    0xd5, 0x91, 0x9a, 0xc6,
    0xd5, 0x91, 0x9a, 0xc7,
#endif // _LP64
    0x0f, 0x9b, 0xc1,
    0x0f, 0x9b, 0xc2,
    0x0f, 0x9b, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x9b, 0xc0,
    0x41, 0x0f, 0x9b, 0xc1,
    0x41, 0x0f, 0x9b, 0xc2,
    0x41, 0x0f, 0x9b, 0xc3,
    0x41, 0x0f, 0x9b, 0xc4,
    0x41, 0x0f, 0x9b, 0xc5,
    0x41, 0x0f, 0x9b, 0xc6,
    0x41, 0x0f, 0x9b, 0xc7,
    0xd5, 0x90, 0x9b, 0xc0,
    0xd5, 0x90, 0x9b, 0xc1,
    0xd5, 0x90, 0x9b, 0xc2,
    0xd5, 0x90, 0x9b, 0xc3,
    0xd5, 0x90, 0x9b, 0xc4,
    0xd5, 0x90, 0x9b, 0xc5,
    0xd5, 0x90, 0x9b, 0xc6,
    0xd5, 0x90, 0x9b, 0xc7,
    0xd5, 0x91, 0x9b, 0xc0,
    0xd5, 0x91, 0x9b, 0xc1,
    0xd5, 0x91, 0x9b, 0xc2,
    0xd5, 0x91, 0x9b, 0xc3,
    0xd5, 0x91, 0x9b, 0xc4,
    0xd5, 0x91, 0x9b, 0xc5,
    0xd5, 0x91, 0x9b, 0xc6,
    0xd5, 0x91, 0x9b, 0xc7,
#endif // _LP64
    0x0f, 0x9c, 0xc1,
    0x0f, 0x9c, 0xc2,
    0x0f, 0x9c, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x9c, 0xc0,
    0x41, 0x0f, 0x9c, 0xc1,
    0x41, 0x0f, 0x9c, 0xc2,
    0x41, 0x0f, 0x9c, 0xc3,
    0x41, 0x0f, 0x9c, 0xc4,
    0x41, 0x0f, 0x9c, 0xc5,
    0x41, 0x0f, 0x9c, 0xc6,
    0x41, 0x0f, 0x9c, 0xc7,
    0xd5, 0x90, 0x9c, 0xc0,
    0xd5, 0x90, 0x9c, 0xc1,
    0xd5, 0x90, 0x9c, 0xc2,
    0xd5, 0x90, 0x9c, 0xc3,
    0xd5, 0x90, 0x9c, 0xc4,
    0xd5, 0x90, 0x9c, 0xc5,
    0xd5, 0x90, 0x9c, 0xc6,
    0xd5, 0x90, 0x9c, 0xc7,
    0xd5, 0x91, 0x9c, 0xc0,
    0xd5, 0x91, 0x9c, 0xc1,
    0xd5, 0x91, 0x9c, 0xc2,
    0xd5, 0x91, 0x9c, 0xc3,
    0xd5, 0x91, 0x9c, 0xc4,
    0xd5, 0x91, 0x9c, 0xc5,
    0xd5, 0x91, 0x9c, 0xc6,
    0xd5, 0x91, 0x9c, 0xc7,
#endif // _LP64
    0x0f, 0x9d, 0xc1,
    0x0f, 0x9d, 0xc2,
    0x0f, 0x9d, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x9d, 0xc0,
    0x41, 0x0f, 0x9d, 0xc1,
    0x41, 0x0f, 0x9d, 0xc2,
    0x41, 0x0f, 0x9d, 0xc3,
    0x41, 0x0f, 0x9d, 0xc4,
    0x41, 0x0f, 0x9d, 0xc5,
    0x41, 0x0f, 0x9d, 0xc6,
    0x41, 0x0f, 0x9d, 0xc7,
    0xd5, 0x90, 0x9d, 0xc0,
    0xd5, 0x90, 0x9d, 0xc1,
    0xd5, 0x90, 0x9d, 0xc2,
    0xd5, 0x90, 0x9d, 0xc3,
    0xd5, 0x90, 0x9d, 0xc4,
    0xd5, 0x90, 0x9d, 0xc5,
    0xd5, 0x90, 0x9d, 0xc6,
    0xd5, 0x90, 0x9d, 0xc7,
    0xd5, 0x91, 0x9d, 0xc0,
    0xd5, 0x91, 0x9d, 0xc1,
    0xd5, 0x91, 0x9d, 0xc2,
    0xd5, 0x91, 0x9d, 0xc3,
    0xd5, 0x91, 0x9d, 0xc4,
    0xd5, 0x91, 0x9d, 0xc5,
    0xd5, 0x91, 0x9d, 0xc6,
    0xd5, 0x91, 0x9d, 0xc7,
#endif // _LP64
    0x0f, 0x9e, 0xc1,
    0x0f, 0x9e, 0xc2,
    0x0f, 0x9e, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x9e, 0xc0,
    0x41, 0x0f, 0x9e, 0xc1,
    0x41, 0x0f, 0x9e, 0xc2,
    0x41, 0x0f, 0x9e, 0xc3,
    0x41, 0x0f, 0x9e, 0xc4,
    0x41, 0x0f, 0x9e, 0xc5,
    0x41, 0x0f, 0x9e, 0xc6,
    0x41, 0x0f, 0x9e, 0xc7,
    0xd5, 0x90, 0x9e, 0xc0,
    0xd5, 0x90, 0x9e, 0xc1,
    0xd5, 0x90, 0x9e, 0xc2,
    0xd5, 0x90, 0x9e, 0xc3,
    0xd5, 0x90, 0x9e, 0xc4,
    0xd5, 0x90, 0x9e, 0xc5,
    0xd5, 0x90, 0x9e, 0xc6,
    0xd5, 0x90, 0x9e, 0xc7,
    0xd5, 0x91, 0x9e, 0xc0,
    0xd5, 0x91, 0x9e, 0xc1,
    0xd5, 0x91, 0x9e, 0xc2,
    0xd5, 0x91, 0x9e, 0xc3,
    0xd5, 0x91, 0x9e, 0xc4,
    0xd5, 0x91, 0x9e, 0xc5,
    0xd5, 0x91, 0x9e, 0xc6,
    0xd5, 0x91, 0x9e, 0xc7,
#endif // _LP64
    0x0f, 0x9f, 0xc1,
    0x0f, 0x9f, 0xc2,
    0x0f, 0x9f, 0xc3,
#ifdef _LP64
    0x41, 0x0f, 0x9f, 0xc0,
    0x41, 0x0f, 0x9f, 0xc1,
    0x41, 0x0f, 0x9f, 0xc2,
    0x41, 0x0f, 0x9f, 0xc3,
    0x41, 0x0f, 0x9f, 0xc4,
    0x41, 0x0f, 0x9f, 0xc5,
    0x41, 0x0f, 0x9f, 0xc6,
    0x41, 0x0f, 0x9f, 0xc7,
    0xd5, 0x90, 0x9f, 0xc0,
    0xd5, 0x90, 0x9f, 0xc1,
    0xd5, 0x90, 0x9f, 0xc2,
    0xd5, 0x90, 0x9f, 0xc3,
    0xd5, 0x90, 0x9f, 0xc4,
    0xd5, 0x90, 0x9f, 0xc5,
    0xd5, 0x90, 0x9f, 0xc6,
    0xd5, 0x90, 0x9f, 0xc7,
    0xd5, 0x91, 0x9f, 0xc0,
    0xd5, 0x91, 0x9f, 0xc1,
    0xd5, 0x91, 0x9f, 0xc2,
    0xd5, 0x91, 0x9f, 0xc3,
    0xd5, 0x91, 0x9f, 0xc4,
    0xd5, 0x91, 0x9f, 0xc5,
    0xd5, 0x91, 0x9f, 0xc6,
    0xd5, 0x91, 0x9f, 0xc7,
#endif // _LP64
    0xf7, 0xf1,
    0xf7, 0xf2,
    0xf7, 0xf3,
#ifdef _LP64
    0x41, 0xf7, 0xf0,
    0x41, 0xf7, 0xf1,
    0x41, 0xf7, 0xf2,
    0x41, 0xf7, 0xf3,
    0x41, 0xf7, 0xf4,
    0x41, 0xf7, 0xf5,
    0x41, 0xf7, 0xf6,
    0x41, 0xf7, 0xf7,
    0xd5, 0x10, 0xf7, 0xf0,
    0xd5, 0x10, 0xf7, 0xf1,
    0xd5, 0x10, 0xf7, 0xf2,
    0xd5, 0x10, 0xf7, 0xf3,
    0xd5, 0x10, 0xf7, 0xf4,
    0xd5, 0x10, 0xf7, 0xf5,
    0xd5, 0x10, 0xf7, 0xf6,
    0xd5, 0x10, 0xf7, 0xf7,
    0xd5, 0x11, 0xf7, 0xf0,
    0xd5, 0x11, 0xf7, 0xf1,
    0xd5, 0x11, 0xf7, 0xf2,
    0xd5, 0x11, 0xf7, 0xf3,
    0xd5, 0x11, 0xf7, 0xf4,
    0xd5, 0x11, 0xf7, 0xf5,
    0xd5, 0x11, 0xf7, 0xf6,
    0xd5, 0x11, 0xf7, 0xf7,
#endif // _LP64
    0xf7, 0xf9,
    0xf7, 0xfa,
    0xf7, 0xfb,
#ifdef _LP64
    0x41, 0xf7, 0xf8,
    0x41, 0xf7, 0xf9,
    0x41, 0xf7, 0xfa,
    0x41, 0xf7, 0xfb,
    0x41, 0xf7, 0xfc,
    0x41, 0xf7, 0xfd,
    0x41, 0xf7, 0xfe,
    0x41, 0xf7, 0xff,
    0xd5, 0x10, 0xf7, 0xf8,
    0xd5, 0x10, 0xf7, 0xf9,
    0xd5, 0x10, 0xf7, 0xfa,
    0xd5, 0x10, 0xf7, 0xfb,
    0xd5, 0x10, 0xf7, 0xfc,
    0xd5, 0x10, 0xf7, 0xfd,
    0xd5, 0x10, 0xf7, 0xfe,
    0xd5, 0x10, 0xf7, 0xff,
    0xd5, 0x11, 0xf7, 0xf8,
    0xd5, 0x11, 0xf7, 0xf9,
    0xd5, 0x11, 0xf7, 0xfa,
    0xd5, 0x11, 0xf7, 0xfb,
    0xd5, 0x11, 0xf7, 0xfc,
    0xd5, 0x11, 0xf7, 0xfd,
    0xd5, 0x11, 0xf7, 0xfe,
    0xd5, 0x11, 0xf7, 0xff,
#endif // _LP64
    0xf7, 0xe9,
    0xf7, 0xea,
    0xf7, 0xeb,
#ifdef _LP64
    0x41, 0xf7, 0xe8,
    0x41, 0xf7, 0xe9,
    0x41, 0xf7, 0xea,
    0x41, 0xf7, 0xeb,
    0x41, 0xf7, 0xec,
    0x41, 0xf7, 0xed,
    0x41, 0xf7, 0xee,
    0x41, 0xf7, 0xef,
    0xd5, 0x10, 0xf7, 0xe8,
    0xd5, 0x10, 0xf7, 0xe9,
    0xd5, 0x10, 0xf7, 0xea,
    0xd5, 0x10, 0xf7, 0xeb,
    0xd5, 0x10, 0xf7, 0xec,
    0xd5, 0x10, 0xf7, 0xed,
    0xd5, 0x10, 0xf7, 0xee,
    0xd5, 0x10, 0xf7, 0xef,
    0xd5, 0x11, 0xf7, 0xe8,
    0xd5, 0x11, 0xf7, 0xe9,
    0xd5, 0x11, 0xf7, 0xea,
    0xd5, 0x11, 0xf7, 0xeb,
    0xd5, 0x11, 0xf7, 0xec,
    0xd5, 0x11, 0xf7, 0xed,
    0xd5, 0x11, 0xf7, 0xee,
    0xd5, 0x11, 0xf7, 0xef,
#endif // _LP64
    0xf7, 0xe1,
    0xf7, 0xe2,
    0xf7, 0xe3,
#ifdef _LP64
    0x41, 0xf7, 0xe0,
    0x41, 0xf7, 0xe1,
    0x41, 0xf7, 0xe2,
    0x41, 0xf7, 0xe3,
    0x41, 0xf7, 0xe4,
    0x41, 0xf7, 0xe5,
    0x41, 0xf7, 0xe6,
    0x41, 0xf7, 0xe7,
    0xd5, 0x10, 0xf7, 0xe0,
    0xd5, 0x10, 0xf7, 0xe1,
    0xd5, 0x10, 0xf7, 0xe2,
    0xd5, 0x10, 0xf7, 0xe3,
    0xd5, 0x10, 0xf7, 0xe4,
    0xd5, 0x10, 0xf7, 0xe5,
    0xd5, 0x10, 0xf7, 0xe6,
    0xd5, 0x10, 0xf7, 0xe7,
    0xd5, 0x11, 0xf7, 0xe0,
    0xd5, 0x11, 0xf7, 0xe1,
    0xd5, 0x11, 0xf7, 0xe2,
    0xd5, 0x11, 0xf7, 0xe3,
    0xd5, 0x11, 0xf7, 0xe4,
    0xd5, 0x11, 0xf7, 0xe5,
    0xd5, 0x11, 0xf7, 0xe6,
    0xd5, 0x11, 0xf7, 0xe7,
#endif // _LP64
    0xf7, 0xd9,
    0xf7, 0xda,
    0xf7, 0xdb,
#ifdef _LP64
    0x41, 0xf7, 0xd8,
    0x41, 0xf7, 0xd9,
    0x41, 0xf7, 0xda,
    0x41, 0xf7, 0xdb,
    0x41, 0xf7, 0xdc,
    0x41, 0xf7, 0xdd,
    0x41, 0xf7, 0xde,
    0x41, 0xf7, 0xdf,
    0xd5, 0x10, 0xf7, 0xd8,
    0xd5, 0x10, 0xf7, 0xd9,
    0xd5, 0x10, 0xf7, 0xda,
    0xd5, 0x10, 0xf7, 0xdb,
    0xd5, 0x10, 0xf7, 0xdc,
    0xd5, 0x10, 0xf7, 0xdd,
    0xd5, 0x10, 0xf7, 0xde,
    0xd5, 0x10, 0xf7, 0xdf,
    0xd5, 0x11, 0xf7, 0xd8,
    0xd5, 0x11, 0xf7, 0xd9,
    0xd5, 0x11, 0xf7, 0xda,
    0xd5, 0x11, 0xf7, 0xdb,
    0xd5, 0x11, 0xf7, 0xdc,
    0xd5, 0x11, 0xf7, 0xdd,
    0xd5, 0x11, 0xf7, 0xde,
    0xd5, 0x11, 0xf7, 0xdf,
#endif // _LP64
    0xf7, 0xd1,
    0xf7, 0xd2,
    0xf7, 0xd3,
#ifdef _LP64
    0x41, 0xf7, 0xd0,
    0x41, 0xf7, 0xd1,
    0x41, 0xf7, 0xd2,
    0x41, 0xf7, 0xd3,
    0x41, 0xf7, 0xd4,
    0x41, 0xf7, 0xd5,
    0x41, 0xf7, 0xd6,
    0x41, 0xf7, 0xd7,
    0xd5, 0x10, 0xf7, 0xd0,
    0xd5, 0x10, 0xf7, 0xd1,
    0xd5, 0x10, 0xf7, 0xd2,
    0xd5, 0x10, 0xf7, 0xd3,
    0xd5, 0x10, 0xf7, 0xd4,
    0xd5, 0x10, 0xf7, 0xd5,
    0xd5, 0x10, 0xf7, 0xd6,
    0xd5, 0x10, 0xf7, 0xd7,
    0xd5, 0x11, 0xf7, 0xd0,
    0xd5, 0x11, 0xf7, 0xd1,
    0xd5, 0x11, 0xf7, 0xd2,
    0xd5, 0x11, 0xf7, 0xd3,
    0xd5, 0x11, 0xf7, 0xd4,
    0xd5, 0x11, 0xf7, 0xd5,
    0xd5, 0x11, 0xf7, 0xd6,
    0xd5, 0x11, 0xf7, 0xd7,
#endif // _LP64
    0xd1, 0xc1,
    0xd1, 0xc2,
    0xd1, 0xc3,
#ifdef _LP64
    0x41, 0xd1, 0xc0,
    0x41, 0xd1, 0xc1,
    0x41, 0xd1, 0xc2,
    0x41, 0xd1, 0xc3,
    0x41, 0xd1, 0xc4,
    0x41, 0xd1, 0xc5,
    0x41, 0xd1, 0xc6,
    0x41, 0xd1, 0xc7,
    0xd5, 0x10, 0xd1, 0xc0,
    0xd5, 0x10, 0xd1, 0xc1,
    0xd5, 0x10, 0xd1, 0xc2,
    0xd5, 0x10, 0xd1, 0xc3,
    0xd5, 0x10, 0xd1, 0xc4,
    0xd5, 0x10, 0xd1, 0xc5,
    0xd5, 0x10, 0xd1, 0xc6,
    0xd5, 0x10, 0xd1, 0xc7,
    0xd5, 0x11, 0xd1, 0xc0,
    0xd5, 0x11, 0xd1, 0xc1,
    0xd5, 0x11, 0xd1, 0xc2,
    0xd5, 0x11, 0xd1, 0xc3,
    0xd5, 0x11, 0xd1, 0xc4,
    0xd5, 0x11, 0xd1, 0xc5,
    0xd5, 0x11, 0xd1, 0xc6,
    0xd5, 0x11, 0xd1, 0xc7,
#endif // _LP64
    0xd1, 0xc9,
    0xd1, 0xca,
    0xd1, 0xcb,
#ifdef _LP64
    0x41, 0xd1, 0xc8,
    0x41, 0xd1, 0xc9,
    0x41, 0xd1, 0xca,
    0x41, 0xd1, 0xcb,
    0x41, 0xd1, 0xcc,
    0x41, 0xd1, 0xcd,
    0x41, 0xd1, 0xce,
    0x41, 0xd1, 0xcf,
    0xd5, 0x10, 0xd1, 0xc8,
    0xd5, 0x10, 0xd1, 0xc9,
    0xd5, 0x10, 0xd1, 0xca,
    0xd5, 0x10, 0xd1, 0xcb,
    0xd5, 0x10, 0xd1, 0xcc,
    0xd5, 0x10, 0xd1, 0xcd,
    0xd5, 0x10, 0xd1, 0xce,
    0xd5, 0x10, 0xd1, 0xcf,
    0xd5, 0x11, 0xd1, 0xc8,
    0xd5, 0x11, 0xd1, 0xc9,
    0xd5, 0x11, 0xd1, 0xca,
    0xd5, 0x11, 0xd1, 0xcb,
    0xd5, 0x11, 0xd1, 0xcc,
    0xd5, 0x11, 0xd1, 0xcd,
    0xd5, 0x11, 0xd1, 0xce,
    0xd5, 0x11, 0xd1, 0xcf,
#endif // _LP64
    0xd1, 0xf9,
    0xd1, 0xfa,
    0xd1, 0xfb,
#ifdef _LP64
    0x41, 0xd1, 0xf8,
    0x41, 0xd1, 0xf9,
    0x41, 0xd1, 0xfa,
    0x41, 0xd1, 0xfb,
    0x41, 0xd1, 0xfc,
    0x41, 0xd1, 0xfd,
    0x41, 0xd1, 0xfe,
    0x41, 0xd1, 0xff,
    0xd5, 0x10, 0xd1, 0xf8,
    0xd5, 0x10, 0xd1, 0xf9,
    0xd5, 0x10, 0xd1, 0xfa,
    0xd5, 0x10, 0xd1, 0xfb,
    0xd5, 0x10, 0xd1, 0xfc,
    0xd5, 0x10, 0xd1, 0xfd,
    0xd5, 0x10, 0xd1, 0xfe,
    0xd5, 0x10, 0xd1, 0xff,
    0xd5, 0x11, 0xd1, 0xf8,
    0xd5, 0x11, 0xd1, 0xf9,
    0xd5, 0x11, 0xd1, 0xfa,
    0xd5, 0x11, 0xd1, 0xfb,
    0xd5, 0x11, 0xd1, 0xfc,
    0xd5, 0x11, 0xd1, 0xfd,
    0xd5, 0x11, 0xd1, 0xfe,
    0xd5, 0x11, 0xd1, 0xff,
#endif // _LP64
    0xd1, 0xe1,
    0xd1, 0xe2,
    0xd1, 0xe3,
#ifdef _LP64
    0x41, 0xd1, 0xe0,
    0x41, 0xd1, 0xe1,
    0x41, 0xd1, 0xe2,
    0x41, 0xd1, 0xe3,
    0x41, 0xd1, 0xe4,
    0x41, 0xd1, 0xe5,
    0x41, 0xd1, 0xe6,
    0x41, 0xd1, 0xe7,
    0xd5, 0x10, 0xd1, 0xe0,
    0xd5, 0x10, 0xd1, 0xe1,
    0xd5, 0x10, 0xd1, 0xe2,
    0xd5, 0x10, 0xd1, 0xe3,
    0xd5, 0x10, 0xd1, 0xe4,
    0xd5, 0x10, 0xd1, 0xe5,
    0xd5, 0x10, 0xd1, 0xe6,
    0xd5, 0x10, 0xd1, 0xe7,
    0xd5, 0x11, 0xd1, 0xe0,
    0xd5, 0x11, 0xd1, 0xe1,
    0xd5, 0x11, 0xd1, 0xe2,
    0xd5, 0x11, 0xd1, 0xe3,
    0xd5, 0x11, 0xd1, 0xe4,
    0xd5, 0x11, 0xd1, 0xe5,
    0xd5, 0x11, 0xd1, 0xe6,
    0xd5, 0x11, 0xd1, 0xe7,
#endif // _LP64
    0xd1, 0xe9,
    0xd1, 0xea,
    0xd1, 0xeb,
#ifdef _LP64
    0x41, 0xd1, 0xe8,
    0x41, 0xd1, 0xe9,
    0x41, 0xd1, 0xea,
    0x41, 0xd1, 0xeb,
    0x41, 0xd1, 0xec,
    0x41, 0xd1, 0xed,
    0x41, 0xd1, 0xee,
    0x41, 0xd1, 0xef,
    0xd5, 0x10, 0xd1, 0xe8,
    0xd5, 0x10, 0xd1, 0xe9,
    0xd5, 0x10, 0xd1, 0xea,
    0xd5, 0x10, 0xd1, 0xeb,
    0xd5, 0x10, 0xd1, 0xec,
    0xd5, 0x10, 0xd1, 0xed,
    0xd5, 0x10, 0xd1, 0xee,
    0xd5, 0x10, 0xd1, 0xef,
    0xd5, 0x11, 0xd1, 0xe8,
    0xd5, 0x11, 0xd1, 0xe9,
    0xd5, 0x11, 0xd1, 0xea,
    0xd5, 0x11, 0xd1, 0xeb,
    0xd5, 0x11, 0xd1, 0xec,
    0xd5, 0x11, 0xd1, 0xed,
    0xd5, 0x11, 0xd1, 0xee,
    0xd5, 0x11, 0xd1, 0xef,
#endif // _LP64
    0xff, 0xc1,
    0xff, 0xc2,
    0xff, 0xc3,
#ifdef _LP64
    0x41, 0xff, 0xc0,
    0x41, 0xff, 0xc1,
    0x41, 0xff, 0xc2,
    0x41, 0xff, 0xc3,
    0x41, 0xff, 0xc4,
    0x41, 0xff, 0xc5,
    0x41, 0xff, 0xc6,
    0x41, 0xff, 0xc7,
    0xd5, 0x10, 0xff, 0xc0,
    0xd5, 0x10, 0xff, 0xc1,
    0xd5, 0x10, 0xff, 0xc2,
    0xd5, 0x10, 0xff, 0xc3,
    0xd5, 0x10, 0xff, 0xc4,
    0xd5, 0x10, 0xff, 0xc5,
    0xd5, 0x10, 0xff, 0xc6,
    0xd5, 0x10, 0xff, 0xc7,
    0xd5, 0x11, 0xff, 0xc0,
    0xd5, 0x11, 0xff, 0xc1,
    0xd5, 0x11, 0xff, 0xc2,
    0xd5, 0x11, 0xff, 0xc3,
    0xd5, 0x11, 0xff, 0xc4,
    0xd5, 0x11, 0xff, 0xc5,
    0xd5, 0x11, 0xff, 0xc6,
    0xd5, 0x11, 0xff, 0xc7,
#endif // _LP64
    0xff, 0xc9,
    0xff, 0xca,
    0xff, 0xcb,
#ifdef _LP64
    0x41, 0xff, 0xc8,
    0x41, 0xff, 0xc9,
    0x41, 0xff, 0xca,
    0x41, 0xff, 0xcb,
    0x41, 0xff, 0xcc,
    0x41, 0xff, 0xcd,
    0x41, 0xff, 0xce,
    0x41, 0xff, 0xcf,
    0xd5, 0x10, 0xff, 0xc8,
    0xd5, 0x10, 0xff, 0xc9,
    0xd5, 0x10, 0xff, 0xca,
    0xd5, 0x10, 0xff, 0xcb,
    0xd5, 0x10, 0xff, 0xcc,
    0xd5, 0x10, 0xff, 0xcd,
    0xd5, 0x10, 0xff, 0xce,
    0xd5, 0x10, 0xff, 0xcf,
    0xd5, 0x11, 0xff, 0xc8,
    0xd5, 0x11, 0xff, 0xc9,
    0xd5, 0x11, 0xff, 0xca,
    0xd5, 0x11, 0xff, 0xcb,
    0xd5, 0x11, 0xff, 0xcc,
    0xd5, 0x11, 0xff, 0xcd,
    0xd5, 0x11, 0xff, 0xce,
    0xd5, 0x11, 0xff, 0xcf,
#endif // _LP64
    0xf7, 0x24, 0x11,
    0xf7, 0x24, 0x1a,
#ifdef _LP64
    0x42, 0xf7, 0x24, 0x03,
    0x43, 0xf7, 0x24, 0x08,
    0x43, 0xf7, 0x24, 0x11,
    0x43, 0xf7, 0x24, 0x1a,
    0x43, 0xf7, 0x24, 0x23,
    0x43, 0xf7, 0x24, 0x2c,
    0x43, 0xf7, 0x64, 0x35, 0x00,
    0x43, 0xf7, 0x24, 0x3e,
    0xd5, 0x21, 0xf7, 0x24, 0x07,
    0xd5, 0x30, 0xf7, 0x24, 0x08,
    0xd5, 0x30, 0xf7, 0x24, 0x11,
    0xd5, 0x30, 0xf7, 0x24, 0x1a,
    0xd5, 0x30, 0xf7, 0x24, 0x23,
    0xd5, 0x30, 0xf7, 0x24, 0x2c,
    0xd5, 0x30, 0xf7, 0x64, 0x35, 0x00,
    0xd5, 0x30, 0xf7, 0x24, 0x3e,
    0xd5, 0x32, 0xf7, 0x24, 0x07,
    0xd5, 0x33, 0xf7, 0x24, 0x08,
    0xd5, 0x33, 0xf7, 0x24, 0x11,
    0xd5, 0x33, 0xf7, 0x24, 0x1a,
    0xd5, 0x33, 0xf7, 0x24, 0x23,
    0xd5, 0x33, 0xf7, 0x24, 0x2c,
    0xd5, 0x33, 0xf7, 0x64, 0x35, 0x00,
    0xd5, 0x33, 0xf7, 0x24, 0x3e,
    0xd5, 0x11, 0xf7, 0x24, 0x0f,
#endif // _LP64
    0xf7, 0x1c, 0x11,
    0xf7, 0x1c, 0x1a,
#ifdef _LP64
    0x42, 0xf7, 0x1c, 0x03,
    0x43, 0xf7, 0x1c, 0x08,
    0x43, 0xf7, 0x1c, 0x11,
    0x43, 0xf7, 0x1c, 0x1a,
    0x43, 0xf7, 0x1c, 0x23,
    0x43, 0xf7, 0x1c, 0x2c,
    0x43, 0xf7, 0x5c, 0x35, 0x00,
    0x43, 0xf7, 0x1c, 0x3e,
    0xd5, 0x21, 0xf7, 0x1c, 0x07,
    0xd5, 0x30, 0xf7, 0x1c, 0x08,
    0xd5, 0x30, 0xf7, 0x1c, 0x11,
    0xd5, 0x30, 0xf7, 0x1c, 0x1a,
    0xd5, 0x30, 0xf7, 0x1c, 0x23,
    0xd5, 0x30, 0xf7, 0x1c, 0x2c,
    0xd5, 0x30, 0xf7, 0x5c, 0x35, 0x00,
    0xd5, 0x30, 0xf7, 0x1c, 0x3e,
    0xd5, 0x32, 0xf7, 0x1c, 0x07,
    0xd5, 0x33, 0xf7, 0x1c, 0x08,
    0xd5, 0x33, 0xf7, 0x1c, 0x11,
    0xd5, 0x33, 0xf7, 0x1c, 0x1a,
    0xd5, 0x33, 0xf7, 0x1c, 0x23,
    0xd5, 0x33, 0xf7, 0x1c, 0x2c,
    0xd5, 0x33, 0xf7, 0x5c, 0x35, 0x00,
    0xd5, 0x33, 0xf7, 0x1c, 0x3e,
    0xd5, 0x11, 0xf7, 0x1c, 0x0f,
#endif // _LP64
    0xd1, 0x3c, 0x11,
    0xd1, 0x3c, 0x1a,
#ifdef _LP64
    0x42, 0xd1, 0x3c, 0x03,
    0x43, 0xd1, 0x3c, 0x08,
    0x43, 0xd1, 0x3c, 0x11,
    0x43, 0xd1, 0x3c, 0x1a,
    0x43, 0xd1, 0x3c, 0x23,
    0x43, 0xd1, 0x3c, 0x2c,
    0x43, 0xd1, 0x7c, 0x35, 0x00,
    0x43, 0xd1, 0x3c, 0x3e,
    0xd5, 0x21, 0xd1, 0x3c, 0x07,
    0xd5, 0x30, 0xd1, 0x3c, 0x08,
    0xd5, 0x30, 0xd1, 0x3c, 0x11,
    0xd5, 0x30, 0xd1, 0x3c, 0x1a,
    0xd5, 0x30, 0xd1, 0x3c, 0x23,
    0xd5, 0x30, 0xd1, 0x3c, 0x2c,
    0xd5, 0x30, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x30, 0xd1, 0x3c, 0x3e,
    0xd5, 0x32, 0xd1, 0x3c, 0x07,
    0xd5, 0x33, 0xd1, 0x3c, 0x08,
    0xd5, 0x33, 0xd1, 0x3c, 0x11,
    0xd5, 0x33, 0xd1, 0x3c, 0x1a,
    0xd5, 0x33, 0xd1, 0x3c, 0x23,
    0xd5, 0x33, 0xd1, 0x3c, 0x2c,
    0xd5, 0x33, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x33, 0xd1, 0x3c, 0x3e,
    0xd5, 0x11, 0xd1, 0x3c, 0x0f,
#endif // _LP64
    0xd1, 0x2c, 0x11,
    0xd1, 0x2c, 0x1a,
#ifdef _LP64
    0x42, 0xd1, 0x2c, 0x03,
    0x43, 0xd1, 0x2c, 0x08,
    0x43, 0xd1, 0x2c, 0x11,
    0x43, 0xd1, 0x2c, 0x1a,
    0x43, 0xd1, 0x2c, 0x23,
    0x43, 0xd1, 0x2c, 0x2c,
    0x43, 0xd1, 0x6c, 0x35, 0x00,
    0x43, 0xd1, 0x2c, 0x3e,
    0xd5, 0x21, 0xd1, 0x2c, 0x07,
    0xd5, 0x30, 0xd1, 0x2c, 0x08,
    0xd5, 0x30, 0xd1, 0x2c, 0x11,
    0xd5, 0x30, 0xd1, 0x2c, 0x1a,
    0xd5, 0x30, 0xd1, 0x2c, 0x23,
    0xd5, 0x30, 0xd1, 0x2c, 0x2c,
    0xd5, 0x30, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x30, 0xd1, 0x2c, 0x3e,
    0xd5, 0x32, 0xd1, 0x2c, 0x07,
    0xd5, 0x33, 0xd1, 0x2c, 0x08,
    0xd5, 0x33, 0xd1, 0x2c, 0x11,
    0xd5, 0x33, 0xd1, 0x2c, 0x1a,
    0xd5, 0x33, 0xd1, 0x2c, 0x23,
    0xd5, 0x33, 0xd1, 0x2c, 0x2c,
    0xd5, 0x33, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x33, 0xd1, 0x2c, 0x3e,
    0xd5, 0x11, 0xd1, 0x2c, 0x0f,
#endif // _LP64
    0xff, 0x04, 0x11,
    0xff, 0x04, 0x1a,
#ifdef _LP64
    0x42, 0xff, 0x04, 0x03,
    0x43, 0xff, 0x04, 0x08,
    0x43, 0xff, 0x04, 0x11,
    0x43, 0xff, 0x04, 0x1a,
    0x43, 0xff, 0x04, 0x23,
    0x43, 0xff, 0x04, 0x2c,
    0x43, 0xff, 0x44, 0x35, 0x00,
    0x43, 0xff, 0x04, 0x3e,
    0xd5, 0x21, 0xff, 0x04, 0x07,
    0xd5, 0x30, 0xff, 0x04, 0x08,
    0xd5, 0x30, 0xff, 0x04, 0x11,
    0xd5, 0x30, 0xff, 0x04, 0x1a,
    0xd5, 0x30, 0xff, 0x04, 0x23,
    0xd5, 0x30, 0xff, 0x04, 0x2c,
    0xd5, 0x30, 0xff, 0x44, 0x35, 0x00,
    0xd5, 0x30, 0xff, 0x04, 0x3e,
    0xd5, 0x32, 0xff, 0x04, 0x07,
    0xd5, 0x33, 0xff, 0x04, 0x08,
    0xd5, 0x33, 0xff, 0x04, 0x11,
    0xd5, 0x33, 0xff, 0x04, 0x1a,
    0xd5, 0x33, 0xff, 0x04, 0x23,
    0xd5, 0x33, 0xff, 0x04, 0x2c,
    0xd5, 0x33, 0xff, 0x44, 0x35, 0x00,
    0xd5, 0x33, 0xff, 0x04, 0x3e,
    0xd5, 0x11, 0xff, 0x04, 0x0f,
#endif // _LP64
    0xff, 0x0c, 0x11,
    0xff, 0x0c, 0x1a,
#ifdef _LP64
    0x42, 0xff, 0x0c, 0x03,
    0x43, 0xff, 0x0c, 0x08,
    0x43, 0xff, 0x0c, 0x11,
    0x43, 0xff, 0x0c, 0x1a,
    0x43, 0xff, 0x0c, 0x23,
    0x43, 0xff, 0x0c, 0x2c,
    0x43, 0xff, 0x4c, 0x35, 0x00,
    0x43, 0xff, 0x0c, 0x3e,
    0xd5, 0x21, 0xff, 0x0c, 0x07,
    0xd5, 0x30, 0xff, 0x0c, 0x08,
    0xd5, 0x30, 0xff, 0x0c, 0x11,
    0xd5, 0x30, 0xff, 0x0c, 0x1a,
    0xd5, 0x30, 0xff, 0x0c, 0x23,
    0xd5, 0x30, 0xff, 0x0c, 0x2c,
    0xd5, 0x30, 0xff, 0x4c, 0x35, 0x00,
    0xd5, 0x30, 0xff, 0x0c, 0x3e,
    0xd5, 0x32, 0xff, 0x0c, 0x07,
    0xd5, 0x33, 0xff, 0x0c, 0x08,
    0xd5, 0x33, 0xff, 0x0c, 0x11,
    0xd5, 0x33, 0xff, 0x0c, 0x1a,
    0xd5, 0x33, 0xff, 0x0c, 0x23,
    0xd5, 0x33, 0xff, 0x0c, 0x2c,
    0xd5, 0x33, 0xff, 0x4c, 0x35, 0x00,
    0xd5, 0x33, 0xff, 0x0c, 0x3e,
    0xd5, 0x11, 0xff, 0x0c, 0x0f,
#endif // _LP64
    0x6b, 0x0c, 0x1a, 0x01,
    0x6b, 0x0c, 0x1a, 0x10,
    0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x42, 0x6b, 0x14, 0x03, 0x01,
    0x42, 0x6b, 0x14, 0x03, 0x10,
    0x42, 0x69, 0x14, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x42, 0x69, 0x14, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x42, 0x69, 0x14, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x42, 0x69, 0x14, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x42, 0x69, 0x14, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x42, 0x69, 0x14, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x43, 0x6b, 0x1c, 0x08, 0x01,
    0x43, 0x6b, 0x1c, 0x08, 0x10,
    0x43, 0x69, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x43, 0x69, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x43, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x43, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x43, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x43, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x47, 0x6b, 0x04, 0x11, 0x01,
    0x47, 0x6b, 0x04, 0x11, 0x10,
    0x47, 0x69, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x47, 0x69, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x47, 0x69, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x47, 0x69, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x47, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x47, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x47, 0x6b, 0x0c, 0x1a, 0x01,
    0x47, 0x6b, 0x0c, 0x1a, 0x10,
    0x47, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x47, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x47, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x47, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x47, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x47, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x47, 0x6b, 0x14, 0x23, 0x01,
    0x47, 0x6b, 0x14, 0x23, 0x10,
    0x47, 0x69, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x47, 0x69, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x47, 0x69, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x47, 0x69, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x47, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x47, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x47, 0x6b, 0x1c, 0x2c, 0x01,
    0x47, 0x6b, 0x1c, 0x2c, 0x10,
    0x47, 0x69, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x47, 0x69, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x47, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x47, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x47, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x47, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x47, 0x6b, 0x64, 0x35, 0x00, 0x01,
    0x47, 0x6b, 0x64, 0x35, 0x00, 0x10,
    0x47, 0x69, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x47, 0x69, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x47, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x47, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x47, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x47, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x47, 0x6b, 0x2c, 0x3e, 0x01,
    0x47, 0x6b, 0x2c, 0x3e, 0x10,
    0x47, 0x69, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0x47, 0x69, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0x47, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0x47, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0x47, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0x47, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x25, 0x6b, 0x34, 0x07, 0x01,
    0xd5, 0x25, 0x6b, 0x34, 0x07, 0x10,
    0xd5, 0x25, 0x69, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x25, 0x69, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x25, 0x69, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x25, 0x69, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x25, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x25, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x34, 0x6b, 0x3c, 0x08, 0x01,
    0xd5, 0x34, 0x6b, 0x3c, 0x08, 0x10,
    0xd5, 0x34, 0x69, 0x3c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x34, 0x69, 0x3c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x34, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x34, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x34, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x34, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x70, 0x6b, 0x04, 0x11, 0x01,
    0xd5, 0x70, 0x6b, 0x04, 0x11, 0x10,
    0xd5, 0x70, 0x69, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x70, 0x69, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x70, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x70, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x70, 0x6b, 0x0c, 0x1a, 0x01,
    0xd5, 0x70, 0x6b, 0x0c, 0x1a, 0x10,
    0xd5, 0x70, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x70, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x70, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x70, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x70, 0x6b, 0x14, 0x23, 0x01,
    0xd5, 0x70, 0x6b, 0x14, 0x23, 0x10,
    0xd5, 0x70, 0x69, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x70, 0x69, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x70, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x70, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x70, 0x6b, 0x1c, 0x2c, 0x01,
    0xd5, 0x70, 0x6b, 0x1c, 0x2c, 0x10,
    0xd5, 0x70, 0x69, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x70, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x70, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x70, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x70, 0x6b, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x70, 0x6b, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x70, 0x69, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x70, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x70, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x70, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x70, 0x6b, 0x2c, 0x3e, 0x01,
    0xd5, 0x70, 0x6b, 0x2c, 0x3e, 0x10,
    0xd5, 0x70, 0x69, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x70, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x70, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x70, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x70, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x72, 0x6b, 0x34, 0x07, 0x01,
    0xd5, 0x72, 0x6b, 0x34, 0x07, 0x10,
    0xd5, 0x72, 0x69, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x72, 0x69, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x72, 0x69, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x72, 0x69, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x72, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x72, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x73, 0x6b, 0x3c, 0x08, 0x01,
    0xd5, 0x73, 0x6b, 0x3c, 0x08, 0x10,
    0xd5, 0x73, 0x69, 0x3c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x73, 0x69, 0x3c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x73, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x73, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x73, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x73, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x77, 0x6b, 0x04, 0x11, 0x01,
    0xd5, 0x77, 0x6b, 0x04, 0x11, 0x10,
    0xd5, 0x77, 0x69, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x77, 0x69, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x77, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x77, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x77, 0x6b, 0x0c, 0x1a, 0x01,
    0xd5, 0x77, 0x6b, 0x0c, 0x1a, 0x10,
    0xd5, 0x77, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x77, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x77, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x77, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x77, 0x6b, 0x14, 0x23, 0x01,
    0xd5, 0x77, 0x6b, 0x14, 0x23, 0x10,
    0xd5, 0x77, 0x69, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x77, 0x69, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x77, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x77, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x77, 0x6b, 0x1c, 0x2c, 0x01,
    0xd5, 0x77, 0x6b, 0x1c, 0x2c, 0x10,
    0xd5, 0x77, 0x69, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x77, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x77, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x77, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x77, 0x6b, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x77, 0x6b, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x77, 0x69, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x77, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x77, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x77, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x77, 0x6b, 0x2c, 0x3e, 0x01,
    0xd5, 0x77, 0x6b, 0x2c, 0x3e, 0x10,
    0xd5, 0x77, 0x69, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x77, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x77, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x77, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x77, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0x34, 0x0f, 0x01,
    0xd5, 0x55, 0x6b, 0x34, 0x0f, 0x10,
    0xd5, 0x55, 0x69, 0x34, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0x34, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x44, 0x6b, 0x3c, 0x11, 0x01,
    0xd5, 0x44, 0x6b, 0x3c, 0x11, 0x10,
    0xd5, 0x44, 0x69, 0x3c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x44, 0x69, 0x3c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x44, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x44, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x44, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x44, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x6b, 0xca, 0x01,
    0x6b, 0xca, 0x10,
    0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0x6b, 0xd3, 0x01,
    0x6b, 0xd3, 0x10,
    0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
#ifdef _LP64
    0x41, 0x6b, 0xd8, 0x01,
    0x41, 0x6b, 0xd8, 0x10,
    0x41, 0x69, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0x41, 0x69, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0x41, 0x69, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x69, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x69, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x69, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xc1, 0x01,
    0x45, 0x6b, 0xc1, 0x10,
    0x45, 0x69, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xca, 0x01,
    0x45, 0x6b, 0xca, 0x10,
    0x45, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xd3, 0x01,
    0x45, 0x6b, 0xd3, 0x10,
    0x45, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xdc, 0x01,
    0x45, 0x6b, 0xdc, 0x10,
    0x45, 0x69, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xe5, 0x01,
    0x45, 0x6b, 0xe5, 0x10,
    0x45, 0x69, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xee, 0x01,
    0x45, 0x6b, 0xee, 0x10,
    0x45, 0x69, 0xee, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xee, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xee, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xee, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xee, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xee, 0x00, 0x00, 0x00, 0x10,
    0x45, 0x6b, 0xf7, 0x01,
    0x45, 0x6b, 0xf7, 0x10,
    0x45, 0x69, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0x45, 0x69, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0x45, 0x69, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0x45, 0x69, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0x45, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0x45, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x14, 0x6b, 0xf8, 0x01,
    0xd5, 0x14, 0x6b, 0xf8, 0x10,
    0xd5, 0x14, 0x69, 0xf8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x14, 0x69, 0xf8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x14, 0x69, 0xf8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x14, 0x69, 0xf8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x14, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x14, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xc1, 0x01,
    0xd5, 0x50, 0x6b, 0xc1, 0x10,
    0xd5, 0x50, 0x69, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xca, 0x01,
    0xd5, 0x50, 0x6b, 0xca, 0x10,
    0xd5, 0x50, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xd3, 0x01,
    0xd5, 0x50, 0x6b, 0xd3, 0x10,
    0xd5, 0x50, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xdc, 0x01,
    0xd5, 0x50, 0x6b, 0xdc, 0x10,
    0xd5, 0x50, 0x69, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xe5, 0x01,
    0xd5, 0x50, 0x6b, 0xe5, 0x10,
    0xd5, 0x50, 0x69, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xee, 0x01,
    0xd5, 0x50, 0x6b, 0xee, 0x10,
    0xd5, 0x50, 0x69, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x50, 0x6b, 0xf7, 0x01,
    0xd5, 0x50, 0x6b, 0xf7, 0x10,
    0xd5, 0x50, 0x69, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x50, 0x69, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x50, 0x69, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x50, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x50, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x51, 0x6b, 0xf8, 0x01,
    0xd5, 0x51, 0x6b, 0xf8, 0x10,
    0xd5, 0x51, 0x69, 0xf8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x51, 0x69, 0xf8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x51, 0x69, 0xf8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x51, 0x69, 0xf8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x51, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x51, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xc1, 0x01,
    0xd5, 0x55, 0x6b, 0xc1, 0x10,
    0xd5, 0x55, 0x69, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xca, 0x01,
    0xd5, 0x55, 0x6b, 0xca, 0x10,
    0xd5, 0x55, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xd3, 0x01,
    0xd5, 0x55, 0x6b, 0xd3, 0x10,
    0xd5, 0x55, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xdc, 0x01,
    0xd5, 0x55, 0x6b, 0xdc, 0x10,
    0xd5, 0x55, 0x69, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xe5, 0x01,
    0xd5, 0x55, 0x6b, 0xe5, 0x10,
    0xd5, 0x55, 0x69, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xee, 0x01,
    0xd5, 0x55, 0x6b, 0xee, 0x10,
    0xd5, 0x55, 0x69, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x55, 0x6b, 0xf7, 0x01,
    0xd5, 0x55, 0x6b, 0xf7, 0x10,
    0xd5, 0x55, 0x69, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x55, 0x69, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x55, 0x69, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x55, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x55, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x44, 0x6b, 0xf9, 0x01,
    0xd5, 0x44, 0x6b, 0xf9, 0x10,
    0xd5, 0x44, 0x69, 0xf9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x44, 0x69, 0xf9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x44, 0x69, 0xf9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x44, 0x69, 0xf9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x44, 0x69, 0xf9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x44, 0x69, 0xf9, 0x00, 0x00, 0x00, 0x10,
#endif // _LP64
    0x0f, 0xa4, 0xd1, 0x01,
    0x0f, 0xa4, 0xd1, 0x02,
    0x0f, 0xa4, 0xd1, 0x04,
    0x0f, 0xa4, 0xd1, 0x08,
    0x0f, 0xa4, 0xd1, 0x10,
    0x0f, 0xa4, 0xda, 0x01,
    0x0f, 0xa4, 0xda, 0x02,
    0x0f, 0xa4, 0xda, 0x04,
    0x0f, 0xa4, 0xda, 0x08,
    0x0f, 0xa4, 0xda, 0x10,
#ifdef _LP64
    0x44, 0x0f, 0xa4, 0xc3, 0x01,
    0x44, 0x0f, 0xa4, 0xc3, 0x02,
    0x44, 0x0f, 0xa4, 0xc3, 0x04,
    0x44, 0x0f, 0xa4, 0xc3, 0x08,
    0x44, 0x0f, 0xa4, 0xc3, 0x10,
    0x45, 0x0f, 0xa4, 0xc8, 0x01,
    0x45, 0x0f, 0xa4, 0xc8, 0x02,
    0x45, 0x0f, 0xa4, 0xc8, 0x04,
    0x45, 0x0f, 0xa4, 0xc8, 0x08,
    0x45, 0x0f, 0xa4, 0xc8, 0x10,
    0x45, 0x0f, 0xa4, 0xd1, 0x01,
    0x45, 0x0f, 0xa4, 0xd1, 0x02,
    0x45, 0x0f, 0xa4, 0xd1, 0x04,
    0x45, 0x0f, 0xa4, 0xd1, 0x08,
    0x45, 0x0f, 0xa4, 0xd1, 0x10,
    0x45, 0x0f, 0xa4, 0xda, 0x01,
    0x45, 0x0f, 0xa4, 0xda, 0x02,
    0x45, 0x0f, 0xa4, 0xda, 0x04,
    0x45, 0x0f, 0xa4, 0xda, 0x08,
    0x45, 0x0f, 0xa4, 0xda, 0x10,
    0x45, 0x0f, 0xa4, 0xe3, 0x01,
    0x45, 0x0f, 0xa4, 0xe3, 0x02,
    0x45, 0x0f, 0xa4, 0xe3, 0x04,
    0x45, 0x0f, 0xa4, 0xe3, 0x08,
    0x45, 0x0f, 0xa4, 0xe3, 0x10,
    0x45, 0x0f, 0xa4, 0xec, 0x01,
    0x45, 0x0f, 0xa4, 0xec, 0x02,
    0x45, 0x0f, 0xa4, 0xec, 0x04,
    0x45, 0x0f, 0xa4, 0xec, 0x08,
    0x45, 0x0f, 0xa4, 0xec, 0x10,
    0x45, 0x0f, 0xa4, 0xf5, 0x01,
    0x45, 0x0f, 0xa4, 0xf5, 0x02,
    0x45, 0x0f, 0xa4, 0xf5, 0x04,
    0x45, 0x0f, 0xa4, 0xf5, 0x08,
    0x45, 0x0f, 0xa4, 0xf5, 0x10,
    0x45, 0x0f, 0xa4, 0xfe, 0x01,
    0x45, 0x0f, 0xa4, 0xfe, 0x02,
    0x45, 0x0f, 0xa4, 0xfe, 0x04,
    0x45, 0x0f, 0xa4, 0xfe, 0x08,
    0x45, 0x0f, 0xa4, 0xfe, 0x10,
    0xd5, 0xc1, 0xa4, 0xc7, 0x01,
    0xd5, 0xc1, 0xa4, 0xc7, 0x02,
    0xd5, 0xc1, 0xa4, 0xc7, 0x04,
    0xd5, 0xc1, 0xa4, 0xc7, 0x08,
    0xd5, 0xc1, 0xa4, 0xc7, 0x10,
    0xd5, 0xd0, 0xa4, 0xc8, 0x01,
    0xd5, 0xd0, 0xa4, 0xc8, 0x02,
    0xd5, 0xd0, 0xa4, 0xc8, 0x04,
    0xd5, 0xd0, 0xa4, 0xc8, 0x08,
    0xd5, 0xd0, 0xa4, 0xc8, 0x10,
    0xd5, 0xd0, 0xa4, 0xd1, 0x01,
    0xd5, 0xd0, 0xa4, 0xd1, 0x02,
    0xd5, 0xd0, 0xa4, 0xd1, 0x04,
    0xd5, 0xd0, 0xa4, 0xd1, 0x08,
    0xd5, 0xd0, 0xa4, 0xd1, 0x10,
    0xd5, 0xd0, 0xa4, 0xda, 0x01,
    0xd5, 0xd0, 0xa4, 0xda, 0x02,
    0xd5, 0xd0, 0xa4, 0xda, 0x04,
    0xd5, 0xd0, 0xa4, 0xda, 0x08,
    0xd5, 0xd0, 0xa4, 0xda, 0x10,
    0xd5, 0xd0, 0xa4, 0xe3, 0x01,
    0xd5, 0xd0, 0xa4, 0xe3, 0x02,
    0xd5, 0xd0, 0xa4, 0xe3, 0x04,
    0xd5, 0xd0, 0xa4, 0xe3, 0x08,
    0xd5, 0xd0, 0xa4, 0xe3, 0x10,
    0xd5, 0xd0, 0xa4, 0xec, 0x01,
    0xd5, 0xd0, 0xa4, 0xec, 0x02,
    0xd5, 0xd0, 0xa4, 0xec, 0x04,
    0xd5, 0xd0, 0xa4, 0xec, 0x08,
    0xd5, 0xd0, 0xa4, 0xec, 0x10,
    0xd5, 0xd0, 0xa4, 0xf5, 0x01,
    0xd5, 0xd0, 0xa4, 0xf5, 0x02,
    0xd5, 0xd0, 0xa4, 0xf5, 0x04,
    0xd5, 0xd0, 0xa4, 0xf5, 0x08,
    0xd5, 0xd0, 0xa4, 0xf5, 0x10,
    0xd5, 0xd0, 0xa4, 0xfe, 0x01,
    0xd5, 0xd0, 0xa4, 0xfe, 0x02,
    0xd5, 0xd0, 0xa4, 0xfe, 0x04,
    0xd5, 0xd0, 0xa4, 0xfe, 0x08,
    0xd5, 0xd0, 0xa4, 0xfe, 0x10,
    0xd5, 0xd4, 0xa4, 0xc7, 0x01,
    0xd5, 0xd4, 0xa4, 0xc7, 0x02,
    0xd5, 0xd4, 0xa4, 0xc7, 0x04,
    0xd5, 0xd4, 0xa4, 0xc7, 0x08,
    0xd5, 0xd4, 0xa4, 0xc7, 0x10,
    0xd5, 0xd5, 0xa4, 0xc8, 0x01,
    0xd5, 0xd5, 0xa4, 0xc8, 0x02,
    0xd5, 0xd5, 0xa4, 0xc8, 0x04,
    0xd5, 0xd5, 0xa4, 0xc8, 0x08,
    0xd5, 0xd5, 0xa4, 0xc8, 0x10,
    0xd5, 0xd5, 0xa4, 0xd1, 0x01,
    0xd5, 0xd5, 0xa4, 0xd1, 0x02,
    0xd5, 0xd5, 0xa4, 0xd1, 0x04,
    0xd5, 0xd5, 0xa4, 0xd1, 0x08,
    0xd5, 0xd5, 0xa4, 0xd1, 0x10,
    0xd5, 0xd5, 0xa4, 0xda, 0x01,
    0xd5, 0xd5, 0xa4, 0xda, 0x02,
    0xd5, 0xd5, 0xa4, 0xda, 0x04,
    0xd5, 0xd5, 0xa4, 0xda, 0x08,
    0xd5, 0xd5, 0xa4, 0xda, 0x10,
    0xd5, 0xd5, 0xa4, 0xe3, 0x01,
    0xd5, 0xd5, 0xa4, 0xe3, 0x02,
    0xd5, 0xd5, 0xa4, 0xe3, 0x04,
    0xd5, 0xd5, 0xa4, 0xe3, 0x08,
    0xd5, 0xd5, 0xa4, 0xe3, 0x10,
    0xd5, 0xd5, 0xa4, 0xec, 0x01,
    0xd5, 0xd5, 0xa4, 0xec, 0x02,
    0xd5, 0xd5, 0xa4, 0xec, 0x04,
    0xd5, 0xd5, 0xa4, 0xec, 0x08,
    0xd5, 0xd5, 0xa4, 0xec, 0x10,
    0xd5, 0xd5, 0xa4, 0xf5, 0x01,
    0xd5, 0xd5, 0xa4, 0xf5, 0x02,
    0xd5, 0xd5, 0xa4, 0xf5, 0x04,
    0xd5, 0xd5, 0xa4, 0xf5, 0x08,
    0xd5, 0xd5, 0xa4, 0xf5, 0x10,
    0xd5, 0xd5, 0xa4, 0xfe, 0x01,
    0xd5, 0xd5, 0xa4, 0xfe, 0x02,
    0xd5, 0xd5, 0xa4, 0xfe, 0x04,
    0xd5, 0xd5, 0xa4, 0xfe, 0x08,
    0xd5, 0xd5, 0xa4, 0xfe, 0x10,
    0xd5, 0x91, 0xa4, 0xcf, 0x01,
    0xd5, 0x91, 0xa4, 0xcf, 0x02,
    0xd5, 0x91, 0xa4, 0xcf, 0x04,
    0xd5, 0x91, 0xa4, 0xcf, 0x08,
    0xd5, 0x91, 0xa4, 0xcf, 0x10,
#endif // _LP64
    0x0f, 0xac, 0xd1, 0x01,
    0x0f, 0xac, 0xd1, 0x02,
    0x0f, 0xac, 0xd1, 0x04,
    0x0f, 0xac, 0xd1, 0x08,
    0x0f, 0xac, 0xd1, 0x10,
    0x0f, 0xac, 0xda, 0x01,
    0x0f, 0xac, 0xda, 0x02,
    0x0f, 0xac, 0xda, 0x04,
    0x0f, 0xac, 0xda, 0x08,
    0x0f, 0xac, 0xda, 0x10,
#ifdef _LP64
    0x44, 0x0f, 0xac, 0xc3, 0x01,
    0x44, 0x0f, 0xac, 0xc3, 0x02,
    0x44, 0x0f, 0xac, 0xc3, 0x04,
    0x44, 0x0f, 0xac, 0xc3, 0x08,
    0x44, 0x0f, 0xac, 0xc3, 0x10,
    0x45, 0x0f, 0xac, 0xc8, 0x01,
    0x45, 0x0f, 0xac, 0xc8, 0x02,
    0x45, 0x0f, 0xac, 0xc8, 0x04,
    0x45, 0x0f, 0xac, 0xc8, 0x08,
    0x45, 0x0f, 0xac, 0xc8, 0x10,
    0x45, 0x0f, 0xac, 0xd1, 0x01,
    0x45, 0x0f, 0xac, 0xd1, 0x02,
    0x45, 0x0f, 0xac, 0xd1, 0x04,
    0x45, 0x0f, 0xac, 0xd1, 0x08,
    0x45, 0x0f, 0xac, 0xd1, 0x10,
    0x45, 0x0f, 0xac, 0xda, 0x01,
    0x45, 0x0f, 0xac, 0xda, 0x02,
    0x45, 0x0f, 0xac, 0xda, 0x04,
    0x45, 0x0f, 0xac, 0xda, 0x08,
    0x45, 0x0f, 0xac, 0xda, 0x10,
    0x45, 0x0f, 0xac, 0xe3, 0x01,
    0x45, 0x0f, 0xac, 0xe3, 0x02,
    0x45, 0x0f, 0xac, 0xe3, 0x04,
    0x45, 0x0f, 0xac, 0xe3, 0x08,
    0x45, 0x0f, 0xac, 0xe3, 0x10,
    0x45, 0x0f, 0xac, 0xec, 0x01,
    0x45, 0x0f, 0xac, 0xec, 0x02,
    0x45, 0x0f, 0xac, 0xec, 0x04,
    0x45, 0x0f, 0xac, 0xec, 0x08,
    0x45, 0x0f, 0xac, 0xec, 0x10,
    0x45, 0x0f, 0xac, 0xf5, 0x01,
    0x45, 0x0f, 0xac, 0xf5, 0x02,
    0x45, 0x0f, 0xac, 0xf5, 0x04,
    0x45, 0x0f, 0xac, 0xf5, 0x08,
    0x45, 0x0f, 0xac, 0xf5, 0x10,
    0x45, 0x0f, 0xac, 0xfe, 0x01,
    0x45, 0x0f, 0xac, 0xfe, 0x02,
    0x45, 0x0f, 0xac, 0xfe, 0x04,
    0x45, 0x0f, 0xac, 0xfe, 0x08,
    0x45, 0x0f, 0xac, 0xfe, 0x10,
    0xd5, 0xc1, 0xac, 0xc7, 0x01,
    0xd5, 0xc1, 0xac, 0xc7, 0x02,
    0xd5, 0xc1, 0xac, 0xc7, 0x04,
    0xd5, 0xc1, 0xac, 0xc7, 0x08,
    0xd5, 0xc1, 0xac, 0xc7, 0x10,
    0xd5, 0xd0, 0xac, 0xc8, 0x01,
    0xd5, 0xd0, 0xac, 0xc8, 0x02,
    0xd5, 0xd0, 0xac, 0xc8, 0x04,
    0xd5, 0xd0, 0xac, 0xc8, 0x08,
    0xd5, 0xd0, 0xac, 0xc8, 0x10,
    0xd5, 0xd0, 0xac, 0xd1, 0x01,
    0xd5, 0xd0, 0xac, 0xd1, 0x02,
    0xd5, 0xd0, 0xac, 0xd1, 0x04,
    0xd5, 0xd0, 0xac, 0xd1, 0x08,
    0xd5, 0xd0, 0xac, 0xd1, 0x10,
    0xd5, 0xd0, 0xac, 0xda, 0x01,
    0xd5, 0xd0, 0xac, 0xda, 0x02,
    0xd5, 0xd0, 0xac, 0xda, 0x04,
    0xd5, 0xd0, 0xac, 0xda, 0x08,
    0xd5, 0xd0, 0xac, 0xda, 0x10,
    0xd5, 0xd0, 0xac, 0xe3, 0x01,
    0xd5, 0xd0, 0xac, 0xe3, 0x02,
    0xd5, 0xd0, 0xac, 0xe3, 0x04,
    0xd5, 0xd0, 0xac, 0xe3, 0x08,
    0xd5, 0xd0, 0xac, 0xe3, 0x10,
    0xd5, 0xd0, 0xac, 0xec, 0x01,
    0xd5, 0xd0, 0xac, 0xec, 0x02,
    0xd5, 0xd0, 0xac, 0xec, 0x04,
    0xd5, 0xd0, 0xac, 0xec, 0x08,
    0xd5, 0xd0, 0xac, 0xec, 0x10,
    0xd5, 0xd0, 0xac, 0xf5, 0x01,
    0xd5, 0xd0, 0xac, 0xf5, 0x02,
    0xd5, 0xd0, 0xac, 0xf5, 0x04,
    0xd5, 0xd0, 0xac, 0xf5, 0x08,
    0xd5, 0xd0, 0xac, 0xf5, 0x10,
    0xd5, 0xd0, 0xac, 0xfe, 0x01,
    0xd5, 0xd0, 0xac, 0xfe, 0x02,
    0xd5, 0xd0, 0xac, 0xfe, 0x04,
    0xd5, 0xd0, 0xac, 0xfe, 0x08,
    0xd5, 0xd0, 0xac, 0xfe, 0x10,
    0xd5, 0xd4, 0xac, 0xc7, 0x01,
    0xd5, 0xd4, 0xac, 0xc7, 0x02,
    0xd5, 0xd4, 0xac, 0xc7, 0x04,
    0xd5, 0xd4, 0xac, 0xc7, 0x08,
    0xd5, 0xd4, 0xac, 0xc7, 0x10,
    0xd5, 0xd5, 0xac, 0xc8, 0x01,
    0xd5, 0xd5, 0xac, 0xc8, 0x02,
    0xd5, 0xd5, 0xac, 0xc8, 0x04,
    0xd5, 0xd5, 0xac, 0xc8, 0x08,
    0xd5, 0xd5, 0xac, 0xc8, 0x10,
    0xd5, 0xd5, 0xac, 0xd1, 0x01,
    0xd5, 0xd5, 0xac, 0xd1, 0x02,
    0xd5, 0xd5, 0xac, 0xd1, 0x04,
    0xd5, 0xd5, 0xac, 0xd1, 0x08,
    0xd5, 0xd5, 0xac, 0xd1, 0x10,
    0xd5, 0xd5, 0xac, 0xda, 0x01,
    0xd5, 0xd5, 0xac, 0xda, 0x02,
    0xd5, 0xd5, 0xac, 0xda, 0x04,
    0xd5, 0xd5, 0xac, 0xda, 0x08,
    0xd5, 0xd5, 0xac, 0xda, 0x10,
    0xd5, 0xd5, 0xac, 0xe3, 0x01,
    0xd5, 0xd5, 0xac, 0xe3, 0x02,
    0xd5, 0xd5, 0xac, 0xe3, 0x04,
    0xd5, 0xd5, 0xac, 0xe3, 0x08,
    0xd5, 0xd5, 0xac, 0xe3, 0x10,
    0xd5, 0xd5, 0xac, 0xec, 0x01,
    0xd5, 0xd5, 0xac, 0xec, 0x02,
    0xd5, 0xd5, 0xac, 0xec, 0x04,
    0xd5, 0xd5, 0xac, 0xec, 0x08,
    0xd5, 0xd5, 0xac, 0xec, 0x10,
    0xd5, 0xd5, 0xac, 0xf5, 0x01,
    0xd5, 0xd5, 0xac, 0xf5, 0x02,
    0xd5, 0xd5, 0xac, 0xf5, 0x04,
    0xd5, 0xd5, 0xac, 0xf5, 0x08,
    0xd5, 0xd5, 0xac, 0xf5, 0x10,
    0xd5, 0xd5, 0xac, 0xfe, 0x01,
    0xd5, 0xd5, 0xac, 0xfe, 0x02,
    0xd5, 0xd5, 0xac, 0xfe, 0x04,
    0xd5, 0xd5, 0xac, 0xfe, 0x08,
    0xd5, 0xd5, 0xac, 0xfe, 0x10,
    0xd5, 0x91, 0xac, 0xcf, 0x01,
    0xd5, 0x91, 0xac, 0xcf, 0x02,
    0xd5, 0x91, 0xac, 0xcf, 0x04,
    0xd5, 0x91, 0xac, 0xcf, 0x08,
    0xd5, 0x91, 0xac, 0xcf, 0x10,
#endif // _LP64
    0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
#ifdef _LP64
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xec, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xed, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xee, 0x00, 0x00, 0x00, 0x40,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x40, 0x00,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x00, 0x04,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0x41, 0x81, 0xef, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xec, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xed, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xee, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x10, 0x81, 0xef, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xec, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xed, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xee, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x11, 0x81, 0xef, 0x00, 0x00, 0x00, 0x40,
    0x48, 0x13, 0xca,
    0x48, 0x13, 0xd3,
    0x49, 0x13, 0xd8,
    0x4d, 0x13, 0xc1,
    0x4d, 0x13, 0xca,
    0x4d, 0x13, 0xd3,
    0x4d, 0x13, 0xdc,
    0x4d, 0x13, 0xe5,
    0x4d, 0x13, 0xee,
    0x4d, 0x13, 0xf7,
    0xd5, 0x1c, 0x13, 0xf8,
    0xd5, 0x58, 0x13, 0xc1,
    0xd5, 0x58, 0x13, 0xca,
    0xd5, 0x58, 0x13, 0xd3,
    0xd5, 0x58, 0x13, 0xdc,
    0xd5, 0x58, 0x13, 0xe5,
    0xd5, 0x58, 0x13, 0xee,
    0xd5, 0x58, 0x13, 0xf7,
    0xd5, 0x59, 0x13, 0xf8,
    0xd5, 0x5d, 0x13, 0xc1,
    0xd5, 0x5d, 0x13, 0xca,
    0xd5, 0x5d, 0x13, 0xd3,
    0xd5, 0x5d, 0x13, 0xdc,
    0xd5, 0x5d, 0x13, 0xe5,
    0xd5, 0x5d, 0x13, 0xee,
    0xd5, 0x5d, 0x13, 0xf7,
    0xd5, 0x4c, 0x13, 0xf9,
    0x48, 0x0f, 0xaf, 0xca,
    0x48, 0x0f, 0xaf, 0xd3,
    0x49, 0x0f, 0xaf, 0xd8,
    0x4d, 0x0f, 0xaf, 0xc1,
    0x4d, 0x0f, 0xaf, 0xca,
    0x4d, 0x0f, 0xaf, 0xd3,
    0x4d, 0x0f, 0xaf, 0xdc,
    0x4d, 0x0f, 0xaf, 0xe5,
    0x4d, 0x0f, 0xaf, 0xee,
    0x4d, 0x0f, 0xaf, 0xf7,
    0xd5, 0x9c, 0xaf, 0xf8,
    0xd5, 0xd8, 0xaf, 0xc1,
    0xd5, 0xd8, 0xaf, 0xca,
    0xd5, 0xd8, 0xaf, 0xd3,
    0xd5, 0xd8, 0xaf, 0xdc,
    0xd5, 0xd8, 0xaf, 0xe5,
    0xd5, 0xd8, 0xaf, 0xee,
    0xd5, 0xd8, 0xaf, 0xf7,
    0xd5, 0xd9, 0xaf, 0xf8,
    0xd5, 0xdd, 0xaf, 0xc1,
    0xd5, 0xdd, 0xaf, 0xca,
    0xd5, 0xdd, 0xaf, 0xd3,
    0xd5, 0xdd, 0xaf, 0xdc,
    0xd5, 0xdd, 0xaf, 0xe5,
    0xd5, 0xdd, 0xaf, 0xee,
    0xd5, 0xdd, 0xaf, 0xf7,
    0xd5, 0xcc, 0xaf, 0xf9,
    0xf3, 0x48, 0x0f, 0xb8, 0xca,
    0xf3, 0x48, 0x0f, 0xb8, 0xd3,
    0xf3, 0x49, 0x0f, 0xb8, 0xd8,
    0xf3, 0x4d, 0x0f, 0xb8, 0xc1,
    0xf3, 0x4d, 0x0f, 0xb8, 0xca,
    0xf3, 0x4d, 0x0f, 0xb8, 0xd3,
    0xf3, 0x4d, 0x0f, 0xb8, 0xdc,
    0xf3, 0x4d, 0x0f, 0xb8, 0xe5,
    0xf3, 0x4d, 0x0f, 0xb8, 0xee,
    0xf3, 0x4d, 0x0f, 0xb8, 0xf7,
    0xf3, 0xd5, 0x9c, 0xb8, 0xf8,
    0xf3, 0xd5, 0xd8, 0xb8, 0xc1,
    0xf3, 0xd5, 0xd8, 0xb8, 0xca,
    0xf3, 0xd5, 0xd8, 0xb8, 0xd3,
    0xf3, 0xd5, 0xd8, 0xb8, 0xdc,
    0xf3, 0xd5, 0xd8, 0xb8, 0xe5,
    0xf3, 0xd5, 0xd8, 0xb8, 0xee,
    0xf3, 0xd5, 0xd8, 0xb8, 0xf7,
    0xf3, 0xd5, 0xd9, 0xb8, 0xf8,
    0xf3, 0xd5, 0xdd, 0xb8, 0xc1,
    0xf3, 0xd5, 0xdd, 0xb8, 0xca,
    0xf3, 0xd5, 0xdd, 0xb8, 0xd3,
    0xf3, 0xd5, 0xdd, 0xb8, 0xdc,
    0xf3, 0xd5, 0xdd, 0xb8, 0xe5,
    0xf3, 0xd5, 0xdd, 0xb8, 0xee,
    0xf3, 0xd5, 0xdd, 0xb8, 0xf7,
    0xf3, 0xd5, 0xcc, 0xb8, 0xf9,
    0x48, 0x1b, 0xca,
    0x48, 0x1b, 0xd3,
    0x49, 0x1b, 0xd8,
    0x4d, 0x1b, 0xc1,
    0x4d, 0x1b, 0xca,
    0x4d, 0x1b, 0xd3,
    0x4d, 0x1b, 0xdc,
    0x4d, 0x1b, 0xe5,
    0x4d, 0x1b, 0xee,
    0x4d, 0x1b, 0xf7,
    0xd5, 0x1c, 0x1b, 0xf8,
    0xd5, 0x58, 0x1b, 0xc1,
    0xd5, 0x58, 0x1b, 0xca,
    0xd5, 0x58, 0x1b, 0xd3,
    0xd5, 0x58, 0x1b, 0xdc,
    0xd5, 0x58, 0x1b, 0xe5,
    0xd5, 0x58, 0x1b, 0xee,
    0xd5, 0x58, 0x1b, 0xf7,
    0xd5, 0x59, 0x1b, 0xf8,
    0xd5, 0x5d, 0x1b, 0xc1,
    0xd5, 0x5d, 0x1b, 0xca,
    0xd5, 0x5d, 0x1b, 0xd3,
    0xd5, 0x5d, 0x1b, 0xdc,
    0xd5, 0x5d, 0x1b, 0xe5,
    0xd5, 0x5d, 0x1b, 0xee,
    0xd5, 0x5d, 0x1b, 0xf7,
    0xd5, 0x4c, 0x1b, 0xf9,
    0x48, 0x2b, 0xca,
    0x48, 0x2b, 0xd3,
    0x49, 0x2b, 0xd8,
    0x4d, 0x2b, 0xc1,
    0x4d, 0x2b, 0xca,
    0x4d, 0x2b, 0xd3,
    0x4d, 0x2b, 0xdc,
    0x4d, 0x2b, 0xe5,
    0x4d, 0x2b, 0xee,
    0x4d, 0x2b, 0xf7,
    0xd5, 0x1c, 0x2b, 0xf8,
    0xd5, 0x58, 0x2b, 0xc1,
    0xd5, 0x58, 0x2b, 0xca,
    0xd5, 0x58, 0x2b, 0xd3,
    0xd5, 0x58, 0x2b, 0xdc,
    0xd5, 0x58, 0x2b, 0xe5,
    0xd5, 0x58, 0x2b, 0xee,
    0xd5, 0x58, 0x2b, 0xf7,
    0xd5, 0x59, 0x2b, 0xf8,
    0xd5, 0x5d, 0x2b, 0xc1,
    0xd5, 0x5d, 0x2b, 0xca,
    0xd5, 0x5d, 0x2b, 0xd3,
    0xd5, 0x5d, 0x2b, 0xdc,
    0xd5, 0x5d, 0x2b, 0xe5,
    0xd5, 0x5d, 0x2b, 0xee,
    0xd5, 0x5d, 0x2b, 0xf7,
    0xd5, 0x4c, 0x2b, 0xf9,
    0xf3, 0x48, 0x0f, 0xbc, 0xca,
    0xf3, 0x48, 0x0f, 0xbc, 0xd3,
    0xf3, 0x49, 0x0f, 0xbc, 0xd8,
    0xf3, 0x4d, 0x0f, 0xbc, 0xc1,
    0xf3, 0x4d, 0x0f, 0xbc, 0xca,
    0xf3, 0x4d, 0x0f, 0xbc, 0xd3,
    0xf3, 0x4d, 0x0f, 0xbc, 0xdc,
    0xf3, 0x4d, 0x0f, 0xbc, 0xe5,
    0xf3, 0x4d, 0x0f, 0xbc, 0xee,
    0xf3, 0x4d, 0x0f, 0xbc, 0xf7,
    0xf3, 0xd5, 0x9c, 0xbc, 0xf8,
    0xf3, 0xd5, 0xd8, 0xbc, 0xc1,
    0xf3, 0xd5, 0xd8, 0xbc, 0xca,
    0xf3, 0xd5, 0xd8, 0xbc, 0xd3,
    0xf3, 0xd5, 0xd8, 0xbc, 0xdc,
    0xf3, 0xd5, 0xd8, 0xbc, 0xe5,
    0xf3, 0xd5, 0xd8, 0xbc, 0xee,
    0xf3, 0xd5, 0xd8, 0xbc, 0xf7,
    0xf3, 0xd5, 0xd9, 0xbc, 0xf8,
    0xf3, 0xd5, 0xdd, 0xbc, 0xc1,
    0xf3, 0xd5, 0xdd, 0xbc, 0xca,
    0xf3, 0xd5, 0xdd, 0xbc, 0xd3,
    0xf3, 0xd5, 0xdd, 0xbc, 0xdc,
    0xf3, 0xd5, 0xdd, 0xbc, 0xe5,
    0xf3, 0xd5, 0xdd, 0xbc, 0xee,
    0xf3, 0xd5, 0xdd, 0xbc, 0xf7,
    0xf3, 0xd5, 0xcc, 0xbc, 0xf9,
    0xf3, 0x48, 0x0f, 0xbd, 0xca,
    0xf3, 0x48, 0x0f, 0xbd, 0xd3,
    0xf3, 0x49, 0x0f, 0xbd, 0xd8,
    0xf3, 0x4d, 0x0f, 0xbd, 0xc1,
    0xf3, 0x4d, 0x0f, 0xbd, 0xca,
    0xf3, 0x4d, 0x0f, 0xbd, 0xd3,
    0xf3, 0x4d, 0x0f, 0xbd, 0xdc,
    0xf3, 0x4d, 0x0f, 0xbd, 0xe5,
    0xf3, 0x4d, 0x0f, 0xbd, 0xee,
    0xf3, 0x4d, 0x0f, 0xbd, 0xf7,
    0xf3, 0xd5, 0x9c, 0xbd, 0xf8,
    0xf3, 0xd5, 0xd8, 0xbd, 0xc1,
    0xf3, 0xd5, 0xd8, 0xbd, 0xca,
    0xf3, 0xd5, 0xd8, 0xbd, 0xd3,
    0xf3, 0xd5, 0xd8, 0xbd, 0xdc,
    0xf3, 0xd5, 0xd8, 0xbd, 0xe5,
    0xf3, 0xd5, 0xd8, 0xbd, 0xee,
    0xf3, 0xd5, 0xd8, 0xbd, 0xf7,
    0xf3, 0xd5, 0xd9, 0xbd, 0xf8,
    0xf3, 0xd5, 0xdd, 0xbd, 0xc1,
    0xf3, 0xd5, 0xdd, 0xbd, 0xca,
    0xf3, 0xd5, 0xdd, 0xbd, 0xd3,
    0xf3, 0xd5, 0xdd, 0xbd, 0xdc,
    0xf3, 0xd5, 0xdd, 0xbd, 0xe5,
    0xf3, 0xd5, 0xdd, 0xbd, 0xee,
    0xf3, 0xd5, 0xdd, 0xbd, 0xf7,
    0xf3, 0xd5, 0xcc, 0xbd, 0xf9,
    0x48, 0x03, 0xca,
    0x48, 0x03, 0xd3,
    0x49, 0x03, 0xd8,
    0x4d, 0x03, 0xc1,
    0x4d, 0x03, 0xca,
    0x4d, 0x03, 0xd3,
    0x4d, 0x03, 0xdc,
    0x4d, 0x03, 0xe5,
    0x4d, 0x03, 0xee,
    0x4d, 0x03, 0xf7,
    0xd5, 0x1c, 0x03, 0xf8,
    0xd5, 0x58, 0x03, 0xc1,
    0xd5, 0x58, 0x03, 0xca,
    0xd5, 0x58, 0x03, 0xd3,
    0xd5, 0x58, 0x03, 0xdc,
    0xd5, 0x58, 0x03, 0xe5,
    0xd5, 0x58, 0x03, 0xee,
    0xd5, 0x58, 0x03, 0xf7,
    0xd5, 0x59, 0x03, 0xf8,
    0xd5, 0x5d, 0x03, 0xc1,
    0xd5, 0x5d, 0x03, 0xca,
    0xd5, 0x5d, 0x03, 0xd3,
    0xd5, 0x5d, 0x03, 0xdc,
    0xd5, 0x5d, 0x03, 0xe5,
    0xd5, 0x5d, 0x03, 0xee,
    0xd5, 0x5d, 0x03, 0xf7,
    0xd5, 0x4c, 0x03, 0xf9,
    0x48, 0x23, 0xca,
    0x48, 0x23, 0xd3,
    0x49, 0x23, 0xd8,
    0x4d, 0x23, 0xc1,
    0x4d, 0x23, 0xca,
    0x4d, 0x23, 0xd3,
    0x4d, 0x23, 0xdc,
    0x4d, 0x23, 0xe5,
    0x4d, 0x23, 0xee,
    0x4d, 0x23, 0xf7,
    0xd5, 0x1c, 0x23, 0xf8,
    0xd5, 0x58, 0x23, 0xc1,
    0xd5, 0x58, 0x23, 0xca,
    0xd5, 0x58, 0x23, 0xd3,
    0xd5, 0x58, 0x23, 0xdc,
    0xd5, 0x58, 0x23, 0xe5,
    0xd5, 0x58, 0x23, 0xee,
    0xd5, 0x58, 0x23, 0xf7,
    0xd5, 0x59, 0x23, 0xf8,
    0xd5, 0x5d, 0x23, 0xc1,
    0xd5, 0x5d, 0x23, 0xca,
    0xd5, 0x5d, 0x23, 0xd3,
    0xd5, 0x5d, 0x23, 0xdc,
    0xd5, 0x5d, 0x23, 0xe5,
    0xd5, 0x5d, 0x23, 0xee,
    0xd5, 0x5d, 0x23, 0xf7,
    0xd5, 0x4c, 0x23, 0xf9,
    0x48, 0x0b, 0xca,
    0x48, 0x0b, 0xd3,
    0x49, 0x0b, 0xd8,
    0x4d, 0x0b, 0xc1,
    0x4d, 0x0b, 0xca,
    0x4d, 0x0b, 0xd3,
    0x4d, 0x0b, 0xdc,
    0x4d, 0x0b, 0xe5,
    0x4d, 0x0b, 0xee,
    0x4d, 0x0b, 0xf7,
    0xd5, 0x1c, 0x0b, 0xf8,
    0xd5, 0x58, 0x0b, 0xc1,
    0xd5, 0x58, 0x0b, 0xca,
    0xd5, 0x58, 0x0b, 0xd3,
    0xd5, 0x58, 0x0b, 0xdc,
    0xd5, 0x58, 0x0b, 0xe5,
    0xd5, 0x58, 0x0b, 0xee,
    0xd5, 0x58, 0x0b, 0xf7,
    0xd5, 0x59, 0x0b, 0xf8,
    0xd5, 0x5d, 0x0b, 0xc1,
    0xd5, 0x5d, 0x0b, 0xca,
    0xd5, 0x5d, 0x0b, 0xd3,
    0xd5, 0x5d, 0x0b, 0xdc,
    0xd5, 0x5d, 0x0b, 0xe5,
    0xd5, 0x5d, 0x0b, 0xee,
    0xd5, 0x5d, 0x0b, 0xf7,
    0xd5, 0x4c, 0x0b, 0xf9,
    0x48, 0x33, 0xca,
    0x48, 0x33, 0xd3,
    0x49, 0x33, 0xd8,
    0x4d, 0x33, 0xc1,
    0x4d, 0x33, 0xca,
    0x4d, 0x33, 0xd3,
    0x4d, 0x33, 0xdc,
    0x4d, 0x33, 0xe5,
    0x4d, 0x33, 0xee,
    0x4d, 0x33, 0xf7,
    0xd5, 0x1c, 0x33, 0xf8,
    0xd5, 0x58, 0x33, 0xc1,
    0xd5, 0x58, 0x33, 0xca,
    0xd5, 0x58, 0x33, 0xd3,
    0xd5, 0x58, 0x33, 0xdc,
    0xd5, 0x58, 0x33, 0xe5,
    0xd5, 0x58, 0x33, 0xee,
    0xd5, 0x58, 0x33, 0xf7,
    0xd5, 0x59, 0x33, 0xf8,
    0xd5, 0x5d, 0x33, 0xc1,
    0xd5, 0x5d, 0x33, 0xca,
    0xd5, 0x5d, 0x33, 0xd3,
    0xd5, 0x5d, 0x33, 0xdc,
    0xd5, 0x5d, 0x33, 0xe5,
    0xd5, 0x5d, 0x33, 0xee,
    0xd5, 0x5d, 0x33, 0xf7,
    0xd5, 0x4c, 0x33, 0xf9,
    0x48, 0x01, 0x0c, 0x1a,
    0x4a, 0x01, 0x14, 0x03,
    0x4b, 0x01, 0x1c, 0x08,
    0x4f, 0x01, 0x04, 0x11,
    0x4f, 0x01, 0x0c, 0x1a,
    0x4f, 0x01, 0x14, 0x23,
    0x4f, 0x01, 0x1c, 0x2c,
    0x4f, 0x01, 0x64, 0x35, 0x00,
    0x4f, 0x01, 0x2c, 0x3e,
    0xd5, 0x2d, 0x01, 0x34, 0x07,
    0xd5, 0x3c, 0x01, 0x3c, 0x08,
    0xd5, 0x78, 0x01, 0x04, 0x11,
    0xd5, 0x78, 0x01, 0x0c, 0x1a,
    0xd5, 0x78, 0x01, 0x14, 0x23,
    0xd5, 0x78, 0x01, 0x1c, 0x2c,
    0xd5, 0x78, 0x01, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x01, 0x2c, 0x3e,
    0xd5, 0x7a, 0x01, 0x34, 0x07,
    0xd5, 0x7b, 0x01, 0x3c, 0x08,
    0xd5, 0x7f, 0x01, 0x04, 0x11,
    0xd5, 0x7f, 0x01, 0x0c, 0x1a,
    0xd5, 0x7f, 0x01, 0x14, 0x23,
    0xd5, 0x7f, 0x01, 0x1c, 0x2c,
    0xd5, 0x7f, 0x01, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x01, 0x2c, 0x3e,
    0xd5, 0x5d, 0x01, 0x34, 0x0f,
    0xd5, 0x4c, 0x01, 0x3c, 0x11,
    0x48, 0x21, 0x0c, 0x1a,
    0x4a, 0x21, 0x14, 0x03,
    0x4b, 0x21, 0x1c, 0x08,
    0x4f, 0x21, 0x04, 0x11,
    0x4f, 0x21, 0x0c, 0x1a,
    0x4f, 0x21, 0x14, 0x23,
    0x4f, 0x21, 0x1c, 0x2c,
    0x4f, 0x21, 0x64, 0x35, 0x00,
    0x4f, 0x21, 0x2c, 0x3e,
    0xd5, 0x2d, 0x21, 0x34, 0x07,
    0xd5, 0x3c, 0x21, 0x3c, 0x08,
    0xd5, 0x78, 0x21, 0x04, 0x11,
    0xd5, 0x78, 0x21, 0x0c, 0x1a,
    0xd5, 0x78, 0x21, 0x14, 0x23,
    0xd5, 0x78, 0x21, 0x1c, 0x2c,
    0xd5, 0x78, 0x21, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x21, 0x2c, 0x3e,
    0xd5, 0x7a, 0x21, 0x34, 0x07,
    0xd5, 0x7b, 0x21, 0x3c, 0x08,
    0xd5, 0x7f, 0x21, 0x04, 0x11,
    0xd5, 0x7f, 0x21, 0x0c, 0x1a,
    0xd5, 0x7f, 0x21, 0x14, 0x23,
    0xd5, 0x7f, 0x21, 0x1c, 0x2c,
    0xd5, 0x7f, 0x21, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x21, 0x2c, 0x3e,
    0xd5, 0x5d, 0x21, 0x34, 0x0f,
    0xd5, 0x4c, 0x21, 0x3c, 0x11,
    0x48, 0x09, 0x0c, 0x1a,
    0x4a, 0x09, 0x14, 0x03,
    0x4b, 0x09, 0x1c, 0x08,
    0x4f, 0x09, 0x04, 0x11,
    0x4f, 0x09, 0x0c, 0x1a,
    0x4f, 0x09, 0x14, 0x23,
    0x4f, 0x09, 0x1c, 0x2c,
    0x4f, 0x09, 0x64, 0x35, 0x00,
    0x4f, 0x09, 0x2c, 0x3e,
    0xd5, 0x2d, 0x09, 0x34, 0x07,
    0xd5, 0x3c, 0x09, 0x3c, 0x08,
    0xd5, 0x78, 0x09, 0x04, 0x11,
    0xd5, 0x78, 0x09, 0x0c, 0x1a,
    0xd5, 0x78, 0x09, 0x14, 0x23,
    0xd5, 0x78, 0x09, 0x1c, 0x2c,
    0xd5, 0x78, 0x09, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x09, 0x2c, 0x3e,
    0xd5, 0x7a, 0x09, 0x34, 0x07,
    0xd5, 0x7b, 0x09, 0x3c, 0x08,
    0xd5, 0x7f, 0x09, 0x04, 0x11,
    0xd5, 0x7f, 0x09, 0x0c, 0x1a,
    0xd5, 0x7f, 0x09, 0x14, 0x23,
    0xd5, 0x7f, 0x09, 0x1c, 0x2c,
    0xd5, 0x7f, 0x09, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x09, 0x2c, 0x3e,
    0xd5, 0x5d, 0x09, 0x34, 0x0f,
    0xd5, 0x4c, 0x09, 0x3c, 0x11,
    0x48, 0x31, 0x0c, 0x1a,
    0x4a, 0x31, 0x14, 0x03,
    0x4b, 0x31, 0x1c, 0x08,
    0x4f, 0x31, 0x04, 0x11,
    0x4f, 0x31, 0x0c, 0x1a,
    0x4f, 0x31, 0x14, 0x23,
    0x4f, 0x31, 0x1c, 0x2c,
    0x4f, 0x31, 0x64, 0x35, 0x00,
    0x4f, 0x31, 0x2c, 0x3e,
    0xd5, 0x2d, 0x31, 0x34, 0x07,
    0xd5, 0x3c, 0x31, 0x3c, 0x08,
    0xd5, 0x78, 0x31, 0x04, 0x11,
    0xd5, 0x78, 0x31, 0x0c, 0x1a,
    0xd5, 0x78, 0x31, 0x14, 0x23,
    0xd5, 0x78, 0x31, 0x1c, 0x2c,
    0xd5, 0x78, 0x31, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x31, 0x2c, 0x3e,
    0xd5, 0x7a, 0x31, 0x34, 0x07,
    0xd5, 0x7b, 0x31, 0x3c, 0x08,
    0xd5, 0x7f, 0x31, 0x04, 0x11,
    0xd5, 0x7f, 0x31, 0x0c, 0x1a,
    0xd5, 0x7f, 0x31, 0x14, 0x23,
    0xd5, 0x7f, 0x31, 0x1c, 0x2c,
    0xd5, 0x7f, 0x31, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x31, 0x2c, 0x3e,
    0xd5, 0x5d, 0x31, 0x34, 0x0f,
    0xd5, 0x4c, 0x31, 0x3c, 0x11,
    0x48, 0x29, 0x0c, 0x1a,
    0x4a, 0x29, 0x14, 0x03,
    0x4b, 0x29, 0x1c, 0x08,
    0x4f, 0x29, 0x04, 0x11,
    0x4f, 0x29, 0x0c, 0x1a,
    0x4f, 0x29, 0x14, 0x23,
    0x4f, 0x29, 0x1c, 0x2c,
    0x4f, 0x29, 0x64, 0x35, 0x00,
    0x4f, 0x29, 0x2c, 0x3e,
    0xd5, 0x2d, 0x29, 0x34, 0x07,
    0xd5, 0x3c, 0x29, 0x3c, 0x08,
    0xd5, 0x78, 0x29, 0x04, 0x11,
    0xd5, 0x78, 0x29, 0x0c, 0x1a,
    0xd5, 0x78, 0x29, 0x14, 0x23,
    0xd5, 0x78, 0x29, 0x1c, 0x2c,
    0xd5, 0x78, 0x29, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x29, 0x2c, 0x3e,
    0xd5, 0x7a, 0x29, 0x34, 0x07,
    0xd5, 0x7b, 0x29, 0x3c, 0x08,
    0xd5, 0x7f, 0x29, 0x04, 0x11,
    0xd5, 0x7f, 0x29, 0x0c, 0x1a,
    0xd5, 0x7f, 0x29, 0x14, 0x23,
    0xd5, 0x7f, 0x29, 0x1c, 0x2c,
    0xd5, 0x7f, 0x29, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x29, 0x2c, 0x3e,
    0xd5, 0x5d, 0x29, 0x34, 0x0f,
    0xd5, 0x4c, 0x29, 0x3c, 0x11,
    0x48, 0x83, 0x24, 0x11, 0x01,
    0x48, 0x83, 0x24, 0x1a, 0x01,
    0x4a, 0x83, 0x24, 0x03, 0x01,
    0x4b, 0x83, 0x24, 0x08, 0x01,
    0x4b, 0x83, 0x24, 0x11, 0x01,
    0x4b, 0x83, 0x24, 0x1a, 0x01,
    0x4b, 0x83, 0x24, 0x23, 0x01,
    0x4b, 0x83, 0x24, 0x2c, 0x01,
    0x4b, 0x83, 0x64, 0x35, 0x00, 0x01,
    0x4b, 0x83, 0x24, 0x3e, 0x01,
    0xd5, 0x29, 0x83, 0x24, 0x07, 0x01,
    0xd5, 0x38, 0x83, 0x24, 0x08, 0x01,
    0xd5, 0x38, 0x83, 0x24, 0x11, 0x01,
    0xd5, 0x38, 0x83, 0x24, 0x1a, 0x01,
    0xd5, 0x38, 0x83, 0x24, 0x23, 0x01,
    0xd5, 0x38, 0x83, 0x24, 0x2c, 0x01,
    0xd5, 0x38, 0x83, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x38, 0x83, 0x24, 0x3e, 0x01,
    0xd5, 0x3a, 0x83, 0x24, 0x07, 0x01,
    0xd5, 0x3b, 0x83, 0x24, 0x08, 0x01,
    0xd5, 0x3b, 0x83, 0x24, 0x11, 0x01,
    0xd5, 0x3b, 0x83, 0x24, 0x1a, 0x01,
    0xd5, 0x3b, 0x83, 0x24, 0x23, 0x01,
    0xd5, 0x3b, 0x83, 0x24, 0x2c, 0x01,
    0xd5, 0x3b, 0x83, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x3b, 0x83, 0x24, 0x3e, 0x01,
    0xd5, 0x19, 0x83, 0x24, 0x0f, 0x01,
    0x48, 0x83, 0x24, 0x11, 0x10,
    0x48, 0x83, 0x24, 0x1a, 0x10,
    0x4a, 0x83, 0x24, 0x03, 0x10,
    0x4b, 0x83, 0x24, 0x08, 0x10,
    0x4b, 0x83, 0x24, 0x11, 0x10,
    0x4b, 0x83, 0x24, 0x1a, 0x10,
    0x4b, 0x83, 0x24, 0x23, 0x10,
    0x4b, 0x83, 0x24, 0x2c, 0x10,
    0x4b, 0x83, 0x64, 0x35, 0x00, 0x10,
    0x4b, 0x83, 0x24, 0x3e, 0x10,
    0xd5, 0x29, 0x83, 0x24, 0x07, 0x10,
    0xd5, 0x38, 0x83, 0x24, 0x08, 0x10,
    0xd5, 0x38, 0x83, 0x24, 0x11, 0x10,
    0xd5, 0x38, 0x83, 0x24, 0x1a, 0x10,
    0xd5, 0x38, 0x83, 0x24, 0x23, 0x10,
    0xd5, 0x38, 0x83, 0x24, 0x2c, 0x10,
    0xd5, 0x38, 0x83, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0x83, 0x24, 0x3e, 0x10,
    0xd5, 0x3a, 0x83, 0x24, 0x07, 0x10,
    0xd5, 0x3b, 0x83, 0x24, 0x08, 0x10,
    0xd5, 0x3b, 0x83, 0x24, 0x11, 0x10,
    0xd5, 0x3b, 0x83, 0x24, 0x1a, 0x10,
    0xd5, 0x3b, 0x83, 0x24, 0x23, 0x10,
    0xd5, 0x3b, 0x83, 0x24, 0x2c, 0x10,
    0xd5, 0x3b, 0x83, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0x83, 0x24, 0x3e, 0x10,
    0xd5, 0x19, 0x83, 0x24, 0x0f, 0x10,
    0x48, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x81, 0x24, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x24, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x24, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x24, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x81, 0x24, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x24, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x24, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x24, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x24, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x81, 0x24, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x29, 0x81, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3a, 0x81, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x81, 0x24, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x29, 0x81, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3a, 0x81, 0x24, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x81, 0x24, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x29, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3a, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x81, 0x24, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x29, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3a, 0x81, 0x24, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x24, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x24, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x24, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x24, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x24, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0x24, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0x04, 0x11, 0x01,
    0x48, 0x83, 0x04, 0x1a, 0x01,
    0x4a, 0x83, 0x04, 0x03, 0x01,
    0x4b, 0x83, 0x04, 0x08, 0x01,
    0x4b, 0x83, 0x04, 0x11, 0x01,
    0x4b, 0x83, 0x04, 0x1a, 0x01,
    0x4b, 0x83, 0x04, 0x23, 0x01,
    0x4b, 0x83, 0x04, 0x2c, 0x01,
    0x4b, 0x83, 0x44, 0x35, 0x00, 0x01,
    0x4b, 0x83, 0x04, 0x3e, 0x01,
    0xd5, 0x29, 0x83, 0x04, 0x07, 0x01,
    0xd5, 0x38, 0x83, 0x04, 0x08, 0x01,
    0xd5, 0x38, 0x83, 0x04, 0x11, 0x01,
    0xd5, 0x38, 0x83, 0x04, 0x1a, 0x01,
    0xd5, 0x38, 0x83, 0x04, 0x23, 0x01,
    0xd5, 0x38, 0x83, 0x04, 0x2c, 0x01,
    0xd5, 0x38, 0x83, 0x44, 0x35, 0x00, 0x01,
    0xd5, 0x38, 0x83, 0x04, 0x3e, 0x01,
    0xd5, 0x3a, 0x83, 0x04, 0x07, 0x01,
    0xd5, 0x3b, 0x83, 0x04, 0x08, 0x01,
    0xd5, 0x3b, 0x83, 0x04, 0x11, 0x01,
    0xd5, 0x3b, 0x83, 0x04, 0x1a, 0x01,
    0xd5, 0x3b, 0x83, 0x04, 0x23, 0x01,
    0xd5, 0x3b, 0x83, 0x04, 0x2c, 0x01,
    0xd5, 0x3b, 0x83, 0x44, 0x35, 0x00, 0x01,
    0xd5, 0x3b, 0x83, 0x04, 0x3e, 0x01,
    0xd5, 0x19, 0x83, 0x04, 0x0f, 0x01,
    0x48, 0x83, 0x04, 0x11, 0x10,
    0x48, 0x83, 0x04, 0x1a, 0x10,
    0x4a, 0x83, 0x04, 0x03, 0x10,
    0x4b, 0x83, 0x04, 0x08, 0x10,
    0x4b, 0x83, 0x04, 0x11, 0x10,
    0x4b, 0x83, 0x04, 0x1a, 0x10,
    0x4b, 0x83, 0x04, 0x23, 0x10,
    0x4b, 0x83, 0x04, 0x2c, 0x10,
    0x4b, 0x83, 0x44, 0x35, 0x00, 0x10,
    0x4b, 0x83, 0x04, 0x3e, 0x10,
    0xd5, 0x29, 0x83, 0x04, 0x07, 0x10,
    0xd5, 0x38, 0x83, 0x04, 0x08, 0x10,
    0xd5, 0x38, 0x83, 0x04, 0x11, 0x10,
    0xd5, 0x38, 0x83, 0x04, 0x1a, 0x10,
    0xd5, 0x38, 0x83, 0x04, 0x23, 0x10,
    0xd5, 0x38, 0x83, 0x04, 0x2c, 0x10,
    0xd5, 0x38, 0x83, 0x44, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0x83, 0x04, 0x3e, 0x10,
    0xd5, 0x3a, 0x83, 0x04, 0x07, 0x10,
    0xd5, 0x3b, 0x83, 0x04, 0x08, 0x10,
    0xd5, 0x3b, 0x83, 0x04, 0x11, 0x10,
    0xd5, 0x3b, 0x83, 0x04, 0x1a, 0x10,
    0xd5, 0x3b, 0x83, 0x04, 0x23, 0x10,
    0xd5, 0x3b, 0x83, 0x04, 0x2c, 0x10,
    0xd5, 0x3b, 0x83, 0x44, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0x83, 0x04, 0x3e, 0x10,
    0xd5, 0x19, 0x83, 0x04, 0x0f, 0x10,
    0x48, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x81, 0x04, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x04, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x04, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x04, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x81, 0x04, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x04, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x04, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x04, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x04, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x81, 0x04, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x29, 0x81, 0x04, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3a, 0x81, 0x04, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x81, 0x04, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x29, 0x81, 0x04, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3a, 0x81, 0x04, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x81, 0x04, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x29, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3a, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x81, 0x04, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x29, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3a, 0x81, 0x04, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x04, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x04, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x44, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x04, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0x04, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0x48, 0xd1, 0x3c, 0x11,
    0x48, 0xd1, 0x3c, 0x1a,
    0x4a, 0xd1, 0x3c, 0x03,
    0x4b, 0xd1, 0x3c, 0x08,
    0x4b, 0xd1, 0x3c, 0x11,
    0x4b, 0xd1, 0x3c, 0x1a,
    0x4b, 0xd1, 0x3c, 0x23,
    0x4b, 0xd1, 0x3c, 0x2c,
    0x4b, 0xd1, 0x7c, 0x35, 0x00,
    0x4b, 0xd1, 0x3c, 0x3e,
    0xd5, 0x29, 0xd1, 0x3c, 0x07,
    0xd5, 0x38, 0xd1, 0x3c, 0x08,
    0xd5, 0x38, 0xd1, 0x3c, 0x11,
    0xd5, 0x38, 0xd1, 0x3c, 0x1a,
    0xd5, 0x38, 0xd1, 0x3c, 0x23,
    0xd5, 0x38, 0xd1, 0x3c, 0x2c,
    0xd5, 0x38, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x38, 0xd1, 0x3c, 0x3e,
    0xd5, 0x3a, 0xd1, 0x3c, 0x07,
    0xd5, 0x3b, 0xd1, 0x3c, 0x08,
    0xd5, 0x3b, 0xd1, 0x3c, 0x11,
    0xd5, 0x3b, 0xd1, 0x3c, 0x1a,
    0xd5, 0x3b, 0xd1, 0x3c, 0x23,
    0xd5, 0x3b, 0xd1, 0x3c, 0x2c,
    0xd5, 0x3b, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x3b, 0xd1, 0x3c, 0x3e,
    0xd5, 0x19, 0xd1, 0x3c, 0x0f,
    0x48, 0xc1, 0x3c, 0x11, 0x02,
    0x48, 0xc1, 0x3c, 0x1a, 0x02,
    0x4a, 0xc1, 0x3c, 0x03, 0x02,
    0x4b, 0xc1, 0x3c, 0x08, 0x02,
    0x4b, 0xc1, 0x3c, 0x11, 0x02,
    0x4b, 0xc1, 0x3c, 0x1a, 0x02,
    0x4b, 0xc1, 0x3c, 0x23, 0x02,
    0x4b, 0xc1, 0x3c, 0x2c, 0x02,
    0x4b, 0xc1, 0x7c, 0x35, 0x00, 0x02,
    0x4b, 0xc1, 0x3c, 0x3e, 0x02,
    0xd5, 0x29, 0xc1, 0x3c, 0x07, 0x02,
    0xd5, 0x38, 0xc1, 0x3c, 0x08, 0x02,
    0xd5, 0x38, 0xc1, 0x3c, 0x11, 0x02,
    0xd5, 0x38, 0xc1, 0x3c, 0x1a, 0x02,
    0xd5, 0x38, 0xc1, 0x3c, 0x23, 0x02,
    0xd5, 0x38, 0xc1, 0x3c, 0x2c, 0x02,
    0xd5, 0x38, 0xc1, 0x7c, 0x35, 0x00, 0x02,
    0xd5, 0x38, 0xc1, 0x3c, 0x3e, 0x02,
    0xd5, 0x3a, 0xc1, 0x3c, 0x07, 0x02,
    0xd5, 0x3b, 0xc1, 0x3c, 0x08, 0x02,
    0xd5, 0x3b, 0xc1, 0x3c, 0x11, 0x02,
    0xd5, 0x3b, 0xc1, 0x3c, 0x1a, 0x02,
    0xd5, 0x3b, 0xc1, 0x3c, 0x23, 0x02,
    0xd5, 0x3b, 0xc1, 0x3c, 0x2c, 0x02,
    0xd5, 0x3b, 0xc1, 0x7c, 0x35, 0x00, 0x02,
    0xd5, 0x3b, 0xc1, 0x3c, 0x3e, 0x02,
    0xd5, 0x19, 0xc1, 0x3c, 0x0f, 0x02,
    0x48, 0xc1, 0x3c, 0x11, 0x04,
    0x48, 0xc1, 0x3c, 0x1a, 0x04,
    0x4a, 0xc1, 0x3c, 0x03, 0x04,
    0x4b, 0xc1, 0x3c, 0x08, 0x04,
    0x4b, 0xc1, 0x3c, 0x11, 0x04,
    0x4b, 0xc1, 0x3c, 0x1a, 0x04,
    0x4b, 0xc1, 0x3c, 0x23, 0x04,
    0x4b, 0xc1, 0x3c, 0x2c, 0x04,
    0x4b, 0xc1, 0x7c, 0x35, 0x00, 0x04,
    0x4b, 0xc1, 0x3c, 0x3e, 0x04,
    0xd5, 0x29, 0xc1, 0x3c, 0x07, 0x04,
    0xd5, 0x38, 0xc1, 0x3c, 0x08, 0x04,
    0xd5, 0x38, 0xc1, 0x3c, 0x11, 0x04,
    0xd5, 0x38, 0xc1, 0x3c, 0x1a, 0x04,
    0xd5, 0x38, 0xc1, 0x3c, 0x23, 0x04,
    0xd5, 0x38, 0xc1, 0x3c, 0x2c, 0x04,
    0xd5, 0x38, 0xc1, 0x7c, 0x35, 0x00, 0x04,
    0xd5, 0x38, 0xc1, 0x3c, 0x3e, 0x04,
    0xd5, 0x3a, 0xc1, 0x3c, 0x07, 0x04,
    0xd5, 0x3b, 0xc1, 0x3c, 0x08, 0x04,
    0xd5, 0x3b, 0xc1, 0x3c, 0x11, 0x04,
    0xd5, 0x3b, 0xc1, 0x3c, 0x1a, 0x04,
    0xd5, 0x3b, 0xc1, 0x3c, 0x23, 0x04,
    0xd5, 0x3b, 0xc1, 0x3c, 0x2c, 0x04,
    0xd5, 0x3b, 0xc1, 0x7c, 0x35, 0x00, 0x04,
    0xd5, 0x3b, 0xc1, 0x3c, 0x3e, 0x04,
    0xd5, 0x19, 0xc1, 0x3c, 0x0f, 0x04,
    0x48, 0xc1, 0x3c, 0x11, 0x08,
    0x48, 0xc1, 0x3c, 0x1a, 0x08,
    0x4a, 0xc1, 0x3c, 0x03, 0x08,
    0x4b, 0xc1, 0x3c, 0x08, 0x08,
    0x4b, 0xc1, 0x3c, 0x11, 0x08,
    0x4b, 0xc1, 0x3c, 0x1a, 0x08,
    0x4b, 0xc1, 0x3c, 0x23, 0x08,
    0x4b, 0xc1, 0x3c, 0x2c, 0x08,
    0x4b, 0xc1, 0x7c, 0x35, 0x00, 0x08,
    0x4b, 0xc1, 0x3c, 0x3e, 0x08,
    0xd5, 0x29, 0xc1, 0x3c, 0x07, 0x08,
    0xd5, 0x38, 0xc1, 0x3c, 0x08, 0x08,
    0xd5, 0x38, 0xc1, 0x3c, 0x11, 0x08,
    0xd5, 0x38, 0xc1, 0x3c, 0x1a, 0x08,
    0xd5, 0x38, 0xc1, 0x3c, 0x23, 0x08,
    0xd5, 0x38, 0xc1, 0x3c, 0x2c, 0x08,
    0xd5, 0x38, 0xc1, 0x7c, 0x35, 0x00, 0x08,
    0xd5, 0x38, 0xc1, 0x3c, 0x3e, 0x08,
    0xd5, 0x3a, 0xc1, 0x3c, 0x07, 0x08,
    0xd5, 0x3b, 0xc1, 0x3c, 0x08, 0x08,
    0xd5, 0x3b, 0xc1, 0x3c, 0x11, 0x08,
    0xd5, 0x3b, 0xc1, 0x3c, 0x1a, 0x08,
    0xd5, 0x3b, 0xc1, 0x3c, 0x23, 0x08,
    0xd5, 0x3b, 0xc1, 0x3c, 0x2c, 0x08,
    0xd5, 0x3b, 0xc1, 0x7c, 0x35, 0x00, 0x08,
    0xd5, 0x3b, 0xc1, 0x3c, 0x3e, 0x08,
    0xd5, 0x19, 0xc1, 0x3c, 0x0f, 0x08,
    0x48, 0xc1, 0x3c, 0x11, 0x10,
    0x48, 0xc1, 0x3c, 0x1a, 0x10,
    0x4a, 0xc1, 0x3c, 0x03, 0x10,
    0x4b, 0xc1, 0x3c, 0x08, 0x10,
    0x4b, 0xc1, 0x3c, 0x11, 0x10,
    0x4b, 0xc1, 0x3c, 0x1a, 0x10,
    0x4b, 0xc1, 0x3c, 0x23, 0x10,
    0x4b, 0xc1, 0x3c, 0x2c, 0x10,
    0x4b, 0xc1, 0x7c, 0x35, 0x00, 0x10,
    0x4b, 0xc1, 0x3c, 0x3e, 0x10,
    0xd5, 0x29, 0xc1, 0x3c, 0x07, 0x10,
    0xd5, 0x38, 0xc1, 0x3c, 0x08, 0x10,
    0xd5, 0x38, 0xc1, 0x3c, 0x11, 0x10,
    0xd5, 0x38, 0xc1, 0x3c, 0x1a, 0x10,
    0xd5, 0x38, 0xc1, 0x3c, 0x23, 0x10,
    0xd5, 0x38, 0xc1, 0x3c, 0x2c, 0x10,
    0xd5, 0x38, 0xc1, 0x7c, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0xc1, 0x3c, 0x3e, 0x10,
    0xd5, 0x3a, 0xc1, 0x3c, 0x07, 0x10,
    0xd5, 0x3b, 0xc1, 0x3c, 0x08, 0x10,
    0xd5, 0x3b, 0xc1, 0x3c, 0x11, 0x10,
    0xd5, 0x3b, 0xc1, 0x3c, 0x1a, 0x10,
    0xd5, 0x3b, 0xc1, 0x3c, 0x23, 0x10,
    0xd5, 0x3b, 0xc1, 0x3c, 0x2c, 0x10,
    0xd5, 0x3b, 0xc1, 0x7c, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0xc1, 0x3c, 0x3e, 0x10,
    0xd5, 0x19, 0xc1, 0x3c, 0x0f, 0x10,
    0x48, 0x83, 0x1c, 0x11, 0x01,
    0x48, 0x83, 0x1c, 0x1a, 0x01,
    0x4a, 0x83, 0x1c, 0x03, 0x01,
    0x4b, 0x83, 0x1c, 0x08, 0x01,
    0x4b, 0x83, 0x1c, 0x11, 0x01,
    0x4b, 0x83, 0x1c, 0x1a, 0x01,
    0x4b, 0x83, 0x1c, 0x23, 0x01,
    0x4b, 0x83, 0x1c, 0x2c, 0x01,
    0x4b, 0x83, 0x5c, 0x35, 0x00, 0x01,
    0x4b, 0x83, 0x1c, 0x3e, 0x01,
    0xd5, 0x29, 0x83, 0x1c, 0x07, 0x01,
    0xd5, 0x38, 0x83, 0x1c, 0x08, 0x01,
    0xd5, 0x38, 0x83, 0x1c, 0x11, 0x01,
    0xd5, 0x38, 0x83, 0x1c, 0x1a, 0x01,
    0xd5, 0x38, 0x83, 0x1c, 0x23, 0x01,
    0xd5, 0x38, 0x83, 0x1c, 0x2c, 0x01,
    0xd5, 0x38, 0x83, 0x5c, 0x35, 0x00, 0x01,
    0xd5, 0x38, 0x83, 0x1c, 0x3e, 0x01,
    0xd5, 0x3a, 0x83, 0x1c, 0x07, 0x01,
    0xd5, 0x3b, 0x83, 0x1c, 0x08, 0x01,
    0xd5, 0x3b, 0x83, 0x1c, 0x11, 0x01,
    0xd5, 0x3b, 0x83, 0x1c, 0x1a, 0x01,
    0xd5, 0x3b, 0x83, 0x1c, 0x23, 0x01,
    0xd5, 0x3b, 0x83, 0x1c, 0x2c, 0x01,
    0xd5, 0x3b, 0x83, 0x5c, 0x35, 0x00, 0x01,
    0xd5, 0x3b, 0x83, 0x1c, 0x3e, 0x01,
    0xd5, 0x19, 0x83, 0x1c, 0x0f, 0x01,
    0x48, 0x83, 0x1c, 0x11, 0x10,
    0x48, 0x83, 0x1c, 0x1a, 0x10,
    0x4a, 0x83, 0x1c, 0x03, 0x10,
    0x4b, 0x83, 0x1c, 0x08, 0x10,
    0x4b, 0x83, 0x1c, 0x11, 0x10,
    0x4b, 0x83, 0x1c, 0x1a, 0x10,
    0x4b, 0x83, 0x1c, 0x23, 0x10,
    0x4b, 0x83, 0x1c, 0x2c, 0x10,
    0x4b, 0x83, 0x5c, 0x35, 0x00, 0x10,
    0x4b, 0x83, 0x1c, 0x3e, 0x10,
    0xd5, 0x29, 0x83, 0x1c, 0x07, 0x10,
    0xd5, 0x38, 0x83, 0x1c, 0x08, 0x10,
    0xd5, 0x38, 0x83, 0x1c, 0x11, 0x10,
    0xd5, 0x38, 0x83, 0x1c, 0x1a, 0x10,
    0xd5, 0x38, 0x83, 0x1c, 0x23, 0x10,
    0xd5, 0x38, 0x83, 0x1c, 0x2c, 0x10,
    0xd5, 0x38, 0x83, 0x5c, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0x83, 0x1c, 0x3e, 0x10,
    0xd5, 0x3a, 0x83, 0x1c, 0x07, 0x10,
    0xd5, 0x3b, 0x83, 0x1c, 0x08, 0x10,
    0xd5, 0x3b, 0x83, 0x1c, 0x11, 0x10,
    0xd5, 0x3b, 0x83, 0x1c, 0x1a, 0x10,
    0xd5, 0x3b, 0x83, 0x1c, 0x23, 0x10,
    0xd5, 0x3b, 0x83, 0x1c, 0x2c, 0x10,
    0xd5, 0x3b, 0x83, 0x5c, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0x83, 0x1c, 0x3e, 0x10,
    0xd5, 0x19, 0x83, 0x1c, 0x0f, 0x10,
    0x48, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x81, 0x1c, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x1c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x1c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x1c, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x81, 0x1c, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x1c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x1c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x1c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x1c, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x29, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3a, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x29, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3a, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x29, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3a, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x81, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x29, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3a, 0x81, 0x1c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x1c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x1c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x1c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x5c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x1c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0x1c, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0x48, 0xd1, 0x2c, 0x11,
    0x48, 0xd1, 0x2c, 0x1a,
    0x4a, 0xd1, 0x2c, 0x03,
    0x4b, 0xd1, 0x2c, 0x08,
    0x4b, 0xd1, 0x2c, 0x11,
    0x4b, 0xd1, 0x2c, 0x1a,
    0x4b, 0xd1, 0x2c, 0x23,
    0x4b, 0xd1, 0x2c, 0x2c,
    0x4b, 0xd1, 0x6c, 0x35, 0x00,
    0x4b, 0xd1, 0x2c, 0x3e,
    0xd5, 0x29, 0xd1, 0x2c, 0x07,
    0xd5, 0x38, 0xd1, 0x2c, 0x08,
    0xd5, 0x38, 0xd1, 0x2c, 0x11,
    0xd5, 0x38, 0xd1, 0x2c, 0x1a,
    0xd5, 0x38, 0xd1, 0x2c, 0x23,
    0xd5, 0x38, 0xd1, 0x2c, 0x2c,
    0xd5, 0x38, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x38, 0xd1, 0x2c, 0x3e,
    0xd5, 0x3a, 0xd1, 0x2c, 0x07,
    0xd5, 0x3b, 0xd1, 0x2c, 0x08,
    0xd5, 0x3b, 0xd1, 0x2c, 0x11,
    0xd5, 0x3b, 0xd1, 0x2c, 0x1a,
    0xd5, 0x3b, 0xd1, 0x2c, 0x23,
    0xd5, 0x3b, 0xd1, 0x2c, 0x2c,
    0xd5, 0x3b, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x3b, 0xd1, 0x2c, 0x3e,
    0xd5, 0x19, 0xd1, 0x2c, 0x0f,
    0x48, 0xc1, 0x2c, 0x11, 0x02,
    0x48, 0xc1, 0x2c, 0x1a, 0x02,
    0x4a, 0xc1, 0x2c, 0x03, 0x02,
    0x4b, 0xc1, 0x2c, 0x08, 0x02,
    0x4b, 0xc1, 0x2c, 0x11, 0x02,
    0x4b, 0xc1, 0x2c, 0x1a, 0x02,
    0x4b, 0xc1, 0x2c, 0x23, 0x02,
    0x4b, 0xc1, 0x2c, 0x2c, 0x02,
    0x4b, 0xc1, 0x6c, 0x35, 0x00, 0x02,
    0x4b, 0xc1, 0x2c, 0x3e, 0x02,
    0xd5, 0x29, 0xc1, 0x2c, 0x07, 0x02,
    0xd5, 0x38, 0xc1, 0x2c, 0x08, 0x02,
    0xd5, 0x38, 0xc1, 0x2c, 0x11, 0x02,
    0xd5, 0x38, 0xc1, 0x2c, 0x1a, 0x02,
    0xd5, 0x38, 0xc1, 0x2c, 0x23, 0x02,
    0xd5, 0x38, 0xc1, 0x2c, 0x2c, 0x02,
    0xd5, 0x38, 0xc1, 0x6c, 0x35, 0x00, 0x02,
    0xd5, 0x38, 0xc1, 0x2c, 0x3e, 0x02,
    0xd5, 0x3a, 0xc1, 0x2c, 0x07, 0x02,
    0xd5, 0x3b, 0xc1, 0x2c, 0x08, 0x02,
    0xd5, 0x3b, 0xc1, 0x2c, 0x11, 0x02,
    0xd5, 0x3b, 0xc1, 0x2c, 0x1a, 0x02,
    0xd5, 0x3b, 0xc1, 0x2c, 0x23, 0x02,
    0xd5, 0x3b, 0xc1, 0x2c, 0x2c, 0x02,
    0xd5, 0x3b, 0xc1, 0x6c, 0x35, 0x00, 0x02,
    0xd5, 0x3b, 0xc1, 0x2c, 0x3e, 0x02,
    0xd5, 0x19, 0xc1, 0x2c, 0x0f, 0x02,
    0x48, 0xc1, 0x2c, 0x11, 0x04,
    0x48, 0xc1, 0x2c, 0x1a, 0x04,
    0x4a, 0xc1, 0x2c, 0x03, 0x04,
    0x4b, 0xc1, 0x2c, 0x08, 0x04,
    0x4b, 0xc1, 0x2c, 0x11, 0x04,
    0x4b, 0xc1, 0x2c, 0x1a, 0x04,
    0x4b, 0xc1, 0x2c, 0x23, 0x04,
    0x4b, 0xc1, 0x2c, 0x2c, 0x04,
    0x4b, 0xc1, 0x6c, 0x35, 0x00, 0x04,
    0x4b, 0xc1, 0x2c, 0x3e, 0x04,
    0xd5, 0x29, 0xc1, 0x2c, 0x07, 0x04,
    0xd5, 0x38, 0xc1, 0x2c, 0x08, 0x04,
    0xd5, 0x38, 0xc1, 0x2c, 0x11, 0x04,
    0xd5, 0x38, 0xc1, 0x2c, 0x1a, 0x04,
    0xd5, 0x38, 0xc1, 0x2c, 0x23, 0x04,
    0xd5, 0x38, 0xc1, 0x2c, 0x2c, 0x04,
    0xd5, 0x38, 0xc1, 0x6c, 0x35, 0x00, 0x04,
    0xd5, 0x38, 0xc1, 0x2c, 0x3e, 0x04,
    0xd5, 0x3a, 0xc1, 0x2c, 0x07, 0x04,
    0xd5, 0x3b, 0xc1, 0x2c, 0x08, 0x04,
    0xd5, 0x3b, 0xc1, 0x2c, 0x11, 0x04,
    0xd5, 0x3b, 0xc1, 0x2c, 0x1a, 0x04,
    0xd5, 0x3b, 0xc1, 0x2c, 0x23, 0x04,
    0xd5, 0x3b, 0xc1, 0x2c, 0x2c, 0x04,
    0xd5, 0x3b, 0xc1, 0x6c, 0x35, 0x00, 0x04,
    0xd5, 0x3b, 0xc1, 0x2c, 0x3e, 0x04,
    0xd5, 0x19, 0xc1, 0x2c, 0x0f, 0x04,
    0x48, 0xc1, 0x2c, 0x11, 0x08,
    0x48, 0xc1, 0x2c, 0x1a, 0x08,
    0x4a, 0xc1, 0x2c, 0x03, 0x08,
    0x4b, 0xc1, 0x2c, 0x08, 0x08,
    0x4b, 0xc1, 0x2c, 0x11, 0x08,
    0x4b, 0xc1, 0x2c, 0x1a, 0x08,
    0x4b, 0xc1, 0x2c, 0x23, 0x08,
    0x4b, 0xc1, 0x2c, 0x2c, 0x08,
    0x4b, 0xc1, 0x6c, 0x35, 0x00, 0x08,
    0x4b, 0xc1, 0x2c, 0x3e, 0x08,
    0xd5, 0x29, 0xc1, 0x2c, 0x07, 0x08,
    0xd5, 0x38, 0xc1, 0x2c, 0x08, 0x08,
    0xd5, 0x38, 0xc1, 0x2c, 0x11, 0x08,
    0xd5, 0x38, 0xc1, 0x2c, 0x1a, 0x08,
    0xd5, 0x38, 0xc1, 0x2c, 0x23, 0x08,
    0xd5, 0x38, 0xc1, 0x2c, 0x2c, 0x08,
    0xd5, 0x38, 0xc1, 0x6c, 0x35, 0x00, 0x08,
    0xd5, 0x38, 0xc1, 0x2c, 0x3e, 0x08,
    0xd5, 0x3a, 0xc1, 0x2c, 0x07, 0x08,
    0xd5, 0x3b, 0xc1, 0x2c, 0x08, 0x08,
    0xd5, 0x3b, 0xc1, 0x2c, 0x11, 0x08,
    0xd5, 0x3b, 0xc1, 0x2c, 0x1a, 0x08,
    0xd5, 0x3b, 0xc1, 0x2c, 0x23, 0x08,
    0xd5, 0x3b, 0xc1, 0x2c, 0x2c, 0x08,
    0xd5, 0x3b, 0xc1, 0x6c, 0x35, 0x00, 0x08,
    0xd5, 0x3b, 0xc1, 0x2c, 0x3e, 0x08,
    0xd5, 0x19, 0xc1, 0x2c, 0x0f, 0x08,
    0x48, 0xc1, 0x2c, 0x11, 0x10,
    0x48, 0xc1, 0x2c, 0x1a, 0x10,
    0x4a, 0xc1, 0x2c, 0x03, 0x10,
    0x4b, 0xc1, 0x2c, 0x08, 0x10,
    0x4b, 0xc1, 0x2c, 0x11, 0x10,
    0x4b, 0xc1, 0x2c, 0x1a, 0x10,
    0x4b, 0xc1, 0x2c, 0x23, 0x10,
    0x4b, 0xc1, 0x2c, 0x2c, 0x10,
    0x4b, 0xc1, 0x6c, 0x35, 0x00, 0x10,
    0x4b, 0xc1, 0x2c, 0x3e, 0x10,
    0xd5, 0x29, 0xc1, 0x2c, 0x07, 0x10,
    0xd5, 0x38, 0xc1, 0x2c, 0x08, 0x10,
    0xd5, 0x38, 0xc1, 0x2c, 0x11, 0x10,
    0xd5, 0x38, 0xc1, 0x2c, 0x1a, 0x10,
    0xd5, 0x38, 0xc1, 0x2c, 0x23, 0x10,
    0xd5, 0x38, 0xc1, 0x2c, 0x2c, 0x10,
    0xd5, 0x38, 0xc1, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0xc1, 0x2c, 0x3e, 0x10,
    0xd5, 0x3a, 0xc1, 0x2c, 0x07, 0x10,
    0xd5, 0x3b, 0xc1, 0x2c, 0x08, 0x10,
    0xd5, 0x3b, 0xc1, 0x2c, 0x11, 0x10,
    0xd5, 0x3b, 0xc1, 0x2c, 0x1a, 0x10,
    0xd5, 0x3b, 0xc1, 0x2c, 0x23, 0x10,
    0xd5, 0x3b, 0xc1, 0x2c, 0x2c, 0x10,
    0xd5, 0x3b, 0xc1, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0xc1, 0x2c, 0x3e, 0x10,
    0xd5, 0x19, 0xc1, 0x2c, 0x0f, 0x10,
    0x48, 0x83, 0x2c, 0x11, 0x01,
    0x48, 0x83, 0x2c, 0x1a, 0x01,
    0x4a, 0x83, 0x2c, 0x03, 0x01,
    0x4b, 0x83, 0x2c, 0x08, 0x01,
    0x4b, 0x83, 0x2c, 0x11, 0x01,
    0x4b, 0x83, 0x2c, 0x1a, 0x01,
    0x4b, 0x83, 0x2c, 0x23, 0x01,
    0x4b, 0x83, 0x2c, 0x2c, 0x01,
    0x4b, 0x83, 0x6c, 0x35, 0x00, 0x01,
    0x4b, 0x83, 0x2c, 0x3e, 0x01,
    0xd5, 0x29, 0x83, 0x2c, 0x07, 0x01,
    0xd5, 0x38, 0x83, 0x2c, 0x08, 0x01,
    0xd5, 0x38, 0x83, 0x2c, 0x11, 0x01,
    0xd5, 0x38, 0x83, 0x2c, 0x1a, 0x01,
    0xd5, 0x38, 0x83, 0x2c, 0x23, 0x01,
    0xd5, 0x38, 0x83, 0x2c, 0x2c, 0x01,
    0xd5, 0x38, 0x83, 0x6c, 0x35, 0x00, 0x01,
    0xd5, 0x38, 0x83, 0x2c, 0x3e, 0x01,
    0xd5, 0x3a, 0x83, 0x2c, 0x07, 0x01,
    0xd5, 0x3b, 0x83, 0x2c, 0x08, 0x01,
    0xd5, 0x3b, 0x83, 0x2c, 0x11, 0x01,
    0xd5, 0x3b, 0x83, 0x2c, 0x1a, 0x01,
    0xd5, 0x3b, 0x83, 0x2c, 0x23, 0x01,
    0xd5, 0x3b, 0x83, 0x2c, 0x2c, 0x01,
    0xd5, 0x3b, 0x83, 0x6c, 0x35, 0x00, 0x01,
    0xd5, 0x3b, 0x83, 0x2c, 0x3e, 0x01,
    0xd5, 0x19, 0x83, 0x2c, 0x0f, 0x01,
    0x48, 0x83, 0x2c, 0x11, 0x10,
    0x48, 0x83, 0x2c, 0x1a, 0x10,
    0x4a, 0x83, 0x2c, 0x03, 0x10,
    0x4b, 0x83, 0x2c, 0x08, 0x10,
    0x4b, 0x83, 0x2c, 0x11, 0x10,
    0x4b, 0x83, 0x2c, 0x1a, 0x10,
    0x4b, 0x83, 0x2c, 0x23, 0x10,
    0x4b, 0x83, 0x2c, 0x2c, 0x10,
    0x4b, 0x83, 0x6c, 0x35, 0x00, 0x10,
    0x4b, 0x83, 0x2c, 0x3e, 0x10,
    0xd5, 0x29, 0x83, 0x2c, 0x07, 0x10,
    0xd5, 0x38, 0x83, 0x2c, 0x08, 0x10,
    0xd5, 0x38, 0x83, 0x2c, 0x11, 0x10,
    0xd5, 0x38, 0x83, 0x2c, 0x1a, 0x10,
    0xd5, 0x38, 0x83, 0x2c, 0x23, 0x10,
    0xd5, 0x38, 0x83, 0x2c, 0x2c, 0x10,
    0xd5, 0x38, 0x83, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0x83, 0x2c, 0x3e, 0x10,
    0xd5, 0x3a, 0x83, 0x2c, 0x07, 0x10,
    0xd5, 0x3b, 0x83, 0x2c, 0x08, 0x10,
    0xd5, 0x3b, 0x83, 0x2c, 0x11, 0x10,
    0xd5, 0x3b, 0x83, 0x2c, 0x1a, 0x10,
    0xd5, 0x3b, 0x83, 0x2c, 0x23, 0x10,
    0xd5, 0x3b, 0x83, 0x2c, 0x2c, 0x10,
    0xd5, 0x3b, 0x83, 0x6c, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0x83, 0x2c, 0x3e, 0x10,
    0xd5, 0x19, 0x83, 0x2c, 0x0f, 0x10,
    0x48, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x81, 0x2c, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x2c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x2c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x2c, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x81, 0x2c, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x2c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x2c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x2c, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x29, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3a, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x29, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3a, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x29, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3a, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x81, 0x2c, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x29, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3a, 0x81, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x2c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x2c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x2c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x2c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x2c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x6c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0x2c, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0x34, 0x11, 0x01,
    0x48, 0x83, 0x34, 0x1a, 0x01,
    0x4a, 0x83, 0x34, 0x03, 0x01,
    0x4b, 0x83, 0x34, 0x08, 0x01,
    0x4b, 0x83, 0x34, 0x11, 0x01,
    0x4b, 0x83, 0x34, 0x1a, 0x01,
    0x4b, 0x83, 0x34, 0x23, 0x01,
    0x4b, 0x83, 0x34, 0x2c, 0x01,
    0x4b, 0x83, 0x74, 0x35, 0x00, 0x01,
    0x4b, 0x83, 0x34, 0x3e, 0x01,
    0xd5, 0x29, 0x83, 0x34, 0x07, 0x01,
    0xd5, 0x38, 0x83, 0x34, 0x08, 0x01,
    0xd5, 0x38, 0x83, 0x34, 0x11, 0x01,
    0xd5, 0x38, 0x83, 0x34, 0x1a, 0x01,
    0xd5, 0x38, 0x83, 0x34, 0x23, 0x01,
    0xd5, 0x38, 0x83, 0x34, 0x2c, 0x01,
    0xd5, 0x38, 0x83, 0x74, 0x35, 0x00, 0x01,
    0xd5, 0x38, 0x83, 0x34, 0x3e, 0x01,
    0xd5, 0x3a, 0x83, 0x34, 0x07, 0x01,
    0xd5, 0x3b, 0x83, 0x34, 0x08, 0x01,
    0xd5, 0x3b, 0x83, 0x34, 0x11, 0x01,
    0xd5, 0x3b, 0x83, 0x34, 0x1a, 0x01,
    0xd5, 0x3b, 0x83, 0x34, 0x23, 0x01,
    0xd5, 0x3b, 0x83, 0x34, 0x2c, 0x01,
    0xd5, 0x3b, 0x83, 0x74, 0x35, 0x00, 0x01,
    0xd5, 0x3b, 0x83, 0x34, 0x3e, 0x01,
    0xd5, 0x19, 0x83, 0x34, 0x0f, 0x01,
    0x48, 0x83, 0x34, 0x11, 0x10,
    0x48, 0x83, 0x34, 0x1a, 0x10,
    0x4a, 0x83, 0x34, 0x03, 0x10,
    0x4b, 0x83, 0x34, 0x08, 0x10,
    0x4b, 0x83, 0x34, 0x11, 0x10,
    0x4b, 0x83, 0x34, 0x1a, 0x10,
    0x4b, 0x83, 0x34, 0x23, 0x10,
    0x4b, 0x83, 0x34, 0x2c, 0x10,
    0x4b, 0x83, 0x74, 0x35, 0x00, 0x10,
    0x4b, 0x83, 0x34, 0x3e, 0x10,
    0xd5, 0x29, 0x83, 0x34, 0x07, 0x10,
    0xd5, 0x38, 0x83, 0x34, 0x08, 0x10,
    0xd5, 0x38, 0x83, 0x34, 0x11, 0x10,
    0xd5, 0x38, 0x83, 0x34, 0x1a, 0x10,
    0xd5, 0x38, 0x83, 0x34, 0x23, 0x10,
    0xd5, 0x38, 0x83, 0x34, 0x2c, 0x10,
    0xd5, 0x38, 0x83, 0x74, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0x83, 0x34, 0x3e, 0x10,
    0xd5, 0x3a, 0x83, 0x34, 0x07, 0x10,
    0xd5, 0x3b, 0x83, 0x34, 0x08, 0x10,
    0xd5, 0x3b, 0x83, 0x34, 0x11, 0x10,
    0xd5, 0x3b, 0x83, 0x34, 0x1a, 0x10,
    0xd5, 0x3b, 0x83, 0x34, 0x23, 0x10,
    0xd5, 0x3b, 0x83, 0x34, 0x2c, 0x10,
    0xd5, 0x3b, 0x83, 0x74, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0x83, 0x34, 0x3e, 0x10,
    0xd5, 0x19, 0x83, 0x34, 0x0f, 0x10,
    0x48, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x81, 0x34, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x74, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x34, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x81, 0x34, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x34, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x74, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x34, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x81, 0x34, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x29, 0x81, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3a, 0x81, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x81, 0x34, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x29, 0x81, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3a, 0x81, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x81, 0x34, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x29, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3a, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x81, 0x34, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x29, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3a, 0x81, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x34, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x34, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x34, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x34, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x34, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x74, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x34, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0x0c, 0x11, 0x01,
    0x48, 0x83, 0x0c, 0x1a, 0x01,
    0x4a, 0x83, 0x0c, 0x03, 0x01,
    0x4b, 0x83, 0x0c, 0x08, 0x01,
    0x4b, 0x83, 0x0c, 0x11, 0x01,
    0x4b, 0x83, 0x0c, 0x1a, 0x01,
    0x4b, 0x83, 0x0c, 0x23, 0x01,
    0x4b, 0x83, 0x0c, 0x2c, 0x01,
    0x4b, 0x83, 0x4c, 0x35, 0x00, 0x01,
    0x4b, 0x83, 0x0c, 0x3e, 0x01,
    0xd5, 0x29, 0x83, 0x0c, 0x07, 0x01,
    0xd5, 0x38, 0x83, 0x0c, 0x08, 0x01,
    0xd5, 0x38, 0x83, 0x0c, 0x11, 0x01,
    0xd5, 0x38, 0x83, 0x0c, 0x1a, 0x01,
    0xd5, 0x38, 0x83, 0x0c, 0x23, 0x01,
    0xd5, 0x38, 0x83, 0x0c, 0x2c, 0x01,
    0xd5, 0x38, 0x83, 0x4c, 0x35, 0x00, 0x01,
    0xd5, 0x38, 0x83, 0x0c, 0x3e, 0x01,
    0xd5, 0x3a, 0x83, 0x0c, 0x07, 0x01,
    0xd5, 0x3b, 0x83, 0x0c, 0x08, 0x01,
    0xd5, 0x3b, 0x83, 0x0c, 0x11, 0x01,
    0xd5, 0x3b, 0x83, 0x0c, 0x1a, 0x01,
    0xd5, 0x3b, 0x83, 0x0c, 0x23, 0x01,
    0xd5, 0x3b, 0x83, 0x0c, 0x2c, 0x01,
    0xd5, 0x3b, 0x83, 0x4c, 0x35, 0x00, 0x01,
    0xd5, 0x3b, 0x83, 0x0c, 0x3e, 0x01,
    0xd5, 0x19, 0x83, 0x0c, 0x0f, 0x01,
    0x48, 0x83, 0x0c, 0x11, 0x10,
    0x48, 0x83, 0x0c, 0x1a, 0x10,
    0x4a, 0x83, 0x0c, 0x03, 0x10,
    0x4b, 0x83, 0x0c, 0x08, 0x10,
    0x4b, 0x83, 0x0c, 0x11, 0x10,
    0x4b, 0x83, 0x0c, 0x1a, 0x10,
    0x4b, 0x83, 0x0c, 0x23, 0x10,
    0x4b, 0x83, 0x0c, 0x2c, 0x10,
    0x4b, 0x83, 0x4c, 0x35, 0x00, 0x10,
    0x4b, 0x83, 0x0c, 0x3e, 0x10,
    0xd5, 0x29, 0x83, 0x0c, 0x07, 0x10,
    0xd5, 0x38, 0x83, 0x0c, 0x08, 0x10,
    0xd5, 0x38, 0x83, 0x0c, 0x11, 0x10,
    0xd5, 0x38, 0x83, 0x0c, 0x1a, 0x10,
    0xd5, 0x38, 0x83, 0x0c, 0x23, 0x10,
    0xd5, 0x38, 0x83, 0x0c, 0x2c, 0x10,
    0xd5, 0x38, 0x83, 0x4c, 0x35, 0x00, 0x10,
    0xd5, 0x38, 0x83, 0x0c, 0x3e, 0x10,
    0xd5, 0x3a, 0x83, 0x0c, 0x07, 0x10,
    0xd5, 0x3b, 0x83, 0x0c, 0x08, 0x10,
    0xd5, 0x3b, 0x83, 0x0c, 0x11, 0x10,
    0xd5, 0x3b, 0x83, 0x0c, 0x1a, 0x10,
    0xd5, 0x3b, 0x83, 0x0c, 0x23, 0x10,
    0xd5, 0x3b, 0x83, 0x0c, 0x2c, 0x10,
    0xd5, 0x3b, 0x83, 0x4c, 0x35, 0x00, 0x10,
    0xd5, 0x3b, 0x83, 0x0c, 0x3e, 0x10,
    0xd5, 0x19, 0x83, 0x0c, 0x0f, 0x10,
    0x48, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x81, 0x0c, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x0c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x0c, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x0c, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x81, 0x0c, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x81, 0x0c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x29, 0x81, 0x0c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3a, 0x81, 0x0c, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0x0c, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x29, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3a, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x29, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x38, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3a, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x29, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x38, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3a, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x81, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x29, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x38, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3a, 0x81, 0x0c, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x0c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x0c, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x0c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x4c, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3b, 0x81, 0x0c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x03, 0x0c, 0x1a,
    0x4a, 0x03, 0x14, 0x03,
    0x4b, 0x03, 0x1c, 0x08,
    0x4f, 0x03, 0x04, 0x11,
    0x4f, 0x03, 0x0c, 0x1a,
    0x4f, 0x03, 0x14, 0x23,
    0x4f, 0x03, 0x1c, 0x2c,
    0x4f, 0x03, 0x64, 0x35, 0x00,
    0x4f, 0x03, 0x2c, 0x3e,
    0xd5, 0x2d, 0x03, 0x34, 0x07,
    0xd5, 0x3c, 0x03, 0x3c, 0x08,
    0xd5, 0x78, 0x03, 0x04, 0x11,
    0xd5, 0x78, 0x03, 0x0c, 0x1a,
    0xd5, 0x78, 0x03, 0x14, 0x23,
    0xd5, 0x78, 0x03, 0x1c, 0x2c,
    0xd5, 0x78, 0x03, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x03, 0x2c, 0x3e,
    0xd5, 0x7a, 0x03, 0x34, 0x07,
    0xd5, 0x7b, 0x03, 0x3c, 0x08,
    0xd5, 0x7f, 0x03, 0x04, 0x11,
    0xd5, 0x7f, 0x03, 0x0c, 0x1a,
    0xd5, 0x7f, 0x03, 0x14, 0x23,
    0xd5, 0x7f, 0x03, 0x1c, 0x2c,
    0xd5, 0x7f, 0x03, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x03, 0x2c, 0x3e,
    0xd5, 0x5d, 0x03, 0x34, 0x0f,
    0xd5, 0x4c, 0x03, 0x3c, 0x11,
    0x48, 0x23, 0x0c, 0x1a,
    0x4a, 0x23, 0x14, 0x03,
    0x4b, 0x23, 0x1c, 0x08,
    0x4f, 0x23, 0x04, 0x11,
    0x4f, 0x23, 0x0c, 0x1a,
    0x4f, 0x23, 0x14, 0x23,
    0x4f, 0x23, 0x1c, 0x2c,
    0x4f, 0x23, 0x64, 0x35, 0x00,
    0x4f, 0x23, 0x2c, 0x3e,
    0xd5, 0x2d, 0x23, 0x34, 0x07,
    0xd5, 0x3c, 0x23, 0x3c, 0x08,
    0xd5, 0x78, 0x23, 0x04, 0x11,
    0xd5, 0x78, 0x23, 0x0c, 0x1a,
    0xd5, 0x78, 0x23, 0x14, 0x23,
    0xd5, 0x78, 0x23, 0x1c, 0x2c,
    0xd5, 0x78, 0x23, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x23, 0x2c, 0x3e,
    0xd5, 0x7a, 0x23, 0x34, 0x07,
    0xd5, 0x7b, 0x23, 0x3c, 0x08,
    0xd5, 0x7f, 0x23, 0x04, 0x11,
    0xd5, 0x7f, 0x23, 0x0c, 0x1a,
    0xd5, 0x7f, 0x23, 0x14, 0x23,
    0xd5, 0x7f, 0x23, 0x1c, 0x2c,
    0xd5, 0x7f, 0x23, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x23, 0x2c, 0x3e,
    0xd5, 0x5d, 0x23, 0x34, 0x0f,
    0xd5, 0x4c, 0x23, 0x3c, 0x11,
    0xf3, 0x48, 0x0f, 0xbd, 0x0c, 0x1a,
    0xf3, 0x4a, 0x0f, 0xbd, 0x14, 0x03,
    0xf3, 0x4b, 0x0f, 0xbd, 0x1c, 0x08,
    0xf3, 0x4f, 0x0f, 0xbd, 0x04, 0x11,
    0xf3, 0x4f, 0x0f, 0xbd, 0x0c, 0x1a,
    0xf3, 0x4f, 0x0f, 0xbd, 0x14, 0x23,
    0xf3, 0x4f, 0x0f, 0xbd, 0x1c, 0x2c,
    0xf3, 0x4f, 0x0f, 0xbd, 0x64, 0x35, 0x00,
    0xf3, 0x4f, 0x0f, 0xbd, 0x2c, 0x3e,
    0xf3, 0xd5, 0xad, 0xbd, 0x34, 0x07,
    0xf3, 0xd5, 0xbc, 0xbd, 0x3c, 0x08,
    0xf3, 0xd5, 0xf8, 0xbd, 0x04, 0x11,
    0xf3, 0xd5, 0xf8, 0xbd, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf8, 0xbd, 0x14, 0x23,
    0xf3, 0xd5, 0xf8, 0xbd, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf8, 0xbd, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf8, 0xbd, 0x2c, 0x3e,
    0xf3, 0xd5, 0xfa, 0xbd, 0x34, 0x07,
    0xf3, 0xd5, 0xfb, 0xbd, 0x3c, 0x08,
    0xf3, 0xd5, 0xff, 0xbd, 0x04, 0x11,
    0xf3, 0xd5, 0xff, 0xbd, 0x0c, 0x1a,
    0xf3, 0xd5, 0xff, 0xbd, 0x14, 0x23,
    0xf3, 0xd5, 0xff, 0xbd, 0x1c, 0x2c,
    0xf3, 0xd5, 0xff, 0xbd, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xff, 0xbd, 0x2c, 0x3e,
    0xf3, 0xd5, 0xdd, 0xbd, 0x34, 0x0f,
    0xf3, 0xd5, 0xcc, 0xbd, 0x3c, 0x11,
    0x48, 0x0b, 0x0c, 0x1a,
    0x4a, 0x0b, 0x14, 0x03,
    0x4b, 0x0b, 0x1c, 0x08,
    0x4f, 0x0b, 0x04, 0x11,
    0x4f, 0x0b, 0x0c, 0x1a,
    0x4f, 0x0b, 0x14, 0x23,
    0x4f, 0x0b, 0x1c, 0x2c,
    0x4f, 0x0b, 0x64, 0x35, 0x00,
    0x4f, 0x0b, 0x2c, 0x3e,
    0xd5, 0x2d, 0x0b, 0x34, 0x07,
    0xd5, 0x3c, 0x0b, 0x3c, 0x08,
    0xd5, 0x78, 0x0b, 0x04, 0x11,
    0xd5, 0x78, 0x0b, 0x0c, 0x1a,
    0xd5, 0x78, 0x0b, 0x14, 0x23,
    0xd5, 0x78, 0x0b, 0x1c, 0x2c,
    0xd5, 0x78, 0x0b, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x0b, 0x2c, 0x3e,
    0xd5, 0x7a, 0x0b, 0x34, 0x07,
    0xd5, 0x7b, 0x0b, 0x3c, 0x08,
    0xd5, 0x7f, 0x0b, 0x04, 0x11,
    0xd5, 0x7f, 0x0b, 0x0c, 0x1a,
    0xd5, 0x7f, 0x0b, 0x14, 0x23,
    0xd5, 0x7f, 0x0b, 0x1c, 0x2c,
    0xd5, 0x7f, 0x0b, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x0b, 0x2c, 0x3e,
    0xd5, 0x5d, 0x0b, 0x34, 0x0f,
    0xd5, 0x4c, 0x0b, 0x3c, 0x11,
    0x48, 0x13, 0x0c, 0x1a,
    0x4a, 0x13, 0x14, 0x03,
    0x4b, 0x13, 0x1c, 0x08,
    0x4f, 0x13, 0x04, 0x11,
    0x4f, 0x13, 0x0c, 0x1a,
    0x4f, 0x13, 0x14, 0x23,
    0x4f, 0x13, 0x1c, 0x2c,
    0x4f, 0x13, 0x64, 0x35, 0x00,
    0x4f, 0x13, 0x2c, 0x3e,
    0xd5, 0x2d, 0x13, 0x34, 0x07,
    0xd5, 0x3c, 0x13, 0x3c, 0x08,
    0xd5, 0x78, 0x13, 0x04, 0x11,
    0xd5, 0x78, 0x13, 0x0c, 0x1a,
    0xd5, 0x78, 0x13, 0x14, 0x23,
    0xd5, 0x78, 0x13, 0x1c, 0x2c,
    0xd5, 0x78, 0x13, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x13, 0x2c, 0x3e,
    0xd5, 0x7a, 0x13, 0x34, 0x07,
    0xd5, 0x7b, 0x13, 0x3c, 0x08,
    0xd5, 0x7f, 0x13, 0x04, 0x11,
    0xd5, 0x7f, 0x13, 0x0c, 0x1a,
    0xd5, 0x7f, 0x13, 0x14, 0x23,
    0xd5, 0x7f, 0x13, 0x1c, 0x2c,
    0xd5, 0x7f, 0x13, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x13, 0x2c, 0x3e,
    0xd5, 0x5d, 0x13, 0x34, 0x0f,
    0xd5, 0x4c, 0x13, 0x3c, 0x11,
    0x48, 0x0f, 0xaf, 0x0c, 0x1a,
    0x4a, 0x0f, 0xaf, 0x14, 0x03,
    0x4b, 0x0f, 0xaf, 0x1c, 0x08,
    0x4f, 0x0f, 0xaf, 0x04, 0x11,
    0x4f, 0x0f, 0xaf, 0x0c, 0x1a,
    0x4f, 0x0f, 0xaf, 0x14, 0x23,
    0x4f, 0x0f, 0xaf, 0x1c, 0x2c,
    0x4f, 0x0f, 0xaf, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0xaf, 0x2c, 0x3e,
    0xd5, 0xad, 0xaf, 0x34, 0x07,
    0xd5, 0xbc, 0xaf, 0x3c, 0x08,
    0xd5, 0xf8, 0xaf, 0x04, 0x11,
    0xd5, 0xf8, 0xaf, 0x0c, 0x1a,
    0xd5, 0xf8, 0xaf, 0x14, 0x23,
    0xd5, 0xf8, 0xaf, 0x1c, 0x2c,
    0xd5, 0xf8, 0xaf, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0xaf, 0x2c, 0x3e,
    0xd5, 0xfa, 0xaf, 0x34, 0x07,
    0xd5, 0xfb, 0xaf, 0x3c, 0x08,
    0xd5, 0xff, 0xaf, 0x04, 0x11,
    0xd5, 0xff, 0xaf, 0x0c, 0x1a,
    0xd5, 0xff, 0xaf, 0x14, 0x23,
    0xd5, 0xff, 0xaf, 0x1c, 0x2c,
    0xd5, 0xff, 0xaf, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0xaf, 0x2c, 0x3e,
    0xd5, 0xdd, 0xaf, 0x34, 0x0f,
    0xd5, 0xcc, 0xaf, 0x3c, 0x11,
    0xf3, 0x48, 0x0f, 0xb8, 0x0c, 0x1a,
    0xf3, 0x4a, 0x0f, 0xb8, 0x14, 0x03,
    0xf3, 0x4b, 0x0f, 0xb8, 0x1c, 0x08,
    0xf3, 0x4f, 0x0f, 0xb8, 0x04, 0x11,
    0xf3, 0x4f, 0x0f, 0xb8, 0x0c, 0x1a,
    0xf3, 0x4f, 0x0f, 0xb8, 0x14, 0x23,
    0xf3, 0x4f, 0x0f, 0xb8, 0x1c, 0x2c,
    0xf3, 0x4f, 0x0f, 0xb8, 0x64, 0x35, 0x00,
    0xf3, 0x4f, 0x0f, 0xb8, 0x2c, 0x3e,
    0xf3, 0xd5, 0xad, 0xb8, 0x34, 0x07,
    0xf3, 0xd5, 0xbc, 0xb8, 0x3c, 0x08,
    0xf3, 0xd5, 0xf8, 0xb8, 0x04, 0x11,
    0xf3, 0xd5, 0xf8, 0xb8, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf8, 0xb8, 0x14, 0x23,
    0xf3, 0xd5, 0xf8, 0xb8, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf8, 0xb8, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf8, 0xb8, 0x2c, 0x3e,
    0xf3, 0xd5, 0xfa, 0xb8, 0x34, 0x07,
    0xf3, 0xd5, 0xfb, 0xb8, 0x3c, 0x08,
    0xf3, 0xd5, 0xff, 0xb8, 0x04, 0x11,
    0xf3, 0xd5, 0xff, 0xb8, 0x0c, 0x1a,
    0xf3, 0xd5, 0xff, 0xb8, 0x14, 0x23,
    0xf3, 0xd5, 0xff, 0xb8, 0x1c, 0x2c,
    0xf3, 0xd5, 0xff, 0xb8, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xff, 0xb8, 0x2c, 0x3e,
    0xf3, 0xd5, 0xdd, 0xb8, 0x34, 0x0f,
    0xf3, 0xd5, 0xcc, 0xb8, 0x3c, 0x11,
    0x48, 0x1b, 0x0c, 0x1a,
    0x4a, 0x1b, 0x14, 0x03,
    0x4b, 0x1b, 0x1c, 0x08,
    0x4f, 0x1b, 0x04, 0x11,
    0x4f, 0x1b, 0x0c, 0x1a,
    0x4f, 0x1b, 0x14, 0x23,
    0x4f, 0x1b, 0x1c, 0x2c,
    0x4f, 0x1b, 0x64, 0x35, 0x00,
    0x4f, 0x1b, 0x2c, 0x3e,
    0xd5, 0x2d, 0x1b, 0x34, 0x07,
    0xd5, 0x3c, 0x1b, 0x3c, 0x08,
    0xd5, 0x78, 0x1b, 0x04, 0x11,
    0xd5, 0x78, 0x1b, 0x0c, 0x1a,
    0xd5, 0x78, 0x1b, 0x14, 0x23,
    0xd5, 0x78, 0x1b, 0x1c, 0x2c,
    0xd5, 0x78, 0x1b, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x1b, 0x2c, 0x3e,
    0xd5, 0x7a, 0x1b, 0x34, 0x07,
    0xd5, 0x7b, 0x1b, 0x3c, 0x08,
    0xd5, 0x7f, 0x1b, 0x04, 0x11,
    0xd5, 0x7f, 0x1b, 0x0c, 0x1a,
    0xd5, 0x7f, 0x1b, 0x14, 0x23,
    0xd5, 0x7f, 0x1b, 0x1c, 0x2c,
    0xd5, 0x7f, 0x1b, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x1b, 0x2c, 0x3e,
    0xd5, 0x5d, 0x1b, 0x34, 0x0f,
    0xd5, 0x4c, 0x1b, 0x3c, 0x11,
    0x48, 0x2b, 0x0c, 0x1a,
    0x4a, 0x2b, 0x14, 0x03,
    0x4b, 0x2b, 0x1c, 0x08,
    0x4f, 0x2b, 0x04, 0x11,
    0x4f, 0x2b, 0x0c, 0x1a,
    0x4f, 0x2b, 0x14, 0x23,
    0x4f, 0x2b, 0x1c, 0x2c,
    0x4f, 0x2b, 0x64, 0x35, 0x00,
    0x4f, 0x2b, 0x2c, 0x3e,
    0xd5, 0x2d, 0x2b, 0x34, 0x07,
    0xd5, 0x3c, 0x2b, 0x3c, 0x08,
    0xd5, 0x78, 0x2b, 0x04, 0x11,
    0xd5, 0x78, 0x2b, 0x0c, 0x1a,
    0xd5, 0x78, 0x2b, 0x14, 0x23,
    0xd5, 0x78, 0x2b, 0x1c, 0x2c,
    0xd5, 0x78, 0x2b, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x2b, 0x2c, 0x3e,
    0xd5, 0x7a, 0x2b, 0x34, 0x07,
    0xd5, 0x7b, 0x2b, 0x3c, 0x08,
    0xd5, 0x7f, 0x2b, 0x04, 0x11,
    0xd5, 0x7f, 0x2b, 0x0c, 0x1a,
    0xd5, 0x7f, 0x2b, 0x14, 0x23,
    0xd5, 0x7f, 0x2b, 0x1c, 0x2c,
    0xd5, 0x7f, 0x2b, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x2b, 0x2c, 0x3e,
    0xd5, 0x5d, 0x2b, 0x34, 0x0f,
    0xd5, 0x4c, 0x2b, 0x3c, 0x11,
    0xf3, 0x48, 0x0f, 0xbc, 0x0c, 0x1a,
    0xf3, 0x4a, 0x0f, 0xbc, 0x14, 0x03,
    0xf3, 0x4b, 0x0f, 0xbc, 0x1c, 0x08,
    0xf3, 0x4f, 0x0f, 0xbc, 0x04, 0x11,
    0xf3, 0x4f, 0x0f, 0xbc, 0x0c, 0x1a,
    0xf3, 0x4f, 0x0f, 0xbc, 0x14, 0x23,
    0xf3, 0x4f, 0x0f, 0xbc, 0x1c, 0x2c,
    0xf3, 0x4f, 0x0f, 0xbc, 0x64, 0x35, 0x00,
    0xf3, 0x4f, 0x0f, 0xbc, 0x2c, 0x3e,
    0xf3, 0xd5, 0xad, 0xbc, 0x34, 0x07,
    0xf3, 0xd5, 0xbc, 0xbc, 0x3c, 0x08,
    0xf3, 0xd5, 0xf8, 0xbc, 0x04, 0x11,
    0xf3, 0xd5, 0xf8, 0xbc, 0x0c, 0x1a,
    0xf3, 0xd5, 0xf8, 0xbc, 0x14, 0x23,
    0xf3, 0xd5, 0xf8, 0xbc, 0x1c, 0x2c,
    0xf3, 0xd5, 0xf8, 0xbc, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xf8, 0xbc, 0x2c, 0x3e,
    0xf3, 0xd5, 0xfa, 0xbc, 0x34, 0x07,
    0xf3, 0xd5, 0xfb, 0xbc, 0x3c, 0x08,
    0xf3, 0xd5, 0xff, 0xbc, 0x04, 0x11,
    0xf3, 0xd5, 0xff, 0xbc, 0x0c, 0x1a,
    0xf3, 0xd5, 0xff, 0xbc, 0x14, 0x23,
    0xf3, 0xd5, 0xff, 0xbc, 0x1c, 0x2c,
    0xf3, 0xd5, 0xff, 0xbc, 0x64, 0x35, 0x00,
    0xf3, 0xd5, 0xff, 0xbc, 0x2c, 0x3e,
    0xf3, 0xd5, 0xdd, 0xbc, 0x34, 0x0f,
    0xf3, 0xd5, 0xcc, 0xbc, 0x3c, 0x11,
    0x48, 0x33, 0x0c, 0x1a,
    0x4a, 0x33, 0x14, 0x03,
    0x4b, 0x33, 0x1c, 0x08,
    0x4f, 0x33, 0x04, 0x11,
    0x4f, 0x33, 0x0c, 0x1a,
    0x4f, 0x33, 0x14, 0x23,
    0x4f, 0x33, 0x1c, 0x2c,
    0x4f, 0x33, 0x64, 0x35, 0x00,
    0x4f, 0x33, 0x2c, 0x3e,
    0xd5, 0x2d, 0x33, 0x34, 0x07,
    0xd5, 0x3c, 0x33, 0x3c, 0x08,
    0xd5, 0x78, 0x33, 0x04, 0x11,
    0xd5, 0x78, 0x33, 0x0c, 0x1a,
    0xd5, 0x78, 0x33, 0x14, 0x23,
    0xd5, 0x78, 0x33, 0x1c, 0x2c,
    0xd5, 0x78, 0x33, 0x64, 0x35, 0x00,
    0xd5, 0x78, 0x33, 0x2c, 0x3e,
    0xd5, 0x7a, 0x33, 0x34, 0x07,
    0xd5, 0x7b, 0x33, 0x3c, 0x08,
    0xd5, 0x7f, 0x33, 0x04, 0x11,
    0xd5, 0x7f, 0x33, 0x0c, 0x1a,
    0xd5, 0x7f, 0x33, 0x14, 0x23,
    0xd5, 0x7f, 0x33, 0x1c, 0x2c,
    0xd5, 0x7f, 0x33, 0x64, 0x35, 0x00,
    0xd5, 0x7f, 0x33, 0x2c, 0x3e,
    0xd5, 0x5d, 0x33, 0x34, 0x0f,
    0xd5, 0x4c, 0x33, 0x3c, 0x11,
    0x48, 0x83, 0xc1, 0x01,
    0x48, 0x83, 0xc1, 0x10,
    0x48, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xc2, 0x01,
    0x48, 0x83, 0xc2, 0x10,
    0x48, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xc3, 0x01,
    0x48, 0x83, 0xc3, 0x10,
    0x48, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc0, 0x01,
    0x49, 0x83, 0xc0, 0x10,
    0x49, 0x81, 0xc0, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc0, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc1, 0x01,
    0x49, 0x83, 0xc1, 0x10,
    0x49, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc2, 0x01,
    0x49, 0x83, 0xc2, 0x10,
    0x49, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc3, 0x01,
    0x49, 0x83, 0xc3, 0x10,
    0x49, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc4, 0x01,
    0x49, 0x83, 0xc4, 0x10,
    0x49, 0x81, 0xc4, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc4, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc4, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc5, 0x01,
    0x49, 0x83, 0xc5, 0x10,
    0x49, 0x81, 0xc5, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc5, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc5, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc6, 0x01,
    0x49, 0x83, 0xc6, 0x10,
    0x49, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc6, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc6, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc6, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xc7, 0x01,
    0x49, 0x83, 0xc7, 0x10,
    0x49, 0x81, 0xc7, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xc7, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xc7, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc7, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc0, 0x01,
    0xd5, 0x18, 0x83, 0xc0, 0x10,
    0xd5, 0x18, 0x81, 0xc0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc1, 0x01,
    0xd5, 0x18, 0x83, 0xc1, 0x10,
    0xd5, 0x18, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc2, 0x01,
    0xd5, 0x18, 0x83, 0xc2, 0x10,
    0xd5, 0x18, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc3, 0x01,
    0xd5, 0x18, 0x83, 0xc3, 0x10,
    0xd5, 0x18, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc4, 0x01,
    0xd5, 0x18, 0x83, 0xc4, 0x10,
    0xd5, 0x18, 0x81, 0xc4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc5, 0x01,
    0xd5, 0x18, 0x83, 0xc5, 0x10,
    0xd5, 0x18, 0x81, 0xc5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc6, 0x01,
    0xd5, 0x18, 0x83, 0xc6, 0x10,
    0xd5, 0x18, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xc7, 0x01,
    0xd5, 0x18, 0x83, 0xc7, 0x10,
    0xd5, 0x18, 0x81, 0xc7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xc7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc0, 0x01,
    0xd5, 0x19, 0x83, 0xc0, 0x10,
    0xd5, 0x19, 0x81, 0xc0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc1, 0x01,
    0xd5, 0x19, 0x83, 0xc1, 0x10,
    0xd5, 0x19, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc2, 0x01,
    0xd5, 0x19, 0x83, 0xc2, 0x10,
    0xd5, 0x19, 0x81, 0xc2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc3, 0x01,
    0xd5, 0x19, 0x83, 0xc3, 0x10,
    0xd5, 0x19, 0x81, 0xc3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc4, 0x01,
    0xd5, 0x19, 0x83, 0xc4, 0x10,
    0xd5, 0x19, 0x81, 0xc4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc5, 0x01,
    0xd5, 0x19, 0x83, 0xc5, 0x10,
    0xd5, 0x19, 0x81, 0xc5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc6, 0x01,
    0xd5, 0x19, 0x83, 0xc6, 0x10,
    0xd5, 0x19, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xc7, 0x01,
    0xd5, 0x19, 0x83, 0xc7, 0x10,
    0xd5, 0x19, 0x81, 0xc7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xc7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc7, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xe1, 0x01,
    0x48, 0x83, 0xe1, 0x10,
    0x48, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xe2, 0x01,
    0x48, 0x83, 0xe2, 0x10,
    0x48, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xe3, 0x01,
    0x48, 0x83, 0xe3, 0x10,
    0x48, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe0, 0x01,
    0x49, 0x83, 0xe0, 0x10,
    0x49, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe0, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe0, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe1, 0x01,
    0x49, 0x83, 0xe1, 0x10,
    0x49, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe2, 0x01,
    0x49, 0x83, 0xe2, 0x10,
    0x49, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe3, 0x01,
    0x49, 0x83, 0xe3, 0x10,
    0x49, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe4, 0x01,
    0x49, 0x83, 0xe4, 0x10,
    0x49, 0x81, 0xe4, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe4, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe4, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe4, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe5, 0x01,
    0x49, 0x83, 0xe5, 0x10,
    0x49, 0x81, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe6, 0x01,
    0x49, 0x83, 0xe6, 0x10,
    0x49, 0x81, 0xe6, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe6, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe6, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe6, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe7, 0x01,
    0x49, 0x83, 0xe7, 0x10,
    0x49, 0x81, 0xe7, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe7, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe7, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe7, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe0, 0x01,
    0xd5, 0x18, 0x83, 0xe0, 0x10,
    0xd5, 0x18, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe1, 0x01,
    0xd5, 0x18, 0x83, 0xe1, 0x10,
    0xd5, 0x18, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe2, 0x01,
    0xd5, 0x18, 0x83, 0xe2, 0x10,
    0xd5, 0x18, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe3, 0x01,
    0xd5, 0x18, 0x83, 0xe3, 0x10,
    0xd5, 0x18, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe4, 0x01,
    0xd5, 0x18, 0x83, 0xe4, 0x10,
    0xd5, 0x18, 0x81, 0xe4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe5, 0x01,
    0xd5, 0x18, 0x83, 0xe5, 0x10,
    0xd5, 0x18, 0x81, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe6, 0x01,
    0xd5, 0x18, 0x83, 0xe6, 0x10,
    0xd5, 0x18, 0x81, 0xe6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe7, 0x01,
    0xd5, 0x18, 0x83, 0xe7, 0x10,
    0xd5, 0x18, 0x81, 0xe7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe0, 0x01,
    0xd5, 0x19, 0x83, 0xe0, 0x10,
    0xd5, 0x19, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe1, 0x01,
    0xd5, 0x19, 0x83, 0xe1, 0x10,
    0xd5, 0x19, 0x81, 0xe1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe2, 0x01,
    0xd5, 0x19, 0x83, 0xe2, 0x10,
    0xd5, 0x19, 0x81, 0xe2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe3, 0x01,
    0xd5, 0x19, 0x83, 0xe3, 0x10,
    0xd5, 0x19, 0x81, 0xe3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe4, 0x01,
    0xd5, 0x19, 0x83, 0xe4, 0x10,
    0xd5, 0x19, 0x81, 0xe4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe5, 0x01,
    0xd5, 0x19, 0x83, 0xe5, 0x10,
    0xd5, 0x19, 0x81, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe6, 0x01,
    0xd5, 0x19, 0x83, 0xe6, 0x10,
    0xd5, 0x19, 0x81, 0xe6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe7, 0x01,
    0xd5, 0x19, 0x83, 0xe7, 0x10,
    0xd5, 0x19, 0x81, 0xe7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe7, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xd1, 0x01,
    0x48, 0x83, 0xd1, 0x10,
    0x48, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xd2, 0x01,
    0x48, 0x83, 0xd2, 0x10,
    0x48, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xd3, 0x01,
    0x48, 0x83, 0xd3, 0x10,
    0x48, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd0, 0x01,
    0x49, 0x83, 0xd0, 0x10,
    0x49, 0x81, 0xd0, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd0, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd0, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd0, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd1, 0x01,
    0x49, 0x83, 0xd1, 0x10,
    0x49, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd2, 0x01,
    0x49, 0x83, 0xd2, 0x10,
    0x49, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd3, 0x01,
    0x49, 0x83, 0xd3, 0x10,
    0x49, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd4, 0x01,
    0x49, 0x83, 0xd4, 0x10,
    0x49, 0x81, 0xd4, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd4, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd4, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd4, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd5, 0x01,
    0x49, 0x83, 0xd5, 0x10,
    0x49, 0x81, 0xd5, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd5, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd5, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd5, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd6, 0x01,
    0x49, 0x83, 0xd6, 0x10,
    0x49, 0x81, 0xd6, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd6, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd6, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd6, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd7, 0x01,
    0x49, 0x83, 0xd7, 0x10,
    0x49, 0x81, 0xd7, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd7, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd7, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd7, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd0, 0x01,
    0xd5, 0x18, 0x83, 0xd0, 0x10,
    0xd5, 0x18, 0x81, 0xd0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd1, 0x01,
    0xd5, 0x18, 0x83, 0xd1, 0x10,
    0xd5, 0x18, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd2, 0x01,
    0xd5, 0x18, 0x83, 0xd2, 0x10,
    0xd5, 0x18, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd3, 0x01,
    0xd5, 0x18, 0x83, 0xd3, 0x10,
    0xd5, 0x18, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd4, 0x01,
    0xd5, 0x18, 0x83, 0xd4, 0x10,
    0xd5, 0x18, 0x81, 0xd4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd5, 0x01,
    0xd5, 0x18, 0x83, 0xd5, 0x10,
    0xd5, 0x18, 0x81, 0xd5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd6, 0x01,
    0xd5, 0x18, 0x83, 0xd6, 0x10,
    0xd5, 0x18, 0x81, 0xd6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd7, 0x01,
    0xd5, 0x18, 0x83, 0xd7, 0x10,
    0xd5, 0x18, 0x81, 0xd7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd0, 0x01,
    0xd5, 0x19, 0x83, 0xd0, 0x10,
    0xd5, 0x19, 0x81, 0xd0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd1, 0x01,
    0xd5, 0x19, 0x83, 0xd1, 0x10,
    0xd5, 0x19, 0x81, 0xd1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd2, 0x01,
    0xd5, 0x19, 0x83, 0xd2, 0x10,
    0xd5, 0x19, 0x81, 0xd2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd3, 0x01,
    0xd5, 0x19, 0x83, 0xd3, 0x10,
    0xd5, 0x19, 0x81, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd4, 0x01,
    0xd5, 0x19, 0x83, 0xd4, 0x10,
    0xd5, 0x19, 0x81, 0xd4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd5, 0x01,
    0xd5, 0x19, 0x83, 0xd5, 0x10,
    0xd5, 0x19, 0x81, 0xd5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd6, 0x01,
    0xd5, 0x19, 0x83, 0xd6, 0x10,
    0xd5, 0x19, 0x81, 0xd6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd7, 0x01,
    0xd5, 0x19, 0x83, 0xd7, 0x10,
    0xd5, 0x19, 0x81, 0xd7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd7, 0x00, 0x00, 0x00, 0x10,
    0x48, 0xd1, 0xd1,
    0x48, 0xc1, 0xd1, 0x02,
    0x48, 0xc1, 0xd1, 0x04,
    0x48, 0xc1, 0xd1, 0x08,
    0x48, 0xc1, 0xd1, 0x10,
    0x48, 0xd1, 0xd2,
    0x48, 0xc1, 0xd2, 0x02,
    0x48, 0xc1, 0xd2, 0x04,
    0x48, 0xc1, 0xd2, 0x08,
    0x48, 0xc1, 0xd2, 0x10,
    0x48, 0xd1, 0xd3,
    0x48, 0xc1, 0xd3, 0x02,
    0x48, 0xc1, 0xd3, 0x04,
    0x48, 0xc1, 0xd3, 0x08,
    0x48, 0xc1, 0xd3, 0x10,
    0x49, 0xd1, 0xd0,
    0x49, 0xc1, 0xd0, 0x02,
    0x49, 0xc1, 0xd0, 0x04,
    0x49, 0xc1, 0xd0, 0x08,
    0x49, 0xc1, 0xd0, 0x10,
    0x49, 0xd1, 0xd1,
    0x49, 0xc1, 0xd1, 0x02,
    0x49, 0xc1, 0xd1, 0x04,
    0x49, 0xc1, 0xd1, 0x08,
    0x49, 0xc1, 0xd1, 0x10,
    0x49, 0xd1, 0xd2,
    0x49, 0xc1, 0xd2, 0x02,
    0x49, 0xc1, 0xd2, 0x04,
    0x49, 0xc1, 0xd2, 0x08,
    0x49, 0xc1, 0xd2, 0x10,
    0x49, 0xd1, 0xd3,
    0x49, 0xc1, 0xd3, 0x02,
    0x49, 0xc1, 0xd3, 0x04,
    0x49, 0xc1, 0xd3, 0x08,
    0x49, 0xc1, 0xd3, 0x10,
    0x49, 0xd1, 0xd4,
    0x49, 0xc1, 0xd4, 0x02,
    0x49, 0xc1, 0xd4, 0x04,
    0x49, 0xc1, 0xd4, 0x08,
    0x49, 0xc1, 0xd4, 0x10,
    0x49, 0xd1, 0xd5,
    0x49, 0xc1, 0xd5, 0x02,
    0x49, 0xc1, 0xd5, 0x04,
    0x49, 0xc1, 0xd5, 0x08,
    0x49, 0xc1, 0xd5, 0x10,
    0x49, 0xd1, 0xd6,
    0x49, 0xc1, 0xd6, 0x02,
    0x49, 0xc1, 0xd6, 0x04,
    0x49, 0xc1, 0xd6, 0x08,
    0x49, 0xc1, 0xd6, 0x10,
    0x49, 0xd1, 0xd7,
    0x49, 0xc1, 0xd7, 0x02,
    0x49, 0xc1, 0xd7, 0x04,
    0x49, 0xc1, 0xd7, 0x08,
    0x49, 0xc1, 0xd7, 0x10,
    0xd5, 0x18, 0xd1, 0xd0,
    0xd5, 0x18, 0xc1, 0xd0, 0x02,
    0xd5, 0x18, 0xc1, 0xd0, 0x04,
    0xd5, 0x18, 0xc1, 0xd0, 0x08,
    0xd5, 0x18, 0xc1, 0xd0, 0x10,
    0xd5, 0x18, 0xd1, 0xd1,
    0xd5, 0x18, 0xc1, 0xd1, 0x02,
    0xd5, 0x18, 0xc1, 0xd1, 0x04,
    0xd5, 0x18, 0xc1, 0xd1, 0x08,
    0xd5, 0x18, 0xc1, 0xd1, 0x10,
    0xd5, 0x18, 0xd1, 0xd2,
    0xd5, 0x18, 0xc1, 0xd2, 0x02,
    0xd5, 0x18, 0xc1, 0xd2, 0x04,
    0xd5, 0x18, 0xc1, 0xd2, 0x08,
    0xd5, 0x18, 0xc1, 0xd2, 0x10,
    0xd5, 0x18, 0xd1, 0xd3,
    0xd5, 0x18, 0xc1, 0xd3, 0x02,
    0xd5, 0x18, 0xc1, 0xd3, 0x04,
    0xd5, 0x18, 0xc1, 0xd3, 0x08,
    0xd5, 0x18, 0xc1, 0xd3, 0x10,
    0xd5, 0x18, 0xd1, 0xd4,
    0xd5, 0x18, 0xc1, 0xd4, 0x02,
    0xd5, 0x18, 0xc1, 0xd4, 0x04,
    0xd5, 0x18, 0xc1, 0xd4, 0x08,
    0xd5, 0x18, 0xc1, 0xd4, 0x10,
    0xd5, 0x18, 0xd1, 0xd5,
    0xd5, 0x18, 0xc1, 0xd5, 0x02,
    0xd5, 0x18, 0xc1, 0xd5, 0x04,
    0xd5, 0x18, 0xc1, 0xd5, 0x08,
    0xd5, 0x18, 0xc1, 0xd5, 0x10,
    0xd5, 0x18, 0xd1, 0xd6,
    0xd5, 0x18, 0xc1, 0xd6, 0x02,
    0xd5, 0x18, 0xc1, 0xd6, 0x04,
    0xd5, 0x18, 0xc1, 0xd6, 0x08,
    0xd5, 0x18, 0xc1, 0xd6, 0x10,
    0xd5, 0x18, 0xd1, 0xd7,
    0xd5, 0x18, 0xc1, 0xd7, 0x02,
    0xd5, 0x18, 0xc1, 0xd7, 0x04,
    0xd5, 0x18, 0xc1, 0xd7, 0x08,
    0xd5, 0x18, 0xc1, 0xd7, 0x10,
    0xd5, 0x19, 0xd1, 0xd0,
    0xd5, 0x19, 0xc1, 0xd0, 0x02,
    0xd5, 0x19, 0xc1, 0xd0, 0x04,
    0xd5, 0x19, 0xc1, 0xd0, 0x08,
    0xd5, 0x19, 0xc1, 0xd0, 0x10,
    0xd5, 0x19, 0xd1, 0xd1,
    0xd5, 0x19, 0xc1, 0xd1, 0x02,
    0xd5, 0x19, 0xc1, 0xd1, 0x04,
    0xd5, 0x19, 0xc1, 0xd1, 0x08,
    0xd5, 0x19, 0xc1, 0xd1, 0x10,
    0xd5, 0x19, 0xd1, 0xd2,
    0xd5, 0x19, 0xc1, 0xd2, 0x02,
    0xd5, 0x19, 0xc1, 0xd2, 0x04,
    0xd5, 0x19, 0xc1, 0xd2, 0x08,
    0xd5, 0x19, 0xc1, 0xd2, 0x10,
    0xd5, 0x19, 0xd1, 0xd3,
    0xd5, 0x19, 0xc1, 0xd3, 0x02,
    0xd5, 0x19, 0xc1, 0xd3, 0x04,
    0xd5, 0x19, 0xc1, 0xd3, 0x08,
    0xd5, 0x19, 0xc1, 0xd3, 0x10,
    0xd5, 0x19, 0xd1, 0xd4,
    0xd5, 0x19, 0xc1, 0xd4, 0x02,
    0xd5, 0x19, 0xc1, 0xd4, 0x04,
    0xd5, 0x19, 0xc1, 0xd4, 0x08,
    0xd5, 0x19, 0xc1, 0xd4, 0x10,
    0xd5, 0x19, 0xd1, 0xd5,
    0xd5, 0x19, 0xc1, 0xd5, 0x02,
    0xd5, 0x19, 0xc1, 0xd5, 0x04,
    0xd5, 0x19, 0xc1, 0xd5, 0x08,
    0xd5, 0x19, 0xc1, 0xd5, 0x10,
    0xd5, 0x19, 0xd1, 0xd6,
    0xd5, 0x19, 0xc1, 0xd6, 0x02,
    0xd5, 0x19, 0xc1, 0xd6, 0x04,
    0xd5, 0x19, 0xc1, 0xd6, 0x08,
    0xd5, 0x19, 0xc1, 0xd6, 0x10,
    0xd5, 0x19, 0xd1, 0xd7,
    0xd5, 0x19, 0xc1, 0xd7, 0x02,
    0xd5, 0x19, 0xc1, 0xd7, 0x04,
    0xd5, 0x19, 0xc1, 0xd7, 0x08,
    0xd5, 0x19, 0xc1, 0xd7, 0x10,
    0x48, 0xd1, 0xd9,
    0x48, 0xc1, 0xd9, 0x02,
    0x48, 0xc1, 0xd9, 0x04,
    0x48, 0xc1, 0xd9, 0x08,
    0x48, 0xc1, 0xd9, 0x10,
    0x48, 0xd1, 0xda,
    0x48, 0xc1, 0xda, 0x02,
    0x48, 0xc1, 0xda, 0x04,
    0x48, 0xc1, 0xda, 0x08,
    0x48, 0xc1, 0xda, 0x10,
    0x48, 0xd1, 0xdb,
    0x48, 0xc1, 0xdb, 0x02,
    0x48, 0xc1, 0xdb, 0x04,
    0x48, 0xc1, 0xdb, 0x08,
    0x48, 0xc1, 0xdb, 0x10,
    0x49, 0xd1, 0xd8,
    0x49, 0xc1, 0xd8, 0x02,
    0x49, 0xc1, 0xd8, 0x04,
    0x49, 0xc1, 0xd8, 0x08,
    0x49, 0xc1, 0xd8, 0x10,
    0x49, 0xd1, 0xd9,
    0x49, 0xc1, 0xd9, 0x02,
    0x49, 0xc1, 0xd9, 0x04,
    0x49, 0xc1, 0xd9, 0x08,
    0x49, 0xc1, 0xd9, 0x10,
    0x49, 0xd1, 0xda,
    0x49, 0xc1, 0xda, 0x02,
    0x49, 0xc1, 0xda, 0x04,
    0x49, 0xc1, 0xda, 0x08,
    0x49, 0xc1, 0xda, 0x10,
    0x49, 0xd1, 0xdb,
    0x49, 0xc1, 0xdb, 0x02,
    0x49, 0xc1, 0xdb, 0x04,
    0x49, 0xc1, 0xdb, 0x08,
    0x49, 0xc1, 0xdb, 0x10,
    0x49, 0xd1, 0xdc,
    0x49, 0xc1, 0xdc, 0x02,
    0x49, 0xc1, 0xdc, 0x04,
    0x49, 0xc1, 0xdc, 0x08,
    0x49, 0xc1, 0xdc, 0x10,
    0x49, 0xd1, 0xdd,
    0x49, 0xc1, 0xdd, 0x02,
    0x49, 0xc1, 0xdd, 0x04,
    0x49, 0xc1, 0xdd, 0x08,
    0x49, 0xc1, 0xdd, 0x10,
    0x49, 0xd1, 0xde,
    0x49, 0xc1, 0xde, 0x02,
    0x49, 0xc1, 0xde, 0x04,
    0x49, 0xc1, 0xde, 0x08,
    0x49, 0xc1, 0xde, 0x10,
    0x49, 0xd1, 0xdf,
    0x49, 0xc1, 0xdf, 0x02,
    0x49, 0xc1, 0xdf, 0x04,
    0x49, 0xc1, 0xdf, 0x08,
    0x49, 0xc1, 0xdf, 0x10,
    0xd5, 0x18, 0xd1, 0xd8,
    0xd5, 0x18, 0xc1, 0xd8, 0x02,
    0xd5, 0x18, 0xc1, 0xd8, 0x04,
    0xd5, 0x18, 0xc1, 0xd8, 0x08,
    0xd5, 0x18, 0xc1, 0xd8, 0x10,
    0xd5, 0x18, 0xd1, 0xd9,
    0xd5, 0x18, 0xc1, 0xd9, 0x02,
    0xd5, 0x18, 0xc1, 0xd9, 0x04,
    0xd5, 0x18, 0xc1, 0xd9, 0x08,
    0xd5, 0x18, 0xc1, 0xd9, 0x10,
    0xd5, 0x18, 0xd1, 0xda,
    0xd5, 0x18, 0xc1, 0xda, 0x02,
    0xd5, 0x18, 0xc1, 0xda, 0x04,
    0xd5, 0x18, 0xc1, 0xda, 0x08,
    0xd5, 0x18, 0xc1, 0xda, 0x10,
    0xd5, 0x18, 0xd1, 0xdb,
    0xd5, 0x18, 0xc1, 0xdb, 0x02,
    0xd5, 0x18, 0xc1, 0xdb, 0x04,
    0xd5, 0x18, 0xc1, 0xdb, 0x08,
    0xd5, 0x18, 0xc1, 0xdb, 0x10,
    0xd5, 0x18, 0xd1, 0xdc,
    0xd5, 0x18, 0xc1, 0xdc, 0x02,
    0xd5, 0x18, 0xc1, 0xdc, 0x04,
    0xd5, 0x18, 0xc1, 0xdc, 0x08,
    0xd5, 0x18, 0xc1, 0xdc, 0x10,
    0xd5, 0x18, 0xd1, 0xdd,
    0xd5, 0x18, 0xc1, 0xdd, 0x02,
    0xd5, 0x18, 0xc1, 0xdd, 0x04,
    0xd5, 0x18, 0xc1, 0xdd, 0x08,
    0xd5, 0x18, 0xc1, 0xdd, 0x10,
    0xd5, 0x18, 0xd1, 0xde,
    0xd5, 0x18, 0xc1, 0xde, 0x02,
    0xd5, 0x18, 0xc1, 0xde, 0x04,
    0xd5, 0x18, 0xc1, 0xde, 0x08,
    0xd5, 0x18, 0xc1, 0xde, 0x10,
    0xd5, 0x18, 0xd1, 0xdf,
    0xd5, 0x18, 0xc1, 0xdf, 0x02,
    0xd5, 0x18, 0xc1, 0xdf, 0x04,
    0xd5, 0x18, 0xc1, 0xdf, 0x08,
    0xd5, 0x18, 0xc1, 0xdf, 0x10,
    0xd5, 0x19, 0xd1, 0xd8,
    0xd5, 0x19, 0xc1, 0xd8, 0x02,
    0xd5, 0x19, 0xc1, 0xd8, 0x04,
    0xd5, 0x19, 0xc1, 0xd8, 0x08,
    0xd5, 0x19, 0xc1, 0xd8, 0x10,
    0xd5, 0x19, 0xd1, 0xd9,
    0xd5, 0x19, 0xc1, 0xd9, 0x02,
    0xd5, 0x19, 0xc1, 0xd9, 0x04,
    0xd5, 0x19, 0xc1, 0xd9, 0x08,
    0xd5, 0x19, 0xc1, 0xd9, 0x10,
    0xd5, 0x19, 0xd1, 0xda,
    0xd5, 0x19, 0xc1, 0xda, 0x02,
    0xd5, 0x19, 0xc1, 0xda, 0x04,
    0xd5, 0x19, 0xc1, 0xda, 0x08,
    0xd5, 0x19, 0xc1, 0xda, 0x10,
    0xd5, 0x19, 0xd1, 0xdb,
    0xd5, 0x19, 0xc1, 0xdb, 0x02,
    0xd5, 0x19, 0xc1, 0xdb, 0x04,
    0xd5, 0x19, 0xc1, 0xdb, 0x08,
    0xd5, 0x19, 0xc1, 0xdb, 0x10,
    0xd5, 0x19, 0xd1, 0xdc,
    0xd5, 0x19, 0xc1, 0xdc, 0x02,
    0xd5, 0x19, 0xc1, 0xdc, 0x04,
    0xd5, 0x19, 0xc1, 0xdc, 0x08,
    0xd5, 0x19, 0xc1, 0xdc, 0x10,
    0xd5, 0x19, 0xd1, 0xdd,
    0xd5, 0x19, 0xc1, 0xdd, 0x02,
    0xd5, 0x19, 0xc1, 0xdd, 0x04,
    0xd5, 0x19, 0xc1, 0xdd, 0x08,
    0xd5, 0x19, 0xc1, 0xdd, 0x10,
    0xd5, 0x19, 0xd1, 0xde,
    0xd5, 0x19, 0xc1, 0xde, 0x02,
    0xd5, 0x19, 0xc1, 0xde, 0x04,
    0xd5, 0x19, 0xc1, 0xde, 0x08,
    0xd5, 0x19, 0xc1, 0xde, 0x10,
    0xd5, 0x19, 0xd1, 0xdf,
    0xd5, 0x19, 0xc1, 0xdf, 0x02,
    0xd5, 0x19, 0xc1, 0xdf, 0x04,
    0xd5, 0x19, 0xc1, 0xdf, 0x08,
    0xd5, 0x19, 0xc1, 0xdf, 0x10,
    0x48, 0xd1, 0xc1,
    0x48, 0xc1, 0xc1, 0x02,
    0x48, 0xc1, 0xc1, 0x04,
    0x48, 0xc1, 0xc1, 0x08,
    0x48, 0xc1, 0xc1, 0x10,
    0x48, 0xd1, 0xc2,
    0x48, 0xc1, 0xc2, 0x02,
    0x48, 0xc1, 0xc2, 0x04,
    0x48, 0xc1, 0xc2, 0x08,
    0x48, 0xc1, 0xc2, 0x10,
    0x48, 0xd1, 0xc3,
    0x48, 0xc1, 0xc3, 0x02,
    0x48, 0xc1, 0xc3, 0x04,
    0x48, 0xc1, 0xc3, 0x08,
    0x48, 0xc1, 0xc3, 0x10,
    0x49, 0xd1, 0xc0,
    0x49, 0xc1, 0xc0, 0x02,
    0x49, 0xc1, 0xc0, 0x04,
    0x49, 0xc1, 0xc0, 0x08,
    0x49, 0xc1, 0xc0, 0x10,
    0x49, 0xd1, 0xc1,
    0x49, 0xc1, 0xc1, 0x02,
    0x49, 0xc1, 0xc1, 0x04,
    0x49, 0xc1, 0xc1, 0x08,
    0x49, 0xc1, 0xc1, 0x10,
    0x49, 0xd1, 0xc2,
    0x49, 0xc1, 0xc2, 0x02,
    0x49, 0xc1, 0xc2, 0x04,
    0x49, 0xc1, 0xc2, 0x08,
    0x49, 0xc1, 0xc2, 0x10,
    0x49, 0xd1, 0xc3,
    0x49, 0xc1, 0xc3, 0x02,
    0x49, 0xc1, 0xc3, 0x04,
    0x49, 0xc1, 0xc3, 0x08,
    0x49, 0xc1, 0xc3, 0x10,
    0x49, 0xd1, 0xc4,
    0x49, 0xc1, 0xc4, 0x02,
    0x49, 0xc1, 0xc4, 0x04,
    0x49, 0xc1, 0xc4, 0x08,
    0x49, 0xc1, 0xc4, 0x10,
    0x49, 0xd1, 0xc5,
    0x49, 0xc1, 0xc5, 0x02,
    0x49, 0xc1, 0xc5, 0x04,
    0x49, 0xc1, 0xc5, 0x08,
    0x49, 0xc1, 0xc5, 0x10,
    0x49, 0xd1, 0xc6,
    0x49, 0xc1, 0xc6, 0x02,
    0x49, 0xc1, 0xc6, 0x04,
    0x49, 0xc1, 0xc6, 0x08,
    0x49, 0xc1, 0xc6, 0x10,
    0x49, 0xd1, 0xc7,
    0x49, 0xc1, 0xc7, 0x02,
    0x49, 0xc1, 0xc7, 0x04,
    0x49, 0xc1, 0xc7, 0x08,
    0x49, 0xc1, 0xc7, 0x10,
    0xd5, 0x18, 0xd1, 0xc0,
    0xd5, 0x18, 0xc1, 0xc0, 0x02,
    0xd5, 0x18, 0xc1, 0xc0, 0x04,
    0xd5, 0x18, 0xc1, 0xc0, 0x08,
    0xd5, 0x18, 0xc1, 0xc0, 0x10,
    0xd5, 0x18, 0xd1, 0xc1,
    0xd5, 0x18, 0xc1, 0xc1, 0x02,
    0xd5, 0x18, 0xc1, 0xc1, 0x04,
    0xd5, 0x18, 0xc1, 0xc1, 0x08,
    0xd5, 0x18, 0xc1, 0xc1, 0x10,
    0xd5, 0x18, 0xd1, 0xc2,
    0xd5, 0x18, 0xc1, 0xc2, 0x02,
    0xd5, 0x18, 0xc1, 0xc2, 0x04,
    0xd5, 0x18, 0xc1, 0xc2, 0x08,
    0xd5, 0x18, 0xc1, 0xc2, 0x10,
    0xd5, 0x18, 0xd1, 0xc3,
    0xd5, 0x18, 0xc1, 0xc3, 0x02,
    0xd5, 0x18, 0xc1, 0xc3, 0x04,
    0xd5, 0x18, 0xc1, 0xc3, 0x08,
    0xd5, 0x18, 0xc1, 0xc3, 0x10,
    0xd5, 0x18, 0xd1, 0xc4,
    0xd5, 0x18, 0xc1, 0xc4, 0x02,
    0xd5, 0x18, 0xc1, 0xc4, 0x04,
    0xd5, 0x18, 0xc1, 0xc4, 0x08,
    0xd5, 0x18, 0xc1, 0xc4, 0x10,
    0xd5, 0x18, 0xd1, 0xc5,
    0xd5, 0x18, 0xc1, 0xc5, 0x02,
    0xd5, 0x18, 0xc1, 0xc5, 0x04,
    0xd5, 0x18, 0xc1, 0xc5, 0x08,
    0xd5, 0x18, 0xc1, 0xc5, 0x10,
    0xd5, 0x18, 0xd1, 0xc6,
    0xd5, 0x18, 0xc1, 0xc6, 0x02,
    0xd5, 0x18, 0xc1, 0xc6, 0x04,
    0xd5, 0x18, 0xc1, 0xc6, 0x08,
    0xd5, 0x18, 0xc1, 0xc6, 0x10,
    0xd5, 0x18, 0xd1, 0xc7,
    0xd5, 0x18, 0xc1, 0xc7, 0x02,
    0xd5, 0x18, 0xc1, 0xc7, 0x04,
    0xd5, 0x18, 0xc1, 0xc7, 0x08,
    0xd5, 0x18, 0xc1, 0xc7, 0x10,
    0xd5, 0x19, 0xd1, 0xc0,
    0xd5, 0x19, 0xc1, 0xc0, 0x02,
    0xd5, 0x19, 0xc1, 0xc0, 0x04,
    0xd5, 0x19, 0xc1, 0xc0, 0x08,
    0xd5, 0x19, 0xc1, 0xc0, 0x10,
    0xd5, 0x19, 0xd1, 0xc1,
    0xd5, 0x19, 0xc1, 0xc1, 0x02,
    0xd5, 0x19, 0xc1, 0xc1, 0x04,
    0xd5, 0x19, 0xc1, 0xc1, 0x08,
    0xd5, 0x19, 0xc1, 0xc1, 0x10,
    0xd5, 0x19, 0xd1, 0xc2,
    0xd5, 0x19, 0xc1, 0xc2, 0x02,
    0xd5, 0x19, 0xc1, 0xc2, 0x04,
    0xd5, 0x19, 0xc1, 0xc2, 0x08,
    0xd5, 0x19, 0xc1, 0xc2, 0x10,
    0xd5, 0x19, 0xd1, 0xc3,
    0xd5, 0x19, 0xc1, 0xc3, 0x02,
    0xd5, 0x19, 0xc1, 0xc3, 0x04,
    0xd5, 0x19, 0xc1, 0xc3, 0x08,
    0xd5, 0x19, 0xc1, 0xc3, 0x10,
    0xd5, 0x19, 0xd1, 0xc4,
    0xd5, 0x19, 0xc1, 0xc4, 0x02,
    0xd5, 0x19, 0xc1, 0xc4, 0x04,
    0xd5, 0x19, 0xc1, 0xc4, 0x08,
    0xd5, 0x19, 0xc1, 0xc4, 0x10,
    0xd5, 0x19, 0xd1, 0xc5,
    0xd5, 0x19, 0xc1, 0xc5, 0x02,
    0xd5, 0x19, 0xc1, 0xc5, 0x04,
    0xd5, 0x19, 0xc1, 0xc5, 0x08,
    0xd5, 0x19, 0xc1, 0xc5, 0x10,
    0xd5, 0x19, 0xd1, 0xc6,
    0xd5, 0x19, 0xc1, 0xc6, 0x02,
    0xd5, 0x19, 0xc1, 0xc6, 0x04,
    0xd5, 0x19, 0xc1, 0xc6, 0x08,
    0xd5, 0x19, 0xc1, 0xc6, 0x10,
    0xd5, 0x19, 0xd1, 0xc7,
    0xd5, 0x19, 0xc1, 0xc7, 0x02,
    0xd5, 0x19, 0xc1, 0xc7, 0x04,
    0xd5, 0x19, 0xc1, 0xc7, 0x08,
    0xd5, 0x19, 0xc1, 0xc7, 0x10,
    0x48, 0xd1, 0xc9,
    0x48, 0xc1, 0xc9, 0x02,
    0x48, 0xc1, 0xc9, 0x04,
    0x48, 0xc1, 0xc9, 0x08,
    0x48, 0xc1, 0xc9, 0x10,
    0x48, 0xd1, 0xca,
    0x48, 0xc1, 0xca, 0x02,
    0x48, 0xc1, 0xca, 0x04,
    0x48, 0xc1, 0xca, 0x08,
    0x48, 0xc1, 0xca, 0x10,
    0x48, 0xd1, 0xcb,
    0x48, 0xc1, 0xcb, 0x02,
    0x48, 0xc1, 0xcb, 0x04,
    0x48, 0xc1, 0xcb, 0x08,
    0x48, 0xc1, 0xcb, 0x10,
    0x49, 0xd1, 0xc8,
    0x49, 0xc1, 0xc8, 0x02,
    0x49, 0xc1, 0xc8, 0x04,
    0x49, 0xc1, 0xc8, 0x08,
    0x49, 0xc1, 0xc8, 0x10,
    0x49, 0xd1, 0xc9,
    0x49, 0xc1, 0xc9, 0x02,
    0x49, 0xc1, 0xc9, 0x04,
    0x49, 0xc1, 0xc9, 0x08,
    0x49, 0xc1, 0xc9, 0x10,
    0x49, 0xd1, 0xca,
    0x49, 0xc1, 0xca, 0x02,
    0x49, 0xc1, 0xca, 0x04,
    0x49, 0xc1, 0xca, 0x08,
    0x49, 0xc1, 0xca, 0x10,
    0x49, 0xd1, 0xcb,
    0x49, 0xc1, 0xcb, 0x02,
    0x49, 0xc1, 0xcb, 0x04,
    0x49, 0xc1, 0xcb, 0x08,
    0x49, 0xc1, 0xcb, 0x10,
    0x49, 0xd1, 0xcc,
    0x49, 0xc1, 0xcc, 0x02,
    0x49, 0xc1, 0xcc, 0x04,
    0x49, 0xc1, 0xcc, 0x08,
    0x49, 0xc1, 0xcc, 0x10,
    0x49, 0xd1, 0xcd,
    0x49, 0xc1, 0xcd, 0x02,
    0x49, 0xc1, 0xcd, 0x04,
    0x49, 0xc1, 0xcd, 0x08,
    0x49, 0xc1, 0xcd, 0x10,
    0x49, 0xd1, 0xce,
    0x49, 0xc1, 0xce, 0x02,
    0x49, 0xc1, 0xce, 0x04,
    0x49, 0xc1, 0xce, 0x08,
    0x49, 0xc1, 0xce, 0x10,
    0x49, 0xd1, 0xcf,
    0x49, 0xc1, 0xcf, 0x02,
    0x49, 0xc1, 0xcf, 0x04,
    0x49, 0xc1, 0xcf, 0x08,
    0x49, 0xc1, 0xcf, 0x10,
    0xd5, 0x18, 0xd1, 0xc8,
    0xd5, 0x18, 0xc1, 0xc8, 0x02,
    0xd5, 0x18, 0xc1, 0xc8, 0x04,
    0xd5, 0x18, 0xc1, 0xc8, 0x08,
    0xd5, 0x18, 0xc1, 0xc8, 0x10,
    0xd5, 0x18, 0xd1, 0xc9,
    0xd5, 0x18, 0xc1, 0xc9, 0x02,
    0xd5, 0x18, 0xc1, 0xc9, 0x04,
    0xd5, 0x18, 0xc1, 0xc9, 0x08,
    0xd5, 0x18, 0xc1, 0xc9, 0x10,
    0xd5, 0x18, 0xd1, 0xca,
    0xd5, 0x18, 0xc1, 0xca, 0x02,
    0xd5, 0x18, 0xc1, 0xca, 0x04,
    0xd5, 0x18, 0xc1, 0xca, 0x08,
    0xd5, 0x18, 0xc1, 0xca, 0x10,
    0xd5, 0x18, 0xd1, 0xcb,
    0xd5, 0x18, 0xc1, 0xcb, 0x02,
    0xd5, 0x18, 0xc1, 0xcb, 0x04,
    0xd5, 0x18, 0xc1, 0xcb, 0x08,
    0xd5, 0x18, 0xc1, 0xcb, 0x10,
    0xd5, 0x18, 0xd1, 0xcc,
    0xd5, 0x18, 0xc1, 0xcc, 0x02,
    0xd5, 0x18, 0xc1, 0xcc, 0x04,
    0xd5, 0x18, 0xc1, 0xcc, 0x08,
    0xd5, 0x18, 0xc1, 0xcc, 0x10,
    0xd5, 0x18, 0xd1, 0xcd,
    0xd5, 0x18, 0xc1, 0xcd, 0x02,
    0xd5, 0x18, 0xc1, 0xcd, 0x04,
    0xd5, 0x18, 0xc1, 0xcd, 0x08,
    0xd5, 0x18, 0xc1, 0xcd, 0x10,
    0xd5, 0x18, 0xd1, 0xce,
    0xd5, 0x18, 0xc1, 0xce, 0x02,
    0xd5, 0x18, 0xc1, 0xce, 0x04,
    0xd5, 0x18, 0xc1, 0xce, 0x08,
    0xd5, 0x18, 0xc1, 0xce, 0x10,
    0xd5, 0x18, 0xd1, 0xcf,
    0xd5, 0x18, 0xc1, 0xcf, 0x02,
    0xd5, 0x18, 0xc1, 0xcf, 0x04,
    0xd5, 0x18, 0xc1, 0xcf, 0x08,
    0xd5, 0x18, 0xc1, 0xcf, 0x10,
    0xd5, 0x19, 0xd1, 0xc8,
    0xd5, 0x19, 0xc1, 0xc8, 0x02,
    0xd5, 0x19, 0xc1, 0xc8, 0x04,
    0xd5, 0x19, 0xc1, 0xc8, 0x08,
    0xd5, 0x19, 0xc1, 0xc8, 0x10,
    0xd5, 0x19, 0xd1, 0xc9,
    0xd5, 0x19, 0xc1, 0xc9, 0x02,
    0xd5, 0x19, 0xc1, 0xc9, 0x04,
    0xd5, 0x19, 0xc1, 0xc9, 0x08,
    0xd5, 0x19, 0xc1, 0xc9, 0x10,
    0xd5, 0x19, 0xd1, 0xca,
    0xd5, 0x19, 0xc1, 0xca, 0x02,
    0xd5, 0x19, 0xc1, 0xca, 0x04,
    0xd5, 0x19, 0xc1, 0xca, 0x08,
    0xd5, 0x19, 0xc1, 0xca, 0x10,
    0xd5, 0x19, 0xd1, 0xcb,
    0xd5, 0x19, 0xc1, 0xcb, 0x02,
    0xd5, 0x19, 0xc1, 0xcb, 0x04,
    0xd5, 0x19, 0xc1, 0xcb, 0x08,
    0xd5, 0x19, 0xc1, 0xcb, 0x10,
    0xd5, 0x19, 0xd1, 0xcc,
    0xd5, 0x19, 0xc1, 0xcc, 0x02,
    0xd5, 0x19, 0xc1, 0xcc, 0x04,
    0xd5, 0x19, 0xc1, 0xcc, 0x08,
    0xd5, 0x19, 0xc1, 0xcc, 0x10,
    0xd5, 0x19, 0xd1, 0xcd,
    0xd5, 0x19, 0xc1, 0xcd, 0x02,
    0xd5, 0x19, 0xc1, 0xcd, 0x04,
    0xd5, 0x19, 0xc1, 0xcd, 0x08,
    0xd5, 0x19, 0xc1, 0xcd, 0x10,
    0xd5, 0x19, 0xd1, 0xce,
    0xd5, 0x19, 0xc1, 0xce, 0x02,
    0xd5, 0x19, 0xc1, 0xce, 0x04,
    0xd5, 0x19, 0xc1, 0xce, 0x08,
    0xd5, 0x19, 0xc1, 0xce, 0x10,
    0xd5, 0x19, 0xd1, 0xcf,
    0xd5, 0x19, 0xc1, 0xcf, 0x02,
    0xd5, 0x19, 0xc1, 0xcf, 0x04,
    0xd5, 0x19, 0xc1, 0xcf, 0x08,
    0xd5, 0x19, 0xc1, 0xcf, 0x10,
    0x48, 0xd1, 0xf9,
    0x48, 0xc1, 0xf9, 0x02,
    0x48, 0xc1, 0xf9, 0x04,
    0x48, 0xc1, 0xf9, 0x08,
    0x48, 0xc1, 0xf9, 0x10,
    0x48, 0xd1, 0xfa,
    0x48, 0xc1, 0xfa, 0x02,
    0x48, 0xc1, 0xfa, 0x04,
    0x48, 0xc1, 0xfa, 0x08,
    0x48, 0xc1, 0xfa, 0x10,
    0x48, 0xd1, 0xfb,
    0x48, 0xc1, 0xfb, 0x02,
    0x48, 0xc1, 0xfb, 0x04,
    0x48, 0xc1, 0xfb, 0x08,
    0x48, 0xc1, 0xfb, 0x10,
    0x49, 0xd1, 0xf8,
    0x49, 0xc1, 0xf8, 0x02,
    0x49, 0xc1, 0xf8, 0x04,
    0x49, 0xc1, 0xf8, 0x08,
    0x49, 0xc1, 0xf8, 0x10,
    0x49, 0xd1, 0xf9,
    0x49, 0xc1, 0xf9, 0x02,
    0x49, 0xc1, 0xf9, 0x04,
    0x49, 0xc1, 0xf9, 0x08,
    0x49, 0xc1, 0xf9, 0x10,
    0x49, 0xd1, 0xfa,
    0x49, 0xc1, 0xfa, 0x02,
    0x49, 0xc1, 0xfa, 0x04,
    0x49, 0xc1, 0xfa, 0x08,
    0x49, 0xc1, 0xfa, 0x10,
    0x49, 0xd1, 0xfb,
    0x49, 0xc1, 0xfb, 0x02,
    0x49, 0xc1, 0xfb, 0x04,
    0x49, 0xc1, 0xfb, 0x08,
    0x49, 0xc1, 0xfb, 0x10,
    0x49, 0xd1, 0xfc,
    0x49, 0xc1, 0xfc, 0x02,
    0x49, 0xc1, 0xfc, 0x04,
    0x49, 0xc1, 0xfc, 0x08,
    0x49, 0xc1, 0xfc, 0x10,
    0x49, 0xd1, 0xfd,
    0x49, 0xc1, 0xfd, 0x02,
    0x49, 0xc1, 0xfd, 0x04,
    0x49, 0xc1, 0xfd, 0x08,
    0x49, 0xc1, 0xfd, 0x10,
    0x49, 0xd1, 0xfe,
    0x49, 0xc1, 0xfe, 0x02,
    0x49, 0xc1, 0xfe, 0x04,
    0x49, 0xc1, 0xfe, 0x08,
    0x49, 0xc1, 0xfe, 0x10,
    0x49, 0xd1, 0xff,
    0x49, 0xc1, 0xff, 0x02,
    0x49, 0xc1, 0xff, 0x04,
    0x49, 0xc1, 0xff, 0x08,
    0x49, 0xc1, 0xff, 0x10,
    0xd5, 0x18, 0xd1, 0xf8,
    0xd5, 0x18, 0xc1, 0xf8, 0x02,
    0xd5, 0x18, 0xc1, 0xf8, 0x04,
    0xd5, 0x18, 0xc1, 0xf8, 0x08,
    0xd5, 0x18, 0xc1, 0xf8, 0x10,
    0xd5, 0x18, 0xd1, 0xf9,
    0xd5, 0x18, 0xc1, 0xf9, 0x02,
    0xd5, 0x18, 0xc1, 0xf9, 0x04,
    0xd5, 0x18, 0xc1, 0xf9, 0x08,
    0xd5, 0x18, 0xc1, 0xf9, 0x10,
    0xd5, 0x18, 0xd1, 0xfa,
    0xd5, 0x18, 0xc1, 0xfa, 0x02,
    0xd5, 0x18, 0xc1, 0xfa, 0x04,
    0xd5, 0x18, 0xc1, 0xfa, 0x08,
    0xd5, 0x18, 0xc1, 0xfa, 0x10,
    0xd5, 0x18, 0xd1, 0xfb,
    0xd5, 0x18, 0xc1, 0xfb, 0x02,
    0xd5, 0x18, 0xc1, 0xfb, 0x04,
    0xd5, 0x18, 0xc1, 0xfb, 0x08,
    0xd5, 0x18, 0xc1, 0xfb, 0x10,
    0xd5, 0x18, 0xd1, 0xfc,
    0xd5, 0x18, 0xc1, 0xfc, 0x02,
    0xd5, 0x18, 0xc1, 0xfc, 0x04,
    0xd5, 0x18, 0xc1, 0xfc, 0x08,
    0xd5, 0x18, 0xc1, 0xfc, 0x10,
    0xd5, 0x18, 0xd1, 0xfd,
    0xd5, 0x18, 0xc1, 0xfd, 0x02,
    0xd5, 0x18, 0xc1, 0xfd, 0x04,
    0xd5, 0x18, 0xc1, 0xfd, 0x08,
    0xd5, 0x18, 0xc1, 0xfd, 0x10,
    0xd5, 0x18, 0xd1, 0xfe,
    0xd5, 0x18, 0xc1, 0xfe, 0x02,
    0xd5, 0x18, 0xc1, 0xfe, 0x04,
    0xd5, 0x18, 0xc1, 0xfe, 0x08,
    0xd5, 0x18, 0xc1, 0xfe, 0x10,
    0xd5, 0x18, 0xd1, 0xff,
    0xd5, 0x18, 0xc1, 0xff, 0x02,
    0xd5, 0x18, 0xc1, 0xff, 0x04,
    0xd5, 0x18, 0xc1, 0xff, 0x08,
    0xd5, 0x18, 0xc1, 0xff, 0x10,
    0xd5, 0x19, 0xd1, 0xf8,
    0xd5, 0x19, 0xc1, 0xf8, 0x02,
    0xd5, 0x19, 0xc1, 0xf8, 0x04,
    0xd5, 0x19, 0xc1, 0xf8, 0x08,
    0xd5, 0x19, 0xc1, 0xf8, 0x10,
    0xd5, 0x19, 0xd1, 0xf9,
    0xd5, 0x19, 0xc1, 0xf9, 0x02,
    0xd5, 0x19, 0xc1, 0xf9, 0x04,
    0xd5, 0x19, 0xc1, 0xf9, 0x08,
    0xd5, 0x19, 0xc1, 0xf9, 0x10,
    0xd5, 0x19, 0xd1, 0xfa,
    0xd5, 0x19, 0xc1, 0xfa, 0x02,
    0xd5, 0x19, 0xc1, 0xfa, 0x04,
    0xd5, 0x19, 0xc1, 0xfa, 0x08,
    0xd5, 0x19, 0xc1, 0xfa, 0x10,
    0xd5, 0x19, 0xd1, 0xfb,
    0xd5, 0x19, 0xc1, 0xfb, 0x02,
    0xd5, 0x19, 0xc1, 0xfb, 0x04,
    0xd5, 0x19, 0xc1, 0xfb, 0x08,
    0xd5, 0x19, 0xc1, 0xfb, 0x10,
    0xd5, 0x19, 0xd1, 0xfc,
    0xd5, 0x19, 0xc1, 0xfc, 0x02,
    0xd5, 0x19, 0xc1, 0xfc, 0x04,
    0xd5, 0x19, 0xc1, 0xfc, 0x08,
    0xd5, 0x19, 0xc1, 0xfc, 0x10,
    0xd5, 0x19, 0xd1, 0xfd,
    0xd5, 0x19, 0xc1, 0xfd, 0x02,
    0xd5, 0x19, 0xc1, 0xfd, 0x04,
    0xd5, 0x19, 0xc1, 0xfd, 0x08,
    0xd5, 0x19, 0xc1, 0xfd, 0x10,
    0xd5, 0x19, 0xd1, 0xfe,
    0xd5, 0x19, 0xc1, 0xfe, 0x02,
    0xd5, 0x19, 0xc1, 0xfe, 0x04,
    0xd5, 0x19, 0xc1, 0xfe, 0x08,
    0xd5, 0x19, 0xc1, 0xfe, 0x10,
    0xd5, 0x19, 0xd1, 0xff,
    0xd5, 0x19, 0xc1, 0xff, 0x02,
    0xd5, 0x19, 0xc1, 0xff, 0x04,
    0xd5, 0x19, 0xc1, 0xff, 0x08,
    0xd5, 0x19, 0xc1, 0xff, 0x10,
    0x48, 0x83, 0xd9, 0x01,
    0x48, 0x83, 0xd9, 0x10,
    0x48, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xda, 0x01,
    0x48, 0x83, 0xda, 0x10,
    0x48, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xdb, 0x01,
    0x48, 0x83, 0xdb, 0x10,
    0x48, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd8, 0x01,
    0x49, 0x83, 0xd8, 0x10,
    0x49, 0x81, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xd9, 0x01,
    0x49, 0x83, 0xd9, 0x10,
    0x49, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xda, 0x01,
    0x49, 0x83, 0xda, 0x10,
    0x49, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xdb, 0x01,
    0x49, 0x83, 0xdb, 0x10,
    0x49, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xdc, 0x01,
    0x49, 0x83, 0xdc, 0x10,
    0x49, 0x81, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xdd, 0x01,
    0x49, 0x83, 0xdd, 0x10,
    0x49, 0x81, 0xdd, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xdd, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xdd, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xdd, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xde, 0x01,
    0x49, 0x83, 0xde, 0x10,
    0x49, 0x81, 0xde, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xde, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xde, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xde, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xde, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xde, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xdf, 0x01,
    0x49, 0x83, 0xdf, 0x10,
    0x49, 0x81, 0xdf, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xdf, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xdf, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xdf, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd8, 0x01,
    0xd5, 0x18, 0x83, 0xd8, 0x10,
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xd9, 0x01,
    0xd5, 0x18, 0x83, 0xd9, 0x10,
    0xd5, 0x18, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xda, 0x01,
    0xd5, 0x18, 0x83, 0xda, 0x10,
    0xd5, 0x18, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xdb, 0x01,
    0xd5, 0x18, 0x83, 0xdb, 0x10,
    0xd5, 0x18, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xdc, 0x01,
    0xd5, 0x18, 0x83, 0xdc, 0x10,
    0xd5, 0x18, 0x81, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xdd, 0x01,
    0xd5, 0x18, 0x83, 0xdd, 0x10,
    0xd5, 0x18, 0x81, 0xdd, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdd, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdd, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xdd, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xde, 0x01,
    0xd5, 0x18, 0x83, 0xde, 0x10,
    0xd5, 0x18, 0x81, 0xde, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xde, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xde, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xde, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xde, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xde, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xdf, 0x01,
    0xd5, 0x18, 0x83, 0xdf, 0x10,
    0xd5, 0x18, 0x81, 0xdf, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdf, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xdf, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xdf, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd8, 0x01,
    0xd5, 0x19, 0x83, 0xd8, 0x10,
    0xd5, 0x19, 0x81, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xd9, 0x01,
    0xd5, 0x19, 0x83, 0xd9, 0x10,
    0xd5, 0x19, 0x81, 0xd9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xd9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xd9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xd9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xda, 0x01,
    0xd5, 0x19, 0x83, 0xda, 0x10,
    0xd5, 0x19, 0x81, 0xda, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xda, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xda, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xda, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xda, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xda, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xdb, 0x01,
    0xd5, 0x19, 0x83, 0xdb, 0x10,
    0xd5, 0x19, 0x81, 0xdb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xdb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xdb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xdc, 0x01,
    0xd5, 0x19, 0x83, 0xdc, 0x10,
    0xd5, 0x19, 0x81, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xdd, 0x01,
    0xd5, 0x19, 0x83, 0xdd, 0x10,
    0xd5, 0x19, 0x81, 0xdd, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdd, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdd, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xdd, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xdd, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xde, 0x01,
    0xd5, 0x19, 0x83, 0xde, 0x10,
    0xd5, 0x19, 0x81, 0xde, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xde, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xde, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xde, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xde, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xde, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xdf, 0x01,
    0xd5, 0x19, 0x83, 0xdf, 0x10,
    0xd5, 0x19, 0x81, 0xdf, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdf, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xdf, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xdf, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xdf, 0x00, 0x00, 0x00, 0x10,
    0x48, 0xd1, 0xe1,
    0x48, 0xc1, 0xe1, 0x02,
    0x48, 0xc1, 0xe1, 0x04,
    0x48, 0xc1, 0xe1, 0x08,
    0x48, 0xc1, 0xe1, 0x10,
    0x48, 0xd1, 0xe2,
    0x48, 0xc1, 0xe2, 0x02,
    0x48, 0xc1, 0xe2, 0x04,
    0x48, 0xc1, 0xe2, 0x08,
    0x48, 0xc1, 0xe2, 0x10,
    0x48, 0xd1, 0xe3,
    0x48, 0xc1, 0xe3, 0x02,
    0x48, 0xc1, 0xe3, 0x04,
    0x48, 0xc1, 0xe3, 0x08,
    0x48, 0xc1, 0xe3, 0x10,
    0x49, 0xd1, 0xe0,
    0x49, 0xc1, 0xe0, 0x02,
    0x49, 0xc1, 0xe0, 0x04,
    0x49, 0xc1, 0xe0, 0x08,
    0x49, 0xc1, 0xe0, 0x10,
    0x49, 0xd1, 0xe1,
    0x49, 0xc1, 0xe1, 0x02,
    0x49, 0xc1, 0xe1, 0x04,
    0x49, 0xc1, 0xe1, 0x08,
    0x49, 0xc1, 0xe1, 0x10,
    0x49, 0xd1, 0xe2,
    0x49, 0xc1, 0xe2, 0x02,
    0x49, 0xc1, 0xe2, 0x04,
    0x49, 0xc1, 0xe2, 0x08,
    0x49, 0xc1, 0xe2, 0x10,
    0x49, 0xd1, 0xe3,
    0x49, 0xc1, 0xe3, 0x02,
    0x49, 0xc1, 0xe3, 0x04,
    0x49, 0xc1, 0xe3, 0x08,
    0x49, 0xc1, 0xe3, 0x10,
    0x49, 0xd1, 0xe4,
    0x49, 0xc1, 0xe4, 0x02,
    0x49, 0xc1, 0xe4, 0x04,
    0x49, 0xc1, 0xe4, 0x08,
    0x49, 0xc1, 0xe4, 0x10,
    0x49, 0xd1, 0xe5,
    0x49, 0xc1, 0xe5, 0x02,
    0x49, 0xc1, 0xe5, 0x04,
    0x49, 0xc1, 0xe5, 0x08,
    0x49, 0xc1, 0xe5, 0x10,
    0x49, 0xd1, 0xe6,
    0x49, 0xc1, 0xe6, 0x02,
    0x49, 0xc1, 0xe6, 0x04,
    0x49, 0xc1, 0xe6, 0x08,
    0x49, 0xc1, 0xe6, 0x10,
    0x49, 0xd1, 0xe7,
    0x49, 0xc1, 0xe7, 0x02,
    0x49, 0xc1, 0xe7, 0x04,
    0x49, 0xc1, 0xe7, 0x08,
    0x49, 0xc1, 0xe7, 0x10,
    0xd5, 0x18, 0xd1, 0xe0,
    0xd5, 0x18, 0xc1, 0xe0, 0x02,
    0xd5, 0x18, 0xc1, 0xe0, 0x04,
    0xd5, 0x18, 0xc1, 0xe0, 0x08,
    0xd5, 0x18, 0xc1, 0xe0, 0x10,
    0xd5, 0x18, 0xd1, 0xe1,
    0xd5, 0x18, 0xc1, 0xe1, 0x02,
    0xd5, 0x18, 0xc1, 0xe1, 0x04,
    0xd5, 0x18, 0xc1, 0xe1, 0x08,
    0xd5, 0x18, 0xc1, 0xe1, 0x10,
    0xd5, 0x18, 0xd1, 0xe2,
    0xd5, 0x18, 0xc1, 0xe2, 0x02,
    0xd5, 0x18, 0xc1, 0xe2, 0x04,
    0xd5, 0x18, 0xc1, 0xe2, 0x08,
    0xd5, 0x18, 0xc1, 0xe2, 0x10,
    0xd5, 0x18, 0xd1, 0xe3,
    0xd5, 0x18, 0xc1, 0xe3, 0x02,
    0xd5, 0x18, 0xc1, 0xe3, 0x04,
    0xd5, 0x18, 0xc1, 0xe3, 0x08,
    0xd5, 0x18, 0xc1, 0xe3, 0x10,
    0xd5, 0x18, 0xd1, 0xe4,
    0xd5, 0x18, 0xc1, 0xe4, 0x02,
    0xd5, 0x18, 0xc1, 0xe4, 0x04,
    0xd5, 0x18, 0xc1, 0xe4, 0x08,
    0xd5, 0x18, 0xc1, 0xe4, 0x10,
    0xd5, 0x18, 0xd1, 0xe5,
    0xd5, 0x18, 0xc1, 0xe5, 0x02,
    0xd5, 0x18, 0xc1, 0xe5, 0x04,
    0xd5, 0x18, 0xc1, 0xe5, 0x08,
    0xd5, 0x18, 0xc1, 0xe5, 0x10,
    0xd5, 0x18, 0xd1, 0xe6,
    0xd5, 0x18, 0xc1, 0xe6, 0x02,
    0xd5, 0x18, 0xc1, 0xe6, 0x04,
    0xd5, 0x18, 0xc1, 0xe6, 0x08,
    0xd5, 0x18, 0xc1, 0xe6, 0x10,
    0xd5, 0x18, 0xd1, 0xe7,
    0xd5, 0x18, 0xc1, 0xe7, 0x02,
    0xd5, 0x18, 0xc1, 0xe7, 0x04,
    0xd5, 0x18, 0xc1, 0xe7, 0x08,
    0xd5, 0x18, 0xc1, 0xe7, 0x10,
    0xd5, 0x19, 0xd1, 0xe0,
    0xd5, 0x19, 0xc1, 0xe0, 0x02,
    0xd5, 0x19, 0xc1, 0xe0, 0x04,
    0xd5, 0x19, 0xc1, 0xe0, 0x08,
    0xd5, 0x19, 0xc1, 0xe0, 0x10,
    0xd5, 0x19, 0xd1, 0xe1,
    0xd5, 0x19, 0xc1, 0xe1, 0x02,
    0xd5, 0x19, 0xc1, 0xe1, 0x04,
    0xd5, 0x19, 0xc1, 0xe1, 0x08,
    0xd5, 0x19, 0xc1, 0xe1, 0x10,
    0xd5, 0x19, 0xd1, 0xe2,
    0xd5, 0x19, 0xc1, 0xe2, 0x02,
    0xd5, 0x19, 0xc1, 0xe2, 0x04,
    0xd5, 0x19, 0xc1, 0xe2, 0x08,
    0xd5, 0x19, 0xc1, 0xe2, 0x10,
    0xd5, 0x19, 0xd1, 0xe3,
    0xd5, 0x19, 0xc1, 0xe3, 0x02,
    0xd5, 0x19, 0xc1, 0xe3, 0x04,
    0xd5, 0x19, 0xc1, 0xe3, 0x08,
    0xd5, 0x19, 0xc1, 0xe3, 0x10,
    0xd5, 0x19, 0xd1, 0xe4,
    0xd5, 0x19, 0xc1, 0xe4, 0x02,
    0xd5, 0x19, 0xc1, 0xe4, 0x04,
    0xd5, 0x19, 0xc1, 0xe4, 0x08,
    0xd5, 0x19, 0xc1, 0xe4, 0x10,
    0xd5, 0x19, 0xd1, 0xe5,
    0xd5, 0x19, 0xc1, 0xe5, 0x02,
    0xd5, 0x19, 0xc1, 0xe5, 0x04,
    0xd5, 0x19, 0xc1, 0xe5, 0x08,
    0xd5, 0x19, 0xc1, 0xe5, 0x10,
    0xd5, 0x19, 0xd1, 0xe6,
    0xd5, 0x19, 0xc1, 0xe6, 0x02,
    0xd5, 0x19, 0xc1, 0xe6, 0x04,
    0xd5, 0x19, 0xc1, 0xe6, 0x08,
    0xd5, 0x19, 0xc1, 0xe6, 0x10,
    0xd5, 0x19, 0xd1, 0xe7,
    0xd5, 0x19, 0xc1, 0xe7, 0x02,
    0xd5, 0x19, 0xc1, 0xe7, 0x04,
    0xd5, 0x19, 0xc1, 0xe7, 0x08,
    0xd5, 0x19, 0xc1, 0xe7, 0x10,
    0x48, 0xd1, 0xe9,
    0x48, 0xc1, 0xe9, 0x02,
    0x48, 0xc1, 0xe9, 0x04,
    0x48, 0xc1, 0xe9, 0x08,
    0x48, 0xc1, 0xe9, 0x10,
    0x48, 0xd1, 0xea,
    0x48, 0xc1, 0xea, 0x02,
    0x48, 0xc1, 0xea, 0x04,
    0x48, 0xc1, 0xea, 0x08,
    0x48, 0xc1, 0xea, 0x10,
    0x48, 0xd1, 0xeb,
    0x48, 0xc1, 0xeb, 0x02,
    0x48, 0xc1, 0xeb, 0x04,
    0x48, 0xc1, 0xeb, 0x08,
    0x48, 0xc1, 0xeb, 0x10,
    0x49, 0xd1, 0xe8,
    0x49, 0xc1, 0xe8, 0x02,
    0x49, 0xc1, 0xe8, 0x04,
    0x49, 0xc1, 0xe8, 0x08,
    0x49, 0xc1, 0xe8, 0x10,
    0x49, 0xd1, 0xe9,
    0x49, 0xc1, 0xe9, 0x02,
    0x49, 0xc1, 0xe9, 0x04,
    0x49, 0xc1, 0xe9, 0x08,
    0x49, 0xc1, 0xe9, 0x10,
    0x49, 0xd1, 0xea,
    0x49, 0xc1, 0xea, 0x02,
    0x49, 0xc1, 0xea, 0x04,
    0x49, 0xc1, 0xea, 0x08,
    0x49, 0xc1, 0xea, 0x10,
    0x49, 0xd1, 0xeb,
    0x49, 0xc1, 0xeb, 0x02,
    0x49, 0xc1, 0xeb, 0x04,
    0x49, 0xc1, 0xeb, 0x08,
    0x49, 0xc1, 0xeb, 0x10,
    0x49, 0xd1, 0xec,
    0x49, 0xc1, 0xec, 0x02,
    0x49, 0xc1, 0xec, 0x04,
    0x49, 0xc1, 0xec, 0x08,
    0x49, 0xc1, 0xec, 0x10,
    0x49, 0xd1, 0xed,
    0x49, 0xc1, 0xed, 0x02,
    0x49, 0xc1, 0xed, 0x04,
    0x49, 0xc1, 0xed, 0x08,
    0x49, 0xc1, 0xed, 0x10,
    0x49, 0xd1, 0xee,
    0x49, 0xc1, 0xee, 0x02,
    0x49, 0xc1, 0xee, 0x04,
    0x49, 0xc1, 0xee, 0x08,
    0x49, 0xc1, 0xee, 0x10,
    0x49, 0xd1, 0xef,
    0x49, 0xc1, 0xef, 0x02,
    0x49, 0xc1, 0xef, 0x04,
    0x49, 0xc1, 0xef, 0x08,
    0x49, 0xc1, 0xef, 0x10,
    0xd5, 0x18, 0xd1, 0xe8,
    0xd5, 0x18, 0xc1, 0xe8, 0x02,
    0xd5, 0x18, 0xc1, 0xe8, 0x04,
    0xd5, 0x18, 0xc1, 0xe8, 0x08,
    0xd5, 0x18, 0xc1, 0xe8, 0x10,
    0xd5, 0x18, 0xd1, 0xe9,
    0xd5, 0x18, 0xc1, 0xe9, 0x02,
    0xd5, 0x18, 0xc1, 0xe9, 0x04,
    0xd5, 0x18, 0xc1, 0xe9, 0x08,
    0xd5, 0x18, 0xc1, 0xe9, 0x10,
    0xd5, 0x18, 0xd1, 0xea,
    0xd5, 0x18, 0xc1, 0xea, 0x02,
    0xd5, 0x18, 0xc1, 0xea, 0x04,
    0xd5, 0x18, 0xc1, 0xea, 0x08,
    0xd5, 0x18, 0xc1, 0xea, 0x10,
    0xd5, 0x18, 0xd1, 0xeb,
    0xd5, 0x18, 0xc1, 0xeb, 0x02,
    0xd5, 0x18, 0xc1, 0xeb, 0x04,
    0xd5, 0x18, 0xc1, 0xeb, 0x08,
    0xd5, 0x18, 0xc1, 0xeb, 0x10,
    0xd5, 0x18, 0xd1, 0xec,
    0xd5, 0x18, 0xc1, 0xec, 0x02,
    0xd5, 0x18, 0xc1, 0xec, 0x04,
    0xd5, 0x18, 0xc1, 0xec, 0x08,
    0xd5, 0x18, 0xc1, 0xec, 0x10,
    0xd5, 0x18, 0xd1, 0xed,
    0xd5, 0x18, 0xc1, 0xed, 0x02,
    0xd5, 0x18, 0xc1, 0xed, 0x04,
    0xd5, 0x18, 0xc1, 0xed, 0x08,
    0xd5, 0x18, 0xc1, 0xed, 0x10,
    0xd5, 0x18, 0xd1, 0xee,
    0xd5, 0x18, 0xc1, 0xee, 0x02,
    0xd5, 0x18, 0xc1, 0xee, 0x04,
    0xd5, 0x18, 0xc1, 0xee, 0x08,
    0xd5, 0x18, 0xc1, 0xee, 0x10,
    0xd5, 0x18, 0xd1, 0xef,
    0xd5, 0x18, 0xc1, 0xef, 0x02,
    0xd5, 0x18, 0xc1, 0xef, 0x04,
    0xd5, 0x18, 0xc1, 0xef, 0x08,
    0xd5, 0x18, 0xc1, 0xef, 0x10,
    0xd5, 0x19, 0xd1, 0xe8,
    0xd5, 0x19, 0xc1, 0xe8, 0x02,
    0xd5, 0x19, 0xc1, 0xe8, 0x04,
    0xd5, 0x19, 0xc1, 0xe8, 0x08,
    0xd5, 0x19, 0xc1, 0xe8, 0x10,
    0xd5, 0x19, 0xd1, 0xe9,
    0xd5, 0x19, 0xc1, 0xe9, 0x02,
    0xd5, 0x19, 0xc1, 0xe9, 0x04,
    0xd5, 0x19, 0xc1, 0xe9, 0x08,
    0xd5, 0x19, 0xc1, 0xe9, 0x10,
    0xd5, 0x19, 0xd1, 0xea,
    0xd5, 0x19, 0xc1, 0xea, 0x02,
    0xd5, 0x19, 0xc1, 0xea, 0x04,
    0xd5, 0x19, 0xc1, 0xea, 0x08,
    0xd5, 0x19, 0xc1, 0xea, 0x10,
    0xd5, 0x19, 0xd1, 0xeb,
    0xd5, 0x19, 0xc1, 0xeb, 0x02,
    0xd5, 0x19, 0xc1, 0xeb, 0x04,
    0xd5, 0x19, 0xc1, 0xeb, 0x08,
    0xd5, 0x19, 0xc1, 0xeb, 0x10,
    0xd5, 0x19, 0xd1, 0xec,
    0xd5, 0x19, 0xc1, 0xec, 0x02,
    0xd5, 0x19, 0xc1, 0xec, 0x04,
    0xd5, 0x19, 0xc1, 0xec, 0x08,
    0xd5, 0x19, 0xc1, 0xec, 0x10,
    0xd5, 0x19, 0xd1, 0xed,
    0xd5, 0x19, 0xc1, 0xed, 0x02,
    0xd5, 0x19, 0xc1, 0xed, 0x04,
    0xd5, 0x19, 0xc1, 0xed, 0x08,
    0xd5, 0x19, 0xc1, 0xed, 0x10,
    0xd5, 0x19, 0xd1, 0xee,
    0xd5, 0x19, 0xc1, 0xee, 0x02,
    0xd5, 0x19, 0xc1, 0xee, 0x04,
    0xd5, 0x19, 0xc1, 0xee, 0x08,
    0xd5, 0x19, 0xc1, 0xee, 0x10,
    0xd5, 0x19, 0xd1, 0xef,
    0xd5, 0x19, 0xc1, 0xef, 0x02,
    0xd5, 0x19, 0xc1, 0xef, 0x04,
    0xd5, 0x19, 0xc1, 0xef, 0x08,
    0xd5, 0x19, 0xc1, 0xef, 0x10,
    0x48, 0x83, 0xe9, 0x01,
    0x48, 0x83, 0xe9, 0x10,
    0x48, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xea, 0x01,
    0x48, 0x83, 0xea, 0x10,
    0x48, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xeb, 0x01,
    0x48, 0x83, 0xeb, 0x10,
    0x48, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe8, 0x01,
    0x49, 0x83, 0xe8, 0x10,
    0x49, 0x81, 0xe8, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xe9, 0x01,
    0x49, 0x83, 0xe9, 0x10,
    0x49, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xea, 0x01,
    0x49, 0x83, 0xea, 0x10,
    0x49, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xeb, 0x01,
    0x49, 0x83, 0xeb, 0x10,
    0x49, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xec, 0x01,
    0x49, 0x83, 0xec, 0x10,
    0x49, 0x81, 0xec, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xed, 0x01,
    0x49, 0x83, 0xed, 0x10,
    0x49, 0x81, 0xed, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xee, 0x01,
    0x49, 0x83, 0xee, 0x10,
    0x49, 0x81, 0xee, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xef, 0x01,
    0x49, 0x83, 0xef, 0x10,
    0x49, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe8, 0x01,
    0xd5, 0x18, 0x83, 0xe8, 0x10,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xe9, 0x01,
    0xd5, 0x18, 0x83, 0xe9, 0x10,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xea, 0x01,
    0xd5, 0x18, 0x83, 0xea, 0x10,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xeb, 0x01,
    0xd5, 0x18, 0x83, 0xeb, 0x10,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xec, 0x01,
    0xd5, 0x18, 0x83, 0xec, 0x10,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xed, 0x01,
    0xd5, 0x18, 0x83, 0xed, 0x10,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xee, 0x01,
    0xd5, 0x18, 0x83, 0xee, 0x10,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xef, 0x01,
    0xd5, 0x18, 0x83, 0xef, 0x10,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe8, 0x01,
    0xd5, 0x19, 0x83, 0xe8, 0x10,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xe9, 0x01,
    0xd5, 0x19, 0x83, 0xe9, 0x10,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xea, 0x01,
    0xd5, 0x19, 0x83, 0xea, 0x10,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xeb, 0x01,
    0xd5, 0x19, 0x83, 0xeb, 0x10,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xec, 0x01,
    0xd5, 0x19, 0x83, 0xec, 0x10,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xed, 0x01,
    0xd5, 0x19, 0x83, 0xed, 0x10,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xee, 0x01,
    0xd5, 0x19, 0x83, 0xee, 0x10,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xef, 0x01,
    0xd5, 0x19, 0x83, 0xef, 0x10,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xf1, 0x01,
    0x48, 0x83, 0xf1, 0x10,
    0x48, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xf2, 0x01,
    0x48, 0x83, 0xf2, 0x10,
    0x48, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x83, 0xf3, 0x01,
    0x48, 0x83, 0xf3, 0x10,
    0x48, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf0, 0x01,
    0x49, 0x83, 0xf0, 0x10,
    0x49, 0x81, 0xf0, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf0, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf0, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf0, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf1, 0x01,
    0x49, 0x83, 0xf1, 0x10,
    0x49, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf2, 0x01,
    0x49, 0x83, 0xf2, 0x10,
    0x49, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf3, 0x01,
    0x49, 0x83, 0xf3, 0x10,
    0x49, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf4, 0x01,
    0x49, 0x83, 0xf4, 0x10,
    0x49, 0x81, 0xf4, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf4, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf4, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf4, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf5, 0x01,
    0x49, 0x83, 0xf5, 0x10,
    0x49, 0x81, 0xf5, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf5, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf5, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf5, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf6, 0x01,
    0x49, 0x83, 0xf6, 0x10,
    0x49, 0x81, 0xf6, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf6, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf6, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf6, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x83, 0xf7, 0x01,
    0x49, 0x83, 0xf7, 0x10,
    0x49, 0x81, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x81, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf0, 0x01,
    0xd5, 0x18, 0x83, 0xf0, 0x10,
    0xd5, 0x18, 0x81, 0xf0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf1, 0x01,
    0xd5, 0x18, 0x83, 0xf1, 0x10,
    0xd5, 0x18, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf2, 0x01,
    0xd5, 0x18, 0x83, 0xf2, 0x10,
    0xd5, 0x18, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf3, 0x01,
    0xd5, 0x18, 0x83, 0xf3, 0x10,
    0xd5, 0x18, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf4, 0x01,
    0xd5, 0x18, 0x83, 0xf4, 0x10,
    0xd5, 0x18, 0x81, 0xf4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf5, 0x01,
    0xd5, 0x18, 0x83, 0xf5, 0x10,
    0xd5, 0x18, 0x81, 0xf5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf6, 0x01,
    0xd5, 0x18, 0x83, 0xf6, 0x10,
    0xd5, 0x18, 0x81, 0xf6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x83, 0xf7, 0x01,
    0xd5, 0x18, 0x83, 0xf7, 0x10,
    0xd5, 0x18, 0x81, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x18, 0x81, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf0, 0x01,
    0xd5, 0x19, 0x83, 0xf0, 0x10,
    0xd5, 0x19, 0x81, 0xf0, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf0, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf0, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf0, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf1, 0x01,
    0xd5, 0x19, 0x83, 0xf1, 0x10,
    0xd5, 0x19, 0x81, 0xf1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf2, 0x01,
    0xd5, 0x19, 0x83, 0xf2, 0x10,
    0xd5, 0x19, 0x81, 0xf2, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf2, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf2, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf2, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf3, 0x01,
    0xd5, 0x19, 0x83, 0xf3, 0x10,
    0xd5, 0x19, 0x81, 0xf3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf4, 0x01,
    0xd5, 0x19, 0x83, 0xf4, 0x10,
    0xd5, 0x19, 0x81, 0xf4, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf4, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf4, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf4, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf4, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf5, 0x01,
    0xd5, 0x19, 0x83, 0xf5, 0x10,
    0xd5, 0x19, 0x81, 0xf5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf6, 0x01,
    0xd5, 0x19, 0x83, 0xf6, 0x10,
    0xd5, 0x19, 0x81, 0xf6, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf6, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf6, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf6, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf6, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x83, 0xf7, 0x01,
    0xd5, 0x19, 0x83, 0xf7, 0x10,
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x0f, 0x40, 0x0c, 0x1a,
    0x4a, 0x0f, 0x40, 0x14, 0x03,
    0x4b, 0x0f, 0x40, 0x1c, 0x08,
    0x4f, 0x0f, 0x40, 0x04, 0x11,
    0x4f, 0x0f, 0x40, 0x0c, 0x1a,
    0x4f, 0x0f, 0x40, 0x14, 0x23,
    0x4f, 0x0f, 0x40, 0x1c, 0x2c,
    0x4f, 0x0f, 0x40, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x40, 0x2c, 0x3e,
    0xd5, 0xad, 0x40, 0x34, 0x07,
    0xd5, 0xbc, 0x40, 0x3c, 0x08,
    0xd5, 0xf8, 0x40, 0x04, 0x11,
    0xd5, 0xf8, 0x40, 0x0c, 0x1a,
    0xd5, 0xf8, 0x40, 0x14, 0x23,
    0xd5, 0xf8, 0x40, 0x1c, 0x2c,
    0xd5, 0xf8, 0x40, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x40, 0x2c, 0x3e,
    0xd5, 0xfa, 0x40, 0x34, 0x07,
    0xd5, 0xfb, 0x40, 0x3c, 0x08,
    0xd5, 0xff, 0x40, 0x04, 0x11,
    0xd5, 0xff, 0x40, 0x0c, 0x1a,
    0xd5, 0xff, 0x40, 0x14, 0x23,
    0xd5, 0xff, 0x40, 0x1c, 0x2c,
    0xd5, 0xff, 0x40, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x40, 0x2c, 0x3e,
    0xd5, 0xdd, 0x40, 0x34, 0x0f,
    0xd5, 0xcc, 0x40, 0x3c, 0x11,
    0x48, 0x0f, 0x41, 0x0c, 0x1a,
    0x4a, 0x0f, 0x41, 0x14, 0x03,
    0x4b, 0x0f, 0x41, 0x1c, 0x08,
    0x4f, 0x0f, 0x41, 0x04, 0x11,
    0x4f, 0x0f, 0x41, 0x0c, 0x1a,
    0x4f, 0x0f, 0x41, 0x14, 0x23,
    0x4f, 0x0f, 0x41, 0x1c, 0x2c,
    0x4f, 0x0f, 0x41, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x41, 0x2c, 0x3e,
    0xd5, 0xad, 0x41, 0x34, 0x07,
    0xd5, 0xbc, 0x41, 0x3c, 0x08,
    0xd5, 0xf8, 0x41, 0x04, 0x11,
    0xd5, 0xf8, 0x41, 0x0c, 0x1a,
    0xd5, 0xf8, 0x41, 0x14, 0x23,
    0xd5, 0xf8, 0x41, 0x1c, 0x2c,
    0xd5, 0xf8, 0x41, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x41, 0x2c, 0x3e,
    0xd5, 0xfa, 0x41, 0x34, 0x07,
    0xd5, 0xfb, 0x41, 0x3c, 0x08,
    0xd5, 0xff, 0x41, 0x04, 0x11,
    0xd5, 0xff, 0x41, 0x0c, 0x1a,
    0xd5, 0xff, 0x41, 0x14, 0x23,
    0xd5, 0xff, 0x41, 0x1c, 0x2c,
    0xd5, 0xff, 0x41, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x41, 0x2c, 0x3e,
    0xd5, 0xdd, 0x41, 0x34, 0x0f,
    0xd5, 0xcc, 0x41, 0x3c, 0x11,
    0x48, 0x0f, 0x42, 0x0c, 0x1a,
    0x4a, 0x0f, 0x42, 0x14, 0x03,
    0x4b, 0x0f, 0x42, 0x1c, 0x08,
    0x4f, 0x0f, 0x42, 0x04, 0x11,
    0x4f, 0x0f, 0x42, 0x0c, 0x1a,
    0x4f, 0x0f, 0x42, 0x14, 0x23,
    0x4f, 0x0f, 0x42, 0x1c, 0x2c,
    0x4f, 0x0f, 0x42, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x42, 0x2c, 0x3e,
    0xd5, 0xad, 0x42, 0x34, 0x07,
    0xd5, 0xbc, 0x42, 0x3c, 0x08,
    0xd5, 0xf8, 0x42, 0x04, 0x11,
    0xd5, 0xf8, 0x42, 0x0c, 0x1a,
    0xd5, 0xf8, 0x42, 0x14, 0x23,
    0xd5, 0xf8, 0x42, 0x1c, 0x2c,
    0xd5, 0xf8, 0x42, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x42, 0x2c, 0x3e,
    0xd5, 0xfa, 0x42, 0x34, 0x07,
    0xd5, 0xfb, 0x42, 0x3c, 0x08,
    0xd5, 0xff, 0x42, 0x04, 0x11,
    0xd5, 0xff, 0x42, 0x0c, 0x1a,
    0xd5, 0xff, 0x42, 0x14, 0x23,
    0xd5, 0xff, 0x42, 0x1c, 0x2c,
    0xd5, 0xff, 0x42, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x42, 0x2c, 0x3e,
    0xd5, 0xdd, 0x42, 0x34, 0x0f,
    0xd5, 0xcc, 0x42, 0x3c, 0x11,
    0x48, 0x0f, 0x43, 0x0c, 0x1a,
    0x4a, 0x0f, 0x43, 0x14, 0x03,
    0x4b, 0x0f, 0x43, 0x1c, 0x08,
    0x4f, 0x0f, 0x43, 0x04, 0x11,
    0x4f, 0x0f, 0x43, 0x0c, 0x1a,
    0x4f, 0x0f, 0x43, 0x14, 0x23,
    0x4f, 0x0f, 0x43, 0x1c, 0x2c,
    0x4f, 0x0f, 0x43, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x43, 0x2c, 0x3e,
    0xd5, 0xad, 0x43, 0x34, 0x07,
    0xd5, 0xbc, 0x43, 0x3c, 0x08,
    0xd5, 0xf8, 0x43, 0x04, 0x11,
    0xd5, 0xf8, 0x43, 0x0c, 0x1a,
    0xd5, 0xf8, 0x43, 0x14, 0x23,
    0xd5, 0xf8, 0x43, 0x1c, 0x2c,
    0xd5, 0xf8, 0x43, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x43, 0x2c, 0x3e,
    0xd5, 0xfa, 0x43, 0x34, 0x07,
    0xd5, 0xfb, 0x43, 0x3c, 0x08,
    0xd5, 0xff, 0x43, 0x04, 0x11,
    0xd5, 0xff, 0x43, 0x0c, 0x1a,
    0xd5, 0xff, 0x43, 0x14, 0x23,
    0xd5, 0xff, 0x43, 0x1c, 0x2c,
    0xd5, 0xff, 0x43, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x43, 0x2c, 0x3e,
    0xd5, 0xdd, 0x43, 0x34, 0x0f,
    0xd5, 0xcc, 0x43, 0x3c, 0x11,
    0x48, 0x0f, 0x44, 0x0c, 0x1a,
    0x4a, 0x0f, 0x44, 0x14, 0x03,
    0x4b, 0x0f, 0x44, 0x1c, 0x08,
    0x4f, 0x0f, 0x44, 0x04, 0x11,
    0x4f, 0x0f, 0x44, 0x0c, 0x1a,
    0x4f, 0x0f, 0x44, 0x14, 0x23,
    0x4f, 0x0f, 0x44, 0x1c, 0x2c,
    0x4f, 0x0f, 0x44, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x44, 0x2c, 0x3e,
    0xd5, 0xad, 0x44, 0x34, 0x07,
    0xd5, 0xbc, 0x44, 0x3c, 0x08,
    0xd5, 0xf8, 0x44, 0x04, 0x11,
    0xd5, 0xf8, 0x44, 0x0c, 0x1a,
    0xd5, 0xf8, 0x44, 0x14, 0x23,
    0xd5, 0xf8, 0x44, 0x1c, 0x2c,
    0xd5, 0xf8, 0x44, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x44, 0x2c, 0x3e,
    0xd5, 0xfa, 0x44, 0x34, 0x07,
    0xd5, 0xfb, 0x44, 0x3c, 0x08,
    0xd5, 0xff, 0x44, 0x04, 0x11,
    0xd5, 0xff, 0x44, 0x0c, 0x1a,
    0xd5, 0xff, 0x44, 0x14, 0x23,
    0xd5, 0xff, 0x44, 0x1c, 0x2c,
    0xd5, 0xff, 0x44, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x44, 0x2c, 0x3e,
    0xd5, 0xdd, 0x44, 0x34, 0x0f,
    0xd5, 0xcc, 0x44, 0x3c, 0x11,
    0x48, 0x0f, 0x45, 0x0c, 0x1a,
    0x4a, 0x0f, 0x45, 0x14, 0x03,
    0x4b, 0x0f, 0x45, 0x1c, 0x08,
    0x4f, 0x0f, 0x45, 0x04, 0x11,
    0x4f, 0x0f, 0x45, 0x0c, 0x1a,
    0x4f, 0x0f, 0x45, 0x14, 0x23,
    0x4f, 0x0f, 0x45, 0x1c, 0x2c,
    0x4f, 0x0f, 0x45, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x45, 0x2c, 0x3e,
    0xd5, 0xad, 0x45, 0x34, 0x07,
    0xd5, 0xbc, 0x45, 0x3c, 0x08,
    0xd5, 0xf8, 0x45, 0x04, 0x11,
    0xd5, 0xf8, 0x45, 0x0c, 0x1a,
    0xd5, 0xf8, 0x45, 0x14, 0x23,
    0xd5, 0xf8, 0x45, 0x1c, 0x2c,
    0xd5, 0xf8, 0x45, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x45, 0x2c, 0x3e,
    0xd5, 0xfa, 0x45, 0x34, 0x07,
    0xd5, 0xfb, 0x45, 0x3c, 0x08,
    0xd5, 0xff, 0x45, 0x04, 0x11,
    0xd5, 0xff, 0x45, 0x0c, 0x1a,
    0xd5, 0xff, 0x45, 0x14, 0x23,
    0xd5, 0xff, 0x45, 0x1c, 0x2c,
    0xd5, 0xff, 0x45, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x45, 0x2c, 0x3e,
    0xd5, 0xdd, 0x45, 0x34, 0x0f,
    0xd5, 0xcc, 0x45, 0x3c, 0x11,
    0x48, 0x0f, 0x46, 0x0c, 0x1a,
    0x4a, 0x0f, 0x46, 0x14, 0x03,
    0x4b, 0x0f, 0x46, 0x1c, 0x08,
    0x4f, 0x0f, 0x46, 0x04, 0x11,
    0x4f, 0x0f, 0x46, 0x0c, 0x1a,
    0x4f, 0x0f, 0x46, 0x14, 0x23,
    0x4f, 0x0f, 0x46, 0x1c, 0x2c,
    0x4f, 0x0f, 0x46, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x46, 0x2c, 0x3e,
    0xd5, 0xad, 0x46, 0x34, 0x07,
    0xd5, 0xbc, 0x46, 0x3c, 0x08,
    0xd5, 0xf8, 0x46, 0x04, 0x11,
    0xd5, 0xf8, 0x46, 0x0c, 0x1a,
    0xd5, 0xf8, 0x46, 0x14, 0x23,
    0xd5, 0xf8, 0x46, 0x1c, 0x2c,
    0xd5, 0xf8, 0x46, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x46, 0x2c, 0x3e,
    0xd5, 0xfa, 0x46, 0x34, 0x07,
    0xd5, 0xfb, 0x46, 0x3c, 0x08,
    0xd5, 0xff, 0x46, 0x04, 0x11,
    0xd5, 0xff, 0x46, 0x0c, 0x1a,
    0xd5, 0xff, 0x46, 0x14, 0x23,
    0xd5, 0xff, 0x46, 0x1c, 0x2c,
    0xd5, 0xff, 0x46, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x46, 0x2c, 0x3e,
    0xd5, 0xdd, 0x46, 0x34, 0x0f,
    0xd5, 0xcc, 0x46, 0x3c, 0x11,
    0x48, 0x0f, 0x47, 0x0c, 0x1a,
    0x4a, 0x0f, 0x47, 0x14, 0x03,
    0x4b, 0x0f, 0x47, 0x1c, 0x08,
    0x4f, 0x0f, 0x47, 0x04, 0x11,
    0x4f, 0x0f, 0x47, 0x0c, 0x1a,
    0x4f, 0x0f, 0x47, 0x14, 0x23,
    0x4f, 0x0f, 0x47, 0x1c, 0x2c,
    0x4f, 0x0f, 0x47, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x47, 0x2c, 0x3e,
    0xd5, 0xad, 0x47, 0x34, 0x07,
    0xd5, 0xbc, 0x47, 0x3c, 0x08,
    0xd5, 0xf8, 0x47, 0x04, 0x11,
    0xd5, 0xf8, 0x47, 0x0c, 0x1a,
    0xd5, 0xf8, 0x47, 0x14, 0x23,
    0xd5, 0xf8, 0x47, 0x1c, 0x2c,
    0xd5, 0xf8, 0x47, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x47, 0x2c, 0x3e,
    0xd5, 0xfa, 0x47, 0x34, 0x07,
    0xd5, 0xfb, 0x47, 0x3c, 0x08,
    0xd5, 0xff, 0x47, 0x04, 0x11,
    0xd5, 0xff, 0x47, 0x0c, 0x1a,
    0xd5, 0xff, 0x47, 0x14, 0x23,
    0xd5, 0xff, 0x47, 0x1c, 0x2c,
    0xd5, 0xff, 0x47, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x47, 0x2c, 0x3e,
    0xd5, 0xdd, 0x47, 0x34, 0x0f,
    0xd5, 0xcc, 0x47, 0x3c, 0x11,
    0x48, 0x0f, 0x48, 0x0c, 0x1a,
    0x4a, 0x0f, 0x48, 0x14, 0x03,
    0x4b, 0x0f, 0x48, 0x1c, 0x08,
    0x4f, 0x0f, 0x48, 0x04, 0x11,
    0x4f, 0x0f, 0x48, 0x0c, 0x1a,
    0x4f, 0x0f, 0x48, 0x14, 0x23,
    0x4f, 0x0f, 0x48, 0x1c, 0x2c,
    0x4f, 0x0f, 0x48, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x48, 0x2c, 0x3e,
    0xd5, 0xad, 0x48, 0x34, 0x07,
    0xd5, 0xbc, 0x48, 0x3c, 0x08,
    0xd5, 0xf8, 0x48, 0x04, 0x11,
    0xd5, 0xf8, 0x48, 0x0c, 0x1a,
    0xd5, 0xf8, 0x48, 0x14, 0x23,
    0xd5, 0xf8, 0x48, 0x1c, 0x2c,
    0xd5, 0xf8, 0x48, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x48, 0x2c, 0x3e,
    0xd5, 0xfa, 0x48, 0x34, 0x07,
    0xd5, 0xfb, 0x48, 0x3c, 0x08,
    0xd5, 0xff, 0x48, 0x04, 0x11,
    0xd5, 0xff, 0x48, 0x0c, 0x1a,
    0xd5, 0xff, 0x48, 0x14, 0x23,
    0xd5, 0xff, 0x48, 0x1c, 0x2c,
    0xd5, 0xff, 0x48, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x48, 0x2c, 0x3e,
    0xd5, 0xdd, 0x48, 0x34, 0x0f,
    0xd5, 0xcc, 0x48, 0x3c, 0x11,
    0x48, 0x0f, 0x49, 0x0c, 0x1a,
    0x4a, 0x0f, 0x49, 0x14, 0x03,
    0x4b, 0x0f, 0x49, 0x1c, 0x08,
    0x4f, 0x0f, 0x49, 0x04, 0x11,
    0x4f, 0x0f, 0x49, 0x0c, 0x1a,
    0x4f, 0x0f, 0x49, 0x14, 0x23,
    0x4f, 0x0f, 0x49, 0x1c, 0x2c,
    0x4f, 0x0f, 0x49, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x49, 0x2c, 0x3e,
    0xd5, 0xad, 0x49, 0x34, 0x07,
    0xd5, 0xbc, 0x49, 0x3c, 0x08,
    0xd5, 0xf8, 0x49, 0x04, 0x11,
    0xd5, 0xf8, 0x49, 0x0c, 0x1a,
    0xd5, 0xf8, 0x49, 0x14, 0x23,
    0xd5, 0xf8, 0x49, 0x1c, 0x2c,
    0xd5, 0xf8, 0x49, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x49, 0x2c, 0x3e,
    0xd5, 0xfa, 0x49, 0x34, 0x07,
    0xd5, 0xfb, 0x49, 0x3c, 0x08,
    0xd5, 0xff, 0x49, 0x04, 0x11,
    0xd5, 0xff, 0x49, 0x0c, 0x1a,
    0xd5, 0xff, 0x49, 0x14, 0x23,
    0xd5, 0xff, 0x49, 0x1c, 0x2c,
    0xd5, 0xff, 0x49, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x49, 0x2c, 0x3e,
    0xd5, 0xdd, 0x49, 0x34, 0x0f,
    0xd5, 0xcc, 0x49, 0x3c, 0x11,
    0x48, 0x0f, 0x4a, 0x0c, 0x1a,
    0x4a, 0x0f, 0x4a, 0x14, 0x03,
    0x4b, 0x0f, 0x4a, 0x1c, 0x08,
    0x4f, 0x0f, 0x4a, 0x04, 0x11,
    0x4f, 0x0f, 0x4a, 0x0c, 0x1a,
    0x4f, 0x0f, 0x4a, 0x14, 0x23,
    0x4f, 0x0f, 0x4a, 0x1c, 0x2c,
    0x4f, 0x0f, 0x4a, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x4a, 0x2c, 0x3e,
    0xd5, 0xad, 0x4a, 0x34, 0x07,
    0xd5, 0xbc, 0x4a, 0x3c, 0x08,
    0xd5, 0xf8, 0x4a, 0x04, 0x11,
    0xd5, 0xf8, 0x4a, 0x0c, 0x1a,
    0xd5, 0xf8, 0x4a, 0x14, 0x23,
    0xd5, 0xf8, 0x4a, 0x1c, 0x2c,
    0xd5, 0xf8, 0x4a, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x4a, 0x2c, 0x3e,
    0xd5, 0xfa, 0x4a, 0x34, 0x07,
    0xd5, 0xfb, 0x4a, 0x3c, 0x08,
    0xd5, 0xff, 0x4a, 0x04, 0x11,
    0xd5, 0xff, 0x4a, 0x0c, 0x1a,
    0xd5, 0xff, 0x4a, 0x14, 0x23,
    0xd5, 0xff, 0x4a, 0x1c, 0x2c,
    0xd5, 0xff, 0x4a, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x4a, 0x2c, 0x3e,
    0xd5, 0xdd, 0x4a, 0x34, 0x0f,
    0xd5, 0xcc, 0x4a, 0x3c, 0x11,
    0x48, 0x0f, 0x4b, 0x0c, 0x1a,
    0x4a, 0x0f, 0x4b, 0x14, 0x03,
    0x4b, 0x0f, 0x4b, 0x1c, 0x08,
    0x4f, 0x0f, 0x4b, 0x04, 0x11,
    0x4f, 0x0f, 0x4b, 0x0c, 0x1a,
    0x4f, 0x0f, 0x4b, 0x14, 0x23,
    0x4f, 0x0f, 0x4b, 0x1c, 0x2c,
    0x4f, 0x0f, 0x4b, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x4b, 0x2c, 0x3e,
    0xd5, 0xad, 0x4b, 0x34, 0x07,
    0xd5, 0xbc, 0x4b, 0x3c, 0x08,
    0xd5, 0xf8, 0x4b, 0x04, 0x11,
    0xd5, 0xf8, 0x4b, 0x0c, 0x1a,
    0xd5, 0xf8, 0x4b, 0x14, 0x23,
    0xd5, 0xf8, 0x4b, 0x1c, 0x2c,
    0xd5, 0xf8, 0x4b, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x4b, 0x2c, 0x3e,
    0xd5, 0xfa, 0x4b, 0x34, 0x07,
    0xd5, 0xfb, 0x4b, 0x3c, 0x08,
    0xd5, 0xff, 0x4b, 0x04, 0x11,
    0xd5, 0xff, 0x4b, 0x0c, 0x1a,
    0xd5, 0xff, 0x4b, 0x14, 0x23,
    0xd5, 0xff, 0x4b, 0x1c, 0x2c,
    0xd5, 0xff, 0x4b, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x4b, 0x2c, 0x3e,
    0xd5, 0xdd, 0x4b, 0x34, 0x0f,
    0xd5, 0xcc, 0x4b, 0x3c, 0x11,
    0x48, 0x0f, 0x4c, 0x0c, 0x1a,
    0x4a, 0x0f, 0x4c, 0x14, 0x03,
    0x4b, 0x0f, 0x4c, 0x1c, 0x08,
    0x4f, 0x0f, 0x4c, 0x04, 0x11,
    0x4f, 0x0f, 0x4c, 0x0c, 0x1a,
    0x4f, 0x0f, 0x4c, 0x14, 0x23,
    0x4f, 0x0f, 0x4c, 0x1c, 0x2c,
    0x4f, 0x0f, 0x4c, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x4c, 0x2c, 0x3e,
    0xd5, 0xad, 0x4c, 0x34, 0x07,
    0xd5, 0xbc, 0x4c, 0x3c, 0x08,
    0xd5, 0xf8, 0x4c, 0x04, 0x11,
    0xd5, 0xf8, 0x4c, 0x0c, 0x1a,
    0xd5, 0xf8, 0x4c, 0x14, 0x23,
    0xd5, 0xf8, 0x4c, 0x1c, 0x2c,
    0xd5, 0xf8, 0x4c, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x4c, 0x2c, 0x3e,
    0xd5, 0xfa, 0x4c, 0x34, 0x07,
    0xd5, 0xfb, 0x4c, 0x3c, 0x08,
    0xd5, 0xff, 0x4c, 0x04, 0x11,
    0xd5, 0xff, 0x4c, 0x0c, 0x1a,
    0xd5, 0xff, 0x4c, 0x14, 0x23,
    0xd5, 0xff, 0x4c, 0x1c, 0x2c,
    0xd5, 0xff, 0x4c, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x4c, 0x2c, 0x3e,
    0xd5, 0xdd, 0x4c, 0x34, 0x0f,
    0xd5, 0xcc, 0x4c, 0x3c, 0x11,
    0x48, 0x0f, 0x4d, 0x0c, 0x1a,
    0x4a, 0x0f, 0x4d, 0x14, 0x03,
    0x4b, 0x0f, 0x4d, 0x1c, 0x08,
    0x4f, 0x0f, 0x4d, 0x04, 0x11,
    0x4f, 0x0f, 0x4d, 0x0c, 0x1a,
    0x4f, 0x0f, 0x4d, 0x14, 0x23,
    0x4f, 0x0f, 0x4d, 0x1c, 0x2c,
    0x4f, 0x0f, 0x4d, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x4d, 0x2c, 0x3e,
    0xd5, 0xad, 0x4d, 0x34, 0x07,
    0xd5, 0xbc, 0x4d, 0x3c, 0x08,
    0xd5, 0xf8, 0x4d, 0x04, 0x11,
    0xd5, 0xf8, 0x4d, 0x0c, 0x1a,
    0xd5, 0xf8, 0x4d, 0x14, 0x23,
    0xd5, 0xf8, 0x4d, 0x1c, 0x2c,
    0xd5, 0xf8, 0x4d, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x4d, 0x2c, 0x3e,
    0xd5, 0xfa, 0x4d, 0x34, 0x07,
    0xd5, 0xfb, 0x4d, 0x3c, 0x08,
    0xd5, 0xff, 0x4d, 0x04, 0x11,
    0xd5, 0xff, 0x4d, 0x0c, 0x1a,
    0xd5, 0xff, 0x4d, 0x14, 0x23,
    0xd5, 0xff, 0x4d, 0x1c, 0x2c,
    0xd5, 0xff, 0x4d, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x4d, 0x2c, 0x3e,
    0xd5, 0xdd, 0x4d, 0x34, 0x0f,
    0xd5, 0xcc, 0x4d, 0x3c, 0x11,
    0x48, 0x0f, 0x4e, 0x0c, 0x1a,
    0x4a, 0x0f, 0x4e, 0x14, 0x03,
    0x4b, 0x0f, 0x4e, 0x1c, 0x08,
    0x4f, 0x0f, 0x4e, 0x04, 0x11,
    0x4f, 0x0f, 0x4e, 0x0c, 0x1a,
    0x4f, 0x0f, 0x4e, 0x14, 0x23,
    0x4f, 0x0f, 0x4e, 0x1c, 0x2c,
    0x4f, 0x0f, 0x4e, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x4e, 0x2c, 0x3e,
    0xd5, 0xad, 0x4e, 0x34, 0x07,
    0xd5, 0xbc, 0x4e, 0x3c, 0x08,
    0xd5, 0xf8, 0x4e, 0x04, 0x11,
    0xd5, 0xf8, 0x4e, 0x0c, 0x1a,
    0xd5, 0xf8, 0x4e, 0x14, 0x23,
    0xd5, 0xf8, 0x4e, 0x1c, 0x2c,
    0xd5, 0xf8, 0x4e, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x4e, 0x2c, 0x3e,
    0xd5, 0xfa, 0x4e, 0x34, 0x07,
    0xd5, 0xfb, 0x4e, 0x3c, 0x08,
    0xd5, 0xff, 0x4e, 0x04, 0x11,
    0xd5, 0xff, 0x4e, 0x0c, 0x1a,
    0xd5, 0xff, 0x4e, 0x14, 0x23,
    0xd5, 0xff, 0x4e, 0x1c, 0x2c,
    0xd5, 0xff, 0x4e, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x4e, 0x2c, 0x3e,
    0xd5, 0xdd, 0x4e, 0x34, 0x0f,
    0xd5, 0xcc, 0x4e, 0x3c, 0x11,
    0x48, 0x0f, 0x4f, 0x0c, 0x1a,
    0x4a, 0x0f, 0x4f, 0x14, 0x03,
    0x4b, 0x0f, 0x4f, 0x1c, 0x08,
    0x4f, 0x0f, 0x4f, 0x04, 0x11,
    0x4f, 0x0f, 0x4f, 0x0c, 0x1a,
    0x4f, 0x0f, 0x4f, 0x14, 0x23,
    0x4f, 0x0f, 0x4f, 0x1c, 0x2c,
    0x4f, 0x0f, 0x4f, 0x64, 0x35, 0x00,
    0x4f, 0x0f, 0x4f, 0x2c, 0x3e,
    0xd5, 0xad, 0x4f, 0x34, 0x07,
    0xd5, 0xbc, 0x4f, 0x3c, 0x08,
    0xd5, 0xf8, 0x4f, 0x04, 0x11,
    0xd5, 0xf8, 0x4f, 0x0c, 0x1a,
    0xd5, 0xf8, 0x4f, 0x14, 0x23,
    0xd5, 0xf8, 0x4f, 0x1c, 0x2c,
    0xd5, 0xf8, 0x4f, 0x64, 0x35, 0x00,
    0xd5, 0xf8, 0x4f, 0x2c, 0x3e,
    0xd5, 0xfa, 0x4f, 0x34, 0x07,
    0xd5, 0xfb, 0x4f, 0x3c, 0x08,
    0xd5, 0xff, 0x4f, 0x04, 0x11,
    0xd5, 0xff, 0x4f, 0x0c, 0x1a,
    0xd5, 0xff, 0x4f, 0x14, 0x23,
    0xd5, 0xff, 0x4f, 0x1c, 0x2c,
    0xd5, 0xff, 0x4f, 0x64, 0x35, 0x00,
    0xd5, 0xff, 0x4f, 0x2c, 0x3e,
    0xd5, 0xdd, 0x4f, 0x34, 0x0f,
    0xd5, 0xcc, 0x4f, 0x3c, 0x11,
    0x48, 0xf7, 0xf1,
    0x48, 0xf7, 0xf2,
    0x48, 0xf7, 0xf3,
    0x49, 0xf7, 0xf0,
    0x49, 0xf7, 0xf1,
    0x49, 0xf7, 0xf2,
    0x49, 0xf7, 0xf3,
    0x49, 0xf7, 0xf4,
    0x49, 0xf7, 0xf5,
    0x49, 0xf7, 0xf6,
    0x49, 0xf7, 0xf7,
    0xd5, 0x18, 0xf7, 0xf0,
    0xd5, 0x18, 0xf7, 0xf1,
    0xd5, 0x18, 0xf7, 0xf2,
    0xd5, 0x18, 0xf7, 0xf3,
    0xd5, 0x18, 0xf7, 0xf4,
    0xd5, 0x18, 0xf7, 0xf5,
    0xd5, 0x18, 0xf7, 0xf6,
    0xd5, 0x18, 0xf7, 0xf7,
    0xd5, 0x19, 0xf7, 0xf0,
    0xd5, 0x19, 0xf7, 0xf1,
    0xd5, 0x19, 0xf7, 0xf2,
    0xd5, 0x19, 0xf7, 0xf3,
    0xd5, 0x19, 0xf7, 0xf4,
    0xd5, 0x19, 0xf7, 0xf5,
    0xd5, 0x19, 0xf7, 0xf6,
    0xd5, 0x19, 0xf7, 0xf7,
    0x48, 0xf7, 0xf9,
    0x48, 0xf7, 0xfa,
    0x48, 0xf7, 0xfb,
    0x49, 0xf7, 0xf8,
    0x49, 0xf7, 0xf9,
    0x49, 0xf7, 0xfa,
    0x49, 0xf7, 0xfb,
    0x49, 0xf7, 0xfc,
    0x49, 0xf7, 0xfd,
    0x49, 0xf7, 0xfe,
    0x49, 0xf7, 0xff,
    0xd5, 0x18, 0xf7, 0xf8,
    0xd5, 0x18, 0xf7, 0xf9,
    0xd5, 0x18, 0xf7, 0xfa,
    0xd5, 0x18, 0xf7, 0xfb,
    0xd5, 0x18, 0xf7, 0xfc,
    0xd5, 0x18, 0xf7, 0xfd,
    0xd5, 0x18, 0xf7, 0xfe,
    0xd5, 0x18, 0xf7, 0xff,
    0xd5, 0x19, 0xf7, 0xf8,
    0xd5, 0x19, 0xf7, 0xf9,
    0xd5, 0x19, 0xf7, 0xfa,
    0xd5, 0x19, 0xf7, 0xfb,
    0xd5, 0x19, 0xf7, 0xfc,
    0xd5, 0x19, 0xf7, 0xfd,
    0xd5, 0x19, 0xf7, 0xfe,
    0xd5, 0x19, 0xf7, 0xff,
    0x48, 0xf7, 0xe9,
    0x48, 0xf7, 0xea,
    0x48, 0xf7, 0xeb,
    0x49, 0xf7, 0xe8,
    0x49, 0xf7, 0xe9,
    0x49, 0xf7, 0xea,
    0x49, 0xf7, 0xeb,
    0x49, 0xf7, 0xec,
    0x49, 0xf7, 0xed,
    0x49, 0xf7, 0xee,
    0x49, 0xf7, 0xef,
    0xd5, 0x18, 0xf7, 0xe8,
    0xd5, 0x18, 0xf7, 0xe9,
    0xd5, 0x18, 0xf7, 0xea,
    0xd5, 0x18, 0xf7, 0xeb,
    0xd5, 0x18, 0xf7, 0xec,
    0xd5, 0x18, 0xf7, 0xed,
    0xd5, 0x18, 0xf7, 0xee,
    0xd5, 0x18, 0xf7, 0xef,
    0xd5, 0x19, 0xf7, 0xe8,
    0xd5, 0x19, 0xf7, 0xe9,
    0xd5, 0x19, 0xf7, 0xea,
    0xd5, 0x19, 0xf7, 0xeb,
    0xd5, 0x19, 0xf7, 0xec,
    0xd5, 0x19, 0xf7, 0xed,
    0xd5, 0x19, 0xf7, 0xee,
    0xd5, 0x19, 0xf7, 0xef,
    0x48, 0xf7, 0xe1,
    0x48, 0xf7, 0xe2,
    0x48, 0xf7, 0xe3,
    0x49, 0xf7, 0xe0,
    0x49, 0xf7, 0xe1,
    0x49, 0xf7, 0xe2,
    0x49, 0xf7, 0xe3,
    0x49, 0xf7, 0xe4,
    0x49, 0xf7, 0xe5,
    0x49, 0xf7, 0xe6,
    0x49, 0xf7, 0xe7,
    0xd5, 0x18, 0xf7, 0xe0,
    0xd5, 0x18, 0xf7, 0xe1,
    0xd5, 0x18, 0xf7, 0xe2,
    0xd5, 0x18, 0xf7, 0xe3,
    0xd5, 0x18, 0xf7, 0xe4,
    0xd5, 0x18, 0xf7, 0xe5,
    0xd5, 0x18, 0xf7, 0xe6,
    0xd5, 0x18, 0xf7, 0xe7,
    0xd5, 0x19, 0xf7, 0xe0,
    0xd5, 0x19, 0xf7, 0xe1,
    0xd5, 0x19, 0xf7, 0xe2,
    0xd5, 0x19, 0xf7, 0xe3,
    0xd5, 0x19, 0xf7, 0xe4,
    0xd5, 0x19, 0xf7, 0xe5,
    0xd5, 0x19, 0xf7, 0xe6,
    0xd5, 0x19, 0xf7, 0xe7,
    0x48, 0xf7, 0xd9,
    0x48, 0xf7, 0xda,
    0x48, 0xf7, 0xdb,
    0x49, 0xf7, 0xd8,
    0x49, 0xf7, 0xd9,
    0x49, 0xf7, 0xda,
    0x49, 0xf7, 0xdb,
    0x49, 0xf7, 0xdc,
    0x49, 0xf7, 0xdd,
    0x49, 0xf7, 0xde,
    0x49, 0xf7, 0xdf,
    0xd5, 0x18, 0xf7, 0xd8,
    0xd5, 0x18, 0xf7, 0xd9,
    0xd5, 0x18, 0xf7, 0xda,
    0xd5, 0x18, 0xf7, 0xdb,
    0xd5, 0x18, 0xf7, 0xdc,
    0xd5, 0x18, 0xf7, 0xdd,
    0xd5, 0x18, 0xf7, 0xde,
    0xd5, 0x18, 0xf7, 0xdf,
    0xd5, 0x19, 0xf7, 0xd8,
    0xd5, 0x19, 0xf7, 0xd9,
    0xd5, 0x19, 0xf7, 0xda,
    0xd5, 0x19, 0xf7, 0xdb,
    0xd5, 0x19, 0xf7, 0xdc,
    0xd5, 0x19, 0xf7, 0xdd,
    0xd5, 0x19, 0xf7, 0xde,
    0xd5, 0x19, 0xf7, 0xdf,
    0x48, 0xf7, 0xd1,
    0x48, 0xf7, 0xd2,
    0x48, 0xf7, 0xd3,
    0x49, 0xf7, 0xd0,
    0x49, 0xf7, 0xd1,
    0x49, 0xf7, 0xd2,
    0x49, 0xf7, 0xd3,
    0x49, 0xf7, 0xd4,
    0x49, 0xf7, 0xd5,
    0x49, 0xf7, 0xd6,
    0x49, 0xf7, 0xd7,
    0xd5, 0x18, 0xf7, 0xd0,
    0xd5, 0x18, 0xf7, 0xd1,
    0xd5, 0x18, 0xf7, 0xd2,
    0xd5, 0x18, 0xf7, 0xd3,
    0xd5, 0x18, 0xf7, 0xd4,
    0xd5, 0x18, 0xf7, 0xd5,
    0xd5, 0x18, 0xf7, 0xd6,
    0xd5, 0x18, 0xf7, 0xd7,
    0xd5, 0x19, 0xf7, 0xd0,
    0xd5, 0x19, 0xf7, 0xd1,
    0xd5, 0x19, 0xf7, 0xd2,
    0xd5, 0x19, 0xf7, 0xd3,
    0xd5, 0x19, 0xf7, 0xd4,
    0xd5, 0x19, 0xf7, 0xd5,
    0xd5, 0x19, 0xf7, 0xd6,
    0xd5, 0x19, 0xf7, 0xd7,
    0x48, 0xd1, 0xc1,
    0x48, 0xd1, 0xc2,
    0x48, 0xd1, 0xc3,
    0x49, 0xd1, 0xc0,
    0x49, 0xd1, 0xc1,
    0x49, 0xd1, 0xc2,
    0x49, 0xd1, 0xc3,
    0x49, 0xd1, 0xc4,
    0x49, 0xd1, 0xc5,
    0x49, 0xd1, 0xc6,
    0x49, 0xd1, 0xc7,
    0xd5, 0x18, 0xd1, 0xc0,
    0xd5, 0x18, 0xd1, 0xc1,
    0xd5, 0x18, 0xd1, 0xc2,
    0xd5, 0x18, 0xd1, 0xc3,
    0xd5, 0x18, 0xd1, 0xc4,
    0xd5, 0x18, 0xd1, 0xc5,
    0xd5, 0x18, 0xd1, 0xc6,
    0xd5, 0x18, 0xd1, 0xc7,
    0xd5, 0x19, 0xd1, 0xc0,
    0xd5, 0x19, 0xd1, 0xc1,
    0xd5, 0x19, 0xd1, 0xc2,
    0xd5, 0x19, 0xd1, 0xc3,
    0xd5, 0x19, 0xd1, 0xc4,
    0xd5, 0x19, 0xd1, 0xc5,
    0xd5, 0x19, 0xd1, 0xc6,
    0xd5, 0x19, 0xd1, 0xc7,
    0x48, 0xd1, 0xc9,
    0x48, 0xd1, 0xca,
    0x48, 0xd1, 0xcb,
    0x49, 0xd1, 0xc8,
    0x49, 0xd1, 0xc9,
    0x49, 0xd1, 0xca,
    0x49, 0xd1, 0xcb,
    0x49, 0xd1, 0xcc,
    0x49, 0xd1, 0xcd,
    0x49, 0xd1, 0xce,
    0x49, 0xd1, 0xcf,
    0xd5, 0x18, 0xd1, 0xc8,
    0xd5, 0x18, 0xd1, 0xc9,
    0xd5, 0x18, 0xd1, 0xca,
    0xd5, 0x18, 0xd1, 0xcb,
    0xd5, 0x18, 0xd1, 0xcc,
    0xd5, 0x18, 0xd1, 0xcd,
    0xd5, 0x18, 0xd1, 0xce,
    0xd5, 0x18, 0xd1, 0xcf,
    0xd5, 0x19, 0xd1, 0xc8,
    0xd5, 0x19, 0xd1, 0xc9,
    0xd5, 0x19, 0xd1, 0xca,
    0xd5, 0x19, 0xd1, 0xcb,
    0xd5, 0x19, 0xd1, 0xcc,
    0xd5, 0x19, 0xd1, 0xcd,
    0xd5, 0x19, 0xd1, 0xce,
    0xd5, 0x19, 0xd1, 0xcf,
    0x48, 0xd1, 0xf9,
    0x48, 0xd1, 0xfa,
    0x48, 0xd1, 0xfb,
    0x49, 0xd1, 0xf8,
    0x49, 0xd1, 0xf9,
    0x49, 0xd1, 0xfa,
    0x49, 0xd1, 0xfb,
    0x49, 0xd1, 0xfc,
    0x49, 0xd1, 0xfd,
    0x49, 0xd1, 0xfe,
    0x49, 0xd1, 0xff,
    0xd5, 0x18, 0xd1, 0xf8,
    0xd5, 0x18, 0xd1, 0xf9,
    0xd5, 0x18, 0xd1, 0xfa,
    0xd5, 0x18, 0xd1, 0xfb,
    0xd5, 0x18, 0xd1, 0xfc,
    0xd5, 0x18, 0xd1, 0xfd,
    0xd5, 0x18, 0xd1, 0xfe,
    0xd5, 0x18, 0xd1, 0xff,
    0xd5, 0x19, 0xd1, 0xf8,
    0xd5, 0x19, 0xd1, 0xf9,
    0xd5, 0x19, 0xd1, 0xfa,
    0xd5, 0x19, 0xd1, 0xfb,
    0xd5, 0x19, 0xd1, 0xfc,
    0xd5, 0x19, 0xd1, 0xfd,
    0xd5, 0x19, 0xd1, 0xfe,
    0xd5, 0x19, 0xd1, 0xff,
    0x48, 0xd1, 0xe1,
    0x48, 0xd1, 0xe2,
    0x48, 0xd1, 0xe3,
    0x49, 0xd1, 0xe0,
    0x49, 0xd1, 0xe1,
    0x49, 0xd1, 0xe2,
    0x49, 0xd1, 0xe3,
    0x49, 0xd1, 0xe4,
    0x49, 0xd1, 0xe5,
    0x49, 0xd1, 0xe6,
    0x49, 0xd1, 0xe7,
    0xd5, 0x18, 0xd1, 0xe0,
    0xd5, 0x18, 0xd1, 0xe1,
    0xd5, 0x18, 0xd1, 0xe2,
    0xd5, 0x18, 0xd1, 0xe3,
    0xd5, 0x18, 0xd1, 0xe4,
    0xd5, 0x18, 0xd1, 0xe5,
    0xd5, 0x18, 0xd1, 0xe6,
    0xd5, 0x18, 0xd1, 0xe7,
    0xd5, 0x19, 0xd1, 0xe0,
    0xd5, 0x19, 0xd1, 0xe1,
    0xd5, 0x19, 0xd1, 0xe2,
    0xd5, 0x19, 0xd1, 0xe3,
    0xd5, 0x19, 0xd1, 0xe4,
    0xd5, 0x19, 0xd1, 0xe5,
    0xd5, 0x19, 0xd1, 0xe6,
    0xd5, 0x19, 0xd1, 0xe7,
    0x48, 0xd1, 0xe9,
    0x48, 0xd1, 0xea,
    0x48, 0xd1, 0xeb,
    0x49, 0xd1, 0xe8,
    0x49, 0xd1, 0xe9,
    0x49, 0xd1, 0xea,
    0x49, 0xd1, 0xeb,
    0x49, 0xd1, 0xec,
    0x49, 0xd1, 0xed,
    0x49, 0xd1, 0xee,
    0x49, 0xd1, 0xef,
    0xd5, 0x18, 0xd1, 0xe8,
    0xd5, 0x18, 0xd1, 0xe9,
    0xd5, 0x18, 0xd1, 0xea,
    0xd5, 0x18, 0xd1, 0xeb,
    0xd5, 0x18, 0xd1, 0xec,
    0xd5, 0x18, 0xd1, 0xed,
    0xd5, 0x18, 0xd1, 0xee,
    0xd5, 0x18, 0xd1, 0xef,
    0xd5, 0x19, 0xd1, 0xe8,
    0xd5, 0x19, 0xd1, 0xe9,
    0xd5, 0x19, 0xd1, 0xea,
    0xd5, 0x19, 0xd1, 0xeb,
    0xd5, 0x19, 0xd1, 0xec,
    0xd5, 0x19, 0xd1, 0xed,
    0xd5, 0x19, 0xd1, 0xee,
    0xd5, 0x19, 0xd1, 0xef,
    0x48, 0xff, 0xc1,
    0x48, 0xff, 0xc2,
    0x48, 0xff, 0xc3,
    0x49, 0xff, 0xc0,
    0x49, 0xff, 0xc1,
    0x49, 0xff, 0xc2,
    0x49, 0xff, 0xc3,
    0x49, 0xff, 0xc4,
    0x49, 0xff, 0xc5,
    0x49, 0xff, 0xc6,
    0x49, 0xff, 0xc7,
    0xd5, 0x18, 0xff, 0xc0,
    0xd5, 0x18, 0xff, 0xc1,
    0xd5, 0x18, 0xff, 0xc2,
    0xd5, 0x18, 0xff, 0xc3,
    0xd5, 0x18, 0xff, 0xc4,
    0xd5, 0x18, 0xff, 0xc5,
    0xd5, 0x18, 0xff, 0xc6,
    0xd5, 0x18, 0xff, 0xc7,
    0xd5, 0x19, 0xff, 0xc0,
    0xd5, 0x19, 0xff, 0xc1,
    0xd5, 0x19, 0xff, 0xc2,
    0xd5, 0x19, 0xff, 0xc3,
    0xd5, 0x19, 0xff, 0xc4,
    0xd5, 0x19, 0xff, 0xc5,
    0xd5, 0x19, 0xff, 0xc6,
    0xd5, 0x19, 0xff, 0xc7,
    0x48, 0xff, 0xc9,
    0x48, 0xff, 0xca,
    0x48, 0xff, 0xcb,
    0x49, 0xff, 0xc8,
    0x49, 0xff, 0xc9,
    0x49, 0xff, 0xca,
    0x49, 0xff, 0xcb,
    0x49, 0xff, 0xcc,
    0x49, 0xff, 0xcd,
    0x49, 0xff, 0xce,
    0x49, 0xff, 0xcf,
    0xd5, 0x18, 0xff, 0xc8,
    0xd5, 0x18, 0xff, 0xc9,
    0xd5, 0x18, 0xff, 0xca,
    0xd5, 0x18, 0xff, 0xcb,
    0xd5, 0x18, 0xff, 0xcc,
    0xd5, 0x18, 0xff, 0xcd,
    0xd5, 0x18, 0xff, 0xce,
    0xd5, 0x18, 0xff, 0xcf,
    0xd5, 0x19, 0xff, 0xc8,
    0xd5, 0x19, 0xff, 0xc9,
    0xd5, 0x19, 0xff, 0xca,
    0xd5, 0x19, 0xff, 0xcb,
    0xd5, 0x19, 0xff, 0xcc,
    0xd5, 0x19, 0xff, 0xcd,
    0xd5, 0x19, 0xff, 0xce,
    0xd5, 0x19, 0xff, 0xcf,
    0x48, 0xf7, 0x24, 0x11,
    0x48, 0xf7, 0x24, 0x1a,
    0x4a, 0xf7, 0x24, 0x03,
    0x4b, 0xf7, 0x24, 0x08,
    0x4b, 0xf7, 0x24, 0x11,
    0x4b, 0xf7, 0x24, 0x1a,
    0x4b, 0xf7, 0x24, 0x23,
    0x4b, 0xf7, 0x24, 0x2c,
    0x4b, 0xf7, 0x64, 0x35, 0x00,
    0x4b, 0xf7, 0x24, 0x3e,
    0xd5, 0x29, 0xf7, 0x24, 0x07,
    0xd5, 0x38, 0xf7, 0x24, 0x08,
    0xd5, 0x38, 0xf7, 0x24, 0x11,
    0xd5, 0x38, 0xf7, 0x24, 0x1a,
    0xd5, 0x38, 0xf7, 0x24, 0x23,
    0xd5, 0x38, 0xf7, 0x24, 0x2c,
    0xd5, 0x38, 0xf7, 0x64, 0x35, 0x00,
    0xd5, 0x38, 0xf7, 0x24, 0x3e,
    0xd5, 0x3a, 0xf7, 0x24, 0x07,
    0xd5, 0x3b, 0xf7, 0x24, 0x08,
    0xd5, 0x3b, 0xf7, 0x24, 0x11,
    0xd5, 0x3b, 0xf7, 0x24, 0x1a,
    0xd5, 0x3b, 0xf7, 0x24, 0x23,
    0xd5, 0x3b, 0xf7, 0x24, 0x2c,
    0xd5, 0x3b, 0xf7, 0x64, 0x35, 0x00,
    0xd5, 0x3b, 0xf7, 0x24, 0x3e,
    0xd5, 0x19, 0xf7, 0x24, 0x0f,
    0x48, 0xf7, 0x1c, 0x11,
    0x48, 0xf7, 0x1c, 0x1a,
    0x4a, 0xf7, 0x1c, 0x03,
    0x4b, 0xf7, 0x1c, 0x08,
    0x4b, 0xf7, 0x1c, 0x11,
    0x4b, 0xf7, 0x1c, 0x1a,
    0x4b, 0xf7, 0x1c, 0x23,
    0x4b, 0xf7, 0x1c, 0x2c,
    0x4b, 0xf7, 0x5c, 0x35, 0x00,
    0x4b, 0xf7, 0x1c, 0x3e,
    0xd5, 0x29, 0xf7, 0x1c, 0x07,
    0xd5, 0x38, 0xf7, 0x1c, 0x08,
    0xd5, 0x38, 0xf7, 0x1c, 0x11,
    0xd5, 0x38, 0xf7, 0x1c, 0x1a,
    0xd5, 0x38, 0xf7, 0x1c, 0x23,
    0xd5, 0x38, 0xf7, 0x1c, 0x2c,
    0xd5, 0x38, 0xf7, 0x5c, 0x35, 0x00,
    0xd5, 0x38, 0xf7, 0x1c, 0x3e,
    0xd5, 0x3a, 0xf7, 0x1c, 0x07,
    0xd5, 0x3b, 0xf7, 0x1c, 0x08,
    0xd5, 0x3b, 0xf7, 0x1c, 0x11,
    0xd5, 0x3b, 0xf7, 0x1c, 0x1a,
    0xd5, 0x3b, 0xf7, 0x1c, 0x23,
    0xd5, 0x3b, 0xf7, 0x1c, 0x2c,
    0xd5, 0x3b, 0xf7, 0x5c, 0x35, 0x00,
    0xd5, 0x3b, 0xf7, 0x1c, 0x3e,
    0xd5, 0x19, 0xf7, 0x1c, 0x0f,
    0x48, 0xd1, 0x3c, 0x11,
    0x48, 0xd1, 0x3c, 0x1a,
    0x4a, 0xd1, 0x3c, 0x03,
    0x4b, 0xd1, 0x3c, 0x08,
    0x4b, 0xd1, 0x3c, 0x11,
    0x4b, 0xd1, 0x3c, 0x1a,
    0x4b, 0xd1, 0x3c, 0x23,
    0x4b, 0xd1, 0x3c, 0x2c,
    0x4b, 0xd1, 0x7c, 0x35, 0x00,
    0x4b, 0xd1, 0x3c, 0x3e,
    0xd5, 0x29, 0xd1, 0x3c, 0x07,
    0xd5, 0x38, 0xd1, 0x3c, 0x08,
    0xd5, 0x38, 0xd1, 0x3c, 0x11,
    0xd5, 0x38, 0xd1, 0x3c, 0x1a,
    0xd5, 0x38, 0xd1, 0x3c, 0x23,
    0xd5, 0x38, 0xd1, 0x3c, 0x2c,
    0xd5, 0x38, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x38, 0xd1, 0x3c, 0x3e,
    0xd5, 0x3a, 0xd1, 0x3c, 0x07,
    0xd5, 0x3b, 0xd1, 0x3c, 0x08,
    0xd5, 0x3b, 0xd1, 0x3c, 0x11,
    0xd5, 0x3b, 0xd1, 0x3c, 0x1a,
    0xd5, 0x3b, 0xd1, 0x3c, 0x23,
    0xd5, 0x3b, 0xd1, 0x3c, 0x2c,
    0xd5, 0x3b, 0xd1, 0x7c, 0x35, 0x00,
    0xd5, 0x3b, 0xd1, 0x3c, 0x3e,
    0xd5, 0x19, 0xd1, 0x3c, 0x0f,
    0x48, 0xd1, 0x2c, 0x11,
    0x48, 0xd1, 0x2c, 0x1a,
    0x4a, 0xd1, 0x2c, 0x03,
    0x4b, 0xd1, 0x2c, 0x08,
    0x4b, 0xd1, 0x2c, 0x11,
    0x4b, 0xd1, 0x2c, 0x1a,
    0x4b, 0xd1, 0x2c, 0x23,
    0x4b, 0xd1, 0x2c, 0x2c,
    0x4b, 0xd1, 0x6c, 0x35, 0x00,
    0x4b, 0xd1, 0x2c, 0x3e,
    0xd5, 0x29, 0xd1, 0x2c, 0x07,
    0xd5, 0x38, 0xd1, 0x2c, 0x08,
    0xd5, 0x38, 0xd1, 0x2c, 0x11,
    0xd5, 0x38, 0xd1, 0x2c, 0x1a,
    0xd5, 0x38, 0xd1, 0x2c, 0x23,
    0xd5, 0x38, 0xd1, 0x2c, 0x2c,
    0xd5, 0x38, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x38, 0xd1, 0x2c, 0x3e,
    0xd5, 0x3a, 0xd1, 0x2c, 0x07,
    0xd5, 0x3b, 0xd1, 0x2c, 0x08,
    0xd5, 0x3b, 0xd1, 0x2c, 0x11,
    0xd5, 0x3b, 0xd1, 0x2c, 0x1a,
    0xd5, 0x3b, 0xd1, 0x2c, 0x23,
    0xd5, 0x3b, 0xd1, 0x2c, 0x2c,
    0xd5, 0x3b, 0xd1, 0x6c, 0x35, 0x00,
    0xd5, 0x3b, 0xd1, 0x2c, 0x3e,
    0xd5, 0x19, 0xd1, 0x2c, 0x0f,
    0x48, 0xff, 0x04, 0x11,
    0x48, 0xff, 0x04, 0x1a,
    0x4a, 0xff, 0x04, 0x03,
    0x4b, 0xff, 0x04, 0x08,
    0x4b, 0xff, 0x04, 0x11,
    0x4b, 0xff, 0x04, 0x1a,
    0x4b, 0xff, 0x04, 0x23,
    0x4b, 0xff, 0x04, 0x2c,
    0x4b, 0xff, 0x44, 0x35, 0x00,
    0x4b, 0xff, 0x04, 0x3e,
    0xd5, 0x29, 0xff, 0x04, 0x07,
    0xd5, 0x38, 0xff, 0x04, 0x08,
    0xd5, 0x38, 0xff, 0x04, 0x11,
    0xd5, 0x38, 0xff, 0x04, 0x1a,
    0xd5, 0x38, 0xff, 0x04, 0x23,
    0xd5, 0x38, 0xff, 0x04, 0x2c,
    0xd5, 0x38, 0xff, 0x44, 0x35, 0x00,
    0xd5, 0x38, 0xff, 0x04, 0x3e,
    0xd5, 0x3a, 0xff, 0x04, 0x07,
    0xd5, 0x3b, 0xff, 0x04, 0x08,
    0xd5, 0x3b, 0xff, 0x04, 0x11,
    0xd5, 0x3b, 0xff, 0x04, 0x1a,
    0xd5, 0x3b, 0xff, 0x04, 0x23,
    0xd5, 0x3b, 0xff, 0x04, 0x2c,
    0xd5, 0x3b, 0xff, 0x44, 0x35, 0x00,
    0xd5, 0x3b, 0xff, 0x04, 0x3e,
    0xd5, 0x19, 0xff, 0x04, 0x0f,
    0x48, 0xff, 0x0c, 0x11,
    0x48, 0xff, 0x0c, 0x1a,
    0x4a, 0xff, 0x0c, 0x03,
    0x4b, 0xff, 0x0c, 0x08,
    0x4b, 0xff, 0x0c, 0x11,
    0x4b, 0xff, 0x0c, 0x1a,
    0x4b, 0xff, 0x0c, 0x23,
    0x4b, 0xff, 0x0c, 0x2c,
    0x4b, 0xff, 0x4c, 0x35, 0x00,
    0x4b, 0xff, 0x0c, 0x3e,
    0xd5, 0x29, 0xff, 0x0c, 0x07,
    0xd5, 0x38, 0xff, 0x0c, 0x08,
    0xd5, 0x38, 0xff, 0x0c, 0x11,
    0xd5, 0x38, 0xff, 0x0c, 0x1a,
    0xd5, 0x38, 0xff, 0x0c, 0x23,
    0xd5, 0x38, 0xff, 0x0c, 0x2c,
    0xd5, 0x38, 0xff, 0x4c, 0x35, 0x00,
    0xd5, 0x38, 0xff, 0x0c, 0x3e,
    0xd5, 0x3a, 0xff, 0x0c, 0x07,
    0xd5, 0x3b, 0xff, 0x0c, 0x08,
    0xd5, 0x3b, 0xff, 0x0c, 0x11,
    0xd5, 0x3b, 0xff, 0x0c, 0x1a,
    0xd5, 0x3b, 0xff, 0x0c, 0x23,
    0xd5, 0x3b, 0xff, 0x0c, 0x2c,
    0xd5, 0x3b, 0xff, 0x4c, 0x35, 0x00,
    0xd5, 0x3b, 0xff, 0x0c, 0x3e,
    0xd5, 0x19, 0xff, 0x0c, 0x0f,
    0x48, 0x6b, 0x0c, 0x1a, 0x01,
    0x48, 0x6b, 0x0c, 0x1a, 0x10,
    0x48, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4a, 0x6b, 0x14, 0x03, 0x01,
    0x4a, 0x6b, 0x14, 0x03, 0x10,
    0x4a, 0x69, 0x14, 0x03, 0x00, 0x01, 0x00, 0x00,
    0x4a, 0x69, 0x14, 0x03, 0x00, 0x10, 0x00, 0x00,
    0x4a, 0x69, 0x14, 0x03, 0x00, 0x00, 0x01, 0x00,
    0x4a, 0x69, 0x14, 0x03, 0x00, 0x00, 0x10, 0x00,
    0x4a, 0x69, 0x14, 0x03, 0x00, 0x00, 0x00, 0x01,
    0x4a, 0x69, 0x14, 0x03, 0x00, 0x00, 0x00, 0x10,
    0x4b, 0x6b, 0x1c, 0x08, 0x01,
    0x4b, 0x6b, 0x1c, 0x08, 0x10,
    0x4b, 0x69, 0x1c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0x4b, 0x69, 0x1c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0x4b, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0x4b, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0x4b, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x4b, 0x69, 0x1c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0x4f, 0x6b, 0x04, 0x11, 0x01,
    0x4f, 0x6b, 0x04, 0x11, 0x10,
    0x4f, 0x69, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0x4f, 0x69, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0x4f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0x4f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0x4f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0x4f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x4f, 0x6b, 0x0c, 0x1a, 0x01,
    0x4f, 0x6b, 0x0c, 0x1a, 0x10,
    0x4f, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0x4f, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0x4f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0x4f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0x4f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0x4f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0x4f, 0x6b, 0x14, 0x23, 0x01,
    0x4f, 0x6b, 0x14, 0x23, 0x10,
    0x4f, 0x69, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0x4f, 0x69, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0x4f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0x4f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0x4f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0x4f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0x4f, 0x6b, 0x1c, 0x2c, 0x01,
    0x4f, 0x6b, 0x1c, 0x2c, 0x10,
    0x4f, 0x69, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0x4f, 0x69, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0x4f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0x4f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0x4f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0x4f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0x4f, 0x6b, 0x64, 0x35, 0x00, 0x01,
    0x4f, 0x6b, 0x64, 0x35, 0x00, 0x10,
    0x4f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x4f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x4f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0x4f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x4f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x4f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0x4f, 0x6b, 0x2c, 0x3e, 0x01,
    0x4f, 0x6b, 0x2c, 0x3e, 0x10,
    0x4f, 0x69, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0x4f, 0x69, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0x4f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0x4f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0x4f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0x4f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x2d, 0x6b, 0x34, 0x07, 0x01,
    0xd5, 0x2d, 0x6b, 0x34, 0x07, 0x10,
    0xd5, 0x2d, 0x69, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x2d, 0x69, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x2d, 0x69, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x2d, 0x69, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x2d, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x2d, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x3c, 0x6b, 0x3c, 0x08, 0x01,
    0xd5, 0x3c, 0x6b, 0x3c, 0x08, 0x10,
    0xd5, 0x3c, 0x69, 0x3c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x3c, 0x69, 0x3c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x3c, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x3c, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x3c, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x3c, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x78, 0x6b, 0x04, 0x11, 0x01,
    0xd5, 0x78, 0x6b, 0x04, 0x11, 0x10,
    0xd5, 0x78, 0x69, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x78, 0x69, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x78, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x78, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x78, 0x6b, 0x0c, 0x1a, 0x01,
    0xd5, 0x78, 0x6b, 0x0c, 0x1a, 0x10,
    0xd5, 0x78, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x78, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x78, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x78, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x78, 0x6b, 0x14, 0x23, 0x01,
    0xd5, 0x78, 0x6b, 0x14, 0x23, 0x10,
    0xd5, 0x78, 0x69, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x78, 0x69, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x78, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x78, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x78, 0x6b, 0x1c, 0x2c, 0x01,
    0xd5, 0x78, 0x6b, 0x1c, 0x2c, 0x10,
    0xd5, 0x78, 0x69, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x78, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x78, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x78, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x78, 0x6b, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x78, 0x6b, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x78, 0x69, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x78, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x78, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x78, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x78, 0x6b, 0x2c, 0x3e, 0x01,
    0xd5, 0x78, 0x6b, 0x2c, 0x3e, 0x10,
    0xd5, 0x78, 0x69, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x78, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x78, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x78, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x78, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7a, 0x6b, 0x34, 0x07, 0x01,
    0xd5, 0x7a, 0x6b, 0x34, 0x07, 0x10,
    0xd5, 0x7a, 0x69, 0x34, 0x07, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7a, 0x69, 0x34, 0x07, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7a, 0x69, 0x34, 0x07, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7a, 0x69, 0x34, 0x07, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7a, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7a, 0x69, 0x34, 0x07, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7b, 0x6b, 0x3c, 0x08, 0x01,
    0xd5, 0x7b, 0x6b, 0x3c, 0x08, 0x10,
    0xd5, 0x7b, 0x69, 0x3c, 0x08, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7b, 0x69, 0x3c, 0x08, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7b, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7b, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7b, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7b, 0x69, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7f, 0x6b, 0x04, 0x11, 0x01,
    0xd5, 0x7f, 0x6b, 0x04, 0x11, 0x10,
    0xd5, 0x7f, 0x69, 0x04, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x04, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7f, 0x69, 0x04, 0x11, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7f, 0x6b, 0x0c, 0x1a, 0x01,
    0xd5, 0x7f, 0x6b, 0x0c, 0x1a, 0x10,
    0xd5, 0x7f, 0x69, 0x0c, 0x1a, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x0c, 0x1a, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7f, 0x69, 0x0c, 0x1a, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7f, 0x6b, 0x14, 0x23, 0x01,
    0xd5, 0x7f, 0x6b, 0x14, 0x23, 0x10,
    0xd5, 0x7f, 0x69, 0x14, 0x23, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x14, 0x23, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7f, 0x69, 0x14, 0x23, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7f, 0x6b, 0x1c, 0x2c, 0x01,
    0xd5, 0x7f, 0x6b, 0x1c, 0x2c, 0x10,
    0xd5, 0x7f, 0x69, 0x1c, 0x2c, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x1c, 0x2c, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7f, 0x69, 0x1c, 0x2c, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7f, 0x6b, 0x64, 0x35, 0x00, 0x01,
    0xd5, 0x7f, 0x6b, 0x64, 0x35, 0x00, 0x10,
    0xd5, 0x7f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7f, 0x69, 0x64, 0x35, 0x00, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x7f, 0x6b, 0x2c, 0x3e, 0x01,
    0xd5, 0x7f, 0x6b, 0x2c, 0x3e, 0x10,
    0xd5, 0x7f, 0x69, 0x2c, 0x3e, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x2c, 0x3e, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x7f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x7f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x7f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x7f, 0x69, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0x34, 0x0f, 0x01,
    0xd5, 0x5d, 0x6b, 0x34, 0x0f, 0x10,
    0xd5, 0x5d, 0x69, 0x34, 0x0f, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0x34, 0x0f, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0x34, 0x0f, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x4c, 0x6b, 0x3c, 0x11, 0x01,
    0xd5, 0x4c, 0x6b, 0x3c, 0x11, 0x10,
    0xd5, 0x4c, 0x69, 0x3c, 0x11, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x4c, 0x69, 0x3c, 0x11, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x4c, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x4c, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x4c, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x4c, 0x69, 0x3c, 0x11, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x6b, 0xca, 0x01,
    0x48, 0x6b, 0xca, 0x10,
    0x48, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x6b, 0xd3, 0x01,
    0x48, 0x6b, 0xd3, 0x10,
    0x48, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x48, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x48, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x6b, 0xd8, 0x01,
    0x49, 0x6b, 0xd8, 0x10,
    0x49, 0x69, 0xd8, 0x00, 0x01, 0x00, 0x00,
    0x49, 0x69, 0xd8, 0x00, 0x10, 0x00, 0x00,
    0x49, 0x69, 0xd8, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x69, 0xd8, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x69, 0xd8, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x69, 0xd8, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xc1, 0x01,
    0x4d, 0x6b, 0xc1, 0x10,
    0x4d, 0x69, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xca, 0x01,
    0x4d, 0x6b, 0xca, 0x10,
    0x4d, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xd3, 0x01,
    0x4d, 0x6b, 0xd3, 0x10,
    0x4d, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xdc, 0x01,
    0x4d, 0x6b, 0xdc, 0x10,
    0x4d, 0x69, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xe5, 0x01,
    0x4d, 0x6b, 0xe5, 0x10,
    0x4d, 0x69, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xee, 0x01,
    0x4d, 0x6b, 0xee, 0x10,
    0x4d, 0x69, 0xee, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xee, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xee, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xee, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xee, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xee, 0x00, 0x00, 0x00, 0x10,
    0x4d, 0x6b, 0xf7, 0x01,
    0x4d, 0x6b, 0xf7, 0x10,
    0x4d, 0x69, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0x4d, 0x69, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0x4d, 0x69, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0x4d, 0x69, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0x4d, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0x4d, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x1c, 0x6b, 0xf8, 0x01,
    0xd5, 0x1c, 0x6b, 0xf8, 0x10,
    0xd5, 0x1c, 0x69, 0xf8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x1c, 0x69, 0xf8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x1c, 0x69, 0xf8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x1c, 0x69, 0xf8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x1c, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x1c, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xc1, 0x01,
    0xd5, 0x58, 0x6b, 0xc1, 0x10,
    0xd5, 0x58, 0x69, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xca, 0x01,
    0xd5, 0x58, 0x6b, 0xca, 0x10,
    0xd5, 0x58, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xd3, 0x01,
    0xd5, 0x58, 0x6b, 0xd3, 0x10,
    0xd5, 0x58, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xdc, 0x01,
    0xd5, 0x58, 0x6b, 0xdc, 0x10,
    0xd5, 0x58, 0x69, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xe5, 0x01,
    0xd5, 0x58, 0x6b, 0xe5, 0x10,
    0xd5, 0x58, 0x69, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xee, 0x01,
    0xd5, 0x58, 0x6b, 0xee, 0x10,
    0xd5, 0x58, 0x69, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x58, 0x6b, 0xf7, 0x01,
    0xd5, 0x58, 0x6b, 0xf7, 0x10,
    0xd5, 0x58, 0x69, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x58, 0x69, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x58, 0x69, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x58, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x58, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x59, 0x6b, 0xf8, 0x01,
    0xd5, 0x59, 0x6b, 0xf8, 0x10,
    0xd5, 0x59, 0x69, 0xf8, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x59, 0x69, 0xf8, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x59, 0x69, 0xf8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x59, 0x69, 0xf8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x59, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x59, 0x69, 0xf8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xc1, 0x01,
    0xd5, 0x5d, 0x6b, 0xc1, 0x10,
    0xd5, 0x5d, 0x69, 0xc1, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xc1, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xc1, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xc1, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xc1, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xca, 0x01,
    0xd5, 0x5d, 0x6b, 0xca, 0x10,
    0xd5, 0x5d, 0x69, 0xca, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xca, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xca, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xca, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xca, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xca, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xd3, 0x01,
    0xd5, 0x5d, 0x6b, 0xd3, 0x10,
    0xd5, 0x5d, 0x69, 0xd3, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xd3, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xd3, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xd3, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xd3, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xdc, 0x01,
    0xd5, 0x5d, 0x6b, 0xdc, 0x10,
    0xd5, 0x5d, 0x69, 0xdc, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xdc, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xdc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xdc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xdc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xe5, 0x01,
    0xd5, 0x5d, 0x6b, 0xe5, 0x10,
    0xd5, 0x5d, 0x69, 0xe5, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xe5, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xe5, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xe5, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xe5, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xee, 0x01,
    0xd5, 0x5d, 0x6b, 0xee, 0x10,
    0xd5, 0x5d, 0x69, 0xee, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xee, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x5d, 0x6b, 0xf7, 0x01,
    0xd5, 0x5d, 0x6b, 0xf7, 0x10,
    0xd5, 0x5d, 0x69, 0xf7, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xf7, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x5d, 0x69, 0xf7, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x5d, 0x69, 0xf7, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x5d, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x5d, 0x69, 0xf7, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x4c, 0x6b, 0xf9, 0x01,
    0xd5, 0x4c, 0x6b, 0xf9, 0x10,
    0xd5, 0x4c, 0x69, 0xf9, 0x00, 0x01, 0x00, 0x00,
    0xd5, 0x4c, 0x69, 0xf9, 0x00, 0x10, 0x00, 0x00,
    0xd5, 0x4c, 0x69, 0xf9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x4c, 0x69, 0xf9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x4c, 0x69, 0xf9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x4c, 0x69, 0xf9, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x0f, 0xa4, 0xd1, 0x01,
    0x48, 0x0f, 0xa4, 0xd1, 0x02,
    0x48, 0x0f, 0xa4, 0xd1, 0x04,
    0x48, 0x0f, 0xa4, 0xd1, 0x08,
    0x48, 0x0f, 0xa4, 0xd1, 0x10,
    0x48, 0x0f, 0xa4, 0xda, 0x01,
    0x48, 0x0f, 0xa4, 0xda, 0x02,
    0x48, 0x0f, 0xa4, 0xda, 0x04,
    0x48, 0x0f, 0xa4, 0xda, 0x08,
    0x48, 0x0f, 0xa4, 0xda, 0x10,
    0x4c, 0x0f, 0xa4, 0xc3, 0x01,
    0x4c, 0x0f, 0xa4, 0xc3, 0x02,
    0x4c, 0x0f, 0xa4, 0xc3, 0x04,
    0x4c, 0x0f, 0xa4, 0xc3, 0x08,
    0x4c, 0x0f, 0xa4, 0xc3, 0x10,
    0x4d, 0x0f, 0xa4, 0xc8, 0x01,
    0x4d, 0x0f, 0xa4, 0xc8, 0x02,
    0x4d, 0x0f, 0xa4, 0xc8, 0x04,
    0x4d, 0x0f, 0xa4, 0xc8, 0x08,
    0x4d, 0x0f, 0xa4, 0xc8, 0x10,
    0x4d, 0x0f, 0xa4, 0xd1, 0x01,
    0x4d, 0x0f, 0xa4, 0xd1, 0x02,
    0x4d, 0x0f, 0xa4, 0xd1, 0x04,
    0x4d, 0x0f, 0xa4, 0xd1, 0x08,
    0x4d, 0x0f, 0xa4, 0xd1, 0x10,
    0x4d, 0x0f, 0xa4, 0xda, 0x01,
    0x4d, 0x0f, 0xa4, 0xda, 0x02,
    0x4d, 0x0f, 0xa4, 0xda, 0x04,
    0x4d, 0x0f, 0xa4, 0xda, 0x08,
    0x4d, 0x0f, 0xa4, 0xda, 0x10,
    0x4d, 0x0f, 0xa4, 0xe3, 0x01,
    0x4d, 0x0f, 0xa4, 0xe3, 0x02,
    0x4d, 0x0f, 0xa4, 0xe3, 0x04,
    0x4d, 0x0f, 0xa4, 0xe3, 0x08,
    0x4d, 0x0f, 0xa4, 0xe3, 0x10,
    0x4d, 0x0f, 0xa4, 0xec, 0x01,
    0x4d, 0x0f, 0xa4, 0xec, 0x02,
    0x4d, 0x0f, 0xa4, 0xec, 0x04,
    0x4d, 0x0f, 0xa4, 0xec, 0x08,
    0x4d, 0x0f, 0xa4, 0xec, 0x10,
    0x4d, 0x0f, 0xa4, 0xf5, 0x01,
    0x4d, 0x0f, 0xa4, 0xf5, 0x02,
    0x4d, 0x0f, 0xa4, 0xf5, 0x04,
    0x4d, 0x0f, 0xa4, 0xf5, 0x08,
    0x4d, 0x0f, 0xa4, 0xf5, 0x10,
    0x4d, 0x0f, 0xa4, 0xfe, 0x01,
    0x4d, 0x0f, 0xa4, 0xfe, 0x02,
    0x4d, 0x0f, 0xa4, 0xfe, 0x04,
    0x4d, 0x0f, 0xa4, 0xfe, 0x08,
    0x4d, 0x0f, 0xa4, 0xfe, 0x10,
    0xd5, 0xc9, 0xa4, 0xc7, 0x01,
    0xd5, 0xc9, 0xa4, 0xc7, 0x02,
    0xd5, 0xc9, 0xa4, 0xc7, 0x04,
    0xd5, 0xc9, 0xa4, 0xc7, 0x08,
    0xd5, 0xc9, 0xa4, 0xc7, 0x10,
    0xd5, 0xd8, 0xa4, 0xc8, 0x01,
    0xd5, 0xd8, 0xa4, 0xc8, 0x02,
    0xd5, 0xd8, 0xa4, 0xc8, 0x04,
    0xd5, 0xd8, 0xa4, 0xc8, 0x08,
    0xd5, 0xd8, 0xa4, 0xc8, 0x10,
    0xd5, 0xd8, 0xa4, 0xd1, 0x01,
    0xd5, 0xd8, 0xa4, 0xd1, 0x02,
    0xd5, 0xd8, 0xa4, 0xd1, 0x04,
    0xd5, 0xd8, 0xa4, 0xd1, 0x08,
    0xd5, 0xd8, 0xa4, 0xd1, 0x10,
    0xd5, 0xd8, 0xa4, 0xda, 0x01,
    0xd5, 0xd8, 0xa4, 0xda, 0x02,
    0xd5, 0xd8, 0xa4, 0xda, 0x04,
    0xd5, 0xd8, 0xa4, 0xda, 0x08,
    0xd5, 0xd8, 0xa4, 0xda, 0x10,
    0xd5, 0xd8, 0xa4, 0xe3, 0x01,
    0xd5, 0xd8, 0xa4, 0xe3, 0x02,
    0xd5, 0xd8, 0xa4, 0xe3, 0x04,
    0xd5, 0xd8, 0xa4, 0xe3, 0x08,
    0xd5, 0xd8, 0xa4, 0xe3, 0x10,
    0xd5, 0xd8, 0xa4, 0xec, 0x01,
    0xd5, 0xd8, 0xa4, 0xec, 0x02,
    0xd5, 0xd8, 0xa4, 0xec, 0x04,
    0xd5, 0xd8, 0xa4, 0xec, 0x08,
    0xd5, 0xd8, 0xa4, 0xec, 0x10,
    0xd5, 0xd8, 0xa4, 0xf5, 0x01,
    0xd5, 0xd8, 0xa4, 0xf5, 0x02,
    0xd5, 0xd8, 0xa4, 0xf5, 0x04,
    0xd5, 0xd8, 0xa4, 0xf5, 0x08,
    0xd5, 0xd8, 0xa4, 0xf5, 0x10,
    0xd5, 0xd8, 0xa4, 0xfe, 0x01,
    0xd5, 0xd8, 0xa4, 0xfe, 0x02,
    0xd5, 0xd8, 0xa4, 0xfe, 0x04,
    0xd5, 0xd8, 0xa4, 0xfe, 0x08,
    0xd5, 0xd8, 0xa4, 0xfe, 0x10,
    0xd5, 0xdc, 0xa4, 0xc7, 0x01,
    0xd5, 0xdc, 0xa4, 0xc7, 0x02,
    0xd5, 0xdc, 0xa4, 0xc7, 0x04,
    0xd5, 0xdc, 0xa4, 0xc7, 0x08,
    0xd5, 0xdc, 0xa4, 0xc7, 0x10,
    0xd5, 0xdd, 0xa4, 0xc8, 0x01,
    0xd5, 0xdd, 0xa4, 0xc8, 0x02,
    0xd5, 0xdd, 0xa4, 0xc8, 0x04,
    0xd5, 0xdd, 0xa4, 0xc8, 0x08,
    0xd5, 0xdd, 0xa4, 0xc8, 0x10,
    0xd5, 0xdd, 0xa4, 0xd1, 0x01,
    0xd5, 0xdd, 0xa4, 0xd1, 0x02,
    0xd5, 0xdd, 0xa4, 0xd1, 0x04,
    0xd5, 0xdd, 0xa4, 0xd1, 0x08,
    0xd5, 0xdd, 0xa4, 0xd1, 0x10,
    0xd5, 0xdd, 0xa4, 0xda, 0x01,
    0xd5, 0xdd, 0xa4, 0xda, 0x02,
    0xd5, 0xdd, 0xa4, 0xda, 0x04,
    0xd5, 0xdd, 0xa4, 0xda, 0x08,
    0xd5, 0xdd, 0xa4, 0xda, 0x10,
    0xd5, 0xdd, 0xa4, 0xe3, 0x01,
    0xd5, 0xdd, 0xa4, 0xe3, 0x02,
    0xd5, 0xdd, 0xa4, 0xe3, 0x04,
    0xd5, 0xdd, 0xa4, 0xe3, 0x08,
    0xd5, 0xdd, 0xa4, 0xe3, 0x10,
    0xd5, 0xdd, 0xa4, 0xec, 0x01,
    0xd5, 0xdd, 0xa4, 0xec, 0x02,
    0xd5, 0xdd, 0xa4, 0xec, 0x04,
    0xd5, 0xdd, 0xa4, 0xec, 0x08,
    0xd5, 0xdd, 0xa4, 0xec, 0x10,
    0xd5, 0xdd, 0xa4, 0xf5, 0x01,
    0xd5, 0xdd, 0xa4, 0xf5, 0x02,
    0xd5, 0xdd, 0xa4, 0xf5, 0x04,
    0xd5, 0xdd, 0xa4, 0xf5, 0x08,
    0xd5, 0xdd, 0xa4, 0xf5, 0x10,
    0xd5, 0xdd, 0xa4, 0xfe, 0x01,
    0xd5, 0xdd, 0xa4, 0xfe, 0x02,
    0xd5, 0xdd, 0xa4, 0xfe, 0x04,
    0xd5, 0xdd, 0xa4, 0xfe, 0x08,
    0xd5, 0xdd, 0xa4, 0xfe, 0x10,
    0xd5, 0x99, 0xa4, 0xcf, 0x01,
    0xd5, 0x99, 0xa4, 0xcf, 0x02,
    0xd5, 0x99, 0xa4, 0xcf, 0x04,
    0xd5, 0x99, 0xa4, 0xcf, 0x08,
    0xd5, 0x99, 0xa4, 0xcf, 0x10,
    0x48, 0x0f, 0xac, 0xd1, 0x01,
    0x48, 0x0f, 0xac, 0xd1, 0x02,
    0x48, 0x0f, 0xac, 0xd1, 0x04,
    0x48, 0x0f, 0xac, 0xd1, 0x08,
    0x48, 0x0f, 0xac, 0xd1, 0x10,
    0x48, 0x0f, 0xac, 0xda, 0x01,
    0x48, 0x0f, 0xac, 0xda, 0x02,
    0x48, 0x0f, 0xac, 0xda, 0x04,
    0x48, 0x0f, 0xac, 0xda, 0x08,
    0x48, 0x0f, 0xac, 0xda, 0x10,
    0x4c, 0x0f, 0xac, 0xc3, 0x01,
    0x4c, 0x0f, 0xac, 0xc3, 0x02,
    0x4c, 0x0f, 0xac, 0xc3, 0x04,
    0x4c, 0x0f, 0xac, 0xc3, 0x08,
    0x4c, 0x0f, 0xac, 0xc3, 0x10,
    0x4d, 0x0f, 0xac, 0xc8, 0x01,
    0x4d, 0x0f, 0xac, 0xc8, 0x02,
    0x4d, 0x0f, 0xac, 0xc8, 0x04,
    0x4d, 0x0f, 0xac, 0xc8, 0x08,
    0x4d, 0x0f, 0xac, 0xc8, 0x10,
    0x4d, 0x0f, 0xac, 0xd1, 0x01,
    0x4d, 0x0f, 0xac, 0xd1, 0x02,
    0x4d, 0x0f, 0xac, 0xd1, 0x04,
    0x4d, 0x0f, 0xac, 0xd1, 0x08,
    0x4d, 0x0f, 0xac, 0xd1, 0x10,
    0x4d, 0x0f, 0xac, 0xda, 0x01,
    0x4d, 0x0f, 0xac, 0xda, 0x02,
    0x4d, 0x0f, 0xac, 0xda, 0x04,
    0x4d, 0x0f, 0xac, 0xda, 0x08,
    0x4d, 0x0f, 0xac, 0xda, 0x10,
    0x4d, 0x0f, 0xac, 0xe3, 0x01,
    0x4d, 0x0f, 0xac, 0xe3, 0x02,
    0x4d, 0x0f, 0xac, 0xe3, 0x04,
    0x4d, 0x0f, 0xac, 0xe3, 0x08,
    0x4d, 0x0f, 0xac, 0xe3, 0x10,
    0x4d, 0x0f, 0xac, 0xec, 0x01,
    0x4d, 0x0f, 0xac, 0xec, 0x02,
    0x4d, 0x0f, 0xac, 0xec, 0x04,
    0x4d, 0x0f, 0xac, 0xec, 0x08,
    0x4d, 0x0f, 0xac, 0xec, 0x10,
    0x4d, 0x0f, 0xac, 0xf5, 0x01,
    0x4d, 0x0f, 0xac, 0xf5, 0x02,
    0x4d, 0x0f, 0xac, 0xf5, 0x04,
    0x4d, 0x0f, 0xac, 0xf5, 0x08,
    0x4d, 0x0f, 0xac, 0xf5, 0x10,
    0x4d, 0x0f, 0xac, 0xfe, 0x01,
    0x4d, 0x0f, 0xac, 0xfe, 0x02,
    0x4d, 0x0f, 0xac, 0xfe, 0x04,
    0x4d, 0x0f, 0xac, 0xfe, 0x08,
    0x4d, 0x0f, 0xac, 0xfe, 0x10,
    0xd5, 0xc9, 0xac, 0xc7, 0x01,
    0xd5, 0xc9, 0xac, 0xc7, 0x02,
    0xd5, 0xc9, 0xac, 0xc7, 0x04,
    0xd5, 0xc9, 0xac, 0xc7, 0x08,
    0xd5, 0xc9, 0xac, 0xc7, 0x10,
    0xd5, 0xd8, 0xac, 0xc8, 0x01,
    0xd5, 0xd8, 0xac, 0xc8, 0x02,
    0xd5, 0xd8, 0xac, 0xc8, 0x04,
    0xd5, 0xd8, 0xac, 0xc8, 0x08,
    0xd5, 0xd8, 0xac, 0xc8, 0x10,
    0xd5, 0xd8, 0xac, 0xd1, 0x01,
    0xd5, 0xd8, 0xac, 0xd1, 0x02,
    0xd5, 0xd8, 0xac, 0xd1, 0x04,
    0xd5, 0xd8, 0xac, 0xd1, 0x08,
    0xd5, 0xd8, 0xac, 0xd1, 0x10,
    0xd5, 0xd8, 0xac, 0xda, 0x01,
    0xd5, 0xd8, 0xac, 0xda, 0x02,
    0xd5, 0xd8, 0xac, 0xda, 0x04,
    0xd5, 0xd8, 0xac, 0xda, 0x08,
    0xd5, 0xd8, 0xac, 0xda, 0x10,
    0xd5, 0xd8, 0xac, 0xe3, 0x01,
    0xd5, 0xd8, 0xac, 0xe3, 0x02,
    0xd5, 0xd8, 0xac, 0xe3, 0x04,
    0xd5, 0xd8, 0xac, 0xe3, 0x08,
    0xd5, 0xd8, 0xac, 0xe3, 0x10,
    0xd5, 0xd8, 0xac, 0xec, 0x01,
    0xd5, 0xd8, 0xac, 0xec, 0x02,
    0xd5, 0xd8, 0xac, 0xec, 0x04,
    0xd5, 0xd8, 0xac, 0xec, 0x08,
    0xd5, 0xd8, 0xac, 0xec, 0x10,
    0xd5, 0xd8, 0xac, 0xf5, 0x01,
    0xd5, 0xd8, 0xac, 0xf5, 0x02,
    0xd5, 0xd8, 0xac, 0xf5, 0x04,
    0xd5, 0xd8, 0xac, 0xf5, 0x08,
    0xd5, 0xd8, 0xac, 0xf5, 0x10,
    0xd5, 0xd8, 0xac, 0xfe, 0x01,
    0xd5, 0xd8, 0xac, 0xfe, 0x02,
    0xd5, 0xd8, 0xac, 0xfe, 0x04,
    0xd5, 0xd8, 0xac, 0xfe, 0x08,
    0xd5, 0xd8, 0xac, 0xfe, 0x10,
    0xd5, 0xdc, 0xac, 0xc7, 0x01,
    0xd5, 0xdc, 0xac, 0xc7, 0x02,
    0xd5, 0xdc, 0xac, 0xc7, 0x04,
    0xd5, 0xdc, 0xac, 0xc7, 0x08,
    0xd5, 0xdc, 0xac, 0xc7, 0x10,
    0xd5, 0xdd, 0xac, 0xc8, 0x01,
    0xd5, 0xdd, 0xac, 0xc8, 0x02,
    0xd5, 0xdd, 0xac, 0xc8, 0x04,
    0xd5, 0xdd, 0xac, 0xc8, 0x08,
    0xd5, 0xdd, 0xac, 0xc8, 0x10,
    0xd5, 0xdd, 0xac, 0xd1, 0x01,
    0xd5, 0xdd, 0xac, 0xd1, 0x02,
    0xd5, 0xdd, 0xac, 0xd1, 0x04,
    0xd5, 0xdd, 0xac, 0xd1, 0x08,
    0xd5, 0xdd, 0xac, 0xd1, 0x10,
    0xd5, 0xdd, 0xac, 0xda, 0x01,
    0xd5, 0xdd, 0xac, 0xda, 0x02,
    0xd5, 0xdd, 0xac, 0xda, 0x04,
    0xd5, 0xdd, 0xac, 0xda, 0x08,
    0xd5, 0xdd, 0xac, 0xda, 0x10,
    0xd5, 0xdd, 0xac, 0xe3, 0x01,
    0xd5, 0xdd, 0xac, 0xe3, 0x02,
    0xd5, 0xdd, 0xac, 0xe3, 0x04,
    0xd5, 0xdd, 0xac, 0xe3, 0x08,
    0xd5, 0xdd, 0xac, 0xe3, 0x10,
    0xd5, 0xdd, 0xac, 0xec, 0x01,
    0xd5, 0xdd, 0xac, 0xec, 0x02,
    0xd5, 0xdd, 0xac, 0xec, 0x04,
    0xd5, 0xdd, 0xac, 0xec, 0x08,
    0xd5, 0xdd, 0xac, 0xec, 0x10,
    0xd5, 0xdd, 0xac, 0xf5, 0x01,
    0xd5, 0xdd, 0xac, 0xf5, 0x02,
    0xd5, 0xdd, 0xac, 0xf5, 0x04,
    0xd5, 0xdd, 0xac, 0xf5, 0x08,
    0xd5, 0xdd, 0xac, 0xf5, 0x10,
    0xd5, 0xdd, 0xac, 0xfe, 0x01,
    0xd5, 0xdd, 0xac, 0xfe, 0x02,
    0xd5, 0xdd, 0xac, 0xfe, 0x04,
    0xd5, 0xdd, 0xac, 0xfe, 0x08,
    0xd5, 0xdd, 0xac, 0xfe, 0x10,
    0xd5, 0x99, 0xac, 0xcf, 0x01,
    0xd5, 0x99, 0xac, 0xcf, 0x02,
    0xd5, 0x99, 0xac, 0xcf, 0x04,
    0xd5, 0x99, 0xac, 0xcf, 0x08,
    0xd5, 0x99, 0xac, 0xcf, 0x10,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x04, 0x00,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x40, 0x00,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x04,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x40,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x04, 0x00,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x40, 0x00,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x00, 0x04,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0xca, 0x00, 0x00, 0x00, 0x40,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x04, 0x00,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x40, 0x00,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x04,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xca, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xce, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xca, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xce, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xc9, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xca, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xcb, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xcc, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xce, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xcf, 0x00, 0x00, 0x00, 0x40,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x48, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xec, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xed, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xee, 0x00, 0x00, 0x00, 0x40,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x40, 0x00,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x00, 0x04,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0x49, 0x81, 0xef, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xec, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xed, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xee, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x18, 0x81, 0xef, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xe8, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xe9, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xea, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xeb, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xec, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xed, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xee, 0x00, 0x00, 0x00, 0x40,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x01, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x40, 0x00,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x00, 0x01,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x00, 0x04,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x00, 0x10,
    0xd5, 0x19, 0x81, 0xef, 0x00, 0x00, 0x00, 0x40,
    0x62, 0xf4, 0x74, 0x18, 0x8f, 0xc2,
    0x62, 0xf4, 0x6c, 0x18, 0x8f, 0xc3,
    0x62, 0xd4, 0x64, 0x18, 0x8f, 0xc0,
    0x62, 0xd4, 0x3c, 0x18, 0x8f, 0xc1,
    0x62, 0xd4, 0x34, 0x18, 0x8f, 0xc2,
    0x62, 0xd4, 0x2c, 0x18, 0x8f, 0xc3,
    0x62, 0xd4, 0x24, 0x18, 0x8f, 0xc4,
    0x62, 0xd4, 0x1c, 0x18, 0x8f, 0xc5,
    0x62, 0xd4, 0x14, 0x18, 0x8f, 0xc6,
    0x62, 0xd4, 0x0c, 0x18, 0x8f, 0xc7,
    0x62, 0xfc, 0x04, 0x18, 0x8f, 0xc0,
    0x62, 0xfc, 0x7c, 0x10, 0x8f, 0xc1,
    0x62, 0xfc, 0x74, 0x10, 0x8f, 0xc2,
    0x62, 0xfc, 0x6c, 0x10, 0x8f, 0xc3,
    0x62, 0xfc, 0x64, 0x10, 0x8f, 0xc4,
    0x62, 0xfc, 0x5c, 0x10, 0x8f, 0xc5,
    0x62, 0xfc, 0x54, 0x10, 0x8f, 0xc6,
    0x62, 0xfc, 0x4c, 0x10, 0x8f, 0xc7,
    0x62, 0xdc, 0x44, 0x10, 0x8f, 0xc0,
    0x62, 0xdc, 0x3c, 0x10, 0x8f, 0xc1,
    0x62, 0xdc, 0x34, 0x10, 0x8f, 0xc2,
    0x62, 0xdc, 0x2c, 0x10, 0x8f, 0xc3,
    0x62, 0xdc, 0x24, 0x10, 0x8f, 0xc4,
    0x62, 0xdc, 0x1c, 0x10, 0x8f, 0xc5,
    0x62, 0xdc, 0x14, 0x10, 0x8f, 0xc6,
    0x62, 0xdc, 0x0c, 0x10, 0x8f, 0xc7,
    0x62, 0xf4, 0x04, 0x10, 0x8f, 0xc1,
    0x62, 0xf4, 0xf4, 0x18, 0x8f, 0xc2,
    0x62, 0xf4, 0xec, 0x18, 0x8f, 0xc3,
    0x62, 0xd4, 0xe4, 0x18, 0x8f, 0xc0,
    0x62, 0xd4, 0xbc, 0x18, 0x8f, 0xc1,
    0x62, 0xd4, 0xb4, 0x18, 0x8f, 0xc2,
    0x62, 0xd4, 0xac, 0x18, 0x8f, 0xc3,
    0x62, 0xd4, 0xa4, 0x18, 0x8f, 0xc4,
    0x62, 0xd4, 0x9c, 0x18, 0x8f, 0xc5,
    0x62, 0xd4, 0x94, 0x18, 0x8f, 0xc6,
    0x62, 0xd4, 0x8c, 0x18, 0x8f, 0xc7,
    0x62, 0xfc, 0x84, 0x18, 0x8f, 0xc0,
    0x62, 0xfc, 0xfc, 0x10, 0x8f, 0xc1,
    0x62, 0xfc, 0xf4, 0x10, 0x8f, 0xc2,
    0x62, 0xfc, 0xec, 0x10, 0x8f, 0xc3,
    0x62, 0xfc, 0xe4, 0x10, 0x8f, 0xc4,
    0x62, 0xfc, 0xdc, 0x10, 0x8f, 0xc5,
    0x62, 0xfc, 0xd4, 0x10, 0x8f, 0xc6,
    0x62, 0xfc, 0xcc, 0x10, 0x8f, 0xc7,
    0x62, 0xdc, 0xc4, 0x10, 0x8f, 0xc0,
    0x62, 0xdc, 0xbc, 0x10, 0x8f, 0xc1,
    0x62, 0xdc, 0xb4, 0x10, 0x8f, 0xc2,
    0x62, 0xdc, 0xac, 0x10, 0x8f, 0xc3,
    0x62, 0xdc, 0xa4, 0x10, 0x8f, 0xc4,
    0x62, 0xdc, 0x9c, 0x10, 0x8f, 0xc5,
    0x62, 0xdc, 0x94, 0x10, 0x8f, 0xc6,
    0x62, 0xdc, 0x8c, 0x10, 0x8f, 0xc7,
    0x62, 0xf4, 0x84, 0x10, 0x8f, 0xc1,
    0x62, 0xf4, 0x74, 0x18, 0xff, 0xf2,
    0x62, 0xf4, 0x6c, 0x18, 0xff, 0xf3,
    0x62, 0xd4, 0x64, 0x18, 0xff, 0xf0,
    0x62, 0xd4, 0x3c, 0x18, 0xff, 0xf1,
    0x62, 0xd4, 0x34, 0x18, 0xff, 0xf2,
    0x62, 0xd4, 0x2c, 0x18, 0xff, 0xf3,
    0x62, 0xd4, 0x24, 0x18, 0xff, 0xf4,
    0x62, 0xd4, 0x1c, 0x18, 0xff, 0xf5,
    0x62, 0xd4, 0x14, 0x18, 0xff, 0xf6,
    0x62, 0xd4, 0x0c, 0x18, 0xff, 0xf7,
    0x62, 0xfc, 0x04, 0x18, 0xff, 0xf0,
    0x62, 0xfc, 0x7c, 0x10, 0xff, 0xf1,
    0x62, 0xfc, 0x74, 0x10, 0xff, 0xf2,
    0x62, 0xfc, 0x6c, 0x10, 0xff, 0xf3,
    0x62, 0xfc, 0x64, 0x10, 0xff, 0xf4,
    0x62, 0xfc, 0x5c, 0x10, 0xff, 0xf5,
    0x62, 0xfc, 0x54, 0x10, 0xff, 0xf6,
    0x62, 0xfc, 0x4c, 0x10, 0xff, 0xf7,
    0x62, 0xdc, 0x44, 0x10, 0xff, 0xf0,
    0x62, 0xdc, 0x3c, 0x10, 0xff, 0xf1,
    0x62, 0xdc, 0x34, 0x10, 0xff, 0xf2,
    0x62, 0xdc, 0x2c, 0x10, 0xff, 0xf3,
    0x62, 0xdc, 0x24, 0x10, 0xff, 0xf4,
    0x62, 0xdc, 0x1c, 0x10, 0xff, 0xf5,
    0x62, 0xdc, 0x14, 0x10, 0xff, 0xf6,
    0x62, 0xdc, 0x0c, 0x10, 0xff, 0xf7,
    0x62, 0xf4, 0x04, 0x10, 0xff, 0xf1,
    0x62, 0xf4, 0xf4, 0x18, 0xff, 0xf2,
    0x62, 0xf4, 0xec, 0x18, 0xff, 0xf3,
    0x62, 0xd4, 0xe4, 0x18, 0xff, 0xf0,
    0x62, 0xd4, 0xbc, 0x18, 0xff, 0xf1,
    0x62, 0xd4, 0xb4, 0x18, 0xff, 0xf2,
    0x62, 0xd4, 0xac, 0x18, 0xff, 0xf3,
    0x62, 0xd4, 0xa4, 0x18, 0xff, 0xf4,
    0x62, 0xd4, 0x9c, 0x18, 0xff, 0xf5,
    0x62, 0xd4, 0x94, 0x18, 0xff, 0xf6,
    0x62, 0xd4, 0x8c, 0x18, 0xff, 0xf7,
    0x62, 0xfc, 0x84, 0x18, 0xff, 0xf0,
    0x62, 0xfc, 0xfc, 0x10, 0xff, 0xf1,
    0x62, 0xfc, 0xf4, 0x10, 0xff, 0xf2,
    0x62, 0xfc, 0xec, 0x10, 0xff, 0xf3,
    0x62, 0xfc, 0xe4, 0x10, 0xff, 0xf4,
    0x62, 0xfc, 0xdc, 0x10, 0xff, 0xf5,
    0x62, 0xfc, 0xd4, 0x10, 0xff, 0xf6,
    0x62, 0xfc, 0xcc, 0x10, 0xff, 0xf7,
    0x62, 0xdc, 0xc4, 0x10, 0xff, 0xf0,
    0x62, 0xdc, 0xbc, 0x10, 0xff, 0xf1,
    0x62, 0xdc, 0xb4, 0x10, 0xff, 0xf2,
    0x62, 0xdc, 0xac, 0x10, 0xff, 0xf3,
    0x62, 0xdc, 0xa4, 0x10, 0xff, 0xf4,
    0x62, 0xdc, 0x9c, 0x10, 0xff, 0xf5,
    0x62, 0xdc, 0x94, 0x10, 0xff, 0xf6,
    0x62, 0xdc, 0x8c, 0x10, 0xff, 0xf7,
    0x62, 0xf4, 0x84, 0x10, 0xff, 0xf1,
#endif // _LP64
  };
  static const unsigned int insns_lens[] =
  {
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4,
#endif // _LP64
    2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
#endif // _LP64
    2,
    2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3, 3,
    3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4,
#endif // _LP64
    2, 2,
#ifdef _LP64
    3, 3, 3, 3,
    3, 3, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5,
#endif // _LP64
    2, 2,
#ifdef _LP64
    3, 3, 3,
    3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4,
#endif // _LP64
    2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4,
#endif // _LP64
    2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3,
    3, 3, 3, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4,
#endif // _LP64
    2, 2,
#ifdef _LP64
    3, 3,
    3, 3, 3, 3, 3, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4,
    4, 4, 5, 4, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4,
    4, 4, 4, 4, 4, 5, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4,
    5, 4, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4,
    4, 4, 4, 5, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 4, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 7, 7,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 7, 7, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 7,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 7, 7, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 7, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 4, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 7, 7,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 7, 7, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 7,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 7, 7, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 7, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 4, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 4, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 4, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6,
#endif // _LP64
    6, 6,
#ifdef _LP64
    7, 7,
    7, 7, 7, 7, 8, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 8, 8,
    8, 8, 8, 8, 9, 8, 8, 6,
    6, 7, 7, 7, 7, 7, 7, 8,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 8, 8, 8, 8, 8, 8, 9,
    8, 8, 6, 6, 7, 7, 7, 7,
    7, 7, 8, 7, 8, 8, 8, 8,
    8, 8, 9, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 8, 6, 6, 7,
    7, 7, 7, 7, 7, 8, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 8,
    8, 8, 8, 8, 8, 9, 8, 8,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 4, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 7, 7,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 7, 7, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 7,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 7, 7, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 7, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4,
    5, 4, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 4, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 4, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 4, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 4, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6,
#endif // _LP64
    4,
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6,
    5, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 4, 4, 5, 5, 5, 5,
    5, 5, 6, 5, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 7, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    7, 7, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 7, 7, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 7, 7,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 7, 7, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9,
#endif // _LP64
    3,
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 4, 4, 5, 5, 5, 5,
    5, 5, 6, 5, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 4, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    4, 4, 5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 4, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 4, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 7,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 7, 7, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 7, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    7, 7, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 7, 7, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 4, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 7,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 7, 7, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 7, 7, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    7, 7, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 7, 7, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 4, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 4, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 4,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6,
#endif // _LP64
    4, 4,
#ifdef _LP64
    5, 5, 5, 5,
    5, 5, 6, 5, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 4, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    7, 7, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 7, 7, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 7, 7,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 7, 7, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 7, 7, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 7,
    7, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    5,
#ifdef _LP64
    6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4,
    4, 4, 5, 4, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4,
    4, 4, 4, 4, 4, 5, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5,
#endif // _LP64
    5,
#ifdef _LP64
    6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5,
#endif // _LP64
    5,
#ifdef _LP64
    6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
#endif // _LP64
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5,
    5, 5, 6, 5, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 6,
#endif // _LP64
    3,
#ifdef _LP64
    4,
    4, 4, 4, 4, 4, 5, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5,
#endif // _LP64
    3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3,
#ifdef _LP64
    4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5,
#endif // _LP64
    3, 3, 6,
    6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 6, 6,
#ifdef _LP64
    4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8,
#endif // _LP64
    3, 3, 6,
    6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 6, 6,
#ifdef _LP64
    4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8,
#endif // _LP64
    3, 3, 6,
    6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 6, 6,
#ifdef _LP64
    4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8,
#endif // _LP64
    2, 3, 3,
    3, 3, 2, 3, 3, 3, 3, 2,
    3, 3, 3, 3,
#ifdef _LP64
    3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5,
#endif // _LP64
    2, 3, 3, 3,
    3, 2, 3, 3, 3, 3, 2, 3,
    3, 3, 3,
#ifdef _LP64
    3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5,
#endif // _LP64
    2, 3, 3, 3, 3,
    2, 3, 3, 3, 3, 2, 3, 3,
    3, 3,
#ifdef _LP64
    3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5,
#endif // _LP64
    2, 3, 3, 3, 3, 2,
    3, 3, 3, 3, 2, 3, 3, 3,
    3,
#ifdef _LP64
    3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5,
#endif // _LP64
    3, 3, 6, 6, 6, 6, 6,
    6, 3, 3, 6, 6, 6, 6, 6,
    6, 3, 3, 6, 6, 6, 6, 6,
    6,
#ifdef _LP64
    4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 4, 4, 7, 7, 7, 7, 7,
    7, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8, 5, 5, 8, 8, 8, 8, 8,
    8,
#endif // _LP64
    2, 3, 3, 3, 3, 2, 3,
    3, 3, 3, 2, 3, 3, 3, 3,
#ifdef _LP64
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
#endif // _LP64
    2, 3, 3, 3, 3, 2, 3, 3,
    3, 3, 2, 3, 3, 3, 3,
#ifdef _LP64
    3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5,
#endif // _LP64
    3,
    3, 6, 6, 6, 6, 6, 6, 3,
    3, 6, 6, 6, 6, 6, 6, 3,
    3, 6, 6, 6, 6, 6, 6,
#ifdef _LP64
    4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8,
#endif // _LP64
    3,
    3, 6, 6, 6, 6, 6, 6, 3,
    3, 6, 6, 6, 6, 6, 6, 3,
    3, 6, 6, 6, 6, 6, 6,
#ifdef _LP64
    4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5,
#endif // _LP64
    4,
#ifdef _LP64
    5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5,
#endif // _LP64
    3,
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4,
#endif // _LP64
    3, 3,
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    3,
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4,
#endif // _LP64
    3, 3,
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4,
#endif // _LP64
    3, 3, 3,
#ifdef _LP64
    4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    2,
    2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3,
    3, 3, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3,
    3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3,
    3, 3, 3, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3,
    3, 3, 3, 3, 3, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4,
#endif // _LP64
    2, 2,
    2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3, 3,
    3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3, 3,
    3, 3, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3,
    3, 3, 3, 3, 3, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    2,
    2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3,
    3, 3, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3,
    3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3, 3, 3, 3,
    3, 3, 3, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4,
#endif // _LP64
    2, 2, 2,
#ifdef _LP64
    3, 3,
    3, 3, 3, 3, 3, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5,
#endif // _LP64
    3,
    3,
#ifdef _LP64
    4, 4, 4, 4, 4, 4, 5,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4, 4, 4, 4,
    4, 4, 5, 4, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5,
#endif // _LP64
    3, 3,
#ifdef _LP64
    4,
    4, 4, 4, 4, 4, 5, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
#endif // _LP64
    4, 4, 7, 7, 7, 7, 7, 7,
#ifdef _LP64
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    6, 6, 9, 9, 9, 9, 9, 9,
    5, 5, 8, 8, 8, 8, 8, 8,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    7, 7, 10, 10, 10, 10, 10, 10,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    7, 7, 10, 10, 10, 10, 10, 10,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
    6, 6, 9, 9, 9, 9, 9, 9,
#endif // _LP64
    3, 3, 6, 6, 6, 6, 6, 6,
    3, 3, 6, 6, 6, 6, 6, 6,
#ifdef _LP64
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
#endif // _LP64
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
#endif // _LP64
    4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4,
#ifdef _LP64
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5,
#endif // _LP64
    6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6,
#ifdef _LP64
    7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 4, 4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 4, 4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    4, 4, 4, 4, 4, 4, 4, 5,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 4, 4, 4, 4, 4,
    4, 4, 5, 4, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 8, 8, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 8,
    8, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 8, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 8, 8, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    8, 8, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 8, 8, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 5, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 8, 8, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 8,
    8, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 8, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 8, 8, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    8, 8, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 8, 8, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 4, 4,
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 5, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 6, 6, 6,
    6, 6, 7, 6, 6, 5, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 8, 8, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 8, 8,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 8, 8, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 8, 8, 8, 8,
    8, 8, 8, 8, 9, 8, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 9,
    9, 9, 9, 9, 10, 9, 9, 8,
    8, 8, 8, 8, 8, 8, 8, 9,
    8, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 9, 9, 9, 9, 9, 10,
    9, 9, 8, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 4, 4, 4,
    4, 4, 4, 4, 4, 5, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 6, 6, 6, 6, 6,
    7, 6, 6, 5, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 6, 6,
    6, 6, 6, 7, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 5, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 8, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 8, 8, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    8, 8, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 8, 8, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 8, 8,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 8, 8, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 5, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 8, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 8, 8, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    8, 8, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 8, 8, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 8, 8,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 8, 8, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 5, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 6,
    6, 6, 6, 6, 7, 6, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 6, 6, 6, 6, 6, 7,
    6, 6, 8, 8, 8, 8, 8, 8,
    8, 8, 9, 8, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 9, 9, 9,
    9, 9, 10, 9, 9, 8, 8, 8,
    8, 8, 8, 8, 8, 9, 8, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    9, 9, 9, 9, 9, 10, 9, 9,
    8, 8, 8, 8, 8, 8, 8, 8,
    9, 8, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 9, 9, 9, 9, 9,
    10, 9, 9, 8, 8, 8, 8, 8,
    8, 8, 8, 9, 8, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 9, 9,
    9, 9, 9, 10, 9, 9, 8, 8,
    8, 8, 8, 8, 8, 8, 9, 8,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 9, 9, 9, 9, 9, 10, 9,
    9, 8, 8, 8, 8, 8, 8, 8,
    8, 9, 8, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 9, 9, 9, 9,
    9, 10, 9, 9, 4, 4, 4, 4,
    4, 4, 4, 5, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 4,
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 6, 6, 6,
    6, 7, 6, 6, 6, 4, 4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    4, 4, 4, 4, 4, 4, 4, 5,
    4, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 6, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    6, 6, 6, 6, 6, 7, 6, 6,
    6, 4, 4, 4, 4, 4, 4, 4,
    5, 4, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 4, 4, 4, 4,
    4, 4, 4, 5, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 6, 6, 6, 6, 7, 6,
    6, 6, 4, 4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 4, 4, 7,
    7, 7, 7, 7, 7, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 5, 5, 8,
    8, 8, 8, 8, 8, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    4, 4, 7, 7, 7, 7, 7, 7,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    5, 5, 8, 8, 8, 8, 8, 8,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 3, 4,
    4, 4, 4, 3, 4, 4, 4, 4,
    3, 4, 4, 4, 4, 3, 4, 4,
    4, 4, 3, 4, 4, 4, 4, 3,
    4, 4, 4, 4, 3, 4, 4, 4,
    4, 3, 4, 4, 4, 4, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 5,
    5, 5, 5, 4, 5, 5, 5, 5,
    4, 5, 5, 5, 5, 4, 5, 5,
    5, 5, 4, 5, 5, 5, 5, 4,
    5, 5, 5, 5, 4, 5, 5, 5,
    5, 4, 5, 5, 5, 5, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 4, 4,
    7, 7, 7, 7, 7, 7, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    8, 8, 8, 8, 8, 8, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 3, 3, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 3,
    3, 3, 3, 3, 3, 3, 3, 3,
    3, 3, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 3, 3, 3, 3, 3, 3,
    3, 3, 3, 3, 3, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 5, 4, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    5, 5, 5, 5, 5, 6, 5, 5,
    4, 4, 4, 4, 4, 4, 4, 4,
    5, 4, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 4, 4, 4, 4, 4,
    4, 4, 4, 5, 4, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 5, 5,
    5, 5, 5, 6, 5, 5, 4, 4,
    4, 4, 4, 4, 4, 4, 5, 4,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 5, 5, 5, 5, 5, 6, 5,
    5, 4, 4, 4, 4, 4, 4, 4,
    4, 5, 4, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 5, 5, 5, 5,
    5, 6, 5, 5, 4, 4, 4, 4,
    4, 4, 4, 4, 5, 4, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 5, 5, 5, 6, 5, 5, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 6,
    6, 9, 9, 9, 9, 9, 9, 5,
    5, 8, 8, 8, 8, 8, 8, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 7,
    7, 10, 10, 10, 10, 10, 10, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 7,
    7, 10, 10, 10, 10, 10, 10, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 6,
    6, 9, 9, 9, 9, 9, 9, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 4,
    4, 7, 7, 7, 7, 7, 7, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 8, 8, 8, 8, 8, 8, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6,
    6,
#endif // _LP64

  };

  static const char* insns_strs[] =
  {
    "__ shldl(rcx, rdx);",
    "__ shldl(rdx, rbx);",
#ifdef _LP64
    "__ shldl(rbx, r8);",
    "__ shldl(r8, r9);",
    "__ shldl(r9, r10);",
    "__ shldl(r10, r11);",
    "__ shldl(r11, r12);",
    "__ shldl(r12, r13);",
    "__ shldl(r13, r14);",
    "__ shldl(r14, r15);",
    "__ shldl(r15, r16);",
    "__ shldl(r16, r17);",
    "__ shldl(r17, r18);",
    "__ shldl(r18, r19);",
    "__ shldl(r19, r20);",
    "__ shldl(r20, r21);",
    "__ shldl(r21, r22);",
    "__ shldl(r22, r23);",
    "__ shldl(r23, r24);",
    "__ shldl(r24, r25);",
    "__ shldl(r25, r26);",
    "__ shldl(r26, r27);",
    "__ shldl(r27, r28);",
    "__ shldl(r28, r29);",
    "__ shldl(r29, r30);",
    "__ shldl(r30, r31);",
    "__ shldl(r31, rcx);",
#endif // _LP64
    "__ shrdl(rcx, rdx);",
    "__ shrdl(rdx, rbx);",
#ifdef _LP64
    "__ shrdl(rbx, r8);",
    "__ shrdl(r8, r9);",
    "__ shrdl(r9, r10);",
    "__ shrdl(r10, r11);",
    "__ shrdl(r11, r12);",
    "__ shrdl(r12, r13);",
    "__ shrdl(r13, r14);",
    "__ shrdl(r14, r15);",
    "__ shrdl(r15, r16);",
    "__ shrdl(r16, r17);",
    "__ shrdl(r17, r18);",
    "__ shrdl(r18, r19);",
    "__ shrdl(r19, r20);",
    "__ shrdl(r20, r21);",
    "__ shrdl(r21, r22);",
    "__ shrdl(r22, r23);",
    "__ shrdl(r23, r24);",
    "__ shrdl(r24, r25);",
    "__ shrdl(r25, r26);",
    "__ shrdl(r26, r27);",
    "__ shrdl(r27, r28);",
    "__ shrdl(r28, r29);",
    "__ shrdl(r29, r30);",
    "__ shrdl(r30, r31);",
    "__ shrdl(r31, rcx);",
#endif // _LP64
    "__ adcl(rcx, rdx);",
    "__ adcl(rdx, rbx);",
#ifdef _LP64
    "__ adcl(rbx, r8);",
    "__ adcl(r8, r9);",
    "__ adcl(r9, r10);",
    "__ adcl(r10, r11);",
    "__ adcl(r11, r12);",
    "__ adcl(r12, r13);",
    "__ adcl(r13, r14);",
    "__ adcl(r14, r15);",
    "__ adcl(r15, r16);",
    "__ adcl(r16, r17);",
    "__ adcl(r17, r18);",
    "__ adcl(r18, r19);",
    "__ adcl(r19, r20);",
    "__ adcl(r20, r21);",
    "__ adcl(r21, r22);",
    "__ adcl(r22, r23);",
    "__ adcl(r23, r24);",
    "__ adcl(r24, r25);",
    "__ adcl(r25, r26);",
    "__ adcl(r26, r27);",
    "__ adcl(r27, r28);",
    "__ adcl(r28, r29);",
    "__ adcl(r29, r30);",
    "__ adcl(r30, r31);",
    "__ adcl(r31, rcx);",
#endif // _LP64
    "__ imull(rcx, rdx);",
    "__ imull(rdx, rbx);",
#ifdef _LP64
    "__ imull(rbx, r8);",
    "__ imull(r8, r9);",
    "__ imull(r9, r10);",
    "__ imull(r10, r11);",
    "__ imull(r11, r12);",
    "__ imull(r12, r13);",
    "__ imull(r13, r14);",
    "__ imull(r14, r15);",
    "__ imull(r15, r16);",
    "__ imull(r16, r17);",
    "__ imull(r17, r18);",
    "__ imull(r18, r19);",
    "__ imull(r19, r20);",
    "__ imull(r20, r21);",
    "__ imull(r21, r22);",
    "__ imull(r22, r23);",
    "__ imull(r23, r24);",
    "__ imull(r24, r25);",
    "__ imull(r25, r26);",
    "__ imull(r26, r27);",
    "__ imull(r27, r28);",
    "__ imull(r28, r29);",
    "__ imull(r29, r30);",
    "__ imull(r30, r31);",
    "__ imull(r31, rcx);",
#endif // _LP64
    "__ popcntl(rcx, rdx);",
    "__ popcntl(rdx, rbx);",
#ifdef _LP64
    "__ popcntl(rbx, r8);",
    "__ popcntl(r8, r9);",
    "__ popcntl(r9, r10);",
    "__ popcntl(r10, r11);",
    "__ popcntl(r11, r12);",
    "__ popcntl(r12, r13);",
    "__ popcntl(r13, r14);",
    "__ popcntl(r14, r15);",
    "__ popcntl(r15, r16);",
    "__ popcntl(r16, r17);",
    "__ popcntl(r17, r18);",
    "__ popcntl(r18, r19);",
    "__ popcntl(r19, r20);",
    "__ popcntl(r20, r21);",
    "__ popcntl(r21, r22);",
    "__ popcntl(r22, r23);",
    "__ popcntl(r23, r24);",
    "__ popcntl(r24, r25);",
    "__ popcntl(r25, r26);",
    "__ popcntl(r26, r27);",
    "__ popcntl(r27, r28);",
    "__ popcntl(r28, r29);",
    "__ popcntl(r29, r30);",
    "__ popcntl(r30, r31);",
    "__ popcntl(r31, rcx);",
#endif // _LP64
    "__ sbbl(rcx, rdx);",
    "__ sbbl(rdx, rbx);",
#ifdef _LP64
    "__ sbbl(rbx, r8);",
    "__ sbbl(r8, r9);",
    "__ sbbl(r9, r10);",
    "__ sbbl(r10, r11);",
    "__ sbbl(r11, r12);",
    "__ sbbl(r12, r13);",
    "__ sbbl(r13, r14);",
    "__ sbbl(r14, r15);",
    "__ sbbl(r15, r16);",
    "__ sbbl(r16, r17);",
    "__ sbbl(r17, r18);",
    "__ sbbl(r18, r19);",
    "__ sbbl(r19, r20);",
    "__ sbbl(r20, r21);",
    "__ sbbl(r21, r22);",
    "__ sbbl(r22, r23);",
    "__ sbbl(r23, r24);",
    "__ sbbl(r24, r25);",
    "__ sbbl(r25, r26);",
    "__ sbbl(r26, r27);",
    "__ sbbl(r27, r28);",
    "__ sbbl(r28, r29);",
    "__ sbbl(r29, r30);",
    "__ sbbl(r30, r31);",
    "__ sbbl(r31, rcx);",
#endif // _LP64
    "__ subl(rcx, rdx);",
    "__ subl(rdx, rbx);",
#ifdef _LP64
    "__ subl(rbx, r8);",
    "__ subl(r8, r9);",
    "__ subl(r9, r10);",
    "__ subl(r10, r11);",
    "__ subl(r11, r12);",
    "__ subl(r12, r13);",
    "__ subl(r13, r14);",
    "__ subl(r14, r15);",
    "__ subl(r15, r16);",
    "__ subl(r16, r17);",
    "__ subl(r17, r18);",
    "__ subl(r18, r19);",
    "__ subl(r19, r20);",
    "__ subl(r20, r21);",
    "__ subl(r21, r22);",
    "__ subl(r22, r23);",
    "__ subl(r23, r24);",
    "__ subl(r24, r25);",
    "__ subl(r25, r26);",
    "__ subl(r26, r27);",
    "__ subl(r27, r28);",
    "__ subl(r28, r29);",
    "__ subl(r29, r30);",
    "__ subl(r30, r31);",
    "__ subl(r31, rcx);",
#endif // _LP64
    "__ tzcntl(rcx, rdx);",
    "__ tzcntl(rdx, rbx);",
#ifdef _LP64
    "__ tzcntl(rbx, r8);",
    "__ tzcntl(r8, r9);",
    "__ tzcntl(r9, r10);",
    "__ tzcntl(r10, r11);",
    "__ tzcntl(r11, r12);",
    "__ tzcntl(r12, r13);",
    "__ tzcntl(r13, r14);",
    "__ tzcntl(r14, r15);",
    "__ tzcntl(r15, r16);",
    "__ tzcntl(r16, r17);",
    "__ tzcntl(r17, r18);",
    "__ tzcntl(r18, r19);",
    "__ tzcntl(r19, r20);",
    "__ tzcntl(r20, r21);",
    "__ tzcntl(r21, r22);",
    "__ tzcntl(r22, r23);",
    "__ tzcntl(r23, r24);",
    "__ tzcntl(r24, r25);",
    "__ tzcntl(r25, r26);",
    "__ tzcntl(r26, r27);",
    "__ tzcntl(r27, r28);",
    "__ tzcntl(r28, r29);",
    "__ tzcntl(r29, r30);",
    "__ tzcntl(r30, r31);",
    "__ tzcntl(r31, rcx);",
#endif // _LP64
    "__ lzcntl(rcx, rdx);",
    "__ lzcntl(rdx, rbx);",
#ifdef _LP64
    "__ lzcntl(rbx, r8);",
    "__ lzcntl(r8, r9);",
    "__ lzcntl(r9, r10);",
    "__ lzcntl(r10, r11);",
    "__ lzcntl(r11, r12);",
    "__ lzcntl(r12, r13);",
    "__ lzcntl(r13, r14);",
    "__ lzcntl(r14, r15);",
    "__ lzcntl(r15, r16);",
    "__ lzcntl(r16, r17);",
    "__ lzcntl(r17, r18);",
    "__ lzcntl(r18, r19);",
    "__ lzcntl(r19, r20);",
    "__ lzcntl(r20, r21);",
    "__ lzcntl(r21, r22);",
    "__ lzcntl(r22, r23);",
    "__ lzcntl(r23, r24);",
    "__ lzcntl(r24, r25);",
    "__ lzcntl(r25, r26);",
    "__ lzcntl(r26, r27);",
    "__ lzcntl(r27, r28);",
    "__ lzcntl(r28, r29);",
    "__ lzcntl(r29, r30);",
    "__ lzcntl(r30, r31);",
    "__ lzcntl(r31, rcx);",
#endif // _LP64
    "__ addl(rcx, rdx);",
    "__ addl(rdx, rbx);",
#ifdef _LP64
    "__ addl(rbx, r8);",
    "__ addl(r8, r9);",
    "__ addl(r9, r10);",
    "__ addl(r10, r11);",
    "__ addl(r11, r12);",
    "__ addl(r12, r13);",
    "__ addl(r13, r14);",
    "__ addl(r14, r15);",
    "__ addl(r15, r16);",
    "__ addl(r16, r17);",
    "__ addl(r17, r18);",
    "__ addl(r18, r19);",
    "__ addl(r19, r20);",
    "__ addl(r20, r21);",
    "__ addl(r21, r22);",
    "__ addl(r22, r23);",
    "__ addl(r23, r24);",
    "__ addl(r24, r25);",
    "__ addl(r25, r26);",
    "__ addl(r26, r27);",
    "__ addl(r27, r28);",
    "__ addl(r28, r29);",
    "__ addl(r29, r30);",
    "__ addl(r30, r31);",
    "__ addl(r31, rcx);",
#endif // _LP64
    "__ andl(rcx, rdx);",
    "__ andl(rdx, rbx);",
#ifdef _LP64
    "__ andl(rbx, r8);",
    "__ andl(r8, r9);",
    "__ andl(r9, r10);",
    "__ andl(r10, r11);",
    "__ andl(r11, r12);",
    "__ andl(r12, r13);",
    "__ andl(r13, r14);",
    "__ andl(r14, r15);",
    "__ andl(r15, r16);",
    "__ andl(r16, r17);",
    "__ andl(r17, r18);",
    "__ andl(r18, r19);",
    "__ andl(r19, r20);",
    "__ andl(r20, r21);",
    "__ andl(r21, r22);",
    "__ andl(r22, r23);",
    "__ andl(r23, r24);",
    "__ andl(r24, r25);",
    "__ andl(r25, r26);",
    "__ andl(r26, r27);",
    "__ andl(r27, r28);",
    "__ andl(r28, r29);",
    "__ andl(r29, r30);",
    "__ andl(r30, r31);",
    "__ andl(r31, rcx);",
#endif // _LP64
    "__ orl(rcx, rdx);",
    "__ orl(rdx, rbx);",
#ifdef _LP64
    "__ orl(rbx, r8);",
    "__ orl(r8, r9);",
    "__ orl(r9, r10);",
    "__ orl(r10, r11);",
    "__ orl(r11, r12);",
    "__ orl(r12, r13);",
    "__ orl(r13, r14);",
    "__ orl(r14, r15);",
    "__ orl(r15, r16);",
    "__ orl(r16, r17);",
    "__ orl(r17, r18);",
    "__ orl(r18, r19);",
    "__ orl(r19, r20);",
    "__ orl(r20, r21);",
    "__ orl(r21, r22);",
    "__ orl(r22, r23);",
    "__ orl(r23, r24);",
    "__ orl(r24, r25);",
    "__ orl(r25, r26);",
    "__ orl(r26, r27);",
    "__ orl(r27, r28);",
    "__ orl(r28, r29);",
    "__ orl(r29, r30);",
    "__ orl(r30, r31);",
    "__ orl(r31, rcx);",
#endif // _LP64
    "__ xorl(rcx, rdx);",
    "__ xorl(rdx, rbx);",
#ifdef _LP64
    "__ xorl(rbx, r8);",
    "__ xorl(r8, r9);",
    "__ xorl(r9, r10);",
    "__ xorl(r10, r11);",
    "__ xorl(r11, r12);",
    "__ xorl(r12, r13);",
    "__ xorl(r13, r14);",
    "__ xorl(r14, r15);",
    "__ xorl(r15, r16);",
    "__ xorl(r16, r17);",
    "__ xorl(r17, r18);",
    "__ xorl(r18, r19);",
    "__ xorl(r19, r20);",
    "__ xorl(r20, r21);",
    "__ xorl(r21, r22);",
    "__ xorl(r22, r23);",
    "__ xorl(r23, r24);",
    "__ xorl(r24, r25);",
    "__ xorl(r25, r26);",
    "__ xorl(r26, r27);",
    "__ xorl(r27, r28);",
    "__ xorl(r28, r29);",
    "__ xorl(r29, r30);",
    "__ xorl(r30, r31);",
    "__ xorl(r31, rcx);",
#endif // _LP64
    "__ addb(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ addb(Address(rbx, r8), rdx);",
    "__ addb(Address(r8, r9), rbx);",
    "__ addb(Address(r9, r10), r8);",
    "__ addb(Address(r10, r11), r9);",
    "__ addb(Address(r11, r12), r10);",
    "__ addb(Address(r12, r13), r11);",
    "__ addb(Address(r13, r14), r12);",
    "__ addb(Address(r14, r15), r13);",
    "__ addb(Address(r15, r16), r14);",
    "__ addb(Address(r16, r17), r15);",
    "__ addb(Address(r17, r18), r16);",
    "__ addb(Address(r18, r19), r17);",
    "__ addb(Address(r19, r20), r18);",
    "__ addb(Address(r20, r21), r19);",
    "__ addb(Address(r21, r22), r20);",
    "__ addb(Address(r22, r23), r21);",
    "__ addb(Address(r23, r24), r22);",
    "__ addb(Address(r24, r25), r23);",
    "__ addb(Address(r25, r26), r24);",
    "__ addb(Address(r26, r27), r25);",
    "__ addb(Address(r27, r28), r26);",
    "__ addb(Address(r28, r29), r27);",
    "__ addb(Address(r29, r30), r28);",
    "__ addb(Address(r30, r31), r29);",
    "__ addb(Address(r31, rcx), r30);",
    "__ addb(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ addw(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ addw(Address(rbx, r8), rdx);",
    "__ addw(Address(r8, r9), rbx);",
    "__ addw(Address(r9, r10), r8);",
    "__ addw(Address(r10, r11), r9);",
    "__ addw(Address(r11, r12), r10);",
    "__ addw(Address(r12, r13), r11);",
    "__ addw(Address(r13, r14), r12);",
    "__ addw(Address(r14, r15), r13);",
    "__ addw(Address(r15, r16), r14);",
    "__ addw(Address(r16, r17), r15);",
    "__ addw(Address(r17, r18), r16);",
    "__ addw(Address(r18, r19), r17);",
    "__ addw(Address(r19, r20), r18);",
    "__ addw(Address(r20, r21), r19);",
    "__ addw(Address(r21, r22), r20);",
    "__ addw(Address(r22, r23), r21);",
    "__ addw(Address(r23, r24), r22);",
    "__ addw(Address(r24, r25), r23);",
    "__ addw(Address(r25, r26), r24);",
    "__ addw(Address(r26, r27), r25);",
    "__ addw(Address(r27, r28), r26);",
    "__ addw(Address(r28, r29), r27);",
    "__ addw(Address(r29, r30), r28);",
    "__ addw(Address(r30, r31), r29);",
    "__ addw(Address(r31, rcx), r30);",
    "__ addw(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ addl(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ addl(Address(rbx, r8), rdx);",
    "__ addl(Address(r8, r9), rbx);",
    "__ addl(Address(r9, r10), r8);",
    "__ addl(Address(r10, r11), r9);",
    "__ addl(Address(r11, r12), r10);",
    "__ addl(Address(r12, r13), r11);",
    "__ addl(Address(r13, r14), r12);",
    "__ addl(Address(r14, r15), r13);",
    "__ addl(Address(r15, r16), r14);",
    "__ addl(Address(r16, r17), r15);",
    "__ addl(Address(r17, r18), r16);",
    "__ addl(Address(r18, r19), r17);",
    "__ addl(Address(r19, r20), r18);",
    "__ addl(Address(r20, r21), r19);",
    "__ addl(Address(r21, r22), r20);",
    "__ addl(Address(r22, r23), r21);",
    "__ addl(Address(r23, r24), r22);",
    "__ addl(Address(r24, r25), r23);",
    "__ addl(Address(r25, r26), r24);",
    "__ addl(Address(r26, r27), r25);",
    "__ addl(Address(r27, r28), r26);",
    "__ addl(Address(r28, r29), r27);",
    "__ addl(Address(r29, r30), r28);",
    "__ addl(Address(r30, r31), r29);",
    "__ addl(Address(r31, rcx), r30);",
    "__ addl(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ adcl(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ adcl(Address(rbx, r8), rdx);",
    "__ adcl(Address(r8, r9), rbx);",
    "__ adcl(Address(r9, r10), r8);",
    "__ adcl(Address(r10, r11), r9);",
    "__ adcl(Address(r11, r12), r10);",
    "__ adcl(Address(r12, r13), r11);",
    "__ adcl(Address(r13, r14), r12);",
    "__ adcl(Address(r14, r15), r13);",
    "__ adcl(Address(r15, r16), r14);",
    "__ adcl(Address(r16, r17), r15);",
    "__ adcl(Address(r17, r18), r16);",
    "__ adcl(Address(r18, r19), r17);",
    "__ adcl(Address(r19, r20), r18);",
    "__ adcl(Address(r20, r21), r19);",
    "__ adcl(Address(r21, r22), r20);",
    "__ adcl(Address(r22, r23), r21);",
    "__ adcl(Address(r23, r24), r22);",
    "__ adcl(Address(r24, r25), r23);",
    "__ adcl(Address(r25, r26), r24);",
    "__ adcl(Address(r26, r27), r25);",
    "__ adcl(Address(r27, r28), r26);",
    "__ adcl(Address(r28, r29), r27);",
    "__ adcl(Address(r29, r30), r28);",
    "__ adcl(Address(r30, r31), r29);",
    "__ adcl(Address(r31, rcx), r30);",
    "__ adcl(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ andb(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ andb(Address(rbx, r8), rdx);",
    "__ andb(Address(r8, r9), rbx);",
    "__ andb(Address(r9, r10), r8);",
    "__ andb(Address(r10, r11), r9);",
    "__ andb(Address(r11, r12), r10);",
    "__ andb(Address(r12, r13), r11);",
    "__ andb(Address(r13, r14), r12);",
    "__ andb(Address(r14, r15), r13);",
    "__ andb(Address(r15, r16), r14);",
    "__ andb(Address(r16, r17), r15);",
    "__ andb(Address(r17, r18), r16);",
    "__ andb(Address(r18, r19), r17);",
    "__ andb(Address(r19, r20), r18);",
    "__ andb(Address(r20, r21), r19);",
    "__ andb(Address(r21, r22), r20);",
    "__ andb(Address(r22, r23), r21);",
    "__ andb(Address(r23, r24), r22);",
    "__ andb(Address(r24, r25), r23);",
    "__ andb(Address(r25, r26), r24);",
    "__ andb(Address(r26, r27), r25);",
    "__ andb(Address(r27, r28), r26);",
    "__ andb(Address(r28, r29), r27);",
    "__ andb(Address(r29, r30), r28);",
    "__ andb(Address(r30, r31), r29);",
    "__ andb(Address(r31, rcx), r30);",
    "__ andb(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ andl(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ andl(Address(rbx, r8), rdx);",
    "__ andl(Address(r8, r9), rbx);",
    "__ andl(Address(r9, r10), r8);",
    "__ andl(Address(r10, r11), r9);",
    "__ andl(Address(r11, r12), r10);",
    "__ andl(Address(r12, r13), r11);",
    "__ andl(Address(r13, r14), r12);",
    "__ andl(Address(r14, r15), r13);",
    "__ andl(Address(r15, r16), r14);",
    "__ andl(Address(r16, r17), r15);",
    "__ andl(Address(r17, r18), r16);",
    "__ andl(Address(r18, r19), r17);",
    "__ andl(Address(r19, r20), r18);",
    "__ andl(Address(r20, r21), r19);",
    "__ andl(Address(r21, r22), r20);",
    "__ andl(Address(r22, r23), r21);",
    "__ andl(Address(r23, r24), r22);",
    "__ andl(Address(r24, r25), r23);",
    "__ andl(Address(r25, r26), r24);",
    "__ andl(Address(r26, r27), r25);",
    "__ andl(Address(r27, r28), r26);",
    "__ andl(Address(r28, r29), r27);",
    "__ andl(Address(r29, r30), r28);",
    "__ andl(Address(r30, r31), r29);",
    "__ andl(Address(r31, rcx), r30);",
    "__ andl(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ orb(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ orb(Address(rbx, r8), rdx);",
    "__ orb(Address(r8, r9), rbx);",
    "__ orb(Address(r9, r10), r8);",
    "__ orb(Address(r10, r11), r9);",
    "__ orb(Address(r11, r12), r10);",
    "__ orb(Address(r12, r13), r11);",
    "__ orb(Address(r13, r14), r12);",
    "__ orb(Address(r14, r15), r13);",
    "__ orb(Address(r15, r16), r14);",
    "__ orb(Address(r16, r17), r15);",
    "__ orb(Address(r17, r18), r16);",
    "__ orb(Address(r18, r19), r17);",
    "__ orb(Address(r19, r20), r18);",
    "__ orb(Address(r20, r21), r19);",
    "__ orb(Address(r21, r22), r20);",
    "__ orb(Address(r22, r23), r21);",
    "__ orb(Address(r23, r24), r22);",
    "__ orb(Address(r24, r25), r23);",
    "__ orb(Address(r25, r26), r24);",
    "__ orb(Address(r26, r27), r25);",
    "__ orb(Address(r27, r28), r26);",
    "__ orb(Address(r28, r29), r27);",
    "__ orb(Address(r29, r30), r28);",
    "__ orb(Address(r30, r31), r29);",
    "__ orb(Address(r31, rcx), r30);",
    "__ orb(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ orl(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ orl(Address(rbx, r8), rdx);",
    "__ orl(Address(r8, r9), rbx);",
    "__ orl(Address(r9, r10), r8);",
    "__ orl(Address(r10, r11), r9);",
    "__ orl(Address(r11, r12), r10);",
    "__ orl(Address(r12, r13), r11);",
    "__ orl(Address(r13, r14), r12);",
    "__ orl(Address(r14, r15), r13);",
    "__ orl(Address(r15, r16), r14);",
    "__ orl(Address(r16, r17), r15);",
    "__ orl(Address(r17, r18), r16);",
    "__ orl(Address(r18, r19), r17);",
    "__ orl(Address(r19, r20), r18);",
    "__ orl(Address(r20, r21), r19);",
    "__ orl(Address(r21, r22), r20);",
    "__ orl(Address(r22, r23), r21);",
    "__ orl(Address(r23, r24), r22);",
    "__ orl(Address(r24, r25), r23);",
    "__ orl(Address(r25, r26), r24);",
    "__ orl(Address(r26, r27), r25);",
    "__ orl(Address(r27, r28), r26);",
    "__ orl(Address(r28, r29), r27);",
    "__ orl(Address(r29, r30), r28);",
    "__ orl(Address(r30, r31), r29);",
    "__ orl(Address(r31, rcx), r30);",
    "__ orl(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ xorb(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ xorb(Address(rbx, r8), rdx);",
    "__ xorb(Address(r8, r9), rbx);",
    "__ xorb(Address(r9, r10), r8);",
    "__ xorb(Address(r10, r11), r9);",
    "__ xorb(Address(r11, r12), r10);",
    "__ xorb(Address(r12, r13), r11);",
    "__ xorb(Address(r13, r14), r12);",
    "__ xorb(Address(r14, r15), r13);",
    "__ xorb(Address(r15, r16), r14);",
    "__ xorb(Address(r16, r17), r15);",
    "__ xorb(Address(r17, r18), r16);",
    "__ xorb(Address(r18, r19), r17);",
    "__ xorb(Address(r19, r20), r18);",
    "__ xorb(Address(r20, r21), r19);",
    "__ xorb(Address(r21, r22), r20);",
    "__ xorb(Address(r22, r23), r21);",
    "__ xorb(Address(r23, r24), r22);",
    "__ xorb(Address(r24, r25), r23);",
    "__ xorb(Address(r25, r26), r24);",
    "__ xorb(Address(r26, r27), r25);",
    "__ xorb(Address(r27, r28), r26);",
    "__ xorb(Address(r28, r29), r27);",
    "__ xorb(Address(r29, r30), r28);",
    "__ xorb(Address(r30, r31), r29);",
    "__ xorb(Address(r31, rcx), r30);",
    "__ xorb(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ xorl(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ xorl(Address(rbx, r8), rdx);",
    "__ xorl(Address(r8, r9), rbx);",
    "__ xorl(Address(r9, r10), r8);",
    "__ xorl(Address(r10, r11), r9);",
    "__ xorl(Address(r11, r12), r10);",
    "__ xorl(Address(r12, r13), r11);",
    "__ xorl(Address(r13, r14), r12);",
    "__ xorl(Address(r14, r15), r13);",
    "__ xorl(Address(r15, r16), r14);",
    "__ xorl(Address(r16, r17), r15);",
    "__ xorl(Address(r17, r18), r16);",
    "__ xorl(Address(r18, r19), r17);",
    "__ xorl(Address(r19, r20), r18);",
    "__ xorl(Address(r20, r21), r19);",
    "__ xorl(Address(r21, r22), r20);",
    "__ xorl(Address(r22, r23), r21);",
    "__ xorl(Address(r23, r24), r22);",
    "__ xorl(Address(r24, r25), r23);",
    "__ xorl(Address(r25, r26), r24);",
    "__ xorl(Address(r26, r27), r25);",
    "__ xorl(Address(r27, r28), r26);",
    "__ xorl(Address(r28, r29), r27);",
    "__ xorl(Address(r29, r30), r28);",
    "__ xorl(Address(r30, r31), r29);",
    "__ xorl(Address(r31, rcx), r30);",
    "__ xorl(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ subl(Address(rdx, rbx), rcx);",
#ifdef _LP64
    "__ subl(Address(rbx, r8), rdx);",
    "__ subl(Address(r8, r9), rbx);",
    "__ subl(Address(r9, r10), r8);",
    "__ subl(Address(r10, r11), r9);",
    "__ subl(Address(r11, r12), r10);",
    "__ subl(Address(r12, r13), r11);",
    "__ subl(Address(r13, r14), r12);",
    "__ subl(Address(r14, r15), r13);",
    "__ subl(Address(r15, r16), r14);",
    "__ subl(Address(r16, r17), r15);",
    "__ subl(Address(r17, r18), r16);",
    "__ subl(Address(r18, r19), r17);",
    "__ subl(Address(r19, r20), r18);",
    "__ subl(Address(r20, r21), r19);",
    "__ subl(Address(r21, r22), r20);",
    "__ subl(Address(r22, r23), r21);",
    "__ subl(Address(r23, r24), r22);",
    "__ subl(Address(r24, r25), r23);",
    "__ subl(Address(r25, r26), r24);",
    "__ subl(Address(r26, r27), r25);",
    "__ subl(Address(r27, r28), r26);",
    "__ subl(Address(r28, r29), r27);",
    "__ subl(Address(r29, r30), r28);",
    "__ subl(Address(r30, r31), r29);",
    "__ subl(Address(r31, rcx), r30);",
    "__ subl(Address(rcx, rdx), r31);",
#endif // _LP64
    "__ adcl(Address(rcx, rdx), 1);",
    "__ adcl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ adcl(Address(rbx, r8), 1);",
    "__ adcl(Address(r8, r9), 1);",
    "__ adcl(Address(r9, r10), 1);",
    "__ adcl(Address(r10, r11), 1);",
    "__ adcl(Address(r11, r12), 1);",
    "__ adcl(Address(r12, r13), 1);",
    "__ adcl(Address(r13, r14), 1);",
    "__ adcl(Address(r14, r15), 1);",
    "__ adcl(Address(r15, r16), 1);",
    "__ adcl(Address(r16, r17), 1);",
    "__ adcl(Address(r17, r18), 1);",
    "__ adcl(Address(r18, r19), 1);",
    "__ adcl(Address(r19, r20), 1);",
    "__ adcl(Address(r20, r21), 1);",
    "__ adcl(Address(r21, r22), 1);",
    "__ adcl(Address(r22, r23), 1);",
    "__ adcl(Address(r23, r24), 1);",
    "__ adcl(Address(r24, r25), 1);",
    "__ adcl(Address(r25, r26), 1);",
    "__ adcl(Address(r26, r27), 1);",
    "__ adcl(Address(r27, r28), 1);",
    "__ adcl(Address(r28, r29), 1);",
    "__ adcl(Address(r29, r30), 1);",
    "__ adcl(Address(r30, r31), 1);",
    "__ adcl(Address(r31, rcx), 1);",
    "__ adcl(Address(rcx, rdx), 16);",
    "__ adcl(Address(rdx, rbx), 16);",
    "__ adcl(Address(rbx, r8), 16);",
    "__ adcl(Address(r8, r9), 16);",
    "__ adcl(Address(r9, r10), 16);",
    "__ adcl(Address(r10, r11), 16);",
    "__ adcl(Address(r11, r12), 16);",
    "__ adcl(Address(r12, r13), 16);",
    "__ adcl(Address(r13, r14), 16);",
    "__ adcl(Address(r14, r15), 16);",
    "__ adcl(Address(r15, r16), 16);",
    "__ adcl(Address(r16, r17), 16);",
    "__ adcl(Address(r17, r18), 16);",
    "__ adcl(Address(r18, r19), 16);",
    "__ adcl(Address(r19, r20), 16);",
    "__ adcl(Address(r20, r21), 16);",
    "__ adcl(Address(r21, r22), 16);",
    "__ adcl(Address(r22, r23), 16);",
    "__ adcl(Address(r23, r24), 16);",
    "__ adcl(Address(r24, r25), 16);",
    "__ adcl(Address(r25, r26), 16);",
    "__ adcl(Address(r26, r27), 16);",
    "__ adcl(Address(r27, r28), 16);",
    "__ adcl(Address(r28, r29), 16);",
    "__ adcl(Address(r29, r30), 16);",
    "__ adcl(Address(r30, r31), 16);",
    "__ adcl(Address(r31, rcx), 16);",
    "__ adcl(Address(rcx, rdx), 256);",
    "__ adcl(Address(rdx, rbx), 256);",
    "__ adcl(Address(rbx, r8), 256);",
    "__ adcl(Address(r8, r9), 256);",
    "__ adcl(Address(r9, r10), 256);",
    "__ adcl(Address(r10, r11), 256);",
    "__ adcl(Address(r11, r12), 256);",
    "__ adcl(Address(r12, r13), 256);",
    "__ adcl(Address(r13, r14), 256);",
    "__ adcl(Address(r14, r15), 256);",
    "__ adcl(Address(r15, r16), 256);",
    "__ adcl(Address(r16, r17), 256);",
    "__ adcl(Address(r17, r18), 256);",
    "__ adcl(Address(r18, r19), 256);",
    "__ adcl(Address(r19, r20), 256);",
    "__ adcl(Address(r20, r21), 256);",
    "__ adcl(Address(r21, r22), 256);",
    "__ adcl(Address(r22, r23), 256);",
    "__ adcl(Address(r23, r24), 256);",
    "__ adcl(Address(r24, r25), 256);",
    "__ adcl(Address(r25, r26), 256);",
    "__ adcl(Address(r26, r27), 256);",
    "__ adcl(Address(r27, r28), 256);",
    "__ adcl(Address(r28, r29), 256);",
    "__ adcl(Address(r29, r30), 256);",
    "__ adcl(Address(r30, r31), 256);",
    "__ adcl(Address(r31, rcx), 256);",
    "__ adcl(Address(rcx, rdx), 4096);",
    "__ adcl(Address(rdx, rbx), 4096);",
    "__ adcl(Address(rbx, r8), 4096);",
    "__ adcl(Address(r8, r9), 4096);",
    "__ adcl(Address(r9, r10), 4096);",
    "__ adcl(Address(r10, r11), 4096);",
    "__ adcl(Address(r11, r12), 4096);",
    "__ adcl(Address(r12, r13), 4096);",
    "__ adcl(Address(r13, r14), 4096);",
    "__ adcl(Address(r14, r15), 4096);",
    "__ adcl(Address(r15, r16), 4096);",
    "__ adcl(Address(r16, r17), 4096);",
    "__ adcl(Address(r17, r18), 4096);",
    "__ adcl(Address(r18, r19), 4096);",
    "__ adcl(Address(r19, r20), 4096);",
    "__ adcl(Address(r20, r21), 4096);",
    "__ adcl(Address(r21, r22), 4096);",
    "__ adcl(Address(r22, r23), 4096);",
    "__ adcl(Address(r23, r24), 4096);",
    "__ adcl(Address(r24, r25), 4096);",
    "__ adcl(Address(r25, r26), 4096);",
    "__ adcl(Address(r26, r27), 4096);",
    "__ adcl(Address(r27, r28), 4096);",
    "__ adcl(Address(r28, r29), 4096);",
    "__ adcl(Address(r29, r30), 4096);",
    "__ adcl(Address(r30, r31), 4096);",
    "__ adcl(Address(r31, rcx), 4096);",
    "__ adcl(Address(rcx, rdx), 65536);",
    "__ adcl(Address(rdx, rbx), 65536);",
    "__ adcl(Address(rbx, r8), 65536);",
    "__ adcl(Address(r8, r9), 65536);",
    "__ adcl(Address(r9, r10), 65536);",
    "__ adcl(Address(r10, r11), 65536);",
    "__ adcl(Address(r11, r12), 65536);",
    "__ adcl(Address(r12, r13), 65536);",
    "__ adcl(Address(r13, r14), 65536);",
    "__ adcl(Address(r14, r15), 65536);",
    "__ adcl(Address(r15, r16), 65536);",
    "__ adcl(Address(r16, r17), 65536);",
    "__ adcl(Address(r17, r18), 65536);",
    "__ adcl(Address(r18, r19), 65536);",
    "__ adcl(Address(r19, r20), 65536);",
    "__ adcl(Address(r20, r21), 65536);",
    "__ adcl(Address(r21, r22), 65536);",
    "__ adcl(Address(r22, r23), 65536);",
    "__ adcl(Address(r23, r24), 65536);",
    "__ adcl(Address(r24, r25), 65536);",
    "__ adcl(Address(r25, r26), 65536);",
    "__ adcl(Address(r26, r27), 65536);",
    "__ adcl(Address(r27, r28), 65536);",
    "__ adcl(Address(r28, r29), 65536);",
    "__ adcl(Address(r29, r30), 65536);",
    "__ adcl(Address(r30, r31), 65536);",
    "__ adcl(Address(r31, rcx), 65536);",
    "__ adcl(Address(rcx, rdx), 1048576);",
    "__ adcl(Address(rdx, rbx), 1048576);",
    "__ adcl(Address(rbx, r8), 1048576);",
    "__ adcl(Address(r8, r9), 1048576);",
    "__ adcl(Address(r9, r10), 1048576);",
    "__ adcl(Address(r10, r11), 1048576);",
    "__ adcl(Address(r11, r12), 1048576);",
    "__ adcl(Address(r12, r13), 1048576);",
    "__ adcl(Address(r13, r14), 1048576);",
    "__ adcl(Address(r14, r15), 1048576);",
    "__ adcl(Address(r15, r16), 1048576);",
    "__ adcl(Address(r16, r17), 1048576);",
    "__ adcl(Address(r17, r18), 1048576);",
    "__ adcl(Address(r18, r19), 1048576);",
    "__ adcl(Address(r19, r20), 1048576);",
    "__ adcl(Address(r20, r21), 1048576);",
    "__ adcl(Address(r21, r22), 1048576);",
    "__ adcl(Address(r22, r23), 1048576);",
    "__ adcl(Address(r23, r24), 1048576);",
    "__ adcl(Address(r24, r25), 1048576);",
    "__ adcl(Address(r25, r26), 1048576);",
    "__ adcl(Address(r26, r27), 1048576);",
    "__ adcl(Address(r27, r28), 1048576);",
    "__ adcl(Address(r28, r29), 1048576);",
    "__ adcl(Address(r29, r30), 1048576);",
    "__ adcl(Address(r30, r31), 1048576);",
    "__ adcl(Address(r31, rcx), 1048576);",
    "__ adcl(Address(rcx, rdx), 16777216);",
    "__ adcl(Address(rdx, rbx), 16777216);",
    "__ adcl(Address(rbx, r8), 16777216);",
    "__ adcl(Address(r8, r9), 16777216);",
    "__ adcl(Address(r9, r10), 16777216);",
    "__ adcl(Address(r10, r11), 16777216);",
    "__ adcl(Address(r11, r12), 16777216);",
    "__ adcl(Address(r12, r13), 16777216);",
    "__ adcl(Address(r13, r14), 16777216);",
    "__ adcl(Address(r14, r15), 16777216);",
    "__ adcl(Address(r15, r16), 16777216);",
    "__ adcl(Address(r16, r17), 16777216);",
    "__ adcl(Address(r17, r18), 16777216);",
    "__ adcl(Address(r18, r19), 16777216);",
    "__ adcl(Address(r19, r20), 16777216);",
    "__ adcl(Address(r20, r21), 16777216);",
    "__ adcl(Address(r21, r22), 16777216);",
    "__ adcl(Address(r22, r23), 16777216);",
    "__ adcl(Address(r23, r24), 16777216);",
    "__ adcl(Address(r24, r25), 16777216);",
    "__ adcl(Address(r25, r26), 16777216);",
    "__ adcl(Address(r26, r27), 16777216);",
    "__ adcl(Address(r27, r28), 16777216);",
    "__ adcl(Address(r28, r29), 16777216);",
    "__ adcl(Address(r29, r30), 16777216);",
    "__ adcl(Address(r30, r31), 16777216);",
    "__ adcl(Address(r31, rcx), 16777216);",
    "__ adcl(Address(rcx, rdx), 268435456);",
    "__ adcl(Address(rdx, rbx), 268435456);",
    "__ adcl(Address(rbx, r8), 268435456);",
    "__ adcl(Address(r8, r9), 268435456);",
    "__ adcl(Address(r9, r10), 268435456);",
    "__ adcl(Address(r10, r11), 268435456);",
    "__ adcl(Address(r11, r12), 268435456);",
    "__ adcl(Address(r12, r13), 268435456);",
    "__ adcl(Address(r13, r14), 268435456);",
    "__ adcl(Address(r14, r15), 268435456);",
    "__ adcl(Address(r15, r16), 268435456);",
    "__ adcl(Address(r16, r17), 268435456);",
    "__ adcl(Address(r17, r18), 268435456);",
    "__ adcl(Address(r18, r19), 268435456);",
    "__ adcl(Address(r19, r20), 268435456);",
    "__ adcl(Address(r20, r21), 268435456);",
    "__ adcl(Address(r21, r22), 268435456);",
    "__ adcl(Address(r22, r23), 268435456);",
    "__ adcl(Address(r23, r24), 268435456);",
    "__ adcl(Address(r24, r25), 268435456);",
    "__ adcl(Address(r25, r26), 268435456);",
    "__ adcl(Address(r26, r27), 268435456);",
    "__ adcl(Address(r27, r28), 268435456);",
    "__ adcl(Address(r28, r29), 268435456);",
    "__ adcl(Address(r29, r30), 268435456);",
    "__ adcl(Address(r30, r31), 268435456);",
    "__ adcl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ andl(Address(rcx, rdx), 1);",
    "__ andl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ andl(Address(rbx, r8), 1);",
    "__ andl(Address(r8, r9), 1);",
    "__ andl(Address(r9, r10), 1);",
    "__ andl(Address(r10, r11), 1);",
    "__ andl(Address(r11, r12), 1);",
    "__ andl(Address(r12, r13), 1);",
    "__ andl(Address(r13, r14), 1);",
    "__ andl(Address(r14, r15), 1);",
    "__ andl(Address(r15, r16), 1);",
    "__ andl(Address(r16, r17), 1);",
    "__ andl(Address(r17, r18), 1);",
    "__ andl(Address(r18, r19), 1);",
    "__ andl(Address(r19, r20), 1);",
    "__ andl(Address(r20, r21), 1);",
    "__ andl(Address(r21, r22), 1);",
    "__ andl(Address(r22, r23), 1);",
    "__ andl(Address(r23, r24), 1);",
    "__ andl(Address(r24, r25), 1);",
    "__ andl(Address(r25, r26), 1);",
    "__ andl(Address(r26, r27), 1);",
    "__ andl(Address(r27, r28), 1);",
    "__ andl(Address(r28, r29), 1);",
    "__ andl(Address(r29, r30), 1);",
    "__ andl(Address(r30, r31), 1);",
    "__ andl(Address(r31, rcx), 1);",
    "__ andl(Address(rcx, rdx), 16);",
    "__ andl(Address(rdx, rbx), 16);",
    "__ andl(Address(rbx, r8), 16);",
    "__ andl(Address(r8, r9), 16);",
    "__ andl(Address(r9, r10), 16);",
    "__ andl(Address(r10, r11), 16);",
    "__ andl(Address(r11, r12), 16);",
    "__ andl(Address(r12, r13), 16);",
    "__ andl(Address(r13, r14), 16);",
    "__ andl(Address(r14, r15), 16);",
    "__ andl(Address(r15, r16), 16);",
    "__ andl(Address(r16, r17), 16);",
    "__ andl(Address(r17, r18), 16);",
    "__ andl(Address(r18, r19), 16);",
    "__ andl(Address(r19, r20), 16);",
    "__ andl(Address(r20, r21), 16);",
    "__ andl(Address(r21, r22), 16);",
    "__ andl(Address(r22, r23), 16);",
    "__ andl(Address(r23, r24), 16);",
    "__ andl(Address(r24, r25), 16);",
    "__ andl(Address(r25, r26), 16);",
    "__ andl(Address(r26, r27), 16);",
    "__ andl(Address(r27, r28), 16);",
    "__ andl(Address(r28, r29), 16);",
    "__ andl(Address(r29, r30), 16);",
    "__ andl(Address(r30, r31), 16);",
    "__ andl(Address(r31, rcx), 16);",
    "__ andl(Address(rcx, rdx), 256);",
    "__ andl(Address(rdx, rbx), 256);",
    "__ andl(Address(rbx, r8), 256);",
    "__ andl(Address(r8, r9), 256);",
    "__ andl(Address(r9, r10), 256);",
    "__ andl(Address(r10, r11), 256);",
    "__ andl(Address(r11, r12), 256);",
    "__ andl(Address(r12, r13), 256);",
    "__ andl(Address(r13, r14), 256);",
    "__ andl(Address(r14, r15), 256);",
    "__ andl(Address(r15, r16), 256);",
    "__ andl(Address(r16, r17), 256);",
    "__ andl(Address(r17, r18), 256);",
    "__ andl(Address(r18, r19), 256);",
    "__ andl(Address(r19, r20), 256);",
    "__ andl(Address(r20, r21), 256);",
    "__ andl(Address(r21, r22), 256);",
    "__ andl(Address(r22, r23), 256);",
    "__ andl(Address(r23, r24), 256);",
    "__ andl(Address(r24, r25), 256);",
    "__ andl(Address(r25, r26), 256);",
    "__ andl(Address(r26, r27), 256);",
    "__ andl(Address(r27, r28), 256);",
    "__ andl(Address(r28, r29), 256);",
    "__ andl(Address(r29, r30), 256);",
    "__ andl(Address(r30, r31), 256);",
    "__ andl(Address(r31, rcx), 256);",
    "__ andl(Address(rcx, rdx), 4096);",
    "__ andl(Address(rdx, rbx), 4096);",
    "__ andl(Address(rbx, r8), 4096);",
    "__ andl(Address(r8, r9), 4096);",
    "__ andl(Address(r9, r10), 4096);",
    "__ andl(Address(r10, r11), 4096);",
    "__ andl(Address(r11, r12), 4096);",
    "__ andl(Address(r12, r13), 4096);",
    "__ andl(Address(r13, r14), 4096);",
    "__ andl(Address(r14, r15), 4096);",
    "__ andl(Address(r15, r16), 4096);",
    "__ andl(Address(r16, r17), 4096);",
    "__ andl(Address(r17, r18), 4096);",
    "__ andl(Address(r18, r19), 4096);",
    "__ andl(Address(r19, r20), 4096);",
    "__ andl(Address(r20, r21), 4096);",
    "__ andl(Address(r21, r22), 4096);",
    "__ andl(Address(r22, r23), 4096);",
    "__ andl(Address(r23, r24), 4096);",
    "__ andl(Address(r24, r25), 4096);",
    "__ andl(Address(r25, r26), 4096);",
    "__ andl(Address(r26, r27), 4096);",
    "__ andl(Address(r27, r28), 4096);",
    "__ andl(Address(r28, r29), 4096);",
    "__ andl(Address(r29, r30), 4096);",
    "__ andl(Address(r30, r31), 4096);",
    "__ andl(Address(r31, rcx), 4096);",
    "__ andl(Address(rcx, rdx), 65536);",
    "__ andl(Address(rdx, rbx), 65536);",
    "__ andl(Address(rbx, r8), 65536);",
    "__ andl(Address(r8, r9), 65536);",
    "__ andl(Address(r9, r10), 65536);",
    "__ andl(Address(r10, r11), 65536);",
    "__ andl(Address(r11, r12), 65536);",
    "__ andl(Address(r12, r13), 65536);",
    "__ andl(Address(r13, r14), 65536);",
    "__ andl(Address(r14, r15), 65536);",
    "__ andl(Address(r15, r16), 65536);",
    "__ andl(Address(r16, r17), 65536);",
    "__ andl(Address(r17, r18), 65536);",
    "__ andl(Address(r18, r19), 65536);",
    "__ andl(Address(r19, r20), 65536);",
    "__ andl(Address(r20, r21), 65536);",
    "__ andl(Address(r21, r22), 65536);",
    "__ andl(Address(r22, r23), 65536);",
    "__ andl(Address(r23, r24), 65536);",
    "__ andl(Address(r24, r25), 65536);",
    "__ andl(Address(r25, r26), 65536);",
    "__ andl(Address(r26, r27), 65536);",
    "__ andl(Address(r27, r28), 65536);",
    "__ andl(Address(r28, r29), 65536);",
    "__ andl(Address(r29, r30), 65536);",
    "__ andl(Address(r30, r31), 65536);",
    "__ andl(Address(r31, rcx), 65536);",
    "__ andl(Address(rcx, rdx), 1048576);",
    "__ andl(Address(rdx, rbx), 1048576);",
    "__ andl(Address(rbx, r8), 1048576);",
    "__ andl(Address(r8, r9), 1048576);",
    "__ andl(Address(r9, r10), 1048576);",
    "__ andl(Address(r10, r11), 1048576);",
    "__ andl(Address(r11, r12), 1048576);",
    "__ andl(Address(r12, r13), 1048576);",
    "__ andl(Address(r13, r14), 1048576);",
    "__ andl(Address(r14, r15), 1048576);",
    "__ andl(Address(r15, r16), 1048576);",
    "__ andl(Address(r16, r17), 1048576);",
    "__ andl(Address(r17, r18), 1048576);",
    "__ andl(Address(r18, r19), 1048576);",
    "__ andl(Address(r19, r20), 1048576);",
    "__ andl(Address(r20, r21), 1048576);",
    "__ andl(Address(r21, r22), 1048576);",
    "__ andl(Address(r22, r23), 1048576);",
    "__ andl(Address(r23, r24), 1048576);",
    "__ andl(Address(r24, r25), 1048576);",
    "__ andl(Address(r25, r26), 1048576);",
    "__ andl(Address(r26, r27), 1048576);",
    "__ andl(Address(r27, r28), 1048576);",
    "__ andl(Address(r28, r29), 1048576);",
    "__ andl(Address(r29, r30), 1048576);",
    "__ andl(Address(r30, r31), 1048576);",
    "__ andl(Address(r31, rcx), 1048576);",
    "__ andl(Address(rcx, rdx), 16777216);",
    "__ andl(Address(rdx, rbx), 16777216);",
    "__ andl(Address(rbx, r8), 16777216);",
    "__ andl(Address(r8, r9), 16777216);",
    "__ andl(Address(r9, r10), 16777216);",
    "__ andl(Address(r10, r11), 16777216);",
    "__ andl(Address(r11, r12), 16777216);",
    "__ andl(Address(r12, r13), 16777216);",
    "__ andl(Address(r13, r14), 16777216);",
    "__ andl(Address(r14, r15), 16777216);",
    "__ andl(Address(r15, r16), 16777216);",
    "__ andl(Address(r16, r17), 16777216);",
    "__ andl(Address(r17, r18), 16777216);",
    "__ andl(Address(r18, r19), 16777216);",
    "__ andl(Address(r19, r20), 16777216);",
    "__ andl(Address(r20, r21), 16777216);",
    "__ andl(Address(r21, r22), 16777216);",
    "__ andl(Address(r22, r23), 16777216);",
    "__ andl(Address(r23, r24), 16777216);",
    "__ andl(Address(r24, r25), 16777216);",
    "__ andl(Address(r25, r26), 16777216);",
    "__ andl(Address(r26, r27), 16777216);",
    "__ andl(Address(r27, r28), 16777216);",
    "__ andl(Address(r28, r29), 16777216);",
    "__ andl(Address(r29, r30), 16777216);",
    "__ andl(Address(r30, r31), 16777216);",
    "__ andl(Address(r31, rcx), 16777216);",
    "__ andl(Address(rcx, rdx), 268435456);",
    "__ andl(Address(rdx, rbx), 268435456);",
    "__ andl(Address(rbx, r8), 268435456);",
    "__ andl(Address(r8, r9), 268435456);",
    "__ andl(Address(r9, r10), 268435456);",
    "__ andl(Address(r10, r11), 268435456);",
    "__ andl(Address(r11, r12), 268435456);",
    "__ andl(Address(r12, r13), 268435456);",
    "__ andl(Address(r13, r14), 268435456);",
    "__ andl(Address(r14, r15), 268435456);",
    "__ andl(Address(r15, r16), 268435456);",
    "__ andl(Address(r16, r17), 268435456);",
    "__ andl(Address(r17, r18), 268435456);",
    "__ andl(Address(r18, r19), 268435456);",
    "__ andl(Address(r19, r20), 268435456);",
    "__ andl(Address(r20, r21), 268435456);",
    "__ andl(Address(r21, r22), 268435456);",
    "__ andl(Address(r22, r23), 268435456);",
    "__ andl(Address(r23, r24), 268435456);",
    "__ andl(Address(r24, r25), 268435456);",
    "__ andl(Address(r25, r26), 268435456);",
    "__ andl(Address(r26, r27), 268435456);",
    "__ andl(Address(r27, r28), 268435456);",
    "__ andl(Address(r28, r29), 268435456);",
    "__ andl(Address(r29, r30), 268435456);",
    "__ andl(Address(r30, r31), 268435456);",
    "__ andl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ addb(Address(rcx, rdx), 1);",
    "__ addb(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ addb(Address(rbx, r8), 1);",
    "__ addb(Address(r8, r9), 1);",
    "__ addb(Address(r9, r10), 1);",
    "__ addb(Address(r10, r11), 1);",
    "__ addb(Address(r11, r12), 1);",
    "__ addb(Address(r12, r13), 1);",
    "__ addb(Address(r13, r14), 1);",
    "__ addb(Address(r14, r15), 1);",
    "__ addb(Address(r15, r16), 1);",
    "__ addb(Address(r16, r17), 1);",
    "__ addb(Address(r17, r18), 1);",
    "__ addb(Address(r18, r19), 1);",
    "__ addb(Address(r19, r20), 1);",
    "__ addb(Address(r20, r21), 1);",
    "__ addb(Address(r21, r22), 1);",
    "__ addb(Address(r22, r23), 1);",
    "__ addb(Address(r23, r24), 1);",
    "__ addb(Address(r24, r25), 1);",
    "__ addb(Address(r25, r26), 1);",
    "__ addb(Address(r26, r27), 1);",
    "__ addb(Address(r27, r28), 1);",
    "__ addb(Address(r28, r29), 1);",
    "__ addb(Address(r29, r30), 1);",
    "__ addb(Address(r30, r31), 1);",
    "__ addb(Address(r31, rcx), 1);",
    "__ addb(Address(rcx, rdx), 4);",
    "__ addb(Address(rdx, rbx), 4);",
    "__ addb(Address(rbx, r8), 4);",
    "__ addb(Address(r8, r9), 4);",
    "__ addb(Address(r9, r10), 4);",
    "__ addb(Address(r10, r11), 4);",
    "__ addb(Address(r11, r12), 4);",
    "__ addb(Address(r12, r13), 4);",
    "__ addb(Address(r13, r14), 4);",
    "__ addb(Address(r14, r15), 4);",
    "__ addb(Address(r15, r16), 4);",
    "__ addb(Address(r16, r17), 4);",
    "__ addb(Address(r17, r18), 4);",
    "__ addb(Address(r18, r19), 4);",
    "__ addb(Address(r19, r20), 4);",
    "__ addb(Address(r20, r21), 4);",
    "__ addb(Address(r21, r22), 4);",
    "__ addb(Address(r22, r23), 4);",
    "__ addb(Address(r23, r24), 4);",
    "__ addb(Address(r24, r25), 4);",
    "__ addb(Address(r25, r26), 4);",
    "__ addb(Address(r26, r27), 4);",
    "__ addb(Address(r27, r28), 4);",
    "__ addb(Address(r28, r29), 4);",
    "__ addb(Address(r29, r30), 4);",
    "__ addb(Address(r30, r31), 4);",
    "__ addb(Address(r31, rcx), 4);",
    "__ addb(Address(rcx, rdx), 16);",
    "__ addb(Address(rdx, rbx), 16);",
    "__ addb(Address(rbx, r8), 16);",
    "__ addb(Address(r8, r9), 16);",
    "__ addb(Address(r9, r10), 16);",
    "__ addb(Address(r10, r11), 16);",
    "__ addb(Address(r11, r12), 16);",
    "__ addb(Address(r12, r13), 16);",
    "__ addb(Address(r13, r14), 16);",
    "__ addb(Address(r14, r15), 16);",
    "__ addb(Address(r15, r16), 16);",
    "__ addb(Address(r16, r17), 16);",
    "__ addb(Address(r17, r18), 16);",
    "__ addb(Address(r18, r19), 16);",
    "__ addb(Address(r19, r20), 16);",
    "__ addb(Address(r20, r21), 16);",
    "__ addb(Address(r21, r22), 16);",
    "__ addb(Address(r22, r23), 16);",
    "__ addb(Address(r23, r24), 16);",
    "__ addb(Address(r24, r25), 16);",
    "__ addb(Address(r25, r26), 16);",
    "__ addb(Address(r26, r27), 16);",
    "__ addb(Address(r27, r28), 16);",
    "__ addb(Address(r28, r29), 16);",
    "__ addb(Address(r29, r30), 16);",
    "__ addb(Address(r30, r31), 16);",
    "__ addb(Address(r31, rcx), 16);",
    "__ addb(Address(rcx, rdx), 64);",
    "__ addb(Address(rdx, rbx), 64);",
    "__ addb(Address(rbx, r8), 64);",
    "__ addb(Address(r8, r9), 64);",
    "__ addb(Address(r9, r10), 64);",
    "__ addb(Address(r10, r11), 64);",
    "__ addb(Address(r11, r12), 64);",
    "__ addb(Address(r12, r13), 64);",
    "__ addb(Address(r13, r14), 64);",
    "__ addb(Address(r14, r15), 64);",
    "__ addb(Address(r15, r16), 64);",
    "__ addb(Address(r16, r17), 64);",
    "__ addb(Address(r17, r18), 64);",
    "__ addb(Address(r18, r19), 64);",
    "__ addb(Address(r19, r20), 64);",
    "__ addb(Address(r20, r21), 64);",
    "__ addb(Address(r21, r22), 64);",
    "__ addb(Address(r22, r23), 64);",
    "__ addb(Address(r23, r24), 64);",
    "__ addb(Address(r24, r25), 64);",
    "__ addb(Address(r25, r26), 64);",
    "__ addb(Address(r26, r27), 64);",
    "__ addb(Address(r27, r28), 64);",
    "__ addb(Address(r28, r29), 64);",
    "__ addb(Address(r29, r30), 64);",
    "__ addb(Address(r30, r31), 64);",
    "__ addb(Address(r31, rcx), 64);",
#endif // _LP64
    "__ addw(Address(rcx, rdx), 256);",
    "__ addw(Address(rdx, rbx), 256);",
#ifdef _LP64
    "__ addw(Address(rbx, r8), 256);",
    "__ addw(Address(r8, r9), 256);",
    "__ addw(Address(r9, r10), 256);",
    "__ addw(Address(r10, r11), 256);",
    "__ addw(Address(r11, r12), 256);",
    "__ addw(Address(r12, r13), 256);",
    "__ addw(Address(r13, r14), 256);",
    "__ addw(Address(r14, r15), 256);",
    "__ addw(Address(r15, r16), 256);",
    "__ addw(Address(r16, r17), 256);",
    "__ addw(Address(r17, r18), 256);",
    "__ addw(Address(r18, r19), 256);",
    "__ addw(Address(r19, r20), 256);",
    "__ addw(Address(r20, r21), 256);",
    "__ addw(Address(r21, r22), 256);",
    "__ addw(Address(r22, r23), 256);",
    "__ addw(Address(r23, r24), 256);",
    "__ addw(Address(r24, r25), 256);",
    "__ addw(Address(r25, r26), 256);",
    "__ addw(Address(r26, r27), 256);",
    "__ addw(Address(r27, r28), 256);",
    "__ addw(Address(r28, r29), 256);",
    "__ addw(Address(r29, r30), 256);",
    "__ addw(Address(r30, r31), 256);",
    "__ addw(Address(r31, rcx), 256);",
    "__ addw(Address(rcx, rdx), 1024);",
    "__ addw(Address(rdx, rbx), 1024);",
    "__ addw(Address(rbx, r8), 1024);",
    "__ addw(Address(r8, r9), 1024);",
    "__ addw(Address(r9, r10), 1024);",
    "__ addw(Address(r10, r11), 1024);",
    "__ addw(Address(r11, r12), 1024);",
    "__ addw(Address(r12, r13), 1024);",
    "__ addw(Address(r13, r14), 1024);",
    "__ addw(Address(r14, r15), 1024);",
    "__ addw(Address(r15, r16), 1024);",
    "__ addw(Address(r16, r17), 1024);",
    "__ addw(Address(r17, r18), 1024);",
    "__ addw(Address(r18, r19), 1024);",
    "__ addw(Address(r19, r20), 1024);",
    "__ addw(Address(r20, r21), 1024);",
    "__ addw(Address(r21, r22), 1024);",
    "__ addw(Address(r22, r23), 1024);",
    "__ addw(Address(r23, r24), 1024);",
    "__ addw(Address(r24, r25), 1024);",
    "__ addw(Address(r25, r26), 1024);",
    "__ addw(Address(r26, r27), 1024);",
    "__ addw(Address(r27, r28), 1024);",
    "__ addw(Address(r28, r29), 1024);",
    "__ addw(Address(r29, r30), 1024);",
    "__ addw(Address(r30, r31), 1024);",
    "__ addw(Address(r31, rcx), 1024);",
    "__ addw(Address(rcx, rdx), 4096);",
    "__ addw(Address(rdx, rbx), 4096);",
    "__ addw(Address(rbx, r8), 4096);",
    "__ addw(Address(r8, r9), 4096);",
    "__ addw(Address(r9, r10), 4096);",
    "__ addw(Address(r10, r11), 4096);",
    "__ addw(Address(r11, r12), 4096);",
    "__ addw(Address(r12, r13), 4096);",
    "__ addw(Address(r13, r14), 4096);",
    "__ addw(Address(r14, r15), 4096);",
    "__ addw(Address(r15, r16), 4096);",
    "__ addw(Address(r16, r17), 4096);",
    "__ addw(Address(r17, r18), 4096);",
    "__ addw(Address(r18, r19), 4096);",
    "__ addw(Address(r19, r20), 4096);",
    "__ addw(Address(r20, r21), 4096);",
    "__ addw(Address(r21, r22), 4096);",
    "__ addw(Address(r22, r23), 4096);",
    "__ addw(Address(r23, r24), 4096);",
    "__ addw(Address(r24, r25), 4096);",
    "__ addw(Address(r25, r26), 4096);",
    "__ addw(Address(r26, r27), 4096);",
    "__ addw(Address(r27, r28), 4096);",
    "__ addw(Address(r28, r29), 4096);",
    "__ addw(Address(r29, r30), 4096);",
    "__ addw(Address(r30, r31), 4096);",
    "__ addw(Address(r31, rcx), 4096);",
    "__ addw(Address(rcx, rdx), 16384);",
    "__ addw(Address(rdx, rbx), 16384);",
    "__ addw(Address(rbx, r8), 16384);",
    "__ addw(Address(r8, r9), 16384);",
    "__ addw(Address(r9, r10), 16384);",
    "__ addw(Address(r10, r11), 16384);",
    "__ addw(Address(r11, r12), 16384);",
    "__ addw(Address(r12, r13), 16384);",
    "__ addw(Address(r13, r14), 16384);",
    "__ addw(Address(r14, r15), 16384);",
    "__ addw(Address(r15, r16), 16384);",
    "__ addw(Address(r16, r17), 16384);",
    "__ addw(Address(r17, r18), 16384);",
    "__ addw(Address(r18, r19), 16384);",
    "__ addw(Address(r19, r20), 16384);",
    "__ addw(Address(r20, r21), 16384);",
    "__ addw(Address(r21, r22), 16384);",
    "__ addw(Address(r22, r23), 16384);",
    "__ addw(Address(r23, r24), 16384);",
    "__ addw(Address(r24, r25), 16384);",
    "__ addw(Address(r25, r26), 16384);",
    "__ addw(Address(r26, r27), 16384);",
    "__ addw(Address(r27, r28), 16384);",
    "__ addw(Address(r28, r29), 16384);",
    "__ addw(Address(r29, r30), 16384);",
    "__ addw(Address(r30, r31), 16384);",
    "__ addw(Address(r31, rcx), 16384);",
#endif // _LP64
    "__ addl(Address(rcx, rdx), 1);",
    "__ addl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ addl(Address(rbx, r8), 1);",
    "__ addl(Address(r8, r9), 1);",
    "__ addl(Address(r9, r10), 1);",
    "__ addl(Address(r10, r11), 1);",
    "__ addl(Address(r11, r12), 1);",
    "__ addl(Address(r12, r13), 1);",
    "__ addl(Address(r13, r14), 1);",
    "__ addl(Address(r14, r15), 1);",
    "__ addl(Address(r15, r16), 1);",
    "__ addl(Address(r16, r17), 1);",
    "__ addl(Address(r17, r18), 1);",
    "__ addl(Address(r18, r19), 1);",
    "__ addl(Address(r19, r20), 1);",
    "__ addl(Address(r20, r21), 1);",
    "__ addl(Address(r21, r22), 1);",
    "__ addl(Address(r22, r23), 1);",
    "__ addl(Address(r23, r24), 1);",
    "__ addl(Address(r24, r25), 1);",
    "__ addl(Address(r25, r26), 1);",
    "__ addl(Address(r26, r27), 1);",
    "__ addl(Address(r27, r28), 1);",
    "__ addl(Address(r28, r29), 1);",
    "__ addl(Address(r29, r30), 1);",
    "__ addl(Address(r30, r31), 1);",
    "__ addl(Address(r31, rcx), 1);",
    "__ addl(Address(rcx, rdx), 16);",
    "__ addl(Address(rdx, rbx), 16);",
    "__ addl(Address(rbx, r8), 16);",
    "__ addl(Address(r8, r9), 16);",
    "__ addl(Address(r9, r10), 16);",
    "__ addl(Address(r10, r11), 16);",
    "__ addl(Address(r11, r12), 16);",
    "__ addl(Address(r12, r13), 16);",
    "__ addl(Address(r13, r14), 16);",
    "__ addl(Address(r14, r15), 16);",
    "__ addl(Address(r15, r16), 16);",
    "__ addl(Address(r16, r17), 16);",
    "__ addl(Address(r17, r18), 16);",
    "__ addl(Address(r18, r19), 16);",
    "__ addl(Address(r19, r20), 16);",
    "__ addl(Address(r20, r21), 16);",
    "__ addl(Address(r21, r22), 16);",
    "__ addl(Address(r22, r23), 16);",
    "__ addl(Address(r23, r24), 16);",
    "__ addl(Address(r24, r25), 16);",
    "__ addl(Address(r25, r26), 16);",
    "__ addl(Address(r26, r27), 16);",
    "__ addl(Address(r27, r28), 16);",
    "__ addl(Address(r28, r29), 16);",
    "__ addl(Address(r29, r30), 16);",
    "__ addl(Address(r30, r31), 16);",
    "__ addl(Address(r31, rcx), 16);",
    "__ addl(Address(rcx, rdx), 256);",
    "__ addl(Address(rdx, rbx), 256);",
    "__ addl(Address(rbx, r8), 256);",
    "__ addl(Address(r8, r9), 256);",
    "__ addl(Address(r9, r10), 256);",
    "__ addl(Address(r10, r11), 256);",
    "__ addl(Address(r11, r12), 256);",
    "__ addl(Address(r12, r13), 256);",
    "__ addl(Address(r13, r14), 256);",
    "__ addl(Address(r14, r15), 256);",
    "__ addl(Address(r15, r16), 256);",
    "__ addl(Address(r16, r17), 256);",
    "__ addl(Address(r17, r18), 256);",
    "__ addl(Address(r18, r19), 256);",
    "__ addl(Address(r19, r20), 256);",
    "__ addl(Address(r20, r21), 256);",
    "__ addl(Address(r21, r22), 256);",
    "__ addl(Address(r22, r23), 256);",
    "__ addl(Address(r23, r24), 256);",
    "__ addl(Address(r24, r25), 256);",
    "__ addl(Address(r25, r26), 256);",
    "__ addl(Address(r26, r27), 256);",
    "__ addl(Address(r27, r28), 256);",
    "__ addl(Address(r28, r29), 256);",
    "__ addl(Address(r29, r30), 256);",
    "__ addl(Address(r30, r31), 256);",
    "__ addl(Address(r31, rcx), 256);",
    "__ addl(Address(rcx, rdx), 4096);",
    "__ addl(Address(rdx, rbx), 4096);",
    "__ addl(Address(rbx, r8), 4096);",
    "__ addl(Address(r8, r9), 4096);",
    "__ addl(Address(r9, r10), 4096);",
    "__ addl(Address(r10, r11), 4096);",
    "__ addl(Address(r11, r12), 4096);",
    "__ addl(Address(r12, r13), 4096);",
    "__ addl(Address(r13, r14), 4096);",
    "__ addl(Address(r14, r15), 4096);",
    "__ addl(Address(r15, r16), 4096);",
    "__ addl(Address(r16, r17), 4096);",
    "__ addl(Address(r17, r18), 4096);",
    "__ addl(Address(r18, r19), 4096);",
    "__ addl(Address(r19, r20), 4096);",
    "__ addl(Address(r20, r21), 4096);",
    "__ addl(Address(r21, r22), 4096);",
    "__ addl(Address(r22, r23), 4096);",
    "__ addl(Address(r23, r24), 4096);",
    "__ addl(Address(r24, r25), 4096);",
    "__ addl(Address(r25, r26), 4096);",
    "__ addl(Address(r26, r27), 4096);",
    "__ addl(Address(r27, r28), 4096);",
    "__ addl(Address(r28, r29), 4096);",
    "__ addl(Address(r29, r30), 4096);",
    "__ addl(Address(r30, r31), 4096);",
    "__ addl(Address(r31, rcx), 4096);",
    "__ addl(Address(rcx, rdx), 65536);",
    "__ addl(Address(rdx, rbx), 65536);",
    "__ addl(Address(rbx, r8), 65536);",
    "__ addl(Address(r8, r9), 65536);",
    "__ addl(Address(r9, r10), 65536);",
    "__ addl(Address(r10, r11), 65536);",
    "__ addl(Address(r11, r12), 65536);",
    "__ addl(Address(r12, r13), 65536);",
    "__ addl(Address(r13, r14), 65536);",
    "__ addl(Address(r14, r15), 65536);",
    "__ addl(Address(r15, r16), 65536);",
    "__ addl(Address(r16, r17), 65536);",
    "__ addl(Address(r17, r18), 65536);",
    "__ addl(Address(r18, r19), 65536);",
    "__ addl(Address(r19, r20), 65536);",
    "__ addl(Address(r20, r21), 65536);",
    "__ addl(Address(r21, r22), 65536);",
    "__ addl(Address(r22, r23), 65536);",
    "__ addl(Address(r23, r24), 65536);",
    "__ addl(Address(r24, r25), 65536);",
    "__ addl(Address(r25, r26), 65536);",
    "__ addl(Address(r26, r27), 65536);",
    "__ addl(Address(r27, r28), 65536);",
    "__ addl(Address(r28, r29), 65536);",
    "__ addl(Address(r29, r30), 65536);",
    "__ addl(Address(r30, r31), 65536);",
    "__ addl(Address(r31, rcx), 65536);",
    "__ addl(Address(rcx, rdx), 1048576);",
    "__ addl(Address(rdx, rbx), 1048576);",
    "__ addl(Address(rbx, r8), 1048576);",
    "__ addl(Address(r8, r9), 1048576);",
    "__ addl(Address(r9, r10), 1048576);",
    "__ addl(Address(r10, r11), 1048576);",
    "__ addl(Address(r11, r12), 1048576);",
    "__ addl(Address(r12, r13), 1048576);",
    "__ addl(Address(r13, r14), 1048576);",
    "__ addl(Address(r14, r15), 1048576);",
    "__ addl(Address(r15, r16), 1048576);",
    "__ addl(Address(r16, r17), 1048576);",
    "__ addl(Address(r17, r18), 1048576);",
    "__ addl(Address(r18, r19), 1048576);",
    "__ addl(Address(r19, r20), 1048576);",
    "__ addl(Address(r20, r21), 1048576);",
    "__ addl(Address(r21, r22), 1048576);",
    "__ addl(Address(r22, r23), 1048576);",
    "__ addl(Address(r23, r24), 1048576);",
    "__ addl(Address(r24, r25), 1048576);",
    "__ addl(Address(r25, r26), 1048576);",
    "__ addl(Address(r26, r27), 1048576);",
    "__ addl(Address(r27, r28), 1048576);",
    "__ addl(Address(r28, r29), 1048576);",
    "__ addl(Address(r29, r30), 1048576);",
    "__ addl(Address(r30, r31), 1048576);",
    "__ addl(Address(r31, rcx), 1048576);",
    "__ addl(Address(rcx, rdx), 16777216);",
    "__ addl(Address(rdx, rbx), 16777216);",
    "__ addl(Address(rbx, r8), 16777216);",
    "__ addl(Address(r8, r9), 16777216);",
    "__ addl(Address(r9, r10), 16777216);",
    "__ addl(Address(r10, r11), 16777216);",
    "__ addl(Address(r11, r12), 16777216);",
    "__ addl(Address(r12, r13), 16777216);",
    "__ addl(Address(r13, r14), 16777216);",
    "__ addl(Address(r14, r15), 16777216);",
    "__ addl(Address(r15, r16), 16777216);",
    "__ addl(Address(r16, r17), 16777216);",
    "__ addl(Address(r17, r18), 16777216);",
    "__ addl(Address(r18, r19), 16777216);",
    "__ addl(Address(r19, r20), 16777216);",
    "__ addl(Address(r20, r21), 16777216);",
    "__ addl(Address(r21, r22), 16777216);",
    "__ addl(Address(r22, r23), 16777216);",
    "__ addl(Address(r23, r24), 16777216);",
    "__ addl(Address(r24, r25), 16777216);",
    "__ addl(Address(r25, r26), 16777216);",
    "__ addl(Address(r26, r27), 16777216);",
    "__ addl(Address(r27, r28), 16777216);",
    "__ addl(Address(r28, r29), 16777216);",
    "__ addl(Address(r29, r30), 16777216);",
    "__ addl(Address(r30, r31), 16777216);",
    "__ addl(Address(r31, rcx), 16777216);",
    "__ addl(Address(rcx, rdx), 268435456);",
    "__ addl(Address(rdx, rbx), 268435456);",
    "__ addl(Address(rbx, r8), 268435456);",
    "__ addl(Address(r8, r9), 268435456);",
    "__ addl(Address(r9, r10), 268435456);",
    "__ addl(Address(r10, r11), 268435456);",
    "__ addl(Address(r11, r12), 268435456);",
    "__ addl(Address(r12, r13), 268435456);",
    "__ addl(Address(r13, r14), 268435456);",
    "__ addl(Address(r14, r15), 268435456);",
    "__ addl(Address(r15, r16), 268435456);",
    "__ addl(Address(r16, r17), 268435456);",
    "__ addl(Address(r17, r18), 268435456);",
    "__ addl(Address(r18, r19), 268435456);",
    "__ addl(Address(r19, r20), 268435456);",
    "__ addl(Address(r20, r21), 268435456);",
    "__ addl(Address(r21, r22), 268435456);",
    "__ addl(Address(r22, r23), 268435456);",
    "__ addl(Address(r23, r24), 268435456);",
    "__ addl(Address(r24, r25), 268435456);",
    "__ addl(Address(r25, r26), 268435456);",
    "__ addl(Address(r26, r27), 268435456);",
    "__ addl(Address(r27, r28), 268435456);",
    "__ addl(Address(r28, r29), 268435456);",
    "__ addl(Address(r29, r30), 268435456);",
    "__ addl(Address(r30, r31), 268435456);",
    "__ addl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ sarl(Address(rcx, rdx), 1);",
    "__ sarl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ sarl(Address(rbx, r8), 1);",
    "__ sarl(Address(r8, r9), 1);",
    "__ sarl(Address(r9, r10), 1);",
    "__ sarl(Address(r10, r11), 1);",
    "__ sarl(Address(r11, r12), 1);",
    "__ sarl(Address(r12, r13), 1);",
    "__ sarl(Address(r13, r14), 1);",
    "__ sarl(Address(r14, r15), 1);",
    "__ sarl(Address(r15, r16), 1);",
    "__ sarl(Address(r16, r17), 1);",
    "__ sarl(Address(r17, r18), 1);",
    "__ sarl(Address(r18, r19), 1);",
    "__ sarl(Address(r19, r20), 1);",
    "__ sarl(Address(r20, r21), 1);",
    "__ sarl(Address(r21, r22), 1);",
    "__ sarl(Address(r22, r23), 1);",
    "__ sarl(Address(r23, r24), 1);",
    "__ sarl(Address(r24, r25), 1);",
    "__ sarl(Address(r25, r26), 1);",
    "__ sarl(Address(r26, r27), 1);",
    "__ sarl(Address(r27, r28), 1);",
    "__ sarl(Address(r28, r29), 1);",
    "__ sarl(Address(r29, r30), 1);",
    "__ sarl(Address(r30, r31), 1);",
    "__ sarl(Address(r31, rcx), 1);",
    "__ sarl(Address(rcx, rdx), 2);",
    "__ sarl(Address(rdx, rbx), 2);",
    "__ sarl(Address(rbx, r8), 2);",
    "__ sarl(Address(r8, r9), 2);",
    "__ sarl(Address(r9, r10), 2);",
    "__ sarl(Address(r10, r11), 2);",
    "__ sarl(Address(r11, r12), 2);",
    "__ sarl(Address(r12, r13), 2);",
    "__ sarl(Address(r13, r14), 2);",
    "__ sarl(Address(r14, r15), 2);",
    "__ sarl(Address(r15, r16), 2);",
    "__ sarl(Address(r16, r17), 2);",
    "__ sarl(Address(r17, r18), 2);",
    "__ sarl(Address(r18, r19), 2);",
    "__ sarl(Address(r19, r20), 2);",
    "__ sarl(Address(r20, r21), 2);",
    "__ sarl(Address(r21, r22), 2);",
    "__ sarl(Address(r22, r23), 2);",
    "__ sarl(Address(r23, r24), 2);",
    "__ sarl(Address(r24, r25), 2);",
    "__ sarl(Address(r25, r26), 2);",
    "__ sarl(Address(r26, r27), 2);",
    "__ sarl(Address(r27, r28), 2);",
    "__ sarl(Address(r28, r29), 2);",
    "__ sarl(Address(r29, r30), 2);",
    "__ sarl(Address(r30, r31), 2);",
    "__ sarl(Address(r31, rcx), 2);",
    "__ sarl(Address(rcx, rdx), 4);",
    "__ sarl(Address(rdx, rbx), 4);",
    "__ sarl(Address(rbx, r8), 4);",
    "__ sarl(Address(r8, r9), 4);",
    "__ sarl(Address(r9, r10), 4);",
    "__ sarl(Address(r10, r11), 4);",
    "__ sarl(Address(r11, r12), 4);",
    "__ sarl(Address(r12, r13), 4);",
    "__ sarl(Address(r13, r14), 4);",
    "__ sarl(Address(r14, r15), 4);",
    "__ sarl(Address(r15, r16), 4);",
    "__ sarl(Address(r16, r17), 4);",
    "__ sarl(Address(r17, r18), 4);",
    "__ sarl(Address(r18, r19), 4);",
    "__ sarl(Address(r19, r20), 4);",
    "__ sarl(Address(r20, r21), 4);",
    "__ sarl(Address(r21, r22), 4);",
    "__ sarl(Address(r22, r23), 4);",
    "__ sarl(Address(r23, r24), 4);",
    "__ sarl(Address(r24, r25), 4);",
    "__ sarl(Address(r25, r26), 4);",
    "__ sarl(Address(r26, r27), 4);",
    "__ sarl(Address(r27, r28), 4);",
    "__ sarl(Address(r28, r29), 4);",
    "__ sarl(Address(r29, r30), 4);",
    "__ sarl(Address(r30, r31), 4);",
    "__ sarl(Address(r31, rcx), 4);",
    "__ sarl(Address(rcx, rdx), 8);",
    "__ sarl(Address(rdx, rbx), 8);",
    "__ sarl(Address(rbx, r8), 8);",
    "__ sarl(Address(r8, r9), 8);",
    "__ sarl(Address(r9, r10), 8);",
    "__ sarl(Address(r10, r11), 8);",
    "__ sarl(Address(r11, r12), 8);",
    "__ sarl(Address(r12, r13), 8);",
    "__ sarl(Address(r13, r14), 8);",
    "__ sarl(Address(r14, r15), 8);",
    "__ sarl(Address(r15, r16), 8);",
    "__ sarl(Address(r16, r17), 8);",
    "__ sarl(Address(r17, r18), 8);",
    "__ sarl(Address(r18, r19), 8);",
    "__ sarl(Address(r19, r20), 8);",
    "__ sarl(Address(r20, r21), 8);",
    "__ sarl(Address(r21, r22), 8);",
    "__ sarl(Address(r22, r23), 8);",
    "__ sarl(Address(r23, r24), 8);",
    "__ sarl(Address(r24, r25), 8);",
    "__ sarl(Address(r25, r26), 8);",
    "__ sarl(Address(r26, r27), 8);",
    "__ sarl(Address(r27, r28), 8);",
    "__ sarl(Address(r28, r29), 8);",
    "__ sarl(Address(r29, r30), 8);",
    "__ sarl(Address(r30, r31), 8);",
    "__ sarl(Address(r31, rcx), 8);",
    "__ sarl(Address(rcx, rdx), 16);",
    "__ sarl(Address(rdx, rbx), 16);",
    "__ sarl(Address(rbx, r8), 16);",
    "__ sarl(Address(r8, r9), 16);",
    "__ sarl(Address(r9, r10), 16);",
    "__ sarl(Address(r10, r11), 16);",
    "__ sarl(Address(r11, r12), 16);",
    "__ sarl(Address(r12, r13), 16);",
    "__ sarl(Address(r13, r14), 16);",
    "__ sarl(Address(r14, r15), 16);",
    "__ sarl(Address(r15, r16), 16);",
    "__ sarl(Address(r16, r17), 16);",
    "__ sarl(Address(r17, r18), 16);",
    "__ sarl(Address(r18, r19), 16);",
    "__ sarl(Address(r19, r20), 16);",
    "__ sarl(Address(r20, r21), 16);",
    "__ sarl(Address(r21, r22), 16);",
    "__ sarl(Address(r22, r23), 16);",
    "__ sarl(Address(r23, r24), 16);",
    "__ sarl(Address(r24, r25), 16);",
    "__ sarl(Address(r25, r26), 16);",
    "__ sarl(Address(r26, r27), 16);",
    "__ sarl(Address(r27, r28), 16);",
    "__ sarl(Address(r28, r29), 16);",
    "__ sarl(Address(r29, r30), 16);",
    "__ sarl(Address(r30, r31), 16);",
    "__ sarl(Address(r31, rcx), 16);",
#endif // _LP64
    "__ sbbl(Address(rcx, rdx), 1);",
    "__ sbbl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ sbbl(Address(rbx, r8), 1);",
    "__ sbbl(Address(r8, r9), 1);",
    "__ sbbl(Address(r9, r10), 1);",
    "__ sbbl(Address(r10, r11), 1);",
    "__ sbbl(Address(r11, r12), 1);",
    "__ sbbl(Address(r12, r13), 1);",
    "__ sbbl(Address(r13, r14), 1);",
    "__ sbbl(Address(r14, r15), 1);",
    "__ sbbl(Address(r15, r16), 1);",
    "__ sbbl(Address(r16, r17), 1);",
    "__ sbbl(Address(r17, r18), 1);",
    "__ sbbl(Address(r18, r19), 1);",
    "__ sbbl(Address(r19, r20), 1);",
    "__ sbbl(Address(r20, r21), 1);",
    "__ sbbl(Address(r21, r22), 1);",
    "__ sbbl(Address(r22, r23), 1);",
    "__ sbbl(Address(r23, r24), 1);",
    "__ sbbl(Address(r24, r25), 1);",
    "__ sbbl(Address(r25, r26), 1);",
    "__ sbbl(Address(r26, r27), 1);",
    "__ sbbl(Address(r27, r28), 1);",
    "__ sbbl(Address(r28, r29), 1);",
    "__ sbbl(Address(r29, r30), 1);",
    "__ sbbl(Address(r30, r31), 1);",
    "__ sbbl(Address(r31, rcx), 1);",
    "__ sbbl(Address(rcx, rdx), 16);",
    "__ sbbl(Address(rdx, rbx), 16);",
    "__ sbbl(Address(rbx, r8), 16);",
    "__ sbbl(Address(r8, r9), 16);",
    "__ sbbl(Address(r9, r10), 16);",
    "__ sbbl(Address(r10, r11), 16);",
    "__ sbbl(Address(r11, r12), 16);",
    "__ sbbl(Address(r12, r13), 16);",
    "__ sbbl(Address(r13, r14), 16);",
    "__ sbbl(Address(r14, r15), 16);",
    "__ sbbl(Address(r15, r16), 16);",
    "__ sbbl(Address(r16, r17), 16);",
    "__ sbbl(Address(r17, r18), 16);",
    "__ sbbl(Address(r18, r19), 16);",
    "__ sbbl(Address(r19, r20), 16);",
    "__ sbbl(Address(r20, r21), 16);",
    "__ sbbl(Address(r21, r22), 16);",
    "__ sbbl(Address(r22, r23), 16);",
    "__ sbbl(Address(r23, r24), 16);",
    "__ sbbl(Address(r24, r25), 16);",
    "__ sbbl(Address(r25, r26), 16);",
    "__ sbbl(Address(r26, r27), 16);",
    "__ sbbl(Address(r27, r28), 16);",
    "__ sbbl(Address(r28, r29), 16);",
    "__ sbbl(Address(r29, r30), 16);",
    "__ sbbl(Address(r30, r31), 16);",
    "__ sbbl(Address(r31, rcx), 16);",
    "__ sbbl(Address(rcx, rdx), 256);",
    "__ sbbl(Address(rdx, rbx), 256);",
    "__ sbbl(Address(rbx, r8), 256);",
    "__ sbbl(Address(r8, r9), 256);",
    "__ sbbl(Address(r9, r10), 256);",
    "__ sbbl(Address(r10, r11), 256);",
    "__ sbbl(Address(r11, r12), 256);",
    "__ sbbl(Address(r12, r13), 256);",
    "__ sbbl(Address(r13, r14), 256);",
    "__ sbbl(Address(r14, r15), 256);",
    "__ sbbl(Address(r15, r16), 256);",
    "__ sbbl(Address(r16, r17), 256);",
    "__ sbbl(Address(r17, r18), 256);",
    "__ sbbl(Address(r18, r19), 256);",
    "__ sbbl(Address(r19, r20), 256);",
    "__ sbbl(Address(r20, r21), 256);",
    "__ sbbl(Address(r21, r22), 256);",
    "__ sbbl(Address(r22, r23), 256);",
    "__ sbbl(Address(r23, r24), 256);",
    "__ sbbl(Address(r24, r25), 256);",
    "__ sbbl(Address(r25, r26), 256);",
    "__ sbbl(Address(r26, r27), 256);",
    "__ sbbl(Address(r27, r28), 256);",
    "__ sbbl(Address(r28, r29), 256);",
    "__ sbbl(Address(r29, r30), 256);",
    "__ sbbl(Address(r30, r31), 256);",
    "__ sbbl(Address(r31, rcx), 256);",
    "__ sbbl(Address(rcx, rdx), 4096);",
    "__ sbbl(Address(rdx, rbx), 4096);",
    "__ sbbl(Address(rbx, r8), 4096);",
    "__ sbbl(Address(r8, r9), 4096);",
    "__ sbbl(Address(r9, r10), 4096);",
    "__ sbbl(Address(r10, r11), 4096);",
    "__ sbbl(Address(r11, r12), 4096);",
    "__ sbbl(Address(r12, r13), 4096);",
    "__ sbbl(Address(r13, r14), 4096);",
    "__ sbbl(Address(r14, r15), 4096);",
    "__ sbbl(Address(r15, r16), 4096);",
    "__ sbbl(Address(r16, r17), 4096);",
    "__ sbbl(Address(r17, r18), 4096);",
    "__ sbbl(Address(r18, r19), 4096);",
    "__ sbbl(Address(r19, r20), 4096);",
    "__ sbbl(Address(r20, r21), 4096);",
    "__ sbbl(Address(r21, r22), 4096);",
    "__ sbbl(Address(r22, r23), 4096);",
    "__ sbbl(Address(r23, r24), 4096);",
    "__ sbbl(Address(r24, r25), 4096);",
    "__ sbbl(Address(r25, r26), 4096);",
    "__ sbbl(Address(r26, r27), 4096);",
    "__ sbbl(Address(r27, r28), 4096);",
    "__ sbbl(Address(r28, r29), 4096);",
    "__ sbbl(Address(r29, r30), 4096);",
    "__ sbbl(Address(r30, r31), 4096);",
    "__ sbbl(Address(r31, rcx), 4096);",
    "__ sbbl(Address(rcx, rdx), 65536);",
    "__ sbbl(Address(rdx, rbx), 65536);",
    "__ sbbl(Address(rbx, r8), 65536);",
    "__ sbbl(Address(r8, r9), 65536);",
    "__ sbbl(Address(r9, r10), 65536);",
    "__ sbbl(Address(r10, r11), 65536);",
    "__ sbbl(Address(r11, r12), 65536);",
    "__ sbbl(Address(r12, r13), 65536);",
    "__ sbbl(Address(r13, r14), 65536);",
    "__ sbbl(Address(r14, r15), 65536);",
    "__ sbbl(Address(r15, r16), 65536);",
    "__ sbbl(Address(r16, r17), 65536);",
    "__ sbbl(Address(r17, r18), 65536);",
    "__ sbbl(Address(r18, r19), 65536);",
    "__ sbbl(Address(r19, r20), 65536);",
    "__ sbbl(Address(r20, r21), 65536);",
    "__ sbbl(Address(r21, r22), 65536);",
    "__ sbbl(Address(r22, r23), 65536);",
    "__ sbbl(Address(r23, r24), 65536);",
    "__ sbbl(Address(r24, r25), 65536);",
    "__ sbbl(Address(r25, r26), 65536);",
    "__ sbbl(Address(r26, r27), 65536);",
    "__ sbbl(Address(r27, r28), 65536);",
    "__ sbbl(Address(r28, r29), 65536);",
    "__ sbbl(Address(r29, r30), 65536);",
    "__ sbbl(Address(r30, r31), 65536);",
    "__ sbbl(Address(r31, rcx), 65536);",
    "__ sbbl(Address(rcx, rdx), 1048576);",
    "__ sbbl(Address(rdx, rbx), 1048576);",
    "__ sbbl(Address(rbx, r8), 1048576);",
    "__ sbbl(Address(r8, r9), 1048576);",
    "__ sbbl(Address(r9, r10), 1048576);",
    "__ sbbl(Address(r10, r11), 1048576);",
    "__ sbbl(Address(r11, r12), 1048576);",
    "__ sbbl(Address(r12, r13), 1048576);",
    "__ sbbl(Address(r13, r14), 1048576);",
    "__ sbbl(Address(r14, r15), 1048576);",
    "__ sbbl(Address(r15, r16), 1048576);",
    "__ sbbl(Address(r16, r17), 1048576);",
    "__ sbbl(Address(r17, r18), 1048576);",
    "__ sbbl(Address(r18, r19), 1048576);",
    "__ sbbl(Address(r19, r20), 1048576);",
    "__ sbbl(Address(r20, r21), 1048576);",
    "__ sbbl(Address(r21, r22), 1048576);",
    "__ sbbl(Address(r22, r23), 1048576);",
    "__ sbbl(Address(r23, r24), 1048576);",
    "__ sbbl(Address(r24, r25), 1048576);",
    "__ sbbl(Address(r25, r26), 1048576);",
    "__ sbbl(Address(r26, r27), 1048576);",
    "__ sbbl(Address(r27, r28), 1048576);",
    "__ sbbl(Address(r28, r29), 1048576);",
    "__ sbbl(Address(r29, r30), 1048576);",
    "__ sbbl(Address(r30, r31), 1048576);",
    "__ sbbl(Address(r31, rcx), 1048576);",
    "__ sbbl(Address(rcx, rdx), 16777216);",
    "__ sbbl(Address(rdx, rbx), 16777216);",
    "__ sbbl(Address(rbx, r8), 16777216);",
    "__ sbbl(Address(r8, r9), 16777216);",
    "__ sbbl(Address(r9, r10), 16777216);",
    "__ sbbl(Address(r10, r11), 16777216);",
    "__ sbbl(Address(r11, r12), 16777216);",
    "__ sbbl(Address(r12, r13), 16777216);",
    "__ sbbl(Address(r13, r14), 16777216);",
    "__ sbbl(Address(r14, r15), 16777216);",
    "__ sbbl(Address(r15, r16), 16777216);",
    "__ sbbl(Address(r16, r17), 16777216);",
    "__ sbbl(Address(r17, r18), 16777216);",
    "__ sbbl(Address(r18, r19), 16777216);",
    "__ sbbl(Address(r19, r20), 16777216);",
    "__ sbbl(Address(r20, r21), 16777216);",
    "__ sbbl(Address(r21, r22), 16777216);",
    "__ sbbl(Address(r22, r23), 16777216);",
    "__ sbbl(Address(r23, r24), 16777216);",
    "__ sbbl(Address(r24, r25), 16777216);",
    "__ sbbl(Address(r25, r26), 16777216);",
    "__ sbbl(Address(r26, r27), 16777216);",
    "__ sbbl(Address(r27, r28), 16777216);",
    "__ sbbl(Address(r28, r29), 16777216);",
    "__ sbbl(Address(r29, r30), 16777216);",
    "__ sbbl(Address(r30, r31), 16777216);",
    "__ sbbl(Address(r31, rcx), 16777216);",
    "__ sbbl(Address(rcx, rdx), 268435456);",
    "__ sbbl(Address(rdx, rbx), 268435456);",
    "__ sbbl(Address(rbx, r8), 268435456);",
    "__ sbbl(Address(r8, r9), 268435456);",
    "__ sbbl(Address(r9, r10), 268435456);",
    "__ sbbl(Address(r10, r11), 268435456);",
    "__ sbbl(Address(r11, r12), 268435456);",
    "__ sbbl(Address(r12, r13), 268435456);",
    "__ sbbl(Address(r13, r14), 268435456);",
    "__ sbbl(Address(r14, r15), 268435456);",
    "__ sbbl(Address(r15, r16), 268435456);",
    "__ sbbl(Address(r16, r17), 268435456);",
    "__ sbbl(Address(r17, r18), 268435456);",
    "__ sbbl(Address(r18, r19), 268435456);",
    "__ sbbl(Address(r19, r20), 268435456);",
    "__ sbbl(Address(r20, r21), 268435456);",
    "__ sbbl(Address(r21, r22), 268435456);",
    "__ sbbl(Address(r22, r23), 268435456);",
    "__ sbbl(Address(r23, r24), 268435456);",
    "__ sbbl(Address(r24, r25), 268435456);",
    "__ sbbl(Address(r25, r26), 268435456);",
    "__ sbbl(Address(r26, r27), 268435456);",
    "__ sbbl(Address(r27, r28), 268435456);",
    "__ sbbl(Address(r28, r29), 268435456);",
    "__ sbbl(Address(r29, r30), 268435456);",
    "__ sbbl(Address(r30, r31), 268435456);",
    "__ sbbl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ shrl(Address(rcx, rdx), 1);",
    "__ shrl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ shrl(Address(rbx, r8), 1);",
    "__ shrl(Address(r8, r9), 1);",
    "__ shrl(Address(r9, r10), 1);",
    "__ shrl(Address(r10, r11), 1);",
    "__ shrl(Address(r11, r12), 1);",
    "__ shrl(Address(r12, r13), 1);",
    "__ shrl(Address(r13, r14), 1);",
    "__ shrl(Address(r14, r15), 1);",
    "__ shrl(Address(r15, r16), 1);",
    "__ shrl(Address(r16, r17), 1);",
    "__ shrl(Address(r17, r18), 1);",
    "__ shrl(Address(r18, r19), 1);",
    "__ shrl(Address(r19, r20), 1);",
    "__ shrl(Address(r20, r21), 1);",
    "__ shrl(Address(r21, r22), 1);",
    "__ shrl(Address(r22, r23), 1);",
    "__ shrl(Address(r23, r24), 1);",
    "__ shrl(Address(r24, r25), 1);",
    "__ shrl(Address(r25, r26), 1);",
    "__ shrl(Address(r26, r27), 1);",
    "__ shrl(Address(r27, r28), 1);",
    "__ shrl(Address(r28, r29), 1);",
    "__ shrl(Address(r29, r30), 1);",
    "__ shrl(Address(r30, r31), 1);",
    "__ shrl(Address(r31, rcx), 1);",
    "__ shrl(Address(rcx, rdx), 2);",
    "__ shrl(Address(rdx, rbx), 2);",
    "__ shrl(Address(rbx, r8), 2);",
    "__ shrl(Address(r8, r9), 2);",
    "__ shrl(Address(r9, r10), 2);",
    "__ shrl(Address(r10, r11), 2);",
    "__ shrl(Address(r11, r12), 2);",
    "__ shrl(Address(r12, r13), 2);",
    "__ shrl(Address(r13, r14), 2);",
    "__ shrl(Address(r14, r15), 2);",
    "__ shrl(Address(r15, r16), 2);",
    "__ shrl(Address(r16, r17), 2);",
    "__ shrl(Address(r17, r18), 2);",
    "__ shrl(Address(r18, r19), 2);",
    "__ shrl(Address(r19, r20), 2);",
    "__ shrl(Address(r20, r21), 2);",
    "__ shrl(Address(r21, r22), 2);",
    "__ shrl(Address(r22, r23), 2);",
    "__ shrl(Address(r23, r24), 2);",
    "__ shrl(Address(r24, r25), 2);",
    "__ shrl(Address(r25, r26), 2);",
    "__ shrl(Address(r26, r27), 2);",
    "__ shrl(Address(r27, r28), 2);",
    "__ shrl(Address(r28, r29), 2);",
    "__ shrl(Address(r29, r30), 2);",
    "__ shrl(Address(r30, r31), 2);",
    "__ shrl(Address(r31, rcx), 2);",
    "__ shrl(Address(rcx, rdx), 4);",
    "__ shrl(Address(rdx, rbx), 4);",
    "__ shrl(Address(rbx, r8), 4);",
    "__ shrl(Address(r8, r9), 4);",
    "__ shrl(Address(r9, r10), 4);",
    "__ shrl(Address(r10, r11), 4);",
    "__ shrl(Address(r11, r12), 4);",
    "__ shrl(Address(r12, r13), 4);",
    "__ shrl(Address(r13, r14), 4);",
    "__ shrl(Address(r14, r15), 4);",
    "__ shrl(Address(r15, r16), 4);",
    "__ shrl(Address(r16, r17), 4);",
    "__ shrl(Address(r17, r18), 4);",
    "__ shrl(Address(r18, r19), 4);",
    "__ shrl(Address(r19, r20), 4);",
    "__ shrl(Address(r20, r21), 4);",
    "__ shrl(Address(r21, r22), 4);",
    "__ shrl(Address(r22, r23), 4);",
    "__ shrl(Address(r23, r24), 4);",
    "__ shrl(Address(r24, r25), 4);",
    "__ shrl(Address(r25, r26), 4);",
    "__ shrl(Address(r26, r27), 4);",
    "__ shrl(Address(r27, r28), 4);",
    "__ shrl(Address(r28, r29), 4);",
    "__ shrl(Address(r29, r30), 4);",
    "__ shrl(Address(r30, r31), 4);",
    "__ shrl(Address(r31, rcx), 4);",
    "__ shrl(Address(rcx, rdx), 8);",
    "__ shrl(Address(rdx, rbx), 8);",
    "__ shrl(Address(rbx, r8), 8);",
    "__ shrl(Address(r8, r9), 8);",
    "__ shrl(Address(r9, r10), 8);",
    "__ shrl(Address(r10, r11), 8);",
    "__ shrl(Address(r11, r12), 8);",
    "__ shrl(Address(r12, r13), 8);",
    "__ shrl(Address(r13, r14), 8);",
    "__ shrl(Address(r14, r15), 8);",
    "__ shrl(Address(r15, r16), 8);",
    "__ shrl(Address(r16, r17), 8);",
    "__ shrl(Address(r17, r18), 8);",
    "__ shrl(Address(r18, r19), 8);",
    "__ shrl(Address(r19, r20), 8);",
    "__ shrl(Address(r20, r21), 8);",
    "__ shrl(Address(r21, r22), 8);",
    "__ shrl(Address(r22, r23), 8);",
    "__ shrl(Address(r23, r24), 8);",
    "__ shrl(Address(r24, r25), 8);",
    "__ shrl(Address(r25, r26), 8);",
    "__ shrl(Address(r26, r27), 8);",
    "__ shrl(Address(r27, r28), 8);",
    "__ shrl(Address(r28, r29), 8);",
    "__ shrl(Address(r29, r30), 8);",
    "__ shrl(Address(r30, r31), 8);",
    "__ shrl(Address(r31, rcx), 8);",
    "__ shrl(Address(rcx, rdx), 16);",
    "__ shrl(Address(rdx, rbx), 16);",
    "__ shrl(Address(rbx, r8), 16);",
    "__ shrl(Address(r8, r9), 16);",
    "__ shrl(Address(r9, r10), 16);",
    "__ shrl(Address(r10, r11), 16);",
    "__ shrl(Address(r11, r12), 16);",
    "__ shrl(Address(r12, r13), 16);",
    "__ shrl(Address(r13, r14), 16);",
    "__ shrl(Address(r14, r15), 16);",
    "__ shrl(Address(r15, r16), 16);",
    "__ shrl(Address(r16, r17), 16);",
    "__ shrl(Address(r17, r18), 16);",
    "__ shrl(Address(r18, r19), 16);",
    "__ shrl(Address(r19, r20), 16);",
    "__ shrl(Address(r20, r21), 16);",
    "__ shrl(Address(r21, r22), 16);",
    "__ shrl(Address(r22, r23), 16);",
    "__ shrl(Address(r23, r24), 16);",
    "__ shrl(Address(r24, r25), 16);",
    "__ shrl(Address(r25, r26), 16);",
    "__ shrl(Address(r26, r27), 16);",
    "__ shrl(Address(r27, r28), 16);",
    "__ shrl(Address(r28, r29), 16);",
    "__ shrl(Address(r29, r30), 16);",
    "__ shrl(Address(r30, r31), 16);",
    "__ shrl(Address(r31, rcx), 16);",
#endif // _LP64
    "__ subl(Address(rcx, rdx), 1);",
    "__ subl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ subl(Address(rbx, r8), 1);",
    "__ subl(Address(r8, r9), 1);",
    "__ subl(Address(r9, r10), 1);",
    "__ subl(Address(r10, r11), 1);",
    "__ subl(Address(r11, r12), 1);",
    "__ subl(Address(r12, r13), 1);",
    "__ subl(Address(r13, r14), 1);",
    "__ subl(Address(r14, r15), 1);",
    "__ subl(Address(r15, r16), 1);",
    "__ subl(Address(r16, r17), 1);",
    "__ subl(Address(r17, r18), 1);",
    "__ subl(Address(r18, r19), 1);",
    "__ subl(Address(r19, r20), 1);",
    "__ subl(Address(r20, r21), 1);",
    "__ subl(Address(r21, r22), 1);",
    "__ subl(Address(r22, r23), 1);",
    "__ subl(Address(r23, r24), 1);",
    "__ subl(Address(r24, r25), 1);",
    "__ subl(Address(r25, r26), 1);",
    "__ subl(Address(r26, r27), 1);",
    "__ subl(Address(r27, r28), 1);",
    "__ subl(Address(r28, r29), 1);",
    "__ subl(Address(r29, r30), 1);",
    "__ subl(Address(r30, r31), 1);",
    "__ subl(Address(r31, rcx), 1);",
    "__ subl(Address(rcx, rdx), 16);",
    "__ subl(Address(rdx, rbx), 16);",
    "__ subl(Address(rbx, r8), 16);",
    "__ subl(Address(r8, r9), 16);",
    "__ subl(Address(r9, r10), 16);",
    "__ subl(Address(r10, r11), 16);",
    "__ subl(Address(r11, r12), 16);",
    "__ subl(Address(r12, r13), 16);",
    "__ subl(Address(r13, r14), 16);",
    "__ subl(Address(r14, r15), 16);",
    "__ subl(Address(r15, r16), 16);",
    "__ subl(Address(r16, r17), 16);",
    "__ subl(Address(r17, r18), 16);",
    "__ subl(Address(r18, r19), 16);",
    "__ subl(Address(r19, r20), 16);",
    "__ subl(Address(r20, r21), 16);",
    "__ subl(Address(r21, r22), 16);",
    "__ subl(Address(r22, r23), 16);",
    "__ subl(Address(r23, r24), 16);",
    "__ subl(Address(r24, r25), 16);",
    "__ subl(Address(r25, r26), 16);",
    "__ subl(Address(r26, r27), 16);",
    "__ subl(Address(r27, r28), 16);",
    "__ subl(Address(r28, r29), 16);",
    "__ subl(Address(r29, r30), 16);",
    "__ subl(Address(r30, r31), 16);",
    "__ subl(Address(r31, rcx), 16);",
    "__ subl(Address(rcx, rdx), 256);",
    "__ subl(Address(rdx, rbx), 256);",
    "__ subl(Address(rbx, r8), 256);",
    "__ subl(Address(r8, r9), 256);",
    "__ subl(Address(r9, r10), 256);",
    "__ subl(Address(r10, r11), 256);",
    "__ subl(Address(r11, r12), 256);",
    "__ subl(Address(r12, r13), 256);",
    "__ subl(Address(r13, r14), 256);",
    "__ subl(Address(r14, r15), 256);",
    "__ subl(Address(r15, r16), 256);",
    "__ subl(Address(r16, r17), 256);",
    "__ subl(Address(r17, r18), 256);",
    "__ subl(Address(r18, r19), 256);",
    "__ subl(Address(r19, r20), 256);",
    "__ subl(Address(r20, r21), 256);",
    "__ subl(Address(r21, r22), 256);",
    "__ subl(Address(r22, r23), 256);",
    "__ subl(Address(r23, r24), 256);",
    "__ subl(Address(r24, r25), 256);",
    "__ subl(Address(r25, r26), 256);",
    "__ subl(Address(r26, r27), 256);",
    "__ subl(Address(r27, r28), 256);",
    "__ subl(Address(r28, r29), 256);",
    "__ subl(Address(r29, r30), 256);",
    "__ subl(Address(r30, r31), 256);",
    "__ subl(Address(r31, rcx), 256);",
    "__ subl(Address(rcx, rdx), 4096);",
    "__ subl(Address(rdx, rbx), 4096);",
    "__ subl(Address(rbx, r8), 4096);",
    "__ subl(Address(r8, r9), 4096);",
    "__ subl(Address(r9, r10), 4096);",
    "__ subl(Address(r10, r11), 4096);",
    "__ subl(Address(r11, r12), 4096);",
    "__ subl(Address(r12, r13), 4096);",
    "__ subl(Address(r13, r14), 4096);",
    "__ subl(Address(r14, r15), 4096);",
    "__ subl(Address(r15, r16), 4096);",
    "__ subl(Address(r16, r17), 4096);",
    "__ subl(Address(r17, r18), 4096);",
    "__ subl(Address(r18, r19), 4096);",
    "__ subl(Address(r19, r20), 4096);",
    "__ subl(Address(r20, r21), 4096);",
    "__ subl(Address(r21, r22), 4096);",
    "__ subl(Address(r22, r23), 4096);",
    "__ subl(Address(r23, r24), 4096);",
    "__ subl(Address(r24, r25), 4096);",
    "__ subl(Address(r25, r26), 4096);",
    "__ subl(Address(r26, r27), 4096);",
    "__ subl(Address(r27, r28), 4096);",
    "__ subl(Address(r28, r29), 4096);",
    "__ subl(Address(r29, r30), 4096);",
    "__ subl(Address(r30, r31), 4096);",
    "__ subl(Address(r31, rcx), 4096);",
    "__ subl(Address(rcx, rdx), 65536);",
    "__ subl(Address(rdx, rbx), 65536);",
    "__ subl(Address(rbx, r8), 65536);",
    "__ subl(Address(r8, r9), 65536);",
    "__ subl(Address(r9, r10), 65536);",
    "__ subl(Address(r10, r11), 65536);",
    "__ subl(Address(r11, r12), 65536);",
    "__ subl(Address(r12, r13), 65536);",
    "__ subl(Address(r13, r14), 65536);",
    "__ subl(Address(r14, r15), 65536);",
    "__ subl(Address(r15, r16), 65536);",
    "__ subl(Address(r16, r17), 65536);",
    "__ subl(Address(r17, r18), 65536);",
    "__ subl(Address(r18, r19), 65536);",
    "__ subl(Address(r19, r20), 65536);",
    "__ subl(Address(r20, r21), 65536);",
    "__ subl(Address(r21, r22), 65536);",
    "__ subl(Address(r22, r23), 65536);",
    "__ subl(Address(r23, r24), 65536);",
    "__ subl(Address(r24, r25), 65536);",
    "__ subl(Address(r25, r26), 65536);",
    "__ subl(Address(r26, r27), 65536);",
    "__ subl(Address(r27, r28), 65536);",
    "__ subl(Address(r28, r29), 65536);",
    "__ subl(Address(r29, r30), 65536);",
    "__ subl(Address(r30, r31), 65536);",
    "__ subl(Address(r31, rcx), 65536);",
    "__ subl(Address(rcx, rdx), 1048576);",
    "__ subl(Address(rdx, rbx), 1048576);",
    "__ subl(Address(rbx, r8), 1048576);",
    "__ subl(Address(r8, r9), 1048576);",
    "__ subl(Address(r9, r10), 1048576);",
    "__ subl(Address(r10, r11), 1048576);",
    "__ subl(Address(r11, r12), 1048576);",
    "__ subl(Address(r12, r13), 1048576);",
    "__ subl(Address(r13, r14), 1048576);",
    "__ subl(Address(r14, r15), 1048576);",
    "__ subl(Address(r15, r16), 1048576);",
    "__ subl(Address(r16, r17), 1048576);",
    "__ subl(Address(r17, r18), 1048576);",
    "__ subl(Address(r18, r19), 1048576);",
    "__ subl(Address(r19, r20), 1048576);",
    "__ subl(Address(r20, r21), 1048576);",
    "__ subl(Address(r21, r22), 1048576);",
    "__ subl(Address(r22, r23), 1048576);",
    "__ subl(Address(r23, r24), 1048576);",
    "__ subl(Address(r24, r25), 1048576);",
    "__ subl(Address(r25, r26), 1048576);",
    "__ subl(Address(r26, r27), 1048576);",
    "__ subl(Address(r27, r28), 1048576);",
    "__ subl(Address(r28, r29), 1048576);",
    "__ subl(Address(r29, r30), 1048576);",
    "__ subl(Address(r30, r31), 1048576);",
    "__ subl(Address(r31, rcx), 1048576);",
    "__ subl(Address(rcx, rdx), 16777216);",
    "__ subl(Address(rdx, rbx), 16777216);",
    "__ subl(Address(rbx, r8), 16777216);",
    "__ subl(Address(r8, r9), 16777216);",
    "__ subl(Address(r9, r10), 16777216);",
    "__ subl(Address(r10, r11), 16777216);",
    "__ subl(Address(r11, r12), 16777216);",
    "__ subl(Address(r12, r13), 16777216);",
    "__ subl(Address(r13, r14), 16777216);",
    "__ subl(Address(r14, r15), 16777216);",
    "__ subl(Address(r15, r16), 16777216);",
    "__ subl(Address(r16, r17), 16777216);",
    "__ subl(Address(r17, r18), 16777216);",
    "__ subl(Address(r18, r19), 16777216);",
    "__ subl(Address(r19, r20), 16777216);",
    "__ subl(Address(r20, r21), 16777216);",
    "__ subl(Address(r21, r22), 16777216);",
    "__ subl(Address(r22, r23), 16777216);",
    "__ subl(Address(r23, r24), 16777216);",
    "__ subl(Address(r24, r25), 16777216);",
    "__ subl(Address(r25, r26), 16777216);",
    "__ subl(Address(r26, r27), 16777216);",
    "__ subl(Address(r27, r28), 16777216);",
    "__ subl(Address(r28, r29), 16777216);",
    "__ subl(Address(r29, r30), 16777216);",
    "__ subl(Address(r30, r31), 16777216);",
    "__ subl(Address(r31, rcx), 16777216);",
    "__ subl(Address(rcx, rdx), 268435456);",
    "__ subl(Address(rdx, rbx), 268435456);",
    "__ subl(Address(rbx, r8), 268435456);",
    "__ subl(Address(r8, r9), 268435456);",
    "__ subl(Address(r9, r10), 268435456);",
    "__ subl(Address(r10, r11), 268435456);",
    "__ subl(Address(r11, r12), 268435456);",
    "__ subl(Address(r12, r13), 268435456);",
    "__ subl(Address(r13, r14), 268435456);",
    "__ subl(Address(r14, r15), 268435456);",
    "__ subl(Address(r15, r16), 268435456);",
    "__ subl(Address(r16, r17), 268435456);",
    "__ subl(Address(r17, r18), 268435456);",
    "__ subl(Address(r18, r19), 268435456);",
    "__ subl(Address(r19, r20), 268435456);",
    "__ subl(Address(r20, r21), 268435456);",
    "__ subl(Address(r21, r22), 268435456);",
    "__ subl(Address(r22, r23), 268435456);",
    "__ subl(Address(r23, r24), 268435456);",
    "__ subl(Address(r24, r25), 268435456);",
    "__ subl(Address(r25, r26), 268435456);",
    "__ subl(Address(r26, r27), 268435456);",
    "__ subl(Address(r27, r28), 268435456);",
    "__ subl(Address(r28, r29), 268435456);",
    "__ subl(Address(r29, r30), 268435456);",
    "__ subl(Address(r30, r31), 268435456);",
    "__ subl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ xorl(Address(rcx, rdx), 1);",
    "__ xorl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ xorl(Address(rbx, r8), 1);",
    "__ xorl(Address(r8, r9), 1);",
    "__ xorl(Address(r9, r10), 1);",
    "__ xorl(Address(r10, r11), 1);",
    "__ xorl(Address(r11, r12), 1);",
    "__ xorl(Address(r12, r13), 1);",
    "__ xorl(Address(r13, r14), 1);",
    "__ xorl(Address(r14, r15), 1);",
    "__ xorl(Address(r15, r16), 1);",
    "__ xorl(Address(r16, r17), 1);",
    "__ xorl(Address(r17, r18), 1);",
    "__ xorl(Address(r18, r19), 1);",
    "__ xorl(Address(r19, r20), 1);",
    "__ xorl(Address(r20, r21), 1);",
    "__ xorl(Address(r21, r22), 1);",
    "__ xorl(Address(r22, r23), 1);",
    "__ xorl(Address(r23, r24), 1);",
    "__ xorl(Address(r24, r25), 1);",
    "__ xorl(Address(r25, r26), 1);",
    "__ xorl(Address(r26, r27), 1);",
    "__ xorl(Address(r27, r28), 1);",
    "__ xorl(Address(r28, r29), 1);",
    "__ xorl(Address(r29, r30), 1);",
    "__ xorl(Address(r30, r31), 1);",
    "__ xorl(Address(r31, rcx), 1);",
    "__ xorl(Address(rcx, rdx), 16);",
    "__ xorl(Address(rdx, rbx), 16);",
    "__ xorl(Address(rbx, r8), 16);",
    "__ xorl(Address(r8, r9), 16);",
    "__ xorl(Address(r9, r10), 16);",
    "__ xorl(Address(r10, r11), 16);",
    "__ xorl(Address(r11, r12), 16);",
    "__ xorl(Address(r12, r13), 16);",
    "__ xorl(Address(r13, r14), 16);",
    "__ xorl(Address(r14, r15), 16);",
    "__ xorl(Address(r15, r16), 16);",
    "__ xorl(Address(r16, r17), 16);",
    "__ xorl(Address(r17, r18), 16);",
    "__ xorl(Address(r18, r19), 16);",
    "__ xorl(Address(r19, r20), 16);",
    "__ xorl(Address(r20, r21), 16);",
    "__ xorl(Address(r21, r22), 16);",
    "__ xorl(Address(r22, r23), 16);",
    "__ xorl(Address(r23, r24), 16);",
    "__ xorl(Address(r24, r25), 16);",
    "__ xorl(Address(r25, r26), 16);",
    "__ xorl(Address(r26, r27), 16);",
    "__ xorl(Address(r27, r28), 16);",
    "__ xorl(Address(r28, r29), 16);",
    "__ xorl(Address(r29, r30), 16);",
    "__ xorl(Address(r30, r31), 16);",
    "__ xorl(Address(r31, rcx), 16);",
    "__ xorl(Address(rcx, rdx), 256);",
    "__ xorl(Address(rdx, rbx), 256);",
    "__ xorl(Address(rbx, r8), 256);",
    "__ xorl(Address(r8, r9), 256);",
    "__ xorl(Address(r9, r10), 256);",
    "__ xorl(Address(r10, r11), 256);",
    "__ xorl(Address(r11, r12), 256);",
    "__ xorl(Address(r12, r13), 256);",
    "__ xorl(Address(r13, r14), 256);",
    "__ xorl(Address(r14, r15), 256);",
    "__ xorl(Address(r15, r16), 256);",
    "__ xorl(Address(r16, r17), 256);",
    "__ xorl(Address(r17, r18), 256);",
    "__ xorl(Address(r18, r19), 256);",
    "__ xorl(Address(r19, r20), 256);",
    "__ xorl(Address(r20, r21), 256);",
    "__ xorl(Address(r21, r22), 256);",
    "__ xorl(Address(r22, r23), 256);",
    "__ xorl(Address(r23, r24), 256);",
    "__ xorl(Address(r24, r25), 256);",
    "__ xorl(Address(r25, r26), 256);",
    "__ xorl(Address(r26, r27), 256);",
    "__ xorl(Address(r27, r28), 256);",
    "__ xorl(Address(r28, r29), 256);",
    "__ xorl(Address(r29, r30), 256);",
    "__ xorl(Address(r30, r31), 256);",
    "__ xorl(Address(r31, rcx), 256);",
    "__ xorl(Address(rcx, rdx), 4096);",
    "__ xorl(Address(rdx, rbx), 4096);",
    "__ xorl(Address(rbx, r8), 4096);",
    "__ xorl(Address(r8, r9), 4096);",
    "__ xorl(Address(r9, r10), 4096);",
    "__ xorl(Address(r10, r11), 4096);",
    "__ xorl(Address(r11, r12), 4096);",
    "__ xorl(Address(r12, r13), 4096);",
    "__ xorl(Address(r13, r14), 4096);",
    "__ xorl(Address(r14, r15), 4096);",
    "__ xorl(Address(r15, r16), 4096);",
    "__ xorl(Address(r16, r17), 4096);",
    "__ xorl(Address(r17, r18), 4096);",
    "__ xorl(Address(r18, r19), 4096);",
    "__ xorl(Address(r19, r20), 4096);",
    "__ xorl(Address(r20, r21), 4096);",
    "__ xorl(Address(r21, r22), 4096);",
    "__ xorl(Address(r22, r23), 4096);",
    "__ xorl(Address(r23, r24), 4096);",
    "__ xorl(Address(r24, r25), 4096);",
    "__ xorl(Address(r25, r26), 4096);",
    "__ xorl(Address(r26, r27), 4096);",
    "__ xorl(Address(r27, r28), 4096);",
    "__ xorl(Address(r28, r29), 4096);",
    "__ xorl(Address(r29, r30), 4096);",
    "__ xorl(Address(r30, r31), 4096);",
    "__ xorl(Address(r31, rcx), 4096);",
    "__ xorl(Address(rcx, rdx), 65536);",
    "__ xorl(Address(rdx, rbx), 65536);",
    "__ xorl(Address(rbx, r8), 65536);",
    "__ xorl(Address(r8, r9), 65536);",
    "__ xorl(Address(r9, r10), 65536);",
    "__ xorl(Address(r10, r11), 65536);",
    "__ xorl(Address(r11, r12), 65536);",
    "__ xorl(Address(r12, r13), 65536);",
    "__ xorl(Address(r13, r14), 65536);",
    "__ xorl(Address(r14, r15), 65536);",
    "__ xorl(Address(r15, r16), 65536);",
    "__ xorl(Address(r16, r17), 65536);",
    "__ xorl(Address(r17, r18), 65536);",
    "__ xorl(Address(r18, r19), 65536);",
    "__ xorl(Address(r19, r20), 65536);",
    "__ xorl(Address(r20, r21), 65536);",
    "__ xorl(Address(r21, r22), 65536);",
    "__ xorl(Address(r22, r23), 65536);",
    "__ xorl(Address(r23, r24), 65536);",
    "__ xorl(Address(r24, r25), 65536);",
    "__ xorl(Address(r25, r26), 65536);",
    "__ xorl(Address(r26, r27), 65536);",
    "__ xorl(Address(r27, r28), 65536);",
    "__ xorl(Address(r28, r29), 65536);",
    "__ xorl(Address(r29, r30), 65536);",
    "__ xorl(Address(r30, r31), 65536);",
    "__ xorl(Address(r31, rcx), 65536);",
    "__ xorl(Address(rcx, rdx), 1048576);",
    "__ xorl(Address(rdx, rbx), 1048576);",
    "__ xorl(Address(rbx, r8), 1048576);",
    "__ xorl(Address(r8, r9), 1048576);",
    "__ xorl(Address(r9, r10), 1048576);",
    "__ xorl(Address(r10, r11), 1048576);",
    "__ xorl(Address(r11, r12), 1048576);",
    "__ xorl(Address(r12, r13), 1048576);",
    "__ xorl(Address(r13, r14), 1048576);",
    "__ xorl(Address(r14, r15), 1048576);",
    "__ xorl(Address(r15, r16), 1048576);",
    "__ xorl(Address(r16, r17), 1048576);",
    "__ xorl(Address(r17, r18), 1048576);",
    "__ xorl(Address(r18, r19), 1048576);",
    "__ xorl(Address(r19, r20), 1048576);",
    "__ xorl(Address(r20, r21), 1048576);",
    "__ xorl(Address(r21, r22), 1048576);",
    "__ xorl(Address(r22, r23), 1048576);",
    "__ xorl(Address(r23, r24), 1048576);",
    "__ xorl(Address(r24, r25), 1048576);",
    "__ xorl(Address(r25, r26), 1048576);",
    "__ xorl(Address(r26, r27), 1048576);",
    "__ xorl(Address(r27, r28), 1048576);",
    "__ xorl(Address(r28, r29), 1048576);",
    "__ xorl(Address(r29, r30), 1048576);",
    "__ xorl(Address(r30, r31), 1048576);",
    "__ xorl(Address(r31, rcx), 1048576);",
    "__ xorl(Address(rcx, rdx), 16777216);",
    "__ xorl(Address(rdx, rbx), 16777216);",
    "__ xorl(Address(rbx, r8), 16777216);",
    "__ xorl(Address(r8, r9), 16777216);",
    "__ xorl(Address(r9, r10), 16777216);",
    "__ xorl(Address(r10, r11), 16777216);",
    "__ xorl(Address(r11, r12), 16777216);",
    "__ xorl(Address(r12, r13), 16777216);",
    "__ xorl(Address(r13, r14), 16777216);",
    "__ xorl(Address(r14, r15), 16777216);",
    "__ xorl(Address(r15, r16), 16777216);",
    "__ xorl(Address(r16, r17), 16777216);",
    "__ xorl(Address(r17, r18), 16777216);",
    "__ xorl(Address(r18, r19), 16777216);",
    "__ xorl(Address(r19, r20), 16777216);",
    "__ xorl(Address(r20, r21), 16777216);",
    "__ xorl(Address(r21, r22), 16777216);",
    "__ xorl(Address(r22, r23), 16777216);",
    "__ xorl(Address(r23, r24), 16777216);",
    "__ xorl(Address(r24, r25), 16777216);",
    "__ xorl(Address(r25, r26), 16777216);",
    "__ xorl(Address(r26, r27), 16777216);",
    "__ xorl(Address(r27, r28), 16777216);",
    "__ xorl(Address(r28, r29), 16777216);",
    "__ xorl(Address(r29, r30), 16777216);",
    "__ xorl(Address(r30, r31), 16777216);",
    "__ xorl(Address(r31, rcx), 16777216);",
    "__ xorl(Address(rcx, rdx), 268435456);",
    "__ xorl(Address(rdx, rbx), 268435456);",
    "__ xorl(Address(rbx, r8), 268435456);",
    "__ xorl(Address(r8, r9), 268435456);",
    "__ xorl(Address(r9, r10), 268435456);",
    "__ xorl(Address(r10, r11), 268435456);",
    "__ xorl(Address(r11, r12), 268435456);",
    "__ xorl(Address(r12, r13), 268435456);",
    "__ xorl(Address(r13, r14), 268435456);",
    "__ xorl(Address(r14, r15), 268435456);",
    "__ xorl(Address(r15, r16), 268435456);",
    "__ xorl(Address(r16, r17), 268435456);",
    "__ xorl(Address(r17, r18), 268435456);",
    "__ xorl(Address(r18, r19), 268435456);",
    "__ xorl(Address(r19, r20), 268435456);",
    "__ xorl(Address(r20, r21), 268435456);",
    "__ xorl(Address(r21, r22), 268435456);",
    "__ xorl(Address(r22, r23), 268435456);",
    "__ xorl(Address(r23, r24), 268435456);",
    "__ xorl(Address(r24, r25), 268435456);",
    "__ xorl(Address(r25, r26), 268435456);",
    "__ xorl(Address(r26, r27), 268435456);",
    "__ xorl(Address(r27, r28), 268435456);",
    "__ xorl(Address(r28, r29), 268435456);",
    "__ xorl(Address(r29, r30), 268435456);",
    "__ xorl(Address(r30, r31), 268435456);",
    "__ xorl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ orb(Address(rcx, rdx), 1);",
    "__ orb(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ orb(Address(rbx, r8), 1);",
    "__ orb(Address(r8, r9), 1);",
    "__ orb(Address(r9, r10), 1);",
    "__ orb(Address(r10, r11), 1);",
    "__ orb(Address(r11, r12), 1);",
    "__ orb(Address(r12, r13), 1);",
    "__ orb(Address(r13, r14), 1);",
    "__ orb(Address(r14, r15), 1);",
    "__ orb(Address(r15, r16), 1);",
    "__ orb(Address(r16, r17), 1);",
    "__ orb(Address(r17, r18), 1);",
    "__ orb(Address(r18, r19), 1);",
    "__ orb(Address(r19, r20), 1);",
    "__ orb(Address(r20, r21), 1);",
    "__ orb(Address(r21, r22), 1);",
    "__ orb(Address(r22, r23), 1);",
    "__ orb(Address(r23, r24), 1);",
    "__ orb(Address(r24, r25), 1);",
    "__ orb(Address(r25, r26), 1);",
    "__ orb(Address(r26, r27), 1);",
    "__ orb(Address(r27, r28), 1);",
    "__ orb(Address(r28, r29), 1);",
    "__ orb(Address(r29, r30), 1);",
    "__ orb(Address(r30, r31), 1);",
    "__ orb(Address(r31, rcx), 1);",
    "__ orb(Address(rcx, rdx), 4);",
    "__ orb(Address(rdx, rbx), 4);",
    "__ orb(Address(rbx, r8), 4);",
    "__ orb(Address(r8, r9), 4);",
    "__ orb(Address(r9, r10), 4);",
    "__ orb(Address(r10, r11), 4);",
    "__ orb(Address(r11, r12), 4);",
    "__ orb(Address(r12, r13), 4);",
    "__ orb(Address(r13, r14), 4);",
    "__ orb(Address(r14, r15), 4);",
    "__ orb(Address(r15, r16), 4);",
    "__ orb(Address(r16, r17), 4);",
    "__ orb(Address(r17, r18), 4);",
    "__ orb(Address(r18, r19), 4);",
    "__ orb(Address(r19, r20), 4);",
    "__ orb(Address(r20, r21), 4);",
    "__ orb(Address(r21, r22), 4);",
    "__ orb(Address(r22, r23), 4);",
    "__ orb(Address(r23, r24), 4);",
    "__ orb(Address(r24, r25), 4);",
    "__ orb(Address(r25, r26), 4);",
    "__ orb(Address(r26, r27), 4);",
    "__ orb(Address(r27, r28), 4);",
    "__ orb(Address(r28, r29), 4);",
    "__ orb(Address(r29, r30), 4);",
    "__ orb(Address(r30, r31), 4);",
    "__ orb(Address(r31, rcx), 4);",
    "__ orb(Address(rcx, rdx), 16);",
    "__ orb(Address(rdx, rbx), 16);",
    "__ orb(Address(rbx, r8), 16);",
    "__ orb(Address(r8, r9), 16);",
    "__ orb(Address(r9, r10), 16);",
    "__ orb(Address(r10, r11), 16);",
    "__ orb(Address(r11, r12), 16);",
    "__ orb(Address(r12, r13), 16);",
    "__ orb(Address(r13, r14), 16);",
    "__ orb(Address(r14, r15), 16);",
    "__ orb(Address(r15, r16), 16);",
    "__ orb(Address(r16, r17), 16);",
    "__ orb(Address(r17, r18), 16);",
    "__ orb(Address(r18, r19), 16);",
    "__ orb(Address(r19, r20), 16);",
    "__ orb(Address(r20, r21), 16);",
    "__ orb(Address(r21, r22), 16);",
    "__ orb(Address(r22, r23), 16);",
    "__ orb(Address(r23, r24), 16);",
    "__ orb(Address(r24, r25), 16);",
    "__ orb(Address(r25, r26), 16);",
    "__ orb(Address(r26, r27), 16);",
    "__ orb(Address(r27, r28), 16);",
    "__ orb(Address(r28, r29), 16);",
    "__ orb(Address(r29, r30), 16);",
    "__ orb(Address(r30, r31), 16);",
    "__ orb(Address(r31, rcx), 16);",
    "__ orb(Address(rcx, rdx), 64);",
    "__ orb(Address(rdx, rbx), 64);",
    "__ orb(Address(rbx, r8), 64);",
    "__ orb(Address(r8, r9), 64);",
    "__ orb(Address(r9, r10), 64);",
    "__ orb(Address(r10, r11), 64);",
    "__ orb(Address(r11, r12), 64);",
    "__ orb(Address(r12, r13), 64);",
    "__ orb(Address(r13, r14), 64);",
    "__ orb(Address(r14, r15), 64);",
    "__ orb(Address(r15, r16), 64);",
    "__ orb(Address(r16, r17), 64);",
    "__ orb(Address(r17, r18), 64);",
    "__ orb(Address(r18, r19), 64);",
    "__ orb(Address(r19, r20), 64);",
    "__ orb(Address(r20, r21), 64);",
    "__ orb(Address(r21, r22), 64);",
    "__ orb(Address(r22, r23), 64);",
    "__ orb(Address(r23, r24), 64);",
    "__ orb(Address(r24, r25), 64);",
    "__ orb(Address(r25, r26), 64);",
    "__ orb(Address(r26, r27), 64);",
    "__ orb(Address(r27, r28), 64);",
    "__ orb(Address(r28, r29), 64);",
    "__ orb(Address(r29, r30), 64);",
    "__ orb(Address(r30, r31), 64);",
    "__ orb(Address(r31, rcx), 64);",
#endif // _LP64
    "__ orl(Address(rcx, rdx), 1);",
    "__ orl(Address(rdx, rbx), 1);",
#ifdef _LP64
    "__ orl(Address(rbx, r8), 1);",
    "__ orl(Address(r8, r9), 1);",
    "__ orl(Address(r9, r10), 1);",
    "__ orl(Address(r10, r11), 1);",
    "__ orl(Address(r11, r12), 1);",
    "__ orl(Address(r12, r13), 1);",
    "__ orl(Address(r13, r14), 1);",
    "__ orl(Address(r14, r15), 1);",
    "__ orl(Address(r15, r16), 1);",
    "__ orl(Address(r16, r17), 1);",
    "__ orl(Address(r17, r18), 1);",
    "__ orl(Address(r18, r19), 1);",
    "__ orl(Address(r19, r20), 1);",
    "__ orl(Address(r20, r21), 1);",
    "__ orl(Address(r21, r22), 1);",
    "__ orl(Address(r22, r23), 1);",
    "__ orl(Address(r23, r24), 1);",
    "__ orl(Address(r24, r25), 1);",
    "__ orl(Address(r25, r26), 1);",
    "__ orl(Address(r26, r27), 1);",
    "__ orl(Address(r27, r28), 1);",
    "__ orl(Address(r28, r29), 1);",
    "__ orl(Address(r29, r30), 1);",
    "__ orl(Address(r30, r31), 1);",
    "__ orl(Address(r31, rcx), 1);",
    "__ orl(Address(rcx, rdx), 16);",
    "__ orl(Address(rdx, rbx), 16);",
    "__ orl(Address(rbx, r8), 16);",
    "__ orl(Address(r8, r9), 16);",
    "__ orl(Address(r9, r10), 16);",
    "__ orl(Address(r10, r11), 16);",
    "__ orl(Address(r11, r12), 16);",
    "__ orl(Address(r12, r13), 16);",
    "__ orl(Address(r13, r14), 16);",
    "__ orl(Address(r14, r15), 16);",
    "__ orl(Address(r15, r16), 16);",
    "__ orl(Address(r16, r17), 16);",
    "__ orl(Address(r17, r18), 16);",
    "__ orl(Address(r18, r19), 16);",
    "__ orl(Address(r19, r20), 16);",
    "__ orl(Address(r20, r21), 16);",
    "__ orl(Address(r21, r22), 16);",
    "__ orl(Address(r22, r23), 16);",
    "__ orl(Address(r23, r24), 16);",
    "__ orl(Address(r24, r25), 16);",
    "__ orl(Address(r25, r26), 16);",
    "__ orl(Address(r26, r27), 16);",
    "__ orl(Address(r27, r28), 16);",
    "__ orl(Address(r28, r29), 16);",
    "__ orl(Address(r29, r30), 16);",
    "__ orl(Address(r30, r31), 16);",
    "__ orl(Address(r31, rcx), 16);",
    "__ orl(Address(rcx, rdx), 256);",
    "__ orl(Address(rdx, rbx), 256);",
    "__ orl(Address(rbx, r8), 256);",
    "__ orl(Address(r8, r9), 256);",
    "__ orl(Address(r9, r10), 256);",
    "__ orl(Address(r10, r11), 256);",
    "__ orl(Address(r11, r12), 256);",
    "__ orl(Address(r12, r13), 256);",
    "__ orl(Address(r13, r14), 256);",
    "__ orl(Address(r14, r15), 256);",
    "__ orl(Address(r15, r16), 256);",
    "__ orl(Address(r16, r17), 256);",
    "__ orl(Address(r17, r18), 256);",
    "__ orl(Address(r18, r19), 256);",
    "__ orl(Address(r19, r20), 256);",
    "__ orl(Address(r20, r21), 256);",
    "__ orl(Address(r21, r22), 256);",
    "__ orl(Address(r22, r23), 256);",
    "__ orl(Address(r23, r24), 256);",
    "__ orl(Address(r24, r25), 256);",
    "__ orl(Address(r25, r26), 256);",
    "__ orl(Address(r26, r27), 256);",
    "__ orl(Address(r27, r28), 256);",
    "__ orl(Address(r28, r29), 256);",
    "__ orl(Address(r29, r30), 256);",
    "__ orl(Address(r30, r31), 256);",
    "__ orl(Address(r31, rcx), 256);",
    "__ orl(Address(rcx, rdx), 4096);",
    "__ orl(Address(rdx, rbx), 4096);",
    "__ orl(Address(rbx, r8), 4096);",
    "__ orl(Address(r8, r9), 4096);",
    "__ orl(Address(r9, r10), 4096);",
    "__ orl(Address(r10, r11), 4096);",
    "__ orl(Address(r11, r12), 4096);",
    "__ orl(Address(r12, r13), 4096);",
    "__ orl(Address(r13, r14), 4096);",
    "__ orl(Address(r14, r15), 4096);",
    "__ orl(Address(r15, r16), 4096);",
    "__ orl(Address(r16, r17), 4096);",
    "__ orl(Address(r17, r18), 4096);",
    "__ orl(Address(r18, r19), 4096);",
    "__ orl(Address(r19, r20), 4096);",
    "__ orl(Address(r20, r21), 4096);",
    "__ orl(Address(r21, r22), 4096);",
    "__ orl(Address(r22, r23), 4096);",
    "__ orl(Address(r23, r24), 4096);",
    "__ orl(Address(r24, r25), 4096);",
    "__ orl(Address(r25, r26), 4096);",
    "__ orl(Address(r26, r27), 4096);",
    "__ orl(Address(r27, r28), 4096);",
    "__ orl(Address(r28, r29), 4096);",
    "__ orl(Address(r29, r30), 4096);",
    "__ orl(Address(r30, r31), 4096);",
    "__ orl(Address(r31, rcx), 4096);",
    "__ orl(Address(rcx, rdx), 65536);",
    "__ orl(Address(rdx, rbx), 65536);",
    "__ orl(Address(rbx, r8), 65536);",
    "__ orl(Address(r8, r9), 65536);",
    "__ orl(Address(r9, r10), 65536);",
    "__ orl(Address(r10, r11), 65536);",
    "__ orl(Address(r11, r12), 65536);",
    "__ orl(Address(r12, r13), 65536);",
    "__ orl(Address(r13, r14), 65536);",
    "__ orl(Address(r14, r15), 65536);",
    "__ orl(Address(r15, r16), 65536);",
    "__ orl(Address(r16, r17), 65536);",
    "__ orl(Address(r17, r18), 65536);",
    "__ orl(Address(r18, r19), 65536);",
    "__ orl(Address(r19, r20), 65536);",
    "__ orl(Address(r20, r21), 65536);",
    "__ orl(Address(r21, r22), 65536);",
    "__ orl(Address(r22, r23), 65536);",
    "__ orl(Address(r23, r24), 65536);",
    "__ orl(Address(r24, r25), 65536);",
    "__ orl(Address(r25, r26), 65536);",
    "__ orl(Address(r26, r27), 65536);",
    "__ orl(Address(r27, r28), 65536);",
    "__ orl(Address(r28, r29), 65536);",
    "__ orl(Address(r29, r30), 65536);",
    "__ orl(Address(r30, r31), 65536);",
    "__ orl(Address(r31, rcx), 65536);",
    "__ orl(Address(rcx, rdx), 1048576);",
    "__ orl(Address(rdx, rbx), 1048576);",
    "__ orl(Address(rbx, r8), 1048576);",
    "__ orl(Address(r8, r9), 1048576);",
    "__ orl(Address(r9, r10), 1048576);",
    "__ orl(Address(r10, r11), 1048576);",
    "__ orl(Address(r11, r12), 1048576);",
    "__ orl(Address(r12, r13), 1048576);",
    "__ orl(Address(r13, r14), 1048576);",
    "__ orl(Address(r14, r15), 1048576);",
    "__ orl(Address(r15, r16), 1048576);",
    "__ orl(Address(r16, r17), 1048576);",
    "__ orl(Address(r17, r18), 1048576);",
    "__ orl(Address(r18, r19), 1048576);",
    "__ orl(Address(r19, r20), 1048576);",
    "__ orl(Address(r20, r21), 1048576);",
    "__ orl(Address(r21, r22), 1048576);",
    "__ orl(Address(r22, r23), 1048576);",
    "__ orl(Address(r23, r24), 1048576);",
    "__ orl(Address(r24, r25), 1048576);",
    "__ orl(Address(r25, r26), 1048576);",
    "__ orl(Address(r26, r27), 1048576);",
    "__ orl(Address(r27, r28), 1048576);",
    "__ orl(Address(r28, r29), 1048576);",
    "__ orl(Address(r29, r30), 1048576);",
    "__ orl(Address(r30, r31), 1048576);",
    "__ orl(Address(r31, rcx), 1048576);",
    "__ orl(Address(rcx, rdx), 16777216);",
    "__ orl(Address(rdx, rbx), 16777216);",
    "__ orl(Address(rbx, r8), 16777216);",
    "__ orl(Address(r8, r9), 16777216);",
    "__ orl(Address(r9, r10), 16777216);",
    "__ orl(Address(r10, r11), 16777216);",
    "__ orl(Address(r11, r12), 16777216);",
    "__ orl(Address(r12, r13), 16777216);",
    "__ orl(Address(r13, r14), 16777216);",
    "__ orl(Address(r14, r15), 16777216);",
    "__ orl(Address(r15, r16), 16777216);",
    "__ orl(Address(r16, r17), 16777216);",
    "__ orl(Address(r17, r18), 16777216);",
    "__ orl(Address(r18, r19), 16777216);",
    "__ orl(Address(r19, r20), 16777216);",
    "__ orl(Address(r20, r21), 16777216);",
    "__ orl(Address(r21, r22), 16777216);",
    "__ orl(Address(r22, r23), 16777216);",
    "__ orl(Address(r23, r24), 16777216);",
    "__ orl(Address(r24, r25), 16777216);",
    "__ orl(Address(r25, r26), 16777216);",
    "__ orl(Address(r26, r27), 16777216);",
    "__ orl(Address(r27, r28), 16777216);",
    "__ orl(Address(r28, r29), 16777216);",
    "__ orl(Address(r29, r30), 16777216);",
    "__ orl(Address(r30, r31), 16777216);",
    "__ orl(Address(r31, rcx), 16777216);",
    "__ orl(Address(rcx, rdx), 268435456);",
    "__ orl(Address(rdx, rbx), 268435456);",
    "__ orl(Address(rbx, r8), 268435456);",
    "__ orl(Address(r8, r9), 268435456);",
    "__ orl(Address(r9, r10), 268435456);",
    "__ orl(Address(r10, r11), 268435456);",
    "__ orl(Address(r11, r12), 268435456);",
    "__ orl(Address(r12, r13), 268435456);",
    "__ orl(Address(r13, r14), 268435456);",
    "__ orl(Address(r14, r15), 268435456);",
    "__ orl(Address(r15, r16), 268435456);",
    "__ orl(Address(r16, r17), 268435456);",
    "__ orl(Address(r17, r18), 268435456);",
    "__ orl(Address(r18, r19), 268435456);",
    "__ orl(Address(r19, r20), 268435456);",
    "__ orl(Address(r20, r21), 268435456);",
    "__ orl(Address(r21, r22), 268435456);",
    "__ orl(Address(r22, r23), 268435456);",
    "__ orl(Address(r23, r24), 268435456);",
    "__ orl(Address(r24, r25), 268435456);",
    "__ orl(Address(r25, r26), 268435456);",
    "__ orl(Address(r26, r27), 268435456);",
    "__ orl(Address(r27, r28), 268435456);",
    "__ orl(Address(r28, r29), 268435456);",
    "__ orl(Address(r29, r30), 268435456);",
    "__ orl(Address(r30, r31), 268435456);",
    "__ orl(Address(r31, rcx), 268435456);",
#endif // _LP64
    "__ addl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ addl(rdx, Address(rbx, r8));",
    "__ addl(rbx, Address(r8, r9));",
    "__ addl(r8, Address(r9, r10));",
    "__ addl(r9, Address(r10, r11));",
    "__ addl(r10, Address(r11, r12));",
    "__ addl(r11, Address(r12, r13));",
    "__ addl(r12, Address(r13, r14));",
    "__ addl(r13, Address(r14, r15));",
    "__ addl(r14, Address(r15, r16));",
    "__ addl(r15, Address(r16, r17));",
    "__ addl(r16, Address(r17, r18));",
    "__ addl(r17, Address(r18, r19));",
    "__ addl(r18, Address(r19, r20));",
    "__ addl(r19, Address(r20, r21));",
    "__ addl(r20, Address(r21, r22));",
    "__ addl(r21, Address(r22, r23));",
    "__ addl(r22, Address(r23, r24));",
    "__ addl(r23, Address(r24, r25));",
    "__ addl(r24, Address(r25, r26));",
    "__ addl(r25, Address(r26, r27));",
    "__ addl(r26, Address(r27, r28));",
    "__ addl(r27, Address(r28, r29));",
    "__ addl(r28, Address(r29, r30));",
    "__ addl(r29, Address(r30, r31));",
    "__ addl(r30, Address(r31, rcx));",
    "__ addl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ andl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ andl(rdx, Address(rbx, r8));",
    "__ andl(rbx, Address(r8, r9));",
    "__ andl(r8, Address(r9, r10));",
    "__ andl(r9, Address(r10, r11));",
    "__ andl(r10, Address(r11, r12));",
    "__ andl(r11, Address(r12, r13));",
    "__ andl(r12, Address(r13, r14));",
    "__ andl(r13, Address(r14, r15));",
    "__ andl(r14, Address(r15, r16));",
    "__ andl(r15, Address(r16, r17));",
    "__ andl(r16, Address(r17, r18));",
    "__ andl(r17, Address(r18, r19));",
    "__ andl(r18, Address(r19, r20));",
    "__ andl(r19, Address(r20, r21));",
    "__ andl(r20, Address(r21, r22));",
    "__ andl(r21, Address(r22, r23));",
    "__ andl(r22, Address(r23, r24));",
    "__ andl(r23, Address(r24, r25));",
    "__ andl(r24, Address(r25, r26));",
    "__ andl(r25, Address(r26, r27));",
    "__ andl(r26, Address(r27, r28));",
    "__ andl(r27, Address(r28, r29));",
    "__ andl(r28, Address(r29, r30));",
    "__ andl(r29, Address(r30, r31));",
    "__ andl(r30, Address(r31, rcx));",
    "__ andl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ lzcntl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ lzcntl(rdx, Address(rbx, r8));",
    "__ lzcntl(rbx, Address(r8, r9));",
    "__ lzcntl(r8, Address(r9, r10));",
    "__ lzcntl(r9, Address(r10, r11));",
    "__ lzcntl(r10, Address(r11, r12));",
    "__ lzcntl(r11, Address(r12, r13));",
    "__ lzcntl(r12, Address(r13, r14));",
    "__ lzcntl(r13, Address(r14, r15));",
    "__ lzcntl(r14, Address(r15, r16));",
    "__ lzcntl(r15, Address(r16, r17));",
    "__ lzcntl(r16, Address(r17, r18));",
    "__ lzcntl(r17, Address(r18, r19));",
    "__ lzcntl(r18, Address(r19, r20));",
    "__ lzcntl(r19, Address(r20, r21));",
    "__ lzcntl(r20, Address(r21, r22));",
    "__ lzcntl(r21, Address(r22, r23));",
    "__ lzcntl(r22, Address(r23, r24));",
    "__ lzcntl(r23, Address(r24, r25));",
    "__ lzcntl(r24, Address(r25, r26));",
    "__ lzcntl(r25, Address(r26, r27));",
    "__ lzcntl(r26, Address(r27, r28));",
    "__ lzcntl(r27, Address(r28, r29));",
    "__ lzcntl(r28, Address(r29, r30));",
    "__ lzcntl(r29, Address(r30, r31));",
    "__ lzcntl(r30, Address(r31, rcx));",
    "__ lzcntl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ orl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ orl(rdx, Address(rbx, r8));",
    "__ orl(rbx, Address(r8, r9));",
    "__ orl(r8, Address(r9, r10));",
    "__ orl(r9, Address(r10, r11));",
    "__ orl(r10, Address(r11, r12));",
    "__ orl(r11, Address(r12, r13));",
    "__ orl(r12, Address(r13, r14));",
    "__ orl(r13, Address(r14, r15));",
    "__ orl(r14, Address(r15, r16));",
    "__ orl(r15, Address(r16, r17));",
    "__ orl(r16, Address(r17, r18));",
    "__ orl(r17, Address(r18, r19));",
    "__ orl(r18, Address(r19, r20));",
    "__ orl(r19, Address(r20, r21));",
    "__ orl(r20, Address(r21, r22));",
    "__ orl(r21, Address(r22, r23));",
    "__ orl(r22, Address(r23, r24));",
    "__ orl(r23, Address(r24, r25));",
    "__ orl(r24, Address(r25, r26));",
    "__ orl(r25, Address(r26, r27));",
    "__ orl(r26, Address(r27, r28));",
    "__ orl(r27, Address(r28, r29));",
    "__ orl(r28, Address(r29, r30));",
    "__ orl(r29, Address(r30, r31));",
    "__ orl(r30, Address(r31, rcx));",
    "__ orl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ adcl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ adcl(rdx, Address(rbx, r8));",
    "__ adcl(rbx, Address(r8, r9));",
    "__ adcl(r8, Address(r9, r10));",
    "__ adcl(r9, Address(r10, r11));",
    "__ adcl(r10, Address(r11, r12));",
    "__ adcl(r11, Address(r12, r13));",
    "__ adcl(r12, Address(r13, r14));",
    "__ adcl(r13, Address(r14, r15));",
    "__ adcl(r14, Address(r15, r16));",
    "__ adcl(r15, Address(r16, r17));",
    "__ adcl(r16, Address(r17, r18));",
    "__ adcl(r17, Address(r18, r19));",
    "__ adcl(r18, Address(r19, r20));",
    "__ adcl(r19, Address(r20, r21));",
    "__ adcl(r20, Address(r21, r22));",
    "__ adcl(r21, Address(r22, r23));",
    "__ adcl(r22, Address(r23, r24));",
    "__ adcl(r23, Address(r24, r25));",
    "__ adcl(r24, Address(r25, r26));",
    "__ adcl(r25, Address(r26, r27));",
    "__ adcl(r26, Address(r27, r28));",
    "__ adcl(r27, Address(r28, r29));",
    "__ adcl(r28, Address(r29, r30));",
    "__ adcl(r29, Address(r30, r31));",
    "__ adcl(r30, Address(r31, rcx));",
    "__ adcl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ imull(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ imull(rdx, Address(rbx, r8));",
    "__ imull(rbx, Address(r8, r9));",
    "__ imull(r8, Address(r9, r10));",
    "__ imull(r9, Address(r10, r11));",
    "__ imull(r10, Address(r11, r12));",
    "__ imull(r11, Address(r12, r13));",
    "__ imull(r12, Address(r13, r14));",
    "__ imull(r13, Address(r14, r15));",
    "__ imull(r14, Address(r15, r16));",
    "__ imull(r15, Address(r16, r17));",
    "__ imull(r16, Address(r17, r18));",
    "__ imull(r17, Address(r18, r19));",
    "__ imull(r18, Address(r19, r20));",
    "__ imull(r19, Address(r20, r21));",
    "__ imull(r20, Address(r21, r22));",
    "__ imull(r21, Address(r22, r23));",
    "__ imull(r22, Address(r23, r24));",
    "__ imull(r23, Address(r24, r25));",
    "__ imull(r24, Address(r25, r26));",
    "__ imull(r25, Address(r26, r27));",
    "__ imull(r26, Address(r27, r28));",
    "__ imull(r27, Address(r28, r29));",
    "__ imull(r28, Address(r29, r30));",
    "__ imull(r29, Address(r30, r31));",
    "__ imull(r30, Address(r31, rcx));",
    "__ imull(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ popcntl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ popcntl(rdx, Address(rbx, r8));",
    "__ popcntl(rbx, Address(r8, r9));",
    "__ popcntl(r8, Address(r9, r10));",
    "__ popcntl(r9, Address(r10, r11));",
    "__ popcntl(r10, Address(r11, r12));",
    "__ popcntl(r11, Address(r12, r13));",
    "__ popcntl(r12, Address(r13, r14));",
    "__ popcntl(r13, Address(r14, r15));",
    "__ popcntl(r14, Address(r15, r16));",
    "__ popcntl(r15, Address(r16, r17));",
    "__ popcntl(r16, Address(r17, r18));",
    "__ popcntl(r17, Address(r18, r19));",
    "__ popcntl(r18, Address(r19, r20));",
    "__ popcntl(r19, Address(r20, r21));",
    "__ popcntl(r20, Address(r21, r22));",
    "__ popcntl(r21, Address(r22, r23));",
    "__ popcntl(r22, Address(r23, r24));",
    "__ popcntl(r23, Address(r24, r25));",
    "__ popcntl(r24, Address(r25, r26));",
    "__ popcntl(r25, Address(r26, r27));",
    "__ popcntl(r26, Address(r27, r28));",
    "__ popcntl(r27, Address(r28, r29));",
    "__ popcntl(r28, Address(r29, r30));",
    "__ popcntl(r29, Address(r30, r31));",
    "__ popcntl(r30, Address(r31, rcx));",
    "__ popcntl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ sbbl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ sbbl(rdx, Address(rbx, r8));",
    "__ sbbl(rbx, Address(r8, r9));",
    "__ sbbl(r8, Address(r9, r10));",
    "__ sbbl(r9, Address(r10, r11));",
    "__ sbbl(r10, Address(r11, r12));",
    "__ sbbl(r11, Address(r12, r13));",
    "__ sbbl(r12, Address(r13, r14));",
    "__ sbbl(r13, Address(r14, r15));",
    "__ sbbl(r14, Address(r15, r16));",
    "__ sbbl(r15, Address(r16, r17));",
    "__ sbbl(r16, Address(r17, r18));",
    "__ sbbl(r17, Address(r18, r19));",
    "__ sbbl(r18, Address(r19, r20));",
    "__ sbbl(r19, Address(r20, r21));",
    "__ sbbl(r20, Address(r21, r22));",
    "__ sbbl(r21, Address(r22, r23));",
    "__ sbbl(r22, Address(r23, r24));",
    "__ sbbl(r23, Address(r24, r25));",
    "__ sbbl(r24, Address(r25, r26));",
    "__ sbbl(r25, Address(r26, r27));",
    "__ sbbl(r26, Address(r27, r28));",
    "__ sbbl(r27, Address(r28, r29));",
    "__ sbbl(r28, Address(r29, r30));",
    "__ sbbl(r29, Address(r30, r31));",
    "__ sbbl(r30, Address(r31, rcx));",
    "__ sbbl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ subl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ subl(rdx, Address(rbx, r8));",
    "__ subl(rbx, Address(r8, r9));",
    "__ subl(r8, Address(r9, r10));",
    "__ subl(r9, Address(r10, r11));",
    "__ subl(r10, Address(r11, r12));",
    "__ subl(r11, Address(r12, r13));",
    "__ subl(r12, Address(r13, r14));",
    "__ subl(r13, Address(r14, r15));",
    "__ subl(r14, Address(r15, r16));",
    "__ subl(r15, Address(r16, r17));",
    "__ subl(r16, Address(r17, r18));",
    "__ subl(r17, Address(r18, r19));",
    "__ subl(r18, Address(r19, r20));",
    "__ subl(r19, Address(r20, r21));",
    "__ subl(r20, Address(r21, r22));",
    "__ subl(r21, Address(r22, r23));",
    "__ subl(r22, Address(r23, r24));",
    "__ subl(r23, Address(r24, r25));",
    "__ subl(r24, Address(r25, r26));",
    "__ subl(r25, Address(r26, r27));",
    "__ subl(r26, Address(r27, r28));",
    "__ subl(r27, Address(r28, r29));",
    "__ subl(r28, Address(r29, r30));",
    "__ subl(r29, Address(r30, r31));",
    "__ subl(r30, Address(r31, rcx));",
    "__ subl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ tzcntl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ tzcntl(rdx, Address(rbx, r8));",
    "__ tzcntl(rbx, Address(r8, r9));",
    "__ tzcntl(r8, Address(r9, r10));",
    "__ tzcntl(r9, Address(r10, r11));",
    "__ tzcntl(r10, Address(r11, r12));",
    "__ tzcntl(r11, Address(r12, r13));",
    "__ tzcntl(r12, Address(r13, r14));",
    "__ tzcntl(r13, Address(r14, r15));",
    "__ tzcntl(r14, Address(r15, r16));",
    "__ tzcntl(r15, Address(r16, r17));",
    "__ tzcntl(r16, Address(r17, r18));",
    "__ tzcntl(r17, Address(r18, r19));",
    "__ tzcntl(r18, Address(r19, r20));",
    "__ tzcntl(r19, Address(r20, r21));",
    "__ tzcntl(r20, Address(r21, r22));",
    "__ tzcntl(r21, Address(r22, r23));",
    "__ tzcntl(r22, Address(r23, r24));",
    "__ tzcntl(r23, Address(r24, r25));",
    "__ tzcntl(r24, Address(r25, r26));",
    "__ tzcntl(r25, Address(r26, r27));",
    "__ tzcntl(r26, Address(r27, r28));",
    "__ tzcntl(r27, Address(r28, r29));",
    "__ tzcntl(r28, Address(r29, r30));",
    "__ tzcntl(r29, Address(r30, r31));",
    "__ tzcntl(r30, Address(r31, rcx));",
    "__ tzcntl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ xorb(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ xorb(rdx, Address(rbx, r8));",
    "__ xorb(rbx, Address(r8, r9));",
    "__ xorb(r8, Address(r9, r10));",
    "__ xorb(r9, Address(r10, r11));",
    "__ xorb(r10, Address(r11, r12));",
    "__ xorb(r11, Address(r12, r13));",
    "__ xorb(r12, Address(r13, r14));",
    "__ xorb(r13, Address(r14, r15));",
    "__ xorb(r14, Address(r15, r16));",
    "__ xorb(r15, Address(r16, r17));",
    "__ xorb(r16, Address(r17, r18));",
    "__ xorb(r17, Address(r18, r19));",
    "__ xorb(r18, Address(r19, r20));",
    "__ xorb(r19, Address(r20, r21));",
    "__ xorb(r20, Address(r21, r22));",
    "__ xorb(r21, Address(r22, r23));",
    "__ xorb(r22, Address(r23, r24));",
    "__ xorb(r23, Address(r24, r25));",
    "__ xorb(r24, Address(r25, r26));",
    "__ xorb(r25, Address(r26, r27));",
    "__ xorb(r26, Address(r27, r28));",
    "__ xorb(r27, Address(r28, r29));",
    "__ xorb(r28, Address(r29, r30));",
    "__ xorb(r29, Address(r30, r31));",
    "__ xorb(r30, Address(r31, rcx));",
    "__ xorb(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ xorw(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ xorw(rdx, Address(rbx, r8));",
    "__ xorw(rbx, Address(r8, r9));",
    "__ xorw(r8, Address(r9, r10));",
    "__ xorw(r9, Address(r10, r11));",
    "__ xorw(r10, Address(r11, r12));",
    "__ xorw(r11, Address(r12, r13));",
    "__ xorw(r12, Address(r13, r14));",
    "__ xorw(r13, Address(r14, r15));",
    "__ xorw(r14, Address(r15, r16));",
    "__ xorw(r15, Address(r16, r17));",
    "__ xorw(r16, Address(r17, r18));",
    "__ xorw(r17, Address(r18, r19));",
    "__ xorw(r18, Address(r19, r20));",
    "__ xorw(r19, Address(r20, r21));",
    "__ xorw(r20, Address(r21, r22));",
    "__ xorw(r21, Address(r22, r23));",
    "__ xorw(r22, Address(r23, r24));",
    "__ xorw(r23, Address(r24, r25));",
    "__ xorw(r24, Address(r25, r26));",
    "__ xorw(r25, Address(r26, r27));",
    "__ xorw(r26, Address(r27, r28));",
    "__ xorw(r27, Address(r28, r29));",
    "__ xorw(r28, Address(r29, r30));",
    "__ xorw(r29, Address(r30, r31));",
    "__ xorw(r30, Address(r31, rcx));",
    "__ xorw(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ xorl(rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ xorl(rdx, Address(rbx, r8));",
    "__ xorl(rbx, Address(r8, r9));",
    "__ xorl(r8, Address(r9, r10));",
    "__ xorl(r9, Address(r10, r11));",
    "__ xorl(r10, Address(r11, r12));",
    "__ xorl(r11, Address(r12, r13));",
    "__ xorl(r12, Address(r13, r14));",
    "__ xorl(r13, Address(r14, r15));",
    "__ xorl(r14, Address(r15, r16));",
    "__ xorl(r15, Address(r16, r17));",
    "__ xorl(r16, Address(r17, r18));",
    "__ xorl(r17, Address(r18, r19));",
    "__ xorl(r18, Address(r19, r20));",
    "__ xorl(r19, Address(r20, r21));",
    "__ xorl(r20, Address(r21, r22));",
    "__ xorl(r21, Address(r22, r23));",
    "__ xorl(r22, Address(r23, r24));",
    "__ xorl(r23, Address(r24, r25));",
    "__ xorl(r24, Address(r25, r26));",
    "__ xorl(r25, Address(r26, r27));",
    "__ xorl(r26, Address(r27, r28));",
    "__ xorl(r27, Address(r28, r29));",
    "__ xorl(r28, Address(r29, r30));",
    "__ xorl(r29, Address(r30, r31));",
    "__ xorl(r30, Address(r31, rcx));",
    "__ xorl(r31, Address(rcx, rdx));",
#endif // _LP64
    "__ addb(rcx, 1);",
    "__ addb(rcx, 4);",
    "__ addb(rcx, 16);",
    "__ addb(rcx, 64);",
    "__ addb(rdx, 1);",
    "__ addb(rdx, 4);",
    "__ addb(rdx, 16);",
    "__ addb(rdx, 64);",
    "__ addb(rbx, 1);",
    "__ addb(rbx, 4);",
    "__ addb(rbx, 16);",
    "__ addb(rbx, 64);",
#ifdef _LP64
    "__ addb(r8, 1);",
    "__ addb(r8, 4);",
    "__ addb(r8, 16);",
    "__ addb(r8, 64);",
    "__ addb(r9, 1);",
    "__ addb(r9, 4);",
    "__ addb(r9, 16);",
    "__ addb(r9, 64);",
    "__ addb(r10, 1);",
    "__ addb(r10, 4);",
    "__ addb(r10, 16);",
    "__ addb(r10, 64);",
    "__ addb(r11, 1);",
    "__ addb(r11, 4);",
    "__ addb(r11, 16);",
    "__ addb(r11, 64);",
    "__ addb(r12, 1);",
    "__ addb(r12, 4);",
    "__ addb(r12, 16);",
    "__ addb(r12, 64);",
    "__ addb(r13, 1);",
    "__ addb(r13, 4);",
    "__ addb(r13, 16);",
    "__ addb(r13, 64);",
    "__ addb(r14, 1);",
    "__ addb(r14, 4);",
    "__ addb(r14, 16);",
    "__ addb(r14, 64);",
    "__ addb(r15, 1);",
    "__ addb(r15, 4);",
    "__ addb(r15, 16);",
    "__ addb(r15, 64);",
    "__ addb(r16, 1);",
    "__ addb(r16, 4);",
    "__ addb(r16, 16);",
    "__ addb(r16, 64);",
    "__ addb(r17, 1);",
    "__ addb(r17, 4);",
    "__ addb(r17, 16);",
    "__ addb(r17, 64);",
    "__ addb(r18, 1);",
    "__ addb(r18, 4);",
    "__ addb(r18, 16);",
    "__ addb(r18, 64);",
    "__ addb(r19, 1);",
    "__ addb(r19, 4);",
    "__ addb(r19, 16);",
    "__ addb(r19, 64);",
    "__ addb(r20, 1);",
    "__ addb(r20, 4);",
    "__ addb(r20, 16);",
    "__ addb(r20, 64);",
    "__ addb(r21, 1);",
    "__ addb(r21, 4);",
    "__ addb(r21, 16);",
    "__ addb(r21, 64);",
    "__ addb(r22, 1);",
    "__ addb(r22, 4);",
    "__ addb(r22, 16);",
    "__ addb(r22, 64);",
    "__ addb(r23, 1);",
    "__ addb(r23, 4);",
    "__ addb(r23, 16);",
    "__ addb(r23, 64);",
    "__ addb(r24, 1);",
    "__ addb(r24, 4);",
    "__ addb(r24, 16);",
    "__ addb(r24, 64);",
    "__ addb(r25, 1);",
    "__ addb(r25, 4);",
    "__ addb(r25, 16);",
    "__ addb(r25, 64);",
    "__ addb(r26, 1);",
    "__ addb(r26, 4);",
    "__ addb(r26, 16);",
    "__ addb(r26, 64);",
    "__ addb(r27, 1);",
    "__ addb(r27, 4);",
    "__ addb(r27, 16);",
    "__ addb(r27, 64);",
    "__ addb(r28, 1);",
    "__ addb(r28, 4);",
    "__ addb(r28, 16);",
    "__ addb(r28, 64);",
    "__ addb(r29, 1);",
    "__ addb(r29, 4);",
    "__ addb(r29, 16);",
    "__ addb(r29, 64);",
    "__ addb(r30, 1);",
    "__ addb(r30, 4);",
    "__ addb(r30, 16);",
    "__ addb(r30, 64);",
    "__ addb(r31, 1);",
    "__ addb(r31, 4);",
    "__ addb(r31, 16);",
    "__ addb(r31, 64);",
#endif // _LP64
    "__ addl(rcx, 1);",
    "__ addl(rcx, 16);",
    "__ addl(rcx, 256);",
    "__ addl(rcx, 4096);",
    "__ addl(rcx, 65536);",
    "__ addl(rcx, 1048576);",
    "__ addl(rcx, 16777216);",
    "__ addl(rcx, 268435456);",
    "__ addl(rdx, 1);",
    "__ addl(rdx, 16);",
    "__ addl(rdx, 256);",
    "__ addl(rdx, 4096);",
    "__ addl(rdx, 65536);",
    "__ addl(rdx, 1048576);",
    "__ addl(rdx, 16777216);",
    "__ addl(rdx, 268435456);",
    "__ addl(rbx, 1);",
    "__ addl(rbx, 16);",
    "__ addl(rbx, 256);",
    "__ addl(rbx, 4096);",
    "__ addl(rbx, 65536);",
    "__ addl(rbx, 1048576);",
    "__ addl(rbx, 16777216);",
    "__ addl(rbx, 268435456);",
#ifdef _LP64
    "__ addl(r8, 1);",
    "__ addl(r8, 16);",
    "__ addl(r8, 256);",
    "__ addl(r8, 4096);",
    "__ addl(r8, 65536);",
    "__ addl(r8, 1048576);",
    "__ addl(r8, 16777216);",
    "__ addl(r8, 268435456);",
    "__ addl(r9, 1);",
    "__ addl(r9, 16);",
    "__ addl(r9, 256);",
    "__ addl(r9, 4096);",
    "__ addl(r9, 65536);",
    "__ addl(r9, 1048576);",
    "__ addl(r9, 16777216);",
    "__ addl(r9, 268435456);",
    "__ addl(r10, 1);",
    "__ addl(r10, 16);",
    "__ addl(r10, 256);",
    "__ addl(r10, 4096);",
    "__ addl(r10, 65536);",
    "__ addl(r10, 1048576);",
    "__ addl(r10, 16777216);",
    "__ addl(r10, 268435456);",
    "__ addl(r11, 1);",
    "__ addl(r11, 16);",
    "__ addl(r11, 256);",
    "__ addl(r11, 4096);",
    "__ addl(r11, 65536);",
    "__ addl(r11, 1048576);",
    "__ addl(r11, 16777216);",
    "__ addl(r11, 268435456);",
    "__ addl(r12, 1);",
    "__ addl(r12, 16);",
    "__ addl(r12, 256);",
    "__ addl(r12, 4096);",
    "__ addl(r12, 65536);",
    "__ addl(r12, 1048576);",
    "__ addl(r12, 16777216);",
    "__ addl(r12, 268435456);",
    "__ addl(r13, 1);",
    "__ addl(r13, 16);",
    "__ addl(r13, 256);",
    "__ addl(r13, 4096);",
    "__ addl(r13, 65536);",
    "__ addl(r13, 1048576);",
    "__ addl(r13, 16777216);",
    "__ addl(r13, 268435456);",
    "__ addl(r14, 1);",
    "__ addl(r14, 16);",
    "__ addl(r14, 256);",
    "__ addl(r14, 4096);",
    "__ addl(r14, 65536);",
    "__ addl(r14, 1048576);",
    "__ addl(r14, 16777216);",
    "__ addl(r14, 268435456);",
    "__ addl(r15, 1);",
    "__ addl(r15, 16);",
    "__ addl(r15, 256);",
    "__ addl(r15, 4096);",
    "__ addl(r15, 65536);",
    "__ addl(r15, 1048576);",
    "__ addl(r15, 16777216);",
    "__ addl(r15, 268435456);",
    "__ addl(r16, 1);",
    "__ addl(r16, 16);",
    "__ addl(r16, 256);",
    "__ addl(r16, 4096);",
    "__ addl(r16, 65536);",
    "__ addl(r16, 1048576);",
    "__ addl(r16, 16777216);",
    "__ addl(r16, 268435456);",
    "__ addl(r17, 1);",
    "__ addl(r17, 16);",
    "__ addl(r17, 256);",
    "__ addl(r17, 4096);",
    "__ addl(r17, 65536);",
    "__ addl(r17, 1048576);",
    "__ addl(r17, 16777216);",
    "__ addl(r17, 268435456);",
    "__ addl(r18, 1);",
    "__ addl(r18, 16);",
    "__ addl(r18, 256);",
    "__ addl(r18, 4096);",
    "__ addl(r18, 65536);",
    "__ addl(r18, 1048576);",
    "__ addl(r18, 16777216);",
    "__ addl(r18, 268435456);",
    "__ addl(r19, 1);",
    "__ addl(r19, 16);",
    "__ addl(r19, 256);",
    "__ addl(r19, 4096);",
    "__ addl(r19, 65536);",
    "__ addl(r19, 1048576);",
    "__ addl(r19, 16777216);",
    "__ addl(r19, 268435456);",
    "__ addl(r20, 1);",
    "__ addl(r20, 16);",
    "__ addl(r20, 256);",
    "__ addl(r20, 4096);",
    "__ addl(r20, 65536);",
    "__ addl(r20, 1048576);",
    "__ addl(r20, 16777216);",
    "__ addl(r20, 268435456);",
    "__ addl(r21, 1);",
    "__ addl(r21, 16);",
    "__ addl(r21, 256);",
    "__ addl(r21, 4096);",
    "__ addl(r21, 65536);",
    "__ addl(r21, 1048576);",
    "__ addl(r21, 16777216);",
    "__ addl(r21, 268435456);",
    "__ addl(r22, 1);",
    "__ addl(r22, 16);",
    "__ addl(r22, 256);",
    "__ addl(r22, 4096);",
    "__ addl(r22, 65536);",
    "__ addl(r22, 1048576);",
    "__ addl(r22, 16777216);",
    "__ addl(r22, 268435456);",
    "__ addl(r23, 1);",
    "__ addl(r23, 16);",
    "__ addl(r23, 256);",
    "__ addl(r23, 4096);",
    "__ addl(r23, 65536);",
    "__ addl(r23, 1048576);",
    "__ addl(r23, 16777216);",
    "__ addl(r23, 268435456);",
    "__ addl(r24, 1);",
    "__ addl(r24, 16);",
    "__ addl(r24, 256);",
    "__ addl(r24, 4096);",
    "__ addl(r24, 65536);",
    "__ addl(r24, 1048576);",
    "__ addl(r24, 16777216);",
    "__ addl(r24, 268435456);",
    "__ addl(r25, 1);",
    "__ addl(r25, 16);",
    "__ addl(r25, 256);",
    "__ addl(r25, 4096);",
    "__ addl(r25, 65536);",
    "__ addl(r25, 1048576);",
    "__ addl(r25, 16777216);",
    "__ addl(r25, 268435456);",
    "__ addl(r26, 1);",
    "__ addl(r26, 16);",
    "__ addl(r26, 256);",
    "__ addl(r26, 4096);",
    "__ addl(r26, 65536);",
    "__ addl(r26, 1048576);",
    "__ addl(r26, 16777216);",
    "__ addl(r26, 268435456);",
    "__ addl(r27, 1);",
    "__ addl(r27, 16);",
    "__ addl(r27, 256);",
    "__ addl(r27, 4096);",
    "__ addl(r27, 65536);",
    "__ addl(r27, 1048576);",
    "__ addl(r27, 16777216);",
    "__ addl(r27, 268435456);",
    "__ addl(r28, 1);",
    "__ addl(r28, 16);",
    "__ addl(r28, 256);",
    "__ addl(r28, 4096);",
    "__ addl(r28, 65536);",
    "__ addl(r28, 1048576);",
    "__ addl(r28, 16777216);",
    "__ addl(r28, 268435456);",
    "__ addl(r29, 1);",
    "__ addl(r29, 16);",
    "__ addl(r29, 256);",
    "__ addl(r29, 4096);",
    "__ addl(r29, 65536);",
    "__ addl(r29, 1048576);",
    "__ addl(r29, 16777216);",
    "__ addl(r29, 268435456);",
    "__ addl(r30, 1);",
    "__ addl(r30, 16);",
    "__ addl(r30, 256);",
    "__ addl(r30, 4096);",
    "__ addl(r30, 65536);",
    "__ addl(r30, 1048576);",
    "__ addl(r30, 16777216);",
    "__ addl(r30, 268435456);",
    "__ addl(r31, 1);",
    "__ addl(r31, 16);",
    "__ addl(r31, 256);",
    "__ addl(r31, 4096);",
    "__ addl(r31, 65536);",
    "__ addl(r31, 1048576);",
    "__ addl(r31, 16777216);",
    "__ addl(r31, 268435456);",
#endif // _LP64
    "__ andl(rcx, 1);",
    "__ andl(rcx, 16);",
    "__ andl(rcx, 256);",
    "__ andl(rcx, 4096);",
    "__ andl(rcx, 65536);",
    "__ andl(rcx, 1048576);",
    "__ andl(rcx, 16777216);",
    "__ andl(rcx, 268435456);",
    "__ andl(rdx, 1);",
    "__ andl(rdx, 16);",
    "__ andl(rdx, 256);",
    "__ andl(rdx, 4096);",
    "__ andl(rdx, 65536);",
    "__ andl(rdx, 1048576);",
    "__ andl(rdx, 16777216);",
    "__ andl(rdx, 268435456);",
    "__ andl(rbx, 1);",
    "__ andl(rbx, 16);",
    "__ andl(rbx, 256);",
    "__ andl(rbx, 4096);",
    "__ andl(rbx, 65536);",
    "__ andl(rbx, 1048576);",
    "__ andl(rbx, 16777216);",
    "__ andl(rbx, 268435456);",
#ifdef _LP64
    "__ andl(r8, 1);",
    "__ andl(r8, 16);",
    "__ andl(r8, 256);",
    "__ andl(r8, 4096);",
    "__ andl(r8, 65536);",
    "__ andl(r8, 1048576);",
    "__ andl(r8, 16777216);",
    "__ andl(r8, 268435456);",
    "__ andl(r9, 1);",
    "__ andl(r9, 16);",
    "__ andl(r9, 256);",
    "__ andl(r9, 4096);",
    "__ andl(r9, 65536);",
    "__ andl(r9, 1048576);",
    "__ andl(r9, 16777216);",
    "__ andl(r9, 268435456);",
    "__ andl(r10, 1);",
    "__ andl(r10, 16);",
    "__ andl(r10, 256);",
    "__ andl(r10, 4096);",
    "__ andl(r10, 65536);",
    "__ andl(r10, 1048576);",
    "__ andl(r10, 16777216);",
    "__ andl(r10, 268435456);",
    "__ andl(r11, 1);",
    "__ andl(r11, 16);",
    "__ andl(r11, 256);",
    "__ andl(r11, 4096);",
    "__ andl(r11, 65536);",
    "__ andl(r11, 1048576);",
    "__ andl(r11, 16777216);",
    "__ andl(r11, 268435456);",
    "__ andl(r12, 1);",
    "__ andl(r12, 16);",
    "__ andl(r12, 256);",
    "__ andl(r12, 4096);",
    "__ andl(r12, 65536);",
    "__ andl(r12, 1048576);",
    "__ andl(r12, 16777216);",
    "__ andl(r12, 268435456);",
    "__ andl(r13, 1);",
    "__ andl(r13, 16);",
    "__ andl(r13, 256);",
    "__ andl(r13, 4096);",
    "__ andl(r13, 65536);",
    "__ andl(r13, 1048576);",
    "__ andl(r13, 16777216);",
    "__ andl(r13, 268435456);",
    "__ andl(r14, 1);",
    "__ andl(r14, 16);",
    "__ andl(r14, 256);",
    "__ andl(r14, 4096);",
    "__ andl(r14, 65536);",
    "__ andl(r14, 1048576);",
    "__ andl(r14, 16777216);",
    "__ andl(r14, 268435456);",
    "__ andl(r15, 1);",
    "__ andl(r15, 16);",
    "__ andl(r15, 256);",
    "__ andl(r15, 4096);",
    "__ andl(r15, 65536);",
    "__ andl(r15, 1048576);",
    "__ andl(r15, 16777216);",
    "__ andl(r15, 268435456);",
    "__ andl(r16, 1);",
    "__ andl(r16, 16);",
    "__ andl(r16, 256);",
    "__ andl(r16, 4096);",
    "__ andl(r16, 65536);",
    "__ andl(r16, 1048576);",
    "__ andl(r16, 16777216);",
    "__ andl(r16, 268435456);",
    "__ andl(r17, 1);",
    "__ andl(r17, 16);",
    "__ andl(r17, 256);",
    "__ andl(r17, 4096);",
    "__ andl(r17, 65536);",
    "__ andl(r17, 1048576);",
    "__ andl(r17, 16777216);",
    "__ andl(r17, 268435456);",
    "__ andl(r18, 1);",
    "__ andl(r18, 16);",
    "__ andl(r18, 256);",
    "__ andl(r18, 4096);",
    "__ andl(r18, 65536);",
    "__ andl(r18, 1048576);",
    "__ andl(r18, 16777216);",
    "__ andl(r18, 268435456);",
    "__ andl(r19, 1);",
    "__ andl(r19, 16);",
    "__ andl(r19, 256);",
    "__ andl(r19, 4096);",
    "__ andl(r19, 65536);",
    "__ andl(r19, 1048576);",
    "__ andl(r19, 16777216);",
    "__ andl(r19, 268435456);",
    "__ andl(r20, 1);",
    "__ andl(r20, 16);",
    "__ andl(r20, 256);",
    "__ andl(r20, 4096);",
    "__ andl(r20, 65536);",
    "__ andl(r20, 1048576);",
    "__ andl(r20, 16777216);",
    "__ andl(r20, 268435456);",
    "__ andl(r21, 1);",
    "__ andl(r21, 16);",
    "__ andl(r21, 256);",
    "__ andl(r21, 4096);",
    "__ andl(r21, 65536);",
    "__ andl(r21, 1048576);",
    "__ andl(r21, 16777216);",
    "__ andl(r21, 268435456);",
    "__ andl(r22, 1);",
    "__ andl(r22, 16);",
    "__ andl(r22, 256);",
    "__ andl(r22, 4096);",
    "__ andl(r22, 65536);",
    "__ andl(r22, 1048576);",
    "__ andl(r22, 16777216);",
    "__ andl(r22, 268435456);",
    "__ andl(r23, 1);",
    "__ andl(r23, 16);",
    "__ andl(r23, 256);",
    "__ andl(r23, 4096);",
    "__ andl(r23, 65536);",
    "__ andl(r23, 1048576);",
    "__ andl(r23, 16777216);",
    "__ andl(r23, 268435456);",
    "__ andl(r24, 1);",
    "__ andl(r24, 16);",
    "__ andl(r24, 256);",
    "__ andl(r24, 4096);",
    "__ andl(r24, 65536);",
    "__ andl(r24, 1048576);",
    "__ andl(r24, 16777216);",
    "__ andl(r24, 268435456);",
    "__ andl(r25, 1);",
    "__ andl(r25, 16);",
    "__ andl(r25, 256);",
    "__ andl(r25, 4096);",
    "__ andl(r25, 65536);",
    "__ andl(r25, 1048576);",
    "__ andl(r25, 16777216);",
    "__ andl(r25, 268435456);",
    "__ andl(r26, 1);",
    "__ andl(r26, 16);",
    "__ andl(r26, 256);",
    "__ andl(r26, 4096);",
    "__ andl(r26, 65536);",
    "__ andl(r26, 1048576);",
    "__ andl(r26, 16777216);",
    "__ andl(r26, 268435456);",
    "__ andl(r27, 1);",
    "__ andl(r27, 16);",
    "__ andl(r27, 256);",
    "__ andl(r27, 4096);",
    "__ andl(r27, 65536);",
    "__ andl(r27, 1048576);",
    "__ andl(r27, 16777216);",
    "__ andl(r27, 268435456);",
    "__ andl(r28, 1);",
    "__ andl(r28, 16);",
    "__ andl(r28, 256);",
    "__ andl(r28, 4096);",
    "__ andl(r28, 65536);",
    "__ andl(r28, 1048576);",
    "__ andl(r28, 16777216);",
    "__ andl(r28, 268435456);",
    "__ andl(r29, 1);",
    "__ andl(r29, 16);",
    "__ andl(r29, 256);",
    "__ andl(r29, 4096);",
    "__ andl(r29, 65536);",
    "__ andl(r29, 1048576);",
    "__ andl(r29, 16777216);",
    "__ andl(r29, 268435456);",
    "__ andl(r30, 1);",
    "__ andl(r30, 16);",
    "__ andl(r30, 256);",
    "__ andl(r30, 4096);",
    "__ andl(r30, 65536);",
    "__ andl(r30, 1048576);",
    "__ andl(r30, 16777216);",
    "__ andl(r30, 268435456);",
    "__ andl(r31, 1);",
    "__ andl(r31, 16);",
    "__ andl(r31, 256);",
    "__ andl(r31, 4096);",
    "__ andl(r31, 65536);",
    "__ andl(r31, 1048576);",
    "__ andl(r31, 16777216);",
    "__ andl(r31, 268435456);",
#endif // _LP64
    "__ adcl(rcx, 1);",
    "__ adcl(rcx, 16);",
    "__ adcl(rcx, 256);",
    "__ adcl(rcx, 4096);",
    "__ adcl(rcx, 65536);",
    "__ adcl(rcx, 1048576);",
    "__ adcl(rcx, 16777216);",
    "__ adcl(rcx, 268435456);",
    "__ adcl(rdx, 1);",
    "__ adcl(rdx, 16);",
    "__ adcl(rdx, 256);",
    "__ adcl(rdx, 4096);",
    "__ adcl(rdx, 65536);",
    "__ adcl(rdx, 1048576);",
    "__ adcl(rdx, 16777216);",
    "__ adcl(rdx, 268435456);",
    "__ adcl(rbx, 1);",
    "__ adcl(rbx, 16);",
    "__ adcl(rbx, 256);",
    "__ adcl(rbx, 4096);",
    "__ adcl(rbx, 65536);",
    "__ adcl(rbx, 1048576);",
    "__ adcl(rbx, 16777216);",
    "__ adcl(rbx, 268435456);",
#ifdef _LP64
    "__ adcl(r8, 1);",
    "__ adcl(r8, 16);",
    "__ adcl(r8, 256);",
    "__ adcl(r8, 4096);",
    "__ adcl(r8, 65536);",
    "__ adcl(r8, 1048576);",
    "__ adcl(r8, 16777216);",
    "__ adcl(r8, 268435456);",
    "__ adcl(r9, 1);",
    "__ adcl(r9, 16);",
    "__ adcl(r9, 256);",
    "__ adcl(r9, 4096);",
    "__ adcl(r9, 65536);",
    "__ adcl(r9, 1048576);",
    "__ adcl(r9, 16777216);",
    "__ adcl(r9, 268435456);",
    "__ adcl(r10, 1);",
    "__ adcl(r10, 16);",
    "__ adcl(r10, 256);",
    "__ adcl(r10, 4096);",
    "__ adcl(r10, 65536);",
    "__ adcl(r10, 1048576);",
    "__ adcl(r10, 16777216);",
    "__ adcl(r10, 268435456);",
    "__ adcl(r11, 1);",
    "__ adcl(r11, 16);",
    "__ adcl(r11, 256);",
    "__ adcl(r11, 4096);",
    "__ adcl(r11, 65536);",
    "__ adcl(r11, 1048576);",
    "__ adcl(r11, 16777216);",
    "__ adcl(r11, 268435456);",
    "__ adcl(r12, 1);",
    "__ adcl(r12, 16);",
    "__ adcl(r12, 256);",
    "__ adcl(r12, 4096);",
    "__ adcl(r12, 65536);",
    "__ adcl(r12, 1048576);",
    "__ adcl(r12, 16777216);",
    "__ adcl(r12, 268435456);",
    "__ adcl(r13, 1);",
    "__ adcl(r13, 16);",
    "__ adcl(r13, 256);",
    "__ adcl(r13, 4096);",
    "__ adcl(r13, 65536);",
    "__ adcl(r13, 1048576);",
    "__ adcl(r13, 16777216);",
    "__ adcl(r13, 268435456);",
    "__ adcl(r14, 1);",
    "__ adcl(r14, 16);",
    "__ adcl(r14, 256);",
    "__ adcl(r14, 4096);",
    "__ adcl(r14, 65536);",
    "__ adcl(r14, 1048576);",
    "__ adcl(r14, 16777216);",
    "__ adcl(r14, 268435456);",
    "__ adcl(r15, 1);",
    "__ adcl(r15, 16);",
    "__ adcl(r15, 256);",
    "__ adcl(r15, 4096);",
    "__ adcl(r15, 65536);",
    "__ adcl(r15, 1048576);",
    "__ adcl(r15, 16777216);",
    "__ adcl(r15, 268435456);",
    "__ adcl(r16, 1);",
    "__ adcl(r16, 16);",
    "__ adcl(r16, 256);",
    "__ adcl(r16, 4096);",
    "__ adcl(r16, 65536);",
    "__ adcl(r16, 1048576);",
    "__ adcl(r16, 16777216);",
    "__ adcl(r16, 268435456);",
    "__ adcl(r17, 1);",
    "__ adcl(r17, 16);",
    "__ adcl(r17, 256);",
    "__ adcl(r17, 4096);",
    "__ adcl(r17, 65536);",
    "__ adcl(r17, 1048576);",
    "__ adcl(r17, 16777216);",
    "__ adcl(r17, 268435456);",
    "__ adcl(r18, 1);",
    "__ adcl(r18, 16);",
    "__ adcl(r18, 256);",
    "__ adcl(r18, 4096);",
    "__ adcl(r18, 65536);",
    "__ adcl(r18, 1048576);",
    "__ adcl(r18, 16777216);",
    "__ adcl(r18, 268435456);",
    "__ adcl(r19, 1);",
    "__ adcl(r19, 16);",
    "__ adcl(r19, 256);",
    "__ adcl(r19, 4096);",
    "__ adcl(r19, 65536);",
    "__ adcl(r19, 1048576);",
    "__ adcl(r19, 16777216);",
    "__ adcl(r19, 268435456);",
    "__ adcl(r20, 1);",
    "__ adcl(r20, 16);",
    "__ adcl(r20, 256);",
    "__ adcl(r20, 4096);",
    "__ adcl(r20, 65536);",
    "__ adcl(r20, 1048576);",
    "__ adcl(r20, 16777216);",
    "__ adcl(r20, 268435456);",
    "__ adcl(r21, 1);",
    "__ adcl(r21, 16);",
    "__ adcl(r21, 256);",
    "__ adcl(r21, 4096);",
    "__ adcl(r21, 65536);",
    "__ adcl(r21, 1048576);",
    "__ adcl(r21, 16777216);",
    "__ adcl(r21, 268435456);",
    "__ adcl(r22, 1);",
    "__ adcl(r22, 16);",
    "__ adcl(r22, 256);",
    "__ adcl(r22, 4096);",
    "__ adcl(r22, 65536);",
    "__ adcl(r22, 1048576);",
    "__ adcl(r22, 16777216);",
    "__ adcl(r22, 268435456);",
    "__ adcl(r23, 1);",
    "__ adcl(r23, 16);",
    "__ adcl(r23, 256);",
    "__ adcl(r23, 4096);",
    "__ adcl(r23, 65536);",
    "__ adcl(r23, 1048576);",
    "__ adcl(r23, 16777216);",
    "__ adcl(r23, 268435456);",
    "__ adcl(r24, 1);",
    "__ adcl(r24, 16);",
    "__ adcl(r24, 256);",
    "__ adcl(r24, 4096);",
    "__ adcl(r24, 65536);",
    "__ adcl(r24, 1048576);",
    "__ adcl(r24, 16777216);",
    "__ adcl(r24, 268435456);",
    "__ adcl(r25, 1);",
    "__ adcl(r25, 16);",
    "__ adcl(r25, 256);",
    "__ adcl(r25, 4096);",
    "__ adcl(r25, 65536);",
    "__ adcl(r25, 1048576);",
    "__ adcl(r25, 16777216);",
    "__ adcl(r25, 268435456);",
    "__ adcl(r26, 1);",
    "__ adcl(r26, 16);",
    "__ adcl(r26, 256);",
    "__ adcl(r26, 4096);",
    "__ adcl(r26, 65536);",
    "__ adcl(r26, 1048576);",
    "__ adcl(r26, 16777216);",
    "__ adcl(r26, 268435456);",
    "__ adcl(r27, 1);",
    "__ adcl(r27, 16);",
    "__ adcl(r27, 256);",
    "__ adcl(r27, 4096);",
    "__ adcl(r27, 65536);",
    "__ adcl(r27, 1048576);",
    "__ adcl(r27, 16777216);",
    "__ adcl(r27, 268435456);",
    "__ adcl(r28, 1);",
    "__ adcl(r28, 16);",
    "__ adcl(r28, 256);",
    "__ adcl(r28, 4096);",
    "__ adcl(r28, 65536);",
    "__ adcl(r28, 1048576);",
    "__ adcl(r28, 16777216);",
    "__ adcl(r28, 268435456);",
    "__ adcl(r29, 1);",
    "__ adcl(r29, 16);",
    "__ adcl(r29, 256);",
    "__ adcl(r29, 4096);",
    "__ adcl(r29, 65536);",
    "__ adcl(r29, 1048576);",
    "__ adcl(r29, 16777216);",
    "__ adcl(r29, 268435456);",
    "__ adcl(r30, 1);",
    "__ adcl(r30, 16);",
    "__ adcl(r30, 256);",
    "__ adcl(r30, 4096);",
    "__ adcl(r30, 65536);",
    "__ adcl(r30, 1048576);",
    "__ adcl(r30, 16777216);",
    "__ adcl(r30, 268435456);",
    "__ adcl(r31, 1);",
    "__ adcl(r31, 16);",
    "__ adcl(r31, 256);",
    "__ adcl(r31, 4096);",
    "__ adcl(r31, 65536);",
    "__ adcl(r31, 1048576);",
    "__ adcl(r31, 16777216);",
    "__ adcl(r31, 268435456);",
#endif // _LP64
    "__ rcll(rcx, 1);",
    "__ rcll(rcx, 2);",
    "__ rcll(rcx, 4);",
    "__ rcll(rcx, 8);",
    "__ rcll(rcx, 16);",
    "__ rcll(rdx, 1);",
    "__ rcll(rdx, 2);",
    "__ rcll(rdx, 4);",
    "__ rcll(rdx, 8);",
    "__ rcll(rdx, 16);",
    "__ rcll(rbx, 1);",
    "__ rcll(rbx, 2);",
    "__ rcll(rbx, 4);",
    "__ rcll(rbx, 8);",
    "__ rcll(rbx, 16);",
#ifdef _LP64
    "__ rcll(r8, 1);",
    "__ rcll(r8, 2);",
    "__ rcll(r8, 4);",
    "__ rcll(r8, 8);",
    "__ rcll(r8, 16);",
    "__ rcll(r9, 1);",
    "__ rcll(r9, 2);",
    "__ rcll(r9, 4);",
    "__ rcll(r9, 8);",
    "__ rcll(r9, 16);",
    "__ rcll(r10, 1);",
    "__ rcll(r10, 2);",
    "__ rcll(r10, 4);",
    "__ rcll(r10, 8);",
    "__ rcll(r10, 16);",
    "__ rcll(r11, 1);",
    "__ rcll(r11, 2);",
    "__ rcll(r11, 4);",
    "__ rcll(r11, 8);",
    "__ rcll(r11, 16);",
    "__ rcll(r12, 1);",
    "__ rcll(r12, 2);",
    "__ rcll(r12, 4);",
    "__ rcll(r12, 8);",
    "__ rcll(r12, 16);",
    "__ rcll(r13, 1);",
    "__ rcll(r13, 2);",
    "__ rcll(r13, 4);",
    "__ rcll(r13, 8);",
    "__ rcll(r13, 16);",
    "__ rcll(r14, 1);",
    "__ rcll(r14, 2);",
    "__ rcll(r14, 4);",
    "__ rcll(r14, 8);",
    "__ rcll(r14, 16);",
    "__ rcll(r15, 1);",
    "__ rcll(r15, 2);",
    "__ rcll(r15, 4);",
    "__ rcll(r15, 8);",
    "__ rcll(r15, 16);",
    "__ rcll(r16, 1);",
    "__ rcll(r16, 2);",
    "__ rcll(r16, 4);",
    "__ rcll(r16, 8);",
    "__ rcll(r16, 16);",
    "__ rcll(r17, 1);",
    "__ rcll(r17, 2);",
    "__ rcll(r17, 4);",
    "__ rcll(r17, 8);",
    "__ rcll(r17, 16);",
    "__ rcll(r18, 1);",
    "__ rcll(r18, 2);",
    "__ rcll(r18, 4);",
    "__ rcll(r18, 8);",
    "__ rcll(r18, 16);",
    "__ rcll(r19, 1);",
    "__ rcll(r19, 2);",
    "__ rcll(r19, 4);",
    "__ rcll(r19, 8);",
    "__ rcll(r19, 16);",
    "__ rcll(r20, 1);",
    "__ rcll(r20, 2);",
    "__ rcll(r20, 4);",
    "__ rcll(r20, 8);",
    "__ rcll(r20, 16);",
    "__ rcll(r21, 1);",
    "__ rcll(r21, 2);",
    "__ rcll(r21, 4);",
    "__ rcll(r21, 8);",
    "__ rcll(r21, 16);",
    "__ rcll(r22, 1);",
    "__ rcll(r22, 2);",
    "__ rcll(r22, 4);",
    "__ rcll(r22, 8);",
    "__ rcll(r22, 16);",
    "__ rcll(r23, 1);",
    "__ rcll(r23, 2);",
    "__ rcll(r23, 4);",
    "__ rcll(r23, 8);",
    "__ rcll(r23, 16);",
    "__ rcll(r24, 1);",
    "__ rcll(r24, 2);",
    "__ rcll(r24, 4);",
    "__ rcll(r24, 8);",
    "__ rcll(r24, 16);",
    "__ rcll(r25, 1);",
    "__ rcll(r25, 2);",
    "__ rcll(r25, 4);",
    "__ rcll(r25, 8);",
    "__ rcll(r25, 16);",
    "__ rcll(r26, 1);",
    "__ rcll(r26, 2);",
    "__ rcll(r26, 4);",
    "__ rcll(r26, 8);",
    "__ rcll(r26, 16);",
    "__ rcll(r27, 1);",
    "__ rcll(r27, 2);",
    "__ rcll(r27, 4);",
    "__ rcll(r27, 8);",
    "__ rcll(r27, 16);",
    "__ rcll(r28, 1);",
    "__ rcll(r28, 2);",
    "__ rcll(r28, 4);",
    "__ rcll(r28, 8);",
    "__ rcll(r28, 16);",
    "__ rcll(r29, 1);",
    "__ rcll(r29, 2);",
    "__ rcll(r29, 4);",
    "__ rcll(r29, 8);",
    "__ rcll(r29, 16);",
    "__ rcll(r30, 1);",
    "__ rcll(r30, 2);",
    "__ rcll(r30, 4);",
    "__ rcll(r30, 8);",
    "__ rcll(r30, 16);",
    "__ rcll(r31, 1);",
    "__ rcll(r31, 2);",
    "__ rcll(r31, 4);",
    "__ rcll(r31, 8);",
    "__ rcll(r31, 16);",
#endif // _LP64
    "__ roll(rcx, 1);",
    "__ roll(rcx, 2);",
    "__ roll(rcx, 4);",
    "__ roll(rcx, 8);",
    "__ roll(rcx, 16);",
    "__ roll(rdx, 1);",
    "__ roll(rdx, 2);",
    "__ roll(rdx, 4);",
    "__ roll(rdx, 8);",
    "__ roll(rdx, 16);",
    "__ roll(rbx, 1);",
    "__ roll(rbx, 2);",
    "__ roll(rbx, 4);",
    "__ roll(rbx, 8);",
    "__ roll(rbx, 16);",
#ifdef _LP64
    "__ roll(r8, 1);",
    "__ roll(r8, 2);",
    "__ roll(r8, 4);",
    "__ roll(r8, 8);",
    "__ roll(r8, 16);",
    "__ roll(r9, 1);",
    "__ roll(r9, 2);",
    "__ roll(r9, 4);",
    "__ roll(r9, 8);",
    "__ roll(r9, 16);",
    "__ roll(r10, 1);",
    "__ roll(r10, 2);",
    "__ roll(r10, 4);",
    "__ roll(r10, 8);",
    "__ roll(r10, 16);",
    "__ roll(r11, 1);",
    "__ roll(r11, 2);",
    "__ roll(r11, 4);",
    "__ roll(r11, 8);",
    "__ roll(r11, 16);",
    "__ roll(r12, 1);",
    "__ roll(r12, 2);",
    "__ roll(r12, 4);",
    "__ roll(r12, 8);",
    "__ roll(r12, 16);",
    "__ roll(r13, 1);",
    "__ roll(r13, 2);",
    "__ roll(r13, 4);",
    "__ roll(r13, 8);",
    "__ roll(r13, 16);",
    "__ roll(r14, 1);",
    "__ roll(r14, 2);",
    "__ roll(r14, 4);",
    "__ roll(r14, 8);",
    "__ roll(r14, 16);",
    "__ roll(r15, 1);",
    "__ roll(r15, 2);",
    "__ roll(r15, 4);",
    "__ roll(r15, 8);",
    "__ roll(r15, 16);",
    "__ roll(r16, 1);",
    "__ roll(r16, 2);",
    "__ roll(r16, 4);",
    "__ roll(r16, 8);",
    "__ roll(r16, 16);",
    "__ roll(r17, 1);",
    "__ roll(r17, 2);",
    "__ roll(r17, 4);",
    "__ roll(r17, 8);",
    "__ roll(r17, 16);",
    "__ roll(r18, 1);",
    "__ roll(r18, 2);",
    "__ roll(r18, 4);",
    "__ roll(r18, 8);",
    "__ roll(r18, 16);",
    "__ roll(r19, 1);",
    "__ roll(r19, 2);",
    "__ roll(r19, 4);",
    "__ roll(r19, 8);",
    "__ roll(r19, 16);",
    "__ roll(r20, 1);",
    "__ roll(r20, 2);",
    "__ roll(r20, 4);",
    "__ roll(r20, 8);",
    "__ roll(r20, 16);",
    "__ roll(r21, 1);",
    "__ roll(r21, 2);",
    "__ roll(r21, 4);",
    "__ roll(r21, 8);",
    "__ roll(r21, 16);",
    "__ roll(r22, 1);",
    "__ roll(r22, 2);",
    "__ roll(r22, 4);",
    "__ roll(r22, 8);",
    "__ roll(r22, 16);",
    "__ roll(r23, 1);",
    "__ roll(r23, 2);",
    "__ roll(r23, 4);",
    "__ roll(r23, 8);",
    "__ roll(r23, 16);",
    "__ roll(r24, 1);",
    "__ roll(r24, 2);",
    "__ roll(r24, 4);",
    "__ roll(r24, 8);",
    "__ roll(r24, 16);",
    "__ roll(r25, 1);",
    "__ roll(r25, 2);",
    "__ roll(r25, 4);",
    "__ roll(r25, 8);",
    "__ roll(r25, 16);",
    "__ roll(r26, 1);",
    "__ roll(r26, 2);",
    "__ roll(r26, 4);",
    "__ roll(r26, 8);",
    "__ roll(r26, 16);",
    "__ roll(r27, 1);",
    "__ roll(r27, 2);",
    "__ roll(r27, 4);",
    "__ roll(r27, 8);",
    "__ roll(r27, 16);",
    "__ roll(r28, 1);",
    "__ roll(r28, 2);",
    "__ roll(r28, 4);",
    "__ roll(r28, 8);",
    "__ roll(r28, 16);",
    "__ roll(r29, 1);",
    "__ roll(r29, 2);",
    "__ roll(r29, 4);",
    "__ roll(r29, 8);",
    "__ roll(r29, 16);",
    "__ roll(r30, 1);",
    "__ roll(r30, 2);",
    "__ roll(r30, 4);",
    "__ roll(r30, 8);",
    "__ roll(r30, 16);",
    "__ roll(r31, 1);",
    "__ roll(r31, 2);",
    "__ roll(r31, 4);",
    "__ roll(r31, 8);",
    "__ roll(r31, 16);",
#endif // _LP64
    "__ rorl(rcx, 1);",
    "__ rorl(rcx, 2);",
    "__ rorl(rcx, 4);",
    "__ rorl(rcx, 8);",
    "__ rorl(rcx, 16);",
    "__ rorl(rdx, 1);",
    "__ rorl(rdx, 2);",
    "__ rorl(rdx, 4);",
    "__ rorl(rdx, 8);",
    "__ rorl(rdx, 16);",
    "__ rorl(rbx, 1);",
    "__ rorl(rbx, 2);",
    "__ rorl(rbx, 4);",
    "__ rorl(rbx, 8);",
    "__ rorl(rbx, 16);",
#ifdef _LP64
    "__ rorl(r8, 1);",
    "__ rorl(r8, 2);",
    "__ rorl(r8, 4);",
    "__ rorl(r8, 8);",
    "__ rorl(r8, 16);",
    "__ rorl(r9, 1);",
    "__ rorl(r9, 2);",
    "__ rorl(r9, 4);",
    "__ rorl(r9, 8);",
    "__ rorl(r9, 16);",
    "__ rorl(r10, 1);",
    "__ rorl(r10, 2);",
    "__ rorl(r10, 4);",
    "__ rorl(r10, 8);",
    "__ rorl(r10, 16);",
    "__ rorl(r11, 1);",
    "__ rorl(r11, 2);",
    "__ rorl(r11, 4);",
    "__ rorl(r11, 8);",
    "__ rorl(r11, 16);",
    "__ rorl(r12, 1);",
    "__ rorl(r12, 2);",
    "__ rorl(r12, 4);",
    "__ rorl(r12, 8);",
    "__ rorl(r12, 16);",
    "__ rorl(r13, 1);",
    "__ rorl(r13, 2);",
    "__ rorl(r13, 4);",
    "__ rorl(r13, 8);",
    "__ rorl(r13, 16);",
    "__ rorl(r14, 1);",
    "__ rorl(r14, 2);",
    "__ rorl(r14, 4);",
    "__ rorl(r14, 8);",
    "__ rorl(r14, 16);",
    "__ rorl(r15, 1);",
    "__ rorl(r15, 2);",
    "__ rorl(r15, 4);",
    "__ rorl(r15, 8);",
    "__ rorl(r15, 16);",
    "__ rorl(r16, 1);",
    "__ rorl(r16, 2);",
    "__ rorl(r16, 4);",
    "__ rorl(r16, 8);",
    "__ rorl(r16, 16);",
    "__ rorl(r17, 1);",
    "__ rorl(r17, 2);",
    "__ rorl(r17, 4);",
    "__ rorl(r17, 8);",
    "__ rorl(r17, 16);",
    "__ rorl(r18, 1);",
    "__ rorl(r18, 2);",
    "__ rorl(r18, 4);",
    "__ rorl(r18, 8);",
    "__ rorl(r18, 16);",
    "__ rorl(r19, 1);",
    "__ rorl(r19, 2);",
    "__ rorl(r19, 4);",
    "__ rorl(r19, 8);",
    "__ rorl(r19, 16);",
    "__ rorl(r20, 1);",
    "__ rorl(r20, 2);",
    "__ rorl(r20, 4);",
    "__ rorl(r20, 8);",
    "__ rorl(r20, 16);",
    "__ rorl(r21, 1);",
    "__ rorl(r21, 2);",
    "__ rorl(r21, 4);",
    "__ rorl(r21, 8);",
    "__ rorl(r21, 16);",
    "__ rorl(r22, 1);",
    "__ rorl(r22, 2);",
    "__ rorl(r22, 4);",
    "__ rorl(r22, 8);",
    "__ rorl(r22, 16);",
    "__ rorl(r23, 1);",
    "__ rorl(r23, 2);",
    "__ rorl(r23, 4);",
    "__ rorl(r23, 8);",
    "__ rorl(r23, 16);",
    "__ rorl(r24, 1);",
    "__ rorl(r24, 2);",
    "__ rorl(r24, 4);",
    "__ rorl(r24, 8);",
    "__ rorl(r24, 16);",
    "__ rorl(r25, 1);",
    "__ rorl(r25, 2);",
    "__ rorl(r25, 4);",
    "__ rorl(r25, 8);",
    "__ rorl(r25, 16);",
    "__ rorl(r26, 1);",
    "__ rorl(r26, 2);",
    "__ rorl(r26, 4);",
    "__ rorl(r26, 8);",
    "__ rorl(r26, 16);",
    "__ rorl(r27, 1);",
    "__ rorl(r27, 2);",
    "__ rorl(r27, 4);",
    "__ rorl(r27, 8);",
    "__ rorl(r27, 16);",
    "__ rorl(r28, 1);",
    "__ rorl(r28, 2);",
    "__ rorl(r28, 4);",
    "__ rorl(r28, 8);",
    "__ rorl(r28, 16);",
    "__ rorl(r29, 1);",
    "__ rorl(r29, 2);",
    "__ rorl(r29, 4);",
    "__ rorl(r29, 8);",
    "__ rorl(r29, 16);",
    "__ rorl(r30, 1);",
    "__ rorl(r30, 2);",
    "__ rorl(r30, 4);",
    "__ rorl(r30, 8);",
    "__ rorl(r30, 16);",
    "__ rorl(r31, 1);",
    "__ rorl(r31, 2);",
    "__ rorl(r31, 4);",
    "__ rorl(r31, 8);",
    "__ rorl(r31, 16);",
#endif // _LP64
    "__ sarl(rcx, 1);",
    "__ sarl(rcx, 2);",
    "__ sarl(rcx, 4);",
    "__ sarl(rcx, 8);",
    "__ sarl(rcx, 16);",
    "__ sarl(rdx, 1);",
    "__ sarl(rdx, 2);",
    "__ sarl(rdx, 4);",
    "__ sarl(rdx, 8);",
    "__ sarl(rdx, 16);",
    "__ sarl(rbx, 1);",
    "__ sarl(rbx, 2);",
    "__ sarl(rbx, 4);",
    "__ sarl(rbx, 8);",
    "__ sarl(rbx, 16);",
#ifdef _LP64
    "__ sarl(r8, 1);",
    "__ sarl(r8, 2);",
    "__ sarl(r8, 4);",
    "__ sarl(r8, 8);",
    "__ sarl(r8, 16);",
    "__ sarl(r9, 1);",
    "__ sarl(r9, 2);",
    "__ sarl(r9, 4);",
    "__ sarl(r9, 8);",
    "__ sarl(r9, 16);",
    "__ sarl(r10, 1);",
    "__ sarl(r10, 2);",
    "__ sarl(r10, 4);",
    "__ sarl(r10, 8);",
    "__ sarl(r10, 16);",
    "__ sarl(r11, 1);",
    "__ sarl(r11, 2);",
    "__ sarl(r11, 4);",
    "__ sarl(r11, 8);",
    "__ sarl(r11, 16);",
    "__ sarl(r12, 1);",
    "__ sarl(r12, 2);",
    "__ sarl(r12, 4);",
    "__ sarl(r12, 8);",
    "__ sarl(r12, 16);",
    "__ sarl(r13, 1);",
    "__ sarl(r13, 2);",
    "__ sarl(r13, 4);",
    "__ sarl(r13, 8);",
    "__ sarl(r13, 16);",
    "__ sarl(r14, 1);",
    "__ sarl(r14, 2);",
    "__ sarl(r14, 4);",
    "__ sarl(r14, 8);",
    "__ sarl(r14, 16);",
    "__ sarl(r15, 1);",
    "__ sarl(r15, 2);",
    "__ sarl(r15, 4);",
    "__ sarl(r15, 8);",
    "__ sarl(r15, 16);",
    "__ sarl(r16, 1);",
    "__ sarl(r16, 2);",
    "__ sarl(r16, 4);",
    "__ sarl(r16, 8);",
    "__ sarl(r16, 16);",
    "__ sarl(r17, 1);",
    "__ sarl(r17, 2);",
    "__ sarl(r17, 4);",
    "__ sarl(r17, 8);",
    "__ sarl(r17, 16);",
    "__ sarl(r18, 1);",
    "__ sarl(r18, 2);",
    "__ sarl(r18, 4);",
    "__ sarl(r18, 8);",
    "__ sarl(r18, 16);",
    "__ sarl(r19, 1);",
    "__ sarl(r19, 2);",
    "__ sarl(r19, 4);",
    "__ sarl(r19, 8);",
    "__ sarl(r19, 16);",
    "__ sarl(r20, 1);",
    "__ sarl(r20, 2);",
    "__ sarl(r20, 4);",
    "__ sarl(r20, 8);",
    "__ sarl(r20, 16);",
    "__ sarl(r21, 1);",
    "__ sarl(r21, 2);",
    "__ sarl(r21, 4);",
    "__ sarl(r21, 8);",
    "__ sarl(r21, 16);",
    "__ sarl(r22, 1);",
    "__ sarl(r22, 2);",
    "__ sarl(r22, 4);",
    "__ sarl(r22, 8);",
    "__ sarl(r22, 16);",
    "__ sarl(r23, 1);",
    "__ sarl(r23, 2);",
    "__ sarl(r23, 4);",
    "__ sarl(r23, 8);",
    "__ sarl(r23, 16);",
    "__ sarl(r24, 1);",
    "__ sarl(r24, 2);",
    "__ sarl(r24, 4);",
    "__ sarl(r24, 8);",
    "__ sarl(r24, 16);",
    "__ sarl(r25, 1);",
    "__ sarl(r25, 2);",
    "__ sarl(r25, 4);",
    "__ sarl(r25, 8);",
    "__ sarl(r25, 16);",
    "__ sarl(r26, 1);",
    "__ sarl(r26, 2);",
    "__ sarl(r26, 4);",
    "__ sarl(r26, 8);",
    "__ sarl(r26, 16);",
    "__ sarl(r27, 1);",
    "__ sarl(r27, 2);",
    "__ sarl(r27, 4);",
    "__ sarl(r27, 8);",
    "__ sarl(r27, 16);",
    "__ sarl(r28, 1);",
    "__ sarl(r28, 2);",
    "__ sarl(r28, 4);",
    "__ sarl(r28, 8);",
    "__ sarl(r28, 16);",
    "__ sarl(r29, 1);",
    "__ sarl(r29, 2);",
    "__ sarl(r29, 4);",
    "__ sarl(r29, 8);",
    "__ sarl(r29, 16);",
    "__ sarl(r30, 1);",
    "__ sarl(r30, 2);",
    "__ sarl(r30, 4);",
    "__ sarl(r30, 8);",
    "__ sarl(r30, 16);",
    "__ sarl(r31, 1);",
    "__ sarl(r31, 2);",
    "__ sarl(r31, 4);",
    "__ sarl(r31, 8);",
    "__ sarl(r31, 16);",
#endif // _LP64
    "__ sbbl(rcx, 1);",
    "__ sbbl(rcx, 16);",
    "__ sbbl(rcx, 256);",
    "__ sbbl(rcx, 4096);",
    "__ sbbl(rcx, 65536);",
    "__ sbbl(rcx, 1048576);",
    "__ sbbl(rcx, 16777216);",
    "__ sbbl(rcx, 268435456);",
    "__ sbbl(rdx, 1);",
    "__ sbbl(rdx, 16);",
    "__ sbbl(rdx, 256);",
    "__ sbbl(rdx, 4096);",
    "__ sbbl(rdx, 65536);",
    "__ sbbl(rdx, 1048576);",
    "__ sbbl(rdx, 16777216);",
    "__ sbbl(rdx, 268435456);",
    "__ sbbl(rbx, 1);",
    "__ sbbl(rbx, 16);",
    "__ sbbl(rbx, 256);",
    "__ sbbl(rbx, 4096);",
    "__ sbbl(rbx, 65536);",
    "__ sbbl(rbx, 1048576);",
    "__ sbbl(rbx, 16777216);",
    "__ sbbl(rbx, 268435456);",
#ifdef _LP64
    "__ sbbl(r8, 1);",
    "__ sbbl(r8, 16);",
    "__ sbbl(r8, 256);",
    "__ sbbl(r8, 4096);",
    "__ sbbl(r8, 65536);",
    "__ sbbl(r8, 1048576);",
    "__ sbbl(r8, 16777216);",
    "__ sbbl(r8, 268435456);",
    "__ sbbl(r9, 1);",
    "__ sbbl(r9, 16);",
    "__ sbbl(r9, 256);",
    "__ sbbl(r9, 4096);",
    "__ sbbl(r9, 65536);",
    "__ sbbl(r9, 1048576);",
    "__ sbbl(r9, 16777216);",
    "__ sbbl(r9, 268435456);",
    "__ sbbl(r10, 1);",
    "__ sbbl(r10, 16);",
    "__ sbbl(r10, 256);",
    "__ sbbl(r10, 4096);",
    "__ sbbl(r10, 65536);",
    "__ sbbl(r10, 1048576);",
    "__ sbbl(r10, 16777216);",
    "__ sbbl(r10, 268435456);",
    "__ sbbl(r11, 1);",
    "__ sbbl(r11, 16);",
    "__ sbbl(r11, 256);",
    "__ sbbl(r11, 4096);",
    "__ sbbl(r11, 65536);",
    "__ sbbl(r11, 1048576);",
    "__ sbbl(r11, 16777216);",
    "__ sbbl(r11, 268435456);",
    "__ sbbl(r12, 1);",
    "__ sbbl(r12, 16);",
    "__ sbbl(r12, 256);",
    "__ sbbl(r12, 4096);",
    "__ sbbl(r12, 65536);",
    "__ sbbl(r12, 1048576);",
    "__ sbbl(r12, 16777216);",
    "__ sbbl(r12, 268435456);",
    "__ sbbl(r13, 1);",
    "__ sbbl(r13, 16);",
    "__ sbbl(r13, 256);",
    "__ sbbl(r13, 4096);",
    "__ sbbl(r13, 65536);",
    "__ sbbl(r13, 1048576);",
    "__ sbbl(r13, 16777216);",
    "__ sbbl(r13, 268435456);",
    "__ sbbl(r14, 1);",
    "__ sbbl(r14, 16);",
    "__ sbbl(r14, 256);",
    "__ sbbl(r14, 4096);",
    "__ sbbl(r14, 65536);",
    "__ sbbl(r14, 1048576);",
    "__ sbbl(r14, 16777216);",
    "__ sbbl(r14, 268435456);",
    "__ sbbl(r15, 1);",
    "__ sbbl(r15, 16);",
    "__ sbbl(r15, 256);",
    "__ sbbl(r15, 4096);",
    "__ sbbl(r15, 65536);",
    "__ sbbl(r15, 1048576);",
    "__ sbbl(r15, 16777216);",
    "__ sbbl(r15, 268435456);",
    "__ sbbl(r16, 1);",
    "__ sbbl(r16, 16);",
    "__ sbbl(r16, 256);",
    "__ sbbl(r16, 4096);",
    "__ sbbl(r16, 65536);",
    "__ sbbl(r16, 1048576);",
    "__ sbbl(r16, 16777216);",
    "__ sbbl(r16, 268435456);",
    "__ sbbl(r17, 1);",
    "__ sbbl(r17, 16);",
    "__ sbbl(r17, 256);",
    "__ sbbl(r17, 4096);",
    "__ sbbl(r17, 65536);",
    "__ sbbl(r17, 1048576);",
    "__ sbbl(r17, 16777216);",
    "__ sbbl(r17, 268435456);",
    "__ sbbl(r18, 1);",
    "__ sbbl(r18, 16);",
    "__ sbbl(r18, 256);",
    "__ sbbl(r18, 4096);",
    "__ sbbl(r18, 65536);",
    "__ sbbl(r18, 1048576);",
    "__ sbbl(r18, 16777216);",
    "__ sbbl(r18, 268435456);",
    "__ sbbl(r19, 1);",
    "__ sbbl(r19, 16);",
    "__ sbbl(r19, 256);",
    "__ sbbl(r19, 4096);",
    "__ sbbl(r19, 65536);",
    "__ sbbl(r19, 1048576);",
    "__ sbbl(r19, 16777216);",
    "__ sbbl(r19, 268435456);",
    "__ sbbl(r20, 1);",
    "__ sbbl(r20, 16);",
    "__ sbbl(r20, 256);",
    "__ sbbl(r20, 4096);",
    "__ sbbl(r20, 65536);",
    "__ sbbl(r20, 1048576);",
    "__ sbbl(r20, 16777216);",
    "__ sbbl(r20, 268435456);",
    "__ sbbl(r21, 1);",
    "__ sbbl(r21, 16);",
    "__ sbbl(r21, 256);",
    "__ sbbl(r21, 4096);",
    "__ sbbl(r21, 65536);",
    "__ sbbl(r21, 1048576);",
    "__ sbbl(r21, 16777216);",
    "__ sbbl(r21, 268435456);",
    "__ sbbl(r22, 1);",
    "__ sbbl(r22, 16);",
    "__ sbbl(r22, 256);",
    "__ sbbl(r22, 4096);",
    "__ sbbl(r22, 65536);",
    "__ sbbl(r22, 1048576);",
    "__ sbbl(r22, 16777216);",
    "__ sbbl(r22, 268435456);",
    "__ sbbl(r23, 1);",
    "__ sbbl(r23, 16);",
    "__ sbbl(r23, 256);",
    "__ sbbl(r23, 4096);",
    "__ sbbl(r23, 65536);",
    "__ sbbl(r23, 1048576);",
    "__ sbbl(r23, 16777216);",
    "__ sbbl(r23, 268435456);",
    "__ sbbl(r24, 1);",
    "__ sbbl(r24, 16);",
    "__ sbbl(r24, 256);",
    "__ sbbl(r24, 4096);",
    "__ sbbl(r24, 65536);",
    "__ sbbl(r24, 1048576);",
    "__ sbbl(r24, 16777216);",
    "__ sbbl(r24, 268435456);",
    "__ sbbl(r25, 1);",
    "__ sbbl(r25, 16);",
    "__ sbbl(r25, 256);",
    "__ sbbl(r25, 4096);",
    "__ sbbl(r25, 65536);",
    "__ sbbl(r25, 1048576);",
    "__ sbbl(r25, 16777216);",
    "__ sbbl(r25, 268435456);",
    "__ sbbl(r26, 1);",
    "__ sbbl(r26, 16);",
    "__ sbbl(r26, 256);",
    "__ sbbl(r26, 4096);",
    "__ sbbl(r26, 65536);",
    "__ sbbl(r26, 1048576);",
    "__ sbbl(r26, 16777216);",
    "__ sbbl(r26, 268435456);",
    "__ sbbl(r27, 1);",
    "__ sbbl(r27, 16);",
    "__ sbbl(r27, 256);",
    "__ sbbl(r27, 4096);",
    "__ sbbl(r27, 65536);",
    "__ sbbl(r27, 1048576);",
    "__ sbbl(r27, 16777216);",
    "__ sbbl(r27, 268435456);",
    "__ sbbl(r28, 1);",
    "__ sbbl(r28, 16);",
    "__ sbbl(r28, 256);",
    "__ sbbl(r28, 4096);",
    "__ sbbl(r28, 65536);",
    "__ sbbl(r28, 1048576);",
    "__ sbbl(r28, 16777216);",
    "__ sbbl(r28, 268435456);",
    "__ sbbl(r29, 1);",
    "__ sbbl(r29, 16);",
    "__ sbbl(r29, 256);",
    "__ sbbl(r29, 4096);",
    "__ sbbl(r29, 65536);",
    "__ sbbl(r29, 1048576);",
    "__ sbbl(r29, 16777216);",
    "__ sbbl(r29, 268435456);",
    "__ sbbl(r30, 1);",
    "__ sbbl(r30, 16);",
    "__ sbbl(r30, 256);",
    "__ sbbl(r30, 4096);",
    "__ sbbl(r30, 65536);",
    "__ sbbl(r30, 1048576);",
    "__ sbbl(r30, 16777216);",
    "__ sbbl(r30, 268435456);",
    "__ sbbl(r31, 1);",
    "__ sbbl(r31, 16);",
    "__ sbbl(r31, 256);",
    "__ sbbl(r31, 4096);",
    "__ sbbl(r31, 65536);",
    "__ sbbl(r31, 1048576);",
    "__ sbbl(r31, 16777216);",
    "__ sbbl(r31, 268435456);",
#endif // _LP64
    "__ shll(rcx, 1);",
    "__ shll(rcx, 2);",
    "__ shll(rcx, 4);",
    "__ shll(rcx, 8);",
    "__ shll(rcx, 16);",
    "__ shll(rdx, 1);",
    "__ shll(rdx, 2);",
    "__ shll(rdx, 4);",
    "__ shll(rdx, 8);",
    "__ shll(rdx, 16);",
    "__ shll(rbx, 1);",
    "__ shll(rbx, 2);",
    "__ shll(rbx, 4);",
    "__ shll(rbx, 8);",
    "__ shll(rbx, 16);",
#ifdef _LP64
    "__ shll(r8, 1);",
    "__ shll(r8, 2);",
    "__ shll(r8, 4);",
    "__ shll(r8, 8);",
    "__ shll(r8, 16);",
    "__ shll(r9, 1);",
    "__ shll(r9, 2);",
    "__ shll(r9, 4);",
    "__ shll(r9, 8);",
    "__ shll(r9, 16);",
    "__ shll(r10, 1);",
    "__ shll(r10, 2);",
    "__ shll(r10, 4);",
    "__ shll(r10, 8);",
    "__ shll(r10, 16);",
    "__ shll(r11, 1);",
    "__ shll(r11, 2);",
    "__ shll(r11, 4);",
    "__ shll(r11, 8);",
    "__ shll(r11, 16);",
    "__ shll(r12, 1);",
    "__ shll(r12, 2);",
    "__ shll(r12, 4);",
    "__ shll(r12, 8);",
    "__ shll(r12, 16);",
    "__ shll(r13, 1);",
    "__ shll(r13, 2);",
    "__ shll(r13, 4);",
    "__ shll(r13, 8);",
    "__ shll(r13, 16);",
    "__ shll(r14, 1);",
    "__ shll(r14, 2);",
    "__ shll(r14, 4);",
    "__ shll(r14, 8);",
    "__ shll(r14, 16);",
    "__ shll(r15, 1);",
    "__ shll(r15, 2);",
    "__ shll(r15, 4);",
    "__ shll(r15, 8);",
    "__ shll(r15, 16);",
    "__ shll(r16, 1);",
    "__ shll(r16, 2);",
    "__ shll(r16, 4);",
    "__ shll(r16, 8);",
    "__ shll(r16, 16);",
    "__ shll(r17, 1);",
    "__ shll(r17, 2);",
    "__ shll(r17, 4);",
    "__ shll(r17, 8);",
    "__ shll(r17, 16);",
    "__ shll(r18, 1);",
    "__ shll(r18, 2);",
    "__ shll(r18, 4);",
    "__ shll(r18, 8);",
    "__ shll(r18, 16);",
    "__ shll(r19, 1);",
    "__ shll(r19, 2);",
    "__ shll(r19, 4);",
    "__ shll(r19, 8);",
    "__ shll(r19, 16);",
    "__ shll(r20, 1);",
    "__ shll(r20, 2);",
    "__ shll(r20, 4);",
    "__ shll(r20, 8);",
    "__ shll(r20, 16);",
    "__ shll(r21, 1);",
    "__ shll(r21, 2);",
    "__ shll(r21, 4);",
    "__ shll(r21, 8);",
    "__ shll(r21, 16);",
    "__ shll(r22, 1);",
    "__ shll(r22, 2);",
    "__ shll(r22, 4);",
    "__ shll(r22, 8);",
    "__ shll(r22, 16);",
    "__ shll(r23, 1);",
    "__ shll(r23, 2);",
    "__ shll(r23, 4);",
    "__ shll(r23, 8);",
    "__ shll(r23, 16);",
    "__ shll(r24, 1);",
    "__ shll(r24, 2);",
    "__ shll(r24, 4);",
    "__ shll(r24, 8);",
    "__ shll(r24, 16);",
    "__ shll(r25, 1);",
    "__ shll(r25, 2);",
    "__ shll(r25, 4);",
    "__ shll(r25, 8);",
    "__ shll(r25, 16);",
    "__ shll(r26, 1);",
    "__ shll(r26, 2);",
    "__ shll(r26, 4);",
    "__ shll(r26, 8);",
    "__ shll(r26, 16);",
    "__ shll(r27, 1);",
    "__ shll(r27, 2);",
    "__ shll(r27, 4);",
    "__ shll(r27, 8);",
    "__ shll(r27, 16);",
    "__ shll(r28, 1);",
    "__ shll(r28, 2);",
    "__ shll(r28, 4);",
    "__ shll(r28, 8);",
    "__ shll(r28, 16);",
    "__ shll(r29, 1);",
    "__ shll(r29, 2);",
    "__ shll(r29, 4);",
    "__ shll(r29, 8);",
    "__ shll(r29, 16);",
    "__ shll(r30, 1);",
    "__ shll(r30, 2);",
    "__ shll(r30, 4);",
    "__ shll(r30, 8);",
    "__ shll(r30, 16);",
    "__ shll(r31, 1);",
    "__ shll(r31, 2);",
    "__ shll(r31, 4);",
    "__ shll(r31, 8);",
    "__ shll(r31, 16);",
#endif // _LP64
    "__ shrl(rcx, 1);",
    "__ shrl(rcx, 2);",
    "__ shrl(rcx, 4);",
    "__ shrl(rcx, 8);",
    "__ shrl(rcx, 16);",
    "__ shrl(rdx, 1);",
    "__ shrl(rdx, 2);",
    "__ shrl(rdx, 4);",
    "__ shrl(rdx, 8);",
    "__ shrl(rdx, 16);",
    "__ shrl(rbx, 1);",
    "__ shrl(rbx, 2);",
    "__ shrl(rbx, 4);",
    "__ shrl(rbx, 8);",
    "__ shrl(rbx, 16);",
#ifdef _LP64
    "__ shrl(r8, 1);",
    "__ shrl(r8, 2);",
    "__ shrl(r8, 4);",
    "__ shrl(r8, 8);",
    "__ shrl(r8, 16);",
    "__ shrl(r9, 1);",
    "__ shrl(r9, 2);",
    "__ shrl(r9, 4);",
    "__ shrl(r9, 8);",
    "__ shrl(r9, 16);",
    "__ shrl(r10, 1);",
    "__ shrl(r10, 2);",
    "__ shrl(r10, 4);",
    "__ shrl(r10, 8);",
    "__ shrl(r10, 16);",
    "__ shrl(r11, 1);",
    "__ shrl(r11, 2);",
    "__ shrl(r11, 4);",
    "__ shrl(r11, 8);",
    "__ shrl(r11, 16);",
    "__ shrl(r12, 1);",
    "__ shrl(r12, 2);",
    "__ shrl(r12, 4);",
    "__ shrl(r12, 8);",
    "__ shrl(r12, 16);",
    "__ shrl(r13, 1);",
    "__ shrl(r13, 2);",
    "__ shrl(r13, 4);",
    "__ shrl(r13, 8);",
    "__ shrl(r13, 16);",
    "__ shrl(r14, 1);",
    "__ shrl(r14, 2);",
    "__ shrl(r14, 4);",
    "__ shrl(r14, 8);",
    "__ shrl(r14, 16);",
    "__ shrl(r15, 1);",
    "__ shrl(r15, 2);",
    "__ shrl(r15, 4);",
    "__ shrl(r15, 8);",
    "__ shrl(r15, 16);",
    "__ shrl(r16, 1);",
    "__ shrl(r16, 2);",
    "__ shrl(r16, 4);",
    "__ shrl(r16, 8);",
    "__ shrl(r16, 16);",
    "__ shrl(r17, 1);",
    "__ shrl(r17, 2);",
    "__ shrl(r17, 4);",
    "__ shrl(r17, 8);",
    "__ shrl(r17, 16);",
    "__ shrl(r18, 1);",
    "__ shrl(r18, 2);",
    "__ shrl(r18, 4);",
    "__ shrl(r18, 8);",
    "__ shrl(r18, 16);",
    "__ shrl(r19, 1);",
    "__ shrl(r19, 2);",
    "__ shrl(r19, 4);",
    "__ shrl(r19, 8);",
    "__ shrl(r19, 16);",
    "__ shrl(r20, 1);",
    "__ shrl(r20, 2);",
    "__ shrl(r20, 4);",
    "__ shrl(r20, 8);",
    "__ shrl(r20, 16);",
    "__ shrl(r21, 1);",
    "__ shrl(r21, 2);",
    "__ shrl(r21, 4);",
    "__ shrl(r21, 8);",
    "__ shrl(r21, 16);",
    "__ shrl(r22, 1);",
    "__ shrl(r22, 2);",
    "__ shrl(r22, 4);",
    "__ shrl(r22, 8);",
    "__ shrl(r22, 16);",
    "__ shrl(r23, 1);",
    "__ shrl(r23, 2);",
    "__ shrl(r23, 4);",
    "__ shrl(r23, 8);",
    "__ shrl(r23, 16);",
    "__ shrl(r24, 1);",
    "__ shrl(r24, 2);",
    "__ shrl(r24, 4);",
    "__ shrl(r24, 8);",
    "__ shrl(r24, 16);",
    "__ shrl(r25, 1);",
    "__ shrl(r25, 2);",
    "__ shrl(r25, 4);",
    "__ shrl(r25, 8);",
    "__ shrl(r25, 16);",
    "__ shrl(r26, 1);",
    "__ shrl(r26, 2);",
    "__ shrl(r26, 4);",
    "__ shrl(r26, 8);",
    "__ shrl(r26, 16);",
    "__ shrl(r27, 1);",
    "__ shrl(r27, 2);",
    "__ shrl(r27, 4);",
    "__ shrl(r27, 8);",
    "__ shrl(r27, 16);",
    "__ shrl(r28, 1);",
    "__ shrl(r28, 2);",
    "__ shrl(r28, 4);",
    "__ shrl(r28, 8);",
    "__ shrl(r28, 16);",
    "__ shrl(r29, 1);",
    "__ shrl(r29, 2);",
    "__ shrl(r29, 4);",
    "__ shrl(r29, 8);",
    "__ shrl(r29, 16);",
    "__ shrl(r30, 1);",
    "__ shrl(r30, 2);",
    "__ shrl(r30, 4);",
    "__ shrl(r30, 8);",
    "__ shrl(r30, 16);",
    "__ shrl(r31, 1);",
    "__ shrl(r31, 2);",
    "__ shrl(r31, 4);",
    "__ shrl(r31, 8);",
    "__ shrl(r31, 16);",
#endif // _LP64
    "__ subl(rcx, 1);",
    "__ subl(rcx, 16);",
    "__ subl(rcx, 256);",
    "__ subl(rcx, 4096);",
    "__ subl(rcx, 65536);",
    "__ subl(rcx, 1048576);",
    "__ subl(rcx, 16777216);",
    "__ subl(rcx, 268435456);",
    "__ subl(rdx, 1);",
    "__ subl(rdx, 16);",
    "__ subl(rdx, 256);",
    "__ subl(rdx, 4096);",
    "__ subl(rdx, 65536);",
    "__ subl(rdx, 1048576);",
    "__ subl(rdx, 16777216);",
    "__ subl(rdx, 268435456);",
    "__ subl(rbx, 1);",
    "__ subl(rbx, 16);",
    "__ subl(rbx, 256);",
    "__ subl(rbx, 4096);",
    "__ subl(rbx, 65536);",
    "__ subl(rbx, 1048576);",
    "__ subl(rbx, 16777216);",
    "__ subl(rbx, 268435456);",
#ifdef _LP64
    "__ subl(r8, 1);",
    "__ subl(r8, 16);",
    "__ subl(r8, 256);",
    "__ subl(r8, 4096);",
    "__ subl(r8, 65536);",
    "__ subl(r8, 1048576);",
    "__ subl(r8, 16777216);",
    "__ subl(r8, 268435456);",
    "__ subl(r9, 1);",
    "__ subl(r9, 16);",
    "__ subl(r9, 256);",
    "__ subl(r9, 4096);",
    "__ subl(r9, 65536);",
    "__ subl(r9, 1048576);",
    "__ subl(r9, 16777216);",
    "__ subl(r9, 268435456);",
    "__ subl(r10, 1);",
    "__ subl(r10, 16);",
    "__ subl(r10, 256);",
    "__ subl(r10, 4096);",
    "__ subl(r10, 65536);",
    "__ subl(r10, 1048576);",
    "__ subl(r10, 16777216);",
    "__ subl(r10, 268435456);",
    "__ subl(r11, 1);",
    "__ subl(r11, 16);",
    "__ subl(r11, 256);",
    "__ subl(r11, 4096);",
    "__ subl(r11, 65536);",
    "__ subl(r11, 1048576);",
    "__ subl(r11, 16777216);",
    "__ subl(r11, 268435456);",
    "__ subl(r12, 1);",
    "__ subl(r12, 16);",
    "__ subl(r12, 256);",
    "__ subl(r12, 4096);",
    "__ subl(r12, 65536);",
    "__ subl(r12, 1048576);",
    "__ subl(r12, 16777216);",
    "__ subl(r12, 268435456);",
    "__ subl(r13, 1);",
    "__ subl(r13, 16);",
    "__ subl(r13, 256);",
    "__ subl(r13, 4096);",
    "__ subl(r13, 65536);",
    "__ subl(r13, 1048576);",
    "__ subl(r13, 16777216);",
    "__ subl(r13, 268435456);",
    "__ subl(r14, 1);",
    "__ subl(r14, 16);",
    "__ subl(r14, 256);",
    "__ subl(r14, 4096);",
    "__ subl(r14, 65536);",
    "__ subl(r14, 1048576);",
    "__ subl(r14, 16777216);",
    "__ subl(r14, 268435456);",
    "__ subl(r15, 1);",
    "__ subl(r15, 16);",
    "__ subl(r15, 256);",
    "__ subl(r15, 4096);",
    "__ subl(r15, 65536);",
    "__ subl(r15, 1048576);",
    "__ subl(r15, 16777216);",
    "__ subl(r15, 268435456);",
    "__ subl(r16, 1);",
    "__ subl(r16, 16);",
    "__ subl(r16, 256);",
    "__ subl(r16, 4096);",
    "__ subl(r16, 65536);",
    "__ subl(r16, 1048576);",
    "__ subl(r16, 16777216);",
    "__ subl(r16, 268435456);",
    "__ subl(r17, 1);",
    "__ subl(r17, 16);",
    "__ subl(r17, 256);",
    "__ subl(r17, 4096);",
    "__ subl(r17, 65536);",
    "__ subl(r17, 1048576);",
    "__ subl(r17, 16777216);",
    "__ subl(r17, 268435456);",
    "__ subl(r18, 1);",
    "__ subl(r18, 16);",
    "__ subl(r18, 256);",
    "__ subl(r18, 4096);",
    "__ subl(r18, 65536);",
    "__ subl(r18, 1048576);",
    "__ subl(r18, 16777216);",
    "__ subl(r18, 268435456);",
    "__ subl(r19, 1);",
    "__ subl(r19, 16);",
    "__ subl(r19, 256);",
    "__ subl(r19, 4096);",
    "__ subl(r19, 65536);",
    "__ subl(r19, 1048576);",
    "__ subl(r19, 16777216);",
    "__ subl(r19, 268435456);",
    "__ subl(r20, 1);",
    "__ subl(r20, 16);",
    "__ subl(r20, 256);",
    "__ subl(r20, 4096);",
    "__ subl(r20, 65536);",
    "__ subl(r20, 1048576);",
    "__ subl(r20, 16777216);",
    "__ subl(r20, 268435456);",
    "__ subl(r21, 1);",
    "__ subl(r21, 16);",
    "__ subl(r21, 256);",
    "__ subl(r21, 4096);",
    "__ subl(r21, 65536);",
    "__ subl(r21, 1048576);",
    "__ subl(r21, 16777216);",
    "__ subl(r21, 268435456);",
    "__ subl(r22, 1);",
    "__ subl(r22, 16);",
    "__ subl(r22, 256);",
    "__ subl(r22, 4096);",
    "__ subl(r22, 65536);",
    "__ subl(r22, 1048576);",
    "__ subl(r22, 16777216);",
    "__ subl(r22, 268435456);",
    "__ subl(r23, 1);",
    "__ subl(r23, 16);",
    "__ subl(r23, 256);",
    "__ subl(r23, 4096);",
    "__ subl(r23, 65536);",
    "__ subl(r23, 1048576);",
    "__ subl(r23, 16777216);",
    "__ subl(r23, 268435456);",
    "__ subl(r24, 1);",
    "__ subl(r24, 16);",
    "__ subl(r24, 256);",
    "__ subl(r24, 4096);",
    "__ subl(r24, 65536);",
    "__ subl(r24, 1048576);",
    "__ subl(r24, 16777216);",
    "__ subl(r24, 268435456);",
    "__ subl(r25, 1);",
    "__ subl(r25, 16);",
    "__ subl(r25, 256);",
    "__ subl(r25, 4096);",
    "__ subl(r25, 65536);",
    "__ subl(r25, 1048576);",
    "__ subl(r25, 16777216);",
    "__ subl(r25, 268435456);",
    "__ subl(r26, 1);",
    "__ subl(r26, 16);",
    "__ subl(r26, 256);",
    "__ subl(r26, 4096);",
    "__ subl(r26, 65536);",
    "__ subl(r26, 1048576);",
    "__ subl(r26, 16777216);",
    "__ subl(r26, 268435456);",
    "__ subl(r27, 1);",
    "__ subl(r27, 16);",
    "__ subl(r27, 256);",
    "__ subl(r27, 4096);",
    "__ subl(r27, 65536);",
    "__ subl(r27, 1048576);",
    "__ subl(r27, 16777216);",
    "__ subl(r27, 268435456);",
    "__ subl(r28, 1);",
    "__ subl(r28, 16);",
    "__ subl(r28, 256);",
    "__ subl(r28, 4096);",
    "__ subl(r28, 65536);",
    "__ subl(r28, 1048576);",
    "__ subl(r28, 16777216);",
    "__ subl(r28, 268435456);",
    "__ subl(r29, 1);",
    "__ subl(r29, 16);",
    "__ subl(r29, 256);",
    "__ subl(r29, 4096);",
    "__ subl(r29, 65536);",
    "__ subl(r29, 1048576);",
    "__ subl(r29, 16777216);",
    "__ subl(r29, 268435456);",
    "__ subl(r30, 1);",
    "__ subl(r30, 16);",
    "__ subl(r30, 256);",
    "__ subl(r30, 4096);",
    "__ subl(r30, 65536);",
    "__ subl(r30, 1048576);",
    "__ subl(r30, 16777216);",
    "__ subl(r30, 268435456);",
    "__ subl(r31, 1);",
    "__ subl(r31, 16);",
    "__ subl(r31, 256);",
    "__ subl(r31, 4096);",
    "__ subl(r31, 65536);",
    "__ subl(r31, 1048576);",
    "__ subl(r31, 16777216);",
    "__ subl(r31, 268435456);",
#endif // _LP64
    "__ xorl(rcx, 1);",
    "__ xorl(rcx, 16);",
    "__ xorl(rcx, 256);",
    "__ xorl(rcx, 4096);",
    "__ xorl(rcx, 65536);",
    "__ xorl(rcx, 1048576);",
    "__ xorl(rcx, 16777216);",
    "__ xorl(rcx, 268435456);",
    "__ xorl(rdx, 1);",
    "__ xorl(rdx, 16);",
    "__ xorl(rdx, 256);",
    "__ xorl(rdx, 4096);",
    "__ xorl(rdx, 65536);",
    "__ xorl(rdx, 1048576);",
    "__ xorl(rdx, 16777216);",
    "__ xorl(rdx, 268435456);",
    "__ xorl(rbx, 1);",
    "__ xorl(rbx, 16);",
    "__ xorl(rbx, 256);",
    "__ xorl(rbx, 4096);",
    "__ xorl(rbx, 65536);",
    "__ xorl(rbx, 1048576);",
    "__ xorl(rbx, 16777216);",
    "__ xorl(rbx, 268435456);",
#ifdef _LP64
    "__ xorl(r8, 1);",
    "__ xorl(r8, 16);",
    "__ xorl(r8, 256);",
    "__ xorl(r8, 4096);",
    "__ xorl(r8, 65536);",
    "__ xorl(r8, 1048576);",
    "__ xorl(r8, 16777216);",
    "__ xorl(r8, 268435456);",
    "__ xorl(r9, 1);",
    "__ xorl(r9, 16);",
    "__ xorl(r9, 256);",
    "__ xorl(r9, 4096);",
    "__ xorl(r9, 65536);",
    "__ xorl(r9, 1048576);",
    "__ xorl(r9, 16777216);",
    "__ xorl(r9, 268435456);",
    "__ xorl(r10, 1);",
    "__ xorl(r10, 16);",
    "__ xorl(r10, 256);",
    "__ xorl(r10, 4096);",
    "__ xorl(r10, 65536);",
    "__ xorl(r10, 1048576);",
    "__ xorl(r10, 16777216);",
    "__ xorl(r10, 268435456);",
    "__ xorl(r11, 1);",
    "__ xorl(r11, 16);",
    "__ xorl(r11, 256);",
    "__ xorl(r11, 4096);",
    "__ xorl(r11, 65536);",
    "__ xorl(r11, 1048576);",
    "__ xorl(r11, 16777216);",
    "__ xorl(r11, 268435456);",
    "__ xorl(r12, 1);",
    "__ xorl(r12, 16);",
    "__ xorl(r12, 256);",
    "__ xorl(r12, 4096);",
    "__ xorl(r12, 65536);",
    "__ xorl(r12, 1048576);",
    "__ xorl(r12, 16777216);",
    "__ xorl(r12, 268435456);",
    "__ xorl(r13, 1);",
    "__ xorl(r13, 16);",
    "__ xorl(r13, 256);",
    "__ xorl(r13, 4096);",
    "__ xorl(r13, 65536);",
    "__ xorl(r13, 1048576);",
    "__ xorl(r13, 16777216);",
    "__ xorl(r13, 268435456);",
    "__ xorl(r14, 1);",
    "__ xorl(r14, 16);",
    "__ xorl(r14, 256);",
    "__ xorl(r14, 4096);",
    "__ xorl(r14, 65536);",
    "__ xorl(r14, 1048576);",
    "__ xorl(r14, 16777216);",
    "__ xorl(r14, 268435456);",
    "__ xorl(r15, 1);",
    "__ xorl(r15, 16);",
    "__ xorl(r15, 256);",
    "__ xorl(r15, 4096);",
    "__ xorl(r15, 65536);",
    "__ xorl(r15, 1048576);",
    "__ xorl(r15, 16777216);",
    "__ xorl(r15, 268435456);",
    "__ xorl(r16, 1);",
    "__ xorl(r16, 16);",
    "__ xorl(r16, 256);",
    "__ xorl(r16, 4096);",
    "__ xorl(r16, 65536);",
    "__ xorl(r16, 1048576);",
    "__ xorl(r16, 16777216);",
    "__ xorl(r16, 268435456);",
    "__ xorl(r17, 1);",
    "__ xorl(r17, 16);",
    "__ xorl(r17, 256);",
    "__ xorl(r17, 4096);",
    "__ xorl(r17, 65536);",
    "__ xorl(r17, 1048576);",
    "__ xorl(r17, 16777216);",
    "__ xorl(r17, 268435456);",
    "__ xorl(r18, 1);",
    "__ xorl(r18, 16);",
    "__ xorl(r18, 256);",
    "__ xorl(r18, 4096);",
    "__ xorl(r18, 65536);",
    "__ xorl(r18, 1048576);",
    "__ xorl(r18, 16777216);",
    "__ xorl(r18, 268435456);",
    "__ xorl(r19, 1);",
    "__ xorl(r19, 16);",
    "__ xorl(r19, 256);",
    "__ xorl(r19, 4096);",
    "__ xorl(r19, 65536);",
    "__ xorl(r19, 1048576);",
    "__ xorl(r19, 16777216);",
    "__ xorl(r19, 268435456);",
    "__ xorl(r20, 1);",
    "__ xorl(r20, 16);",
    "__ xorl(r20, 256);",
    "__ xorl(r20, 4096);",
    "__ xorl(r20, 65536);",
    "__ xorl(r20, 1048576);",
    "__ xorl(r20, 16777216);",
    "__ xorl(r20, 268435456);",
    "__ xorl(r21, 1);",
    "__ xorl(r21, 16);",
    "__ xorl(r21, 256);",
    "__ xorl(r21, 4096);",
    "__ xorl(r21, 65536);",
    "__ xorl(r21, 1048576);",
    "__ xorl(r21, 16777216);",
    "__ xorl(r21, 268435456);",
    "__ xorl(r22, 1);",
    "__ xorl(r22, 16);",
    "__ xorl(r22, 256);",
    "__ xorl(r22, 4096);",
    "__ xorl(r22, 65536);",
    "__ xorl(r22, 1048576);",
    "__ xorl(r22, 16777216);",
    "__ xorl(r22, 268435456);",
    "__ xorl(r23, 1);",
    "__ xorl(r23, 16);",
    "__ xorl(r23, 256);",
    "__ xorl(r23, 4096);",
    "__ xorl(r23, 65536);",
    "__ xorl(r23, 1048576);",
    "__ xorl(r23, 16777216);",
    "__ xorl(r23, 268435456);",
    "__ xorl(r24, 1);",
    "__ xorl(r24, 16);",
    "__ xorl(r24, 256);",
    "__ xorl(r24, 4096);",
    "__ xorl(r24, 65536);",
    "__ xorl(r24, 1048576);",
    "__ xorl(r24, 16777216);",
    "__ xorl(r24, 268435456);",
    "__ xorl(r25, 1);",
    "__ xorl(r25, 16);",
    "__ xorl(r25, 256);",
    "__ xorl(r25, 4096);",
    "__ xorl(r25, 65536);",
    "__ xorl(r25, 1048576);",
    "__ xorl(r25, 16777216);",
    "__ xorl(r25, 268435456);",
    "__ xorl(r26, 1);",
    "__ xorl(r26, 16);",
    "__ xorl(r26, 256);",
    "__ xorl(r26, 4096);",
    "__ xorl(r26, 65536);",
    "__ xorl(r26, 1048576);",
    "__ xorl(r26, 16777216);",
    "__ xorl(r26, 268435456);",
    "__ xorl(r27, 1);",
    "__ xorl(r27, 16);",
    "__ xorl(r27, 256);",
    "__ xorl(r27, 4096);",
    "__ xorl(r27, 65536);",
    "__ xorl(r27, 1048576);",
    "__ xorl(r27, 16777216);",
    "__ xorl(r27, 268435456);",
    "__ xorl(r28, 1);",
    "__ xorl(r28, 16);",
    "__ xorl(r28, 256);",
    "__ xorl(r28, 4096);",
    "__ xorl(r28, 65536);",
    "__ xorl(r28, 1048576);",
    "__ xorl(r28, 16777216);",
    "__ xorl(r28, 268435456);",
    "__ xorl(r29, 1);",
    "__ xorl(r29, 16);",
    "__ xorl(r29, 256);",
    "__ xorl(r29, 4096);",
    "__ xorl(r29, 65536);",
    "__ xorl(r29, 1048576);",
    "__ xorl(r29, 16777216);",
    "__ xorl(r29, 268435456);",
    "__ xorl(r30, 1);",
    "__ xorl(r30, 16);",
    "__ xorl(r30, 256);",
    "__ xorl(r30, 4096);",
    "__ xorl(r30, 65536);",
    "__ xorl(r30, 1048576);",
    "__ xorl(r30, 16777216);",
    "__ xorl(r30, 268435456);",
    "__ xorl(r31, 1);",
    "__ xorl(r31, 16);",
    "__ xorl(r31, 256);",
    "__ xorl(r31, 4096);",
    "__ xorl(r31, 65536);",
    "__ xorl(r31, 1048576);",
    "__ xorl(r31, 16777216);",
    "__ xorl(r31, 268435456);",
#endif // _LP64
    "__ cmovl (Assembler::Condition::overflow, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::overflow, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::overflow, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::overflow, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::overflow, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::overflow, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::overflow, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::overflow, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::overflow, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::overflow, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::overflow, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::overflow, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::overflow, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::overflow, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::overflow, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::overflow, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::overflow, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::overflow, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::overflow, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::overflow, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::overflow, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::overflow, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::overflow, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::overflow, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::overflow, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::overflow, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::overflow, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::noOverflow, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::noOverflow, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::noOverflow, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::noOverflow, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::noOverflow, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::noOverflow, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::noOverflow, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::noOverflow, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::noOverflow, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::noOverflow, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::noOverflow, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::noOverflow, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::noOverflow, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::noOverflow, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::noOverflow, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::noOverflow, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::noOverflow, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::noOverflow, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::noOverflow, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::noOverflow, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::noOverflow, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::noOverflow, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::noOverflow, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::noOverflow, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::noOverflow, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::noOverflow, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::noOverflow, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::below, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::below, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::below, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::below, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::below, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::below, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::below, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::below, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::below, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::below, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::below, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::below, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::below, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::below, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::below, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::below, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::below, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::below, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::below, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::below, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::below, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::below, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::below, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::below, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::below, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::below, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::below, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::aboveEqual, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::aboveEqual, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::aboveEqual, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::aboveEqual, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::aboveEqual, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::aboveEqual, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::aboveEqual, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::aboveEqual, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::aboveEqual, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::aboveEqual, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::aboveEqual, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::aboveEqual, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::aboveEqual, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::aboveEqual, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::aboveEqual, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::aboveEqual, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::aboveEqual, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::aboveEqual, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::aboveEqual, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::aboveEqual, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::aboveEqual, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::aboveEqual, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::aboveEqual, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::aboveEqual, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::aboveEqual, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::aboveEqual, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::aboveEqual, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::zero, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::zero, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::zero, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::zero, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::zero, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::zero, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::zero, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::zero, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::zero, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::zero, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::zero, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::zero, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::zero, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::zero, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::zero, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::zero, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::zero, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::zero, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::zero, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::zero, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::zero, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::zero, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::zero, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::zero, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::zero, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::zero, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::zero, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::notZero, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::notZero, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::notZero, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::notZero, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::notZero, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::notZero, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::notZero, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::notZero, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::notZero, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::notZero, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::notZero, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::notZero, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::notZero, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::notZero, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::notZero, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::notZero, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::notZero, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::notZero, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::notZero, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::notZero, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::notZero, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::notZero, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::notZero, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::notZero, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::notZero, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::notZero, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::notZero, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::belowEqual, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::belowEqual, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::belowEqual, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::belowEqual, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::belowEqual, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::belowEqual, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::belowEqual, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::belowEqual, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::belowEqual, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::belowEqual, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::belowEqual, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::belowEqual, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::belowEqual, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::belowEqual, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::belowEqual, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::belowEqual, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::belowEqual, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::belowEqual, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::belowEqual, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::belowEqual, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::belowEqual, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::belowEqual, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::belowEqual, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::belowEqual, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::belowEqual, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::belowEqual, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::belowEqual, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::above, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::above, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::above, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::above, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::above, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::above, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::above, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::above, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::above, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::above, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::above, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::above, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::above, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::above, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::above, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::above, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::above, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::above, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::above, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::above, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::above, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::above, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::above, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::above, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::above, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::above, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::above, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::negative, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::negative, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::negative, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::negative, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::negative, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::negative, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::negative, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::negative, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::negative, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::negative, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::negative, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::negative, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::negative, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::negative, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::negative, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::negative, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::negative, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::negative, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::negative, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::negative, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::negative, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::negative, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::negative, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::negative, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::negative, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::negative, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::negative, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::positive, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::positive, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::positive, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::positive, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::positive, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::positive, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::positive, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::positive, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::positive, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::positive, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::positive, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::positive, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::positive, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::positive, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::positive, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::positive, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::positive, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::positive, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::positive, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::positive, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::positive, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::positive, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::positive, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::positive, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::positive, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::positive, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::positive, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::parity, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::parity, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::parity, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::parity, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::parity, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::parity, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::parity, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::parity, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::parity, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::parity, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::parity, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::parity, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::parity, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::parity, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::parity, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::parity, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::parity, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::parity, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::parity, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::parity, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::parity, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::parity, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::parity, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::parity, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::parity, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::parity, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::parity, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::noParity, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::noParity, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::noParity, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::noParity, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::noParity, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::noParity, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::noParity, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::noParity, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::noParity, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::noParity, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::noParity, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::noParity, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::noParity, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::noParity, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::noParity, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::noParity, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::noParity, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::noParity, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::noParity, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::noParity, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::noParity, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::noParity, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::noParity, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::noParity, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::noParity, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::noParity, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::noParity, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::less, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::less, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::less, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::less, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::less, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::less, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::less, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::less, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::less, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::less, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::less, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::less, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::less, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::less, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::less, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::less, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::less, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::less, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::less, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::less, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::less, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::less, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::less, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::less, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::less, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::less, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::less, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::greaterEqual, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::greaterEqual, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::greaterEqual, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::greaterEqual, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::greaterEqual, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::greaterEqual, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::greaterEqual, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::greaterEqual, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::greaterEqual, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::greaterEqual, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::greaterEqual, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::greaterEqual, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::greaterEqual, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::greaterEqual, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::greaterEqual, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::greaterEqual, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::greaterEqual, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::greaterEqual, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::greaterEqual, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::greaterEqual, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::greaterEqual, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::greaterEqual, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::greaterEqual, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::greaterEqual, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::greaterEqual, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::greaterEqual, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::greaterEqual, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::lessEqual, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::lessEqual, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::lessEqual, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::lessEqual, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::lessEqual, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::lessEqual, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::lessEqual, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::lessEqual, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::lessEqual, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::lessEqual, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::lessEqual, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::lessEqual, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::lessEqual, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::lessEqual, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::lessEqual, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::lessEqual, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::lessEqual, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::lessEqual, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::lessEqual, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::lessEqual, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::lessEqual, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::lessEqual, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::lessEqual, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::lessEqual, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::lessEqual, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::lessEqual, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::lessEqual, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ cmovl (Assembler::Condition::greater, rcx, Address(rdx, rbx));",
#ifdef _LP64
    "__ cmovl (Assembler::Condition::greater, rdx, Address(rbx, r8));",
    "__ cmovl (Assembler::Condition::greater, rbx, Address(r8, r9));",
    "__ cmovl (Assembler::Condition::greater, r8, Address(r9, r10));",
    "__ cmovl (Assembler::Condition::greater, r9, Address(r10, r11));",
    "__ cmovl (Assembler::Condition::greater, r10, Address(r11, r12));",
    "__ cmovl (Assembler::Condition::greater, r11, Address(r12, r13));",
    "__ cmovl (Assembler::Condition::greater, r12, Address(r13, r14));",
    "__ cmovl (Assembler::Condition::greater, r13, Address(r14, r15));",
    "__ cmovl (Assembler::Condition::greater, r14, Address(r15, r16));",
    "__ cmovl (Assembler::Condition::greater, r15, Address(r16, r17));",
    "__ cmovl (Assembler::Condition::greater, r16, Address(r17, r18));",
    "__ cmovl (Assembler::Condition::greater, r17, Address(r18, r19));",
    "__ cmovl (Assembler::Condition::greater, r18, Address(r19, r20));",
    "__ cmovl (Assembler::Condition::greater, r19, Address(r20, r21));",
    "__ cmovl (Assembler::Condition::greater, r20, Address(r21, r22));",
    "__ cmovl (Assembler::Condition::greater, r21, Address(r22, r23));",
    "__ cmovl (Assembler::Condition::greater, r22, Address(r23, r24));",
    "__ cmovl (Assembler::Condition::greater, r23, Address(r24, r25));",
    "__ cmovl (Assembler::Condition::greater, r24, Address(r25, r26));",
    "__ cmovl (Assembler::Condition::greater, r25, Address(r26, r27));",
    "__ cmovl (Assembler::Condition::greater, r26, Address(r27, r28));",
    "__ cmovl (Assembler::Condition::greater, r27, Address(r28, r29));",
    "__ cmovl (Assembler::Condition::greater, r28, Address(r29, r30));",
    "__ cmovl (Assembler::Condition::greater, r29, Address(r30, r31));",
    "__ cmovl (Assembler::Condition::greater, r30, Address(r31, rcx));",
    "__ cmovl (Assembler::Condition::greater, r31, Address(rcx, rdx));",
#endif // _LP64
    "__ setb (Assembler::Condition::overflow, rcx);",
    "__ setb (Assembler::Condition::overflow, rdx);",
    "__ setb (Assembler::Condition::overflow, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::overflow, r8);",
    "__ setb (Assembler::Condition::overflow, r9);",
    "__ setb (Assembler::Condition::overflow, r10);",
    "__ setb (Assembler::Condition::overflow, r11);",
    "__ setb (Assembler::Condition::overflow, r12);",
    "__ setb (Assembler::Condition::overflow, r13);",
    "__ setb (Assembler::Condition::overflow, r14);",
    "__ setb (Assembler::Condition::overflow, r15);",
    "__ setb (Assembler::Condition::overflow, r16);",
    "__ setb (Assembler::Condition::overflow, r17);",
    "__ setb (Assembler::Condition::overflow, r18);",
    "__ setb (Assembler::Condition::overflow, r19);",
    "__ setb (Assembler::Condition::overflow, r20);",
    "__ setb (Assembler::Condition::overflow, r21);",
    "__ setb (Assembler::Condition::overflow, r22);",
    "__ setb (Assembler::Condition::overflow, r23);",
    "__ setb (Assembler::Condition::overflow, r24);",
    "__ setb (Assembler::Condition::overflow, r25);",
    "__ setb (Assembler::Condition::overflow, r26);",
    "__ setb (Assembler::Condition::overflow, r27);",
    "__ setb (Assembler::Condition::overflow, r28);",
    "__ setb (Assembler::Condition::overflow, r29);",
    "__ setb (Assembler::Condition::overflow, r30);",
    "__ setb (Assembler::Condition::overflow, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::noOverflow, rcx);",
    "__ setb (Assembler::Condition::noOverflow, rdx);",
    "__ setb (Assembler::Condition::noOverflow, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::noOverflow, r8);",
    "__ setb (Assembler::Condition::noOverflow, r9);",
    "__ setb (Assembler::Condition::noOverflow, r10);",
    "__ setb (Assembler::Condition::noOverflow, r11);",
    "__ setb (Assembler::Condition::noOverflow, r12);",
    "__ setb (Assembler::Condition::noOverflow, r13);",
    "__ setb (Assembler::Condition::noOverflow, r14);",
    "__ setb (Assembler::Condition::noOverflow, r15);",
    "__ setb (Assembler::Condition::noOverflow, r16);",
    "__ setb (Assembler::Condition::noOverflow, r17);",
    "__ setb (Assembler::Condition::noOverflow, r18);",
    "__ setb (Assembler::Condition::noOverflow, r19);",
    "__ setb (Assembler::Condition::noOverflow, r20);",
    "__ setb (Assembler::Condition::noOverflow, r21);",
    "__ setb (Assembler::Condition::noOverflow, r22);",
    "__ setb (Assembler::Condition::noOverflow, r23);",
    "__ setb (Assembler::Condition::noOverflow, r24);",
    "__ setb (Assembler::Condition::noOverflow, r25);",
    "__ setb (Assembler::Condition::noOverflow, r26);",
    "__ setb (Assembler::Condition::noOverflow, r27);",
    "__ setb (Assembler::Condition::noOverflow, r28);",
    "__ setb (Assembler::Condition::noOverflow, r29);",
    "__ setb (Assembler::Condition::noOverflow, r30);",
    "__ setb (Assembler::Condition::noOverflow, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::below, rcx);",
    "__ setb (Assembler::Condition::below, rdx);",
    "__ setb (Assembler::Condition::below, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::below, r8);",
    "__ setb (Assembler::Condition::below, r9);",
    "__ setb (Assembler::Condition::below, r10);",
    "__ setb (Assembler::Condition::below, r11);",
    "__ setb (Assembler::Condition::below, r12);",
    "__ setb (Assembler::Condition::below, r13);",
    "__ setb (Assembler::Condition::below, r14);",
    "__ setb (Assembler::Condition::below, r15);",
    "__ setb (Assembler::Condition::below, r16);",
    "__ setb (Assembler::Condition::below, r17);",
    "__ setb (Assembler::Condition::below, r18);",
    "__ setb (Assembler::Condition::below, r19);",
    "__ setb (Assembler::Condition::below, r20);",
    "__ setb (Assembler::Condition::below, r21);",
    "__ setb (Assembler::Condition::below, r22);",
    "__ setb (Assembler::Condition::below, r23);",
    "__ setb (Assembler::Condition::below, r24);",
    "__ setb (Assembler::Condition::below, r25);",
    "__ setb (Assembler::Condition::below, r26);",
    "__ setb (Assembler::Condition::below, r27);",
    "__ setb (Assembler::Condition::below, r28);",
    "__ setb (Assembler::Condition::below, r29);",
    "__ setb (Assembler::Condition::below, r30);",
    "__ setb (Assembler::Condition::below, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::aboveEqual, rcx);",
    "__ setb (Assembler::Condition::aboveEqual, rdx);",
    "__ setb (Assembler::Condition::aboveEqual, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::aboveEqual, r8);",
    "__ setb (Assembler::Condition::aboveEqual, r9);",
    "__ setb (Assembler::Condition::aboveEqual, r10);",
    "__ setb (Assembler::Condition::aboveEqual, r11);",
    "__ setb (Assembler::Condition::aboveEqual, r12);",
    "__ setb (Assembler::Condition::aboveEqual, r13);",
    "__ setb (Assembler::Condition::aboveEqual, r14);",
    "__ setb (Assembler::Condition::aboveEqual, r15);",
    "__ setb (Assembler::Condition::aboveEqual, r16);",
    "__ setb (Assembler::Condition::aboveEqual, r17);",
    "__ setb (Assembler::Condition::aboveEqual, r18);",
    "__ setb (Assembler::Condition::aboveEqual, r19);",
    "__ setb (Assembler::Condition::aboveEqual, r20);",
    "__ setb (Assembler::Condition::aboveEqual, r21);",
    "__ setb (Assembler::Condition::aboveEqual, r22);",
    "__ setb (Assembler::Condition::aboveEqual, r23);",
    "__ setb (Assembler::Condition::aboveEqual, r24);",
    "__ setb (Assembler::Condition::aboveEqual, r25);",
    "__ setb (Assembler::Condition::aboveEqual, r26);",
    "__ setb (Assembler::Condition::aboveEqual, r27);",
    "__ setb (Assembler::Condition::aboveEqual, r28);",
    "__ setb (Assembler::Condition::aboveEqual, r29);",
    "__ setb (Assembler::Condition::aboveEqual, r30);",
    "__ setb (Assembler::Condition::aboveEqual, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::zero, rcx);",
    "__ setb (Assembler::Condition::zero, rdx);",
    "__ setb (Assembler::Condition::zero, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::zero, r8);",
    "__ setb (Assembler::Condition::zero, r9);",
    "__ setb (Assembler::Condition::zero, r10);",
    "__ setb (Assembler::Condition::zero, r11);",
    "__ setb (Assembler::Condition::zero, r12);",
    "__ setb (Assembler::Condition::zero, r13);",
    "__ setb (Assembler::Condition::zero, r14);",
    "__ setb (Assembler::Condition::zero, r15);",
    "__ setb (Assembler::Condition::zero, r16);",
    "__ setb (Assembler::Condition::zero, r17);",
    "__ setb (Assembler::Condition::zero, r18);",
    "__ setb (Assembler::Condition::zero, r19);",
    "__ setb (Assembler::Condition::zero, r20);",
    "__ setb (Assembler::Condition::zero, r21);",
    "__ setb (Assembler::Condition::zero, r22);",
    "__ setb (Assembler::Condition::zero, r23);",
    "__ setb (Assembler::Condition::zero, r24);",
    "__ setb (Assembler::Condition::zero, r25);",
    "__ setb (Assembler::Condition::zero, r26);",
    "__ setb (Assembler::Condition::zero, r27);",
    "__ setb (Assembler::Condition::zero, r28);",
    "__ setb (Assembler::Condition::zero, r29);",
    "__ setb (Assembler::Condition::zero, r30);",
    "__ setb (Assembler::Condition::zero, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::notZero, rcx);",
    "__ setb (Assembler::Condition::notZero, rdx);",
    "__ setb (Assembler::Condition::notZero, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::notZero, r8);",
    "__ setb (Assembler::Condition::notZero, r9);",
    "__ setb (Assembler::Condition::notZero, r10);",
    "__ setb (Assembler::Condition::notZero, r11);",
    "__ setb (Assembler::Condition::notZero, r12);",
    "__ setb (Assembler::Condition::notZero, r13);",
    "__ setb (Assembler::Condition::notZero, r14);",
    "__ setb (Assembler::Condition::notZero, r15);",
    "__ setb (Assembler::Condition::notZero, r16);",
    "__ setb (Assembler::Condition::notZero, r17);",
    "__ setb (Assembler::Condition::notZero, r18);",
    "__ setb (Assembler::Condition::notZero, r19);",
    "__ setb (Assembler::Condition::notZero, r20);",
    "__ setb (Assembler::Condition::notZero, r21);",
    "__ setb (Assembler::Condition::notZero, r22);",
    "__ setb (Assembler::Condition::notZero, r23);",
    "__ setb (Assembler::Condition::notZero, r24);",
    "__ setb (Assembler::Condition::notZero, r25);",
    "__ setb (Assembler::Condition::notZero, r26);",
    "__ setb (Assembler::Condition::notZero, r27);",
    "__ setb (Assembler::Condition::notZero, r28);",
    "__ setb (Assembler::Condition::notZero, r29);",
    "__ setb (Assembler::Condition::notZero, r30);",
    "__ setb (Assembler::Condition::notZero, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::belowEqual, rcx);",
    "__ setb (Assembler::Condition::belowEqual, rdx);",
    "__ setb (Assembler::Condition::belowEqual, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::belowEqual, r8);",
    "__ setb (Assembler::Condition::belowEqual, r9);",
    "__ setb (Assembler::Condition::belowEqual, r10);",
    "__ setb (Assembler::Condition::belowEqual, r11);",
    "__ setb (Assembler::Condition::belowEqual, r12);",
    "__ setb (Assembler::Condition::belowEqual, r13);",
    "__ setb (Assembler::Condition::belowEqual, r14);",
    "__ setb (Assembler::Condition::belowEqual, r15);",
    "__ setb (Assembler::Condition::belowEqual, r16);",
    "__ setb (Assembler::Condition::belowEqual, r17);",
    "__ setb (Assembler::Condition::belowEqual, r18);",
    "__ setb (Assembler::Condition::belowEqual, r19);",
    "__ setb (Assembler::Condition::belowEqual, r20);",
    "__ setb (Assembler::Condition::belowEqual, r21);",
    "__ setb (Assembler::Condition::belowEqual, r22);",
    "__ setb (Assembler::Condition::belowEqual, r23);",
    "__ setb (Assembler::Condition::belowEqual, r24);",
    "__ setb (Assembler::Condition::belowEqual, r25);",
    "__ setb (Assembler::Condition::belowEqual, r26);",
    "__ setb (Assembler::Condition::belowEqual, r27);",
    "__ setb (Assembler::Condition::belowEqual, r28);",
    "__ setb (Assembler::Condition::belowEqual, r29);",
    "__ setb (Assembler::Condition::belowEqual, r30);",
    "__ setb (Assembler::Condition::belowEqual, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::above, rcx);",
    "__ setb (Assembler::Condition::above, rdx);",
    "__ setb (Assembler::Condition::above, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::above, r8);",
    "__ setb (Assembler::Condition::above, r9);",
    "__ setb (Assembler::Condition::above, r10);",
    "__ setb (Assembler::Condition::above, r11);",
    "__ setb (Assembler::Condition::above, r12);",
    "__ setb (Assembler::Condition::above, r13);",
    "__ setb (Assembler::Condition::above, r14);",
    "__ setb (Assembler::Condition::above, r15);",
    "__ setb (Assembler::Condition::above, r16);",
    "__ setb (Assembler::Condition::above, r17);",
    "__ setb (Assembler::Condition::above, r18);",
    "__ setb (Assembler::Condition::above, r19);",
    "__ setb (Assembler::Condition::above, r20);",
    "__ setb (Assembler::Condition::above, r21);",
    "__ setb (Assembler::Condition::above, r22);",
    "__ setb (Assembler::Condition::above, r23);",
    "__ setb (Assembler::Condition::above, r24);",
    "__ setb (Assembler::Condition::above, r25);",
    "__ setb (Assembler::Condition::above, r26);",
    "__ setb (Assembler::Condition::above, r27);",
    "__ setb (Assembler::Condition::above, r28);",
    "__ setb (Assembler::Condition::above, r29);",
    "__ setb (Assembler::Condition::above, r30);",
    "__ setb (Assembler::Condition::above, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::negative, rcx);",
    "__ setb (Assembler::Condition::negative, rdx);",
    "__ setb (Assembler::Condition::negative, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::negative, r8);",
    "__ setb (Assembler::Condition::negative, r9);",
    "__ setb (Assembler::Condition::negative, r10);",
    "__ setb (Assembler::Condition::negative, r11);",
    "__ setb (Assembler::Condition::negative, r12);",
    "__ setb (Assembler::Condition::negative, r13);",
    "__ setb (Assembler::Condition::negative, r14);",
    "__ setb (Assembler::Condition::negative, r15);",
    "__ setb (Assembler::Condition::negative, r16);",
    "__ setb (Assembler::Condition::negative, r17);",
    "__ setb (Assembler::Condition::negative, r18);",
    "__ setb (Assembler::Condition::negative, r19);",
    "__ setb (Assembler::Condition::negative, r20);",
    "__ setb (Assembler::Condition::negative, r21);",
    "__ setb (Assembler::Condition::negative, r22);",
    "__ setb (Assembler::Condition::negative, r23);",
    "__ setb (Assembler::Condition::negative, r24);",
    "__ setb (Assembler::Condition::negative, r25);",
    "__ setb (Assembler::Condition::negative, r26);",
    "__ setb (Assembler::Condition::negative, r27);",
    "__ setb (Assembler::Condition::negative, r28);",
    "__ setb (Assembler::Condition::negative, r29);",
    "__ setb (Assembler::Condition::negative, r30);",
    "__ setb (Assembler::Condition::negative, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::positive, rcx);",
    "__ setb (Assembler::Condition::positive, rdx);",
    "__ setb (Assembler::Condition::positive, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::positive, r8);",
    "__ setb (Assembler::Condition::positive, r9);",
    "__ setb (Assembler::Condition::positive, r10);",
    "__ setb (Assembler::Condition::positive, r11);",
    "__ setb (Assembler::Condition::positive, r12);",
    "__ setb (Assembler::Condition::positive, r13);",
    "__ setb (Assembler::Condition::positive, r14);",
    "__ setb (Assembler::Condition::positive, r15);",
    "__ setb (Assembler::Condition::positive, r16);",
    "__ setb (Assembler::Condition::positive, r17);",
    "__ setb (Assembler::Condition::positive, r18);",
    "__ setb (Assembler::Condition::positive, r19);",
    "__ setb (Assembler::Condition::positive, r20);",
    "__ setb (Assembler::Condition::positive, r21);",
    "__ setb (Assembler::Condition::positive, r22);",
    "__ setb (Assembler::Condition::positive, r23);",
    "__ setb (Assembler::Condition::positive, r24);",
    "__ setb (Assembler::Condition::positive, r25);",
    "__ setb (Assembler::Condition::positive, r26);",
    "__ setb (Assembler::Condition::positive, r27);",
    "__ setb (Assembler::Condition::positive, r28);",
    "__ setb (Assembler::Condition::positive, r29);",
    "__ setb (Assembler::Condition::positive, r30);",
    "__ setb (Assembler::Condition::positive, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::parity, rcx);",
    "__ setb (Assembler::Condition::parity, rdx);",
    "__ setb (Assembler::Condition::parity, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::parity, r8);",
    "__ setb (Assembler::Condition::parity, r9);",
    "__ setb (Assembler::Condition::parity, r10);",
    "__ setb (Assembler::Condition::parity, r11);",
    "__ setb (Assembler::Condition::parity, r12);",
    "__ setb (Assembler::Condition::parity, r13);",
    "__ setb (Assembler::Condition::parity, r14);",
    "__ setb (Assembler::Condition::parity, r15);",
    "__ setb (Assembler::Condition::parity, r16);",
    "__ setb (Assembler::Condition::parity, r17);",
    "__ setb (Assembler::Condition::parity, r18);",
    "__ setb (Assembler::Condition::parity, r19);",
    "__ setb (Assembler::Condition::parity, r20);",
    "__ setb (Assembler::Condition::parity, r21);",
    "__ setb (Assembler::Condition::parity, r22);",
    "__ setb (Assembler::Condition::parity, r23);",
    "__ setb (Assembler::Condition::parity, r24);",
    "__ setb (Assembler::Condition::parity, r25);",
    "__ setb (Assembler::Condition::parity, r26);",
    "__ setb (Assembler::Condition::parity, r27);",
    "__ setb (Assembler::Condition::parity, r28);",
    "__ setb (Assembler::Condition::parity, r29);",
    "__ setb (Assembler::Condition::parity, r30);",
    "__ setb (Assembler::Condition::parity, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::noParity, rcx);",
    "__ setb (Assembler::Condition::noParity, rdx);",
    "__ setb (Assembler::Condition::noParity, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::noParity, r8);",
    "__ setb (Assembler::Condition::noParity, r9);",
    "__ setb (Assembler::Condition::noParity, r10);",
    "__ setb (Assembler::Condition::noParity, r11);",
    "__ setb (Assembler::Condition::noParity, r12);",
    "__ setb (Assembler::Condition::noParity, r13);",
    "__ setb (Assembler::Condition::noParity, r14);",
    "__ setb (Assembler::Condition::noParity, r15);",
    "__ setb (Assembler::Condition::noParity, r16);",
    "__ setb (Assembler::Condition::noParity, r17);",
    "__ setb (Assembler::Condition::noParity, r18);",
    "__ setb (Assembler::Condition::noParity, r19);",
    "__ setb (Assembler::Condition::noParity, r20);",
    "__ setb (Assembler::Condition::noParity, r21);",
    "__ setb (Assembler::Condition::noParity, r22);",
    "__ setb (Assembler::Condition::noParity, r23);",
    "__ setb (Assembler::Condition::noParity, r24);",
    "__ setb (Assembler::Condition::noParity, r25);",
    "__ setb (Assembler::Condition::noParity, r26);",
    "__ setb (Assembler::Condition::noParity, r27);",
    "__ setb (Assembler::Condition::noParity, r28);",
    "__ setb (Assembler::Condition::noParity, r29);",
    "__ setb (Assembler::Condition::noParity, r30);",
    "__ setb (Assembler::Condition::noParity, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::less, rcx);",
    "__ setb (Assembler::Condition::less, rdx);",
    "__ setb (Assembler::Condition::less, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::less, r8);",
    "__ setb (Assembler::Condition::less, r9);",
    "__ setb (Assembler::Condition::less, r10);",
    "__ setb (Assembler::Condition::less, r11);",
    "__ setb (Assembler::Condition::less, r12);",
    "__ setb (Assembler::Condition::less, r13);",
    "__ setb (Assembler::Condition::less, r14);",
    "__ setb (Assembler::Condition::less, r15);",
    "__ setb (Assembler::Condition::less, r16);",
    "__ setb (Assembler::Condition::less, r17);",
    "__ setb (Assembler::Condition::less, r18);",
    "__ setb (Assembler::Condition::less, r19);",
    "__ setb (Assembler::Condition::less, r20);",
    "__ setb (Assembler::Condition::less, r21);",
    "__ setb (Assembler::Condition::less, r22);",
    "__ setb (Assembler::Condition::less, r23);",
    "__ setb (Assembler::Condition::less, r24);",
    "__ setb (Assembler::Condition::less, r25);",
    "__ setb (Assembler::Condition::less, r26);",
    "__ setb (Assembler::Condition::less, r27);",
    "__ setb (Assembler::Condition::less, r28);",
    "__ setb (Assembler::Condition::less, r29);",
    "__ setb (Assembler::Condition::less, r30);",
    "__ setb (Assembler::Condition::less, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::greaterEqual, rcx);",
    "__ setb (Assembler::Condition::greaterEqual, rdx);",
    "__ setb (Assembler::Condition::greaterEqual, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::greaterEqual, r8);",
    "__ setb (Assembler::Condition::greaterEqual, r9);",
    "__ setb (Assembler::Condition::greaterEqual, r10);",
    "__ setb (Assembler::Condition::greaterEqual, r11);",
    "__ setb (Assembler::Condition::greaterEqual, r12);",
    "__ setb (Assembler::Condition::greaterEqual, r13);",
    "__ setb (Assembler::Condition::greaterEqual, r14);",
    "__ setb (Assembler::Condition::greaterEqual, r15);",
    "__ setb (Assembler::Condition::greaterEqual, r16);",
    "__ setb (Assembler::Condition::greaterEqual, r17);",
    "__ setb (Assembler::Condition::greaterEqual, r18);",
    "__ setb (Assembler::Condition::greaterEqual, r19);",
    "__ setb (Assembler::Condition::greaterEqual, r20);",
    "__ setb (Assembler::Condition::greaterEqual, r21);",
    "__ setb (Assembler::Condition::greaterEqual, r22);",
    "__ setb (Assembler::Condition::greaterEqual, r23);",
    "__ setb (Assembler::Condition::greaterEqual, r24);",
    "__ setb (Assembler::Condition::greaterEqual, r25);",
    "__ setb (Assembler::Condition::greaterEqual, r26);",
    "__ setb (Assembler::Condition::greaterEqual, r27);",
    "__ setb (Assembler::Condition::greaterEqual, r28);",
    "__ setb (Assembler::Condition::greaterEqual, r29);",
    "__ setb (Assembler::Condition::greaterEqual, r30);",
    "__ setb (Assembler::Condition::greaterEqual, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::lessEqual, rcx);",
    "__ setb (Assembler::Condition::lessEqual, rdx);",
    "__ setb (Assembler::Condition::lessEqual, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::lessEqual, r8);",
    "__ setb (Assembler::Condition::lessEqual, r9);",
    "__ setb (Assembler::Condition::lessEqual, r10);",
    "__ setb (Assembler::Condition::lessEqual, r11);",
    "__ setb (Assembler::Condition::lessEqual, r12);",
    "__ setb (Assembler::Condition::lessEqual, r13);",
    "__ setb (Assembler::Condition::lessEqual, r14);",
    "__ setb (Assembler::Condition::lessEqual, r15);",
    "__ setb (Assembler::Condition::lessEqual, r16);",
    "__ setb (Assembler::Condition::lessEqual, r17);",
    "__ setb (Assembler::Condition::lessEqual, r18);",
    "__ setb (Assembler::Condition::lessEqual, r19);",
    "__ setb (Assembler::Condition::lessEqual, r20);",
    "__ setb (Assembler::Condition::lessEqual, r21);",
    "__ setb (Assembler::Condition::lessEqual, r22);",
    "__ setb (Assembler::Condition::lessEqual, r23);",
    "__ setb (Assembler::Condition::lessEqual, r24);",
    "__ setb (Assembler::Condition::lessEqual, r25);",
    "__ setb (Assembler::Condition::lessEqual, r26);",
    "__ setb (Assembler::Condition::lessEqual, r27);",
    "__ setb (Assembler::Condition::lessEqual, r28);",
    "__ setb (Assembler::Condition::lessEqual, r29);",
    "__ setb (Assembler::Condition::lessEqual, r30);",
    "__ setb (Assembler::Condition::lessEqual, r31);",
#endif // _LP64
    "__ setb (Assembler::Condition::greater, rcx);",
    "__ setb (Assembler::Condition::greater, rdx);",
    "__ setb (Assembler::Condition::greater, rbx);",
#ifdef _LP64
    "__ setb (Assembler::Condition::greater, r8);",
    "__ setb (Assembler::Condition::greater, r9);",
    "__ setb (Assembler::Condition::greater, r10);",
    "__ setb (Assembler::Condition::greater, r11);",
    "__ setb (Assembler::Condition::greater, r12);",
    "__ setb (Assembler::Condition::greater, r13);",
    "__ setb (Assembler::Condition::greater, r14);",
    "__ setb (Assembler::Condition::greater, r15);",
    "__ setb (Assembler::Condition::greater, r16);",
    "__ setb (Assembler::Condition::greater, r17);",
    "__ setb (Assembler::Condition::greater, r18);",
    "__ setb (Assembler::Condition::greater, r19);",
    "__ setb (Assembler::Condition::greater, r20);",
    "__ setb (Assembler::Condition::greater, r21);",
    "__ setb (Assembler::Condition::greater, r22);",
    "__ setb (Assembler::Condition::greater, r23);",
    "__ setb (Assembler::Condition::greater, r24);",
    "__ setb (Assembler::Condition::greater, r25);",
    "__ setb (Assembler::Condition::greater, r26);",
    "__ setb (Assembler::Condition::greater, r27);",
    "__ setb (Assembler::Condition::greater, r28);",
    "__ setb (Assembler::Condition::greater, r29);",
    "__ setb (Assembler::Condition::greater, r30);",
    "__ setb (Assembler::Condition::greater, r31);",
#endif // _LP64
    "__ divl(rcx);",
    "__ divl(rdx);",
    "__ divl(rbx);",
#ifdef _LP64
    "__ divl(r8);",
    "__ divl(r9);",
    "__ divl(r10);",
    "__ divl(r11);",
    "__ divl(r12);",
    "__ divl(r13);",
    "__ divl(r14);",
    "__ divl(r15);",
    "__ divl(r16);",
    "__ divl(r17);",
    "__ divl(r18);",
    "__ divl(r19);",
    "__ divl(r20);",
    "__ divl(r21);",
    "__ divl(r22);",
    "__ divl(r23);",
    "__ divl(r24);",
    "__ divl(r25);",
    "__ divl(r26);",
    "__ divl(r27);",
    "__ divl(r28);",
    "__ divl(r29);",
    "__ divl(r30);",
    "__ divl(r31);",
#endif // _LP64
    "__ idivl(rcx);",
    "__ idivl(rdx);",
    "__ idivl(rbx);",
#ifdef _LP64
    "__ idivl(r8);",
    "__ idivl(r9);",
    "__ idivl(r10);",
    "__ idivl(r11);",
    "__ idivl(r12);",
    "__ idivl(r13);",
    "__ idivl(r14);",
    "__ idivl(r15);",
    "__ idivl(r16);",
    "__ idivl(r17);",
    "__ idivl(r18);",
    "__ idivl(r19);",
    "__ idivl(r20);",
    "__ idivl(r21);",
    "__ idivl(r22);",
    "__ idivl(r23);",
    "__ idivl(r24);",
    "__ idivl(r25);",
    "__ idivl(r26);",
    "__ idivl(r27);",
    "__ idivl(r28);",
    "__ idivl(r29);",
    "__ idivl(r30);",
    "__ idivl(r31);",
#endif // _LP64
    "__ imull(rcx);",
    "__ imull(rdx);",
    "__ imull(rbx);",
#ifdef _LP64
    "__ imull(r8);",
    "__ imull(r9);",
    "__ imull(r10);",
    "__ imull(r11);",
    "__ imull(r12);",
    "__ imull(r13);",
    "__ imull(r14);",
    "__ imull(r15);",
    "__ imull(r16);",
    "__ imull(r17);",
    "__ imull(r18);",
    "__ imull(r19);",
    "__ imull(r20);",
    "__ imull(r21);",
    "__ imull(r22);",
    "__ imull(r23);",
    "__ imull(r24);",
    "__ imull(r25);",
    "__ imull(r26);",
    "__ imull(r27);",
    "__ imull(r28);",
    "__ imull(r29);",
    "__ imull(r30);",
    "__ imull(r31);",
#endif // _LP64
    "__ mull(rcx);",
    "__ mull(rdx);",
    "__ mull(rbx);",
#ifdef _LP64
    "__ mull(r8);",
    "__ mull(r9);",
    "__ mull(r10);",
    "__ mull(r11);",
    "__ mull(r12);",
    "__ mull(r13);",
    "__ mull(r14);",
    "__ mull(r15);",
    "__ mull(r16);",
    "__ mull(r17);",
    "__ mull(r18);",
    "__ mull(r19);",
    "__ mull(r20);",
    "__ mull(r21);",
    "__ mull(r22);",
    "__ mull(r23);",
    "__ mull(r24);",
    "__ mull(r25);",
    "__ mull(r26);",
    "__ mull(r27);",
    "__ mull(r28);",
    "__ mull(r29);",
    "__ mull(r30);",
    "__ mull(r31);",
#endif // _LP64
    "__ negl(rcx);",
    "__ negl(rdx);",
    "__ negl(rbx);",
#ifdef _LP64
    "__ negl(r8);",
    "__ negl(r9);",
    "__ negl(r10);",
    "__ negl(r11);",
    "__ negl(r12);",
    "__ negl(r13);",
    "__ negl(r14);",
    "__ negl(r15);",
    "__ negl(r16);",
    "__ negl(r17);",
    "__ negl(r18);",
    "__ negl(r19);",
    "__ negl(r20);",
    "__ negl(r21);",
    "__ negl(r22);",
    "__ negl(r23);",
    "__ negl(r24);",
    "__ negl(r25);",
    "__ negl(r26);",
    "__ negl(r27);",
    "__ negl(r28);",
    "__ negl(r29);",
    "__ negl(r30);",
    "__ negl(r31);",
#endif // _LP64
    "__ notl(rcx);",
    "__ notl(rdx);",
    "__ notl(rbx);",
#ifdef _LP64
    "__ notl(r8);",
    "__ notl(r9);",
    "__ notl(r10);",
    "__ notl(r11);",
    "__ notl(r12);",
    "__ notl(r13);",
    "__ notl(r14);",
    "__ notl(r15);",
    "__ notl(r16);",
    "__ notl(r17);",
    "__ notl(r18);",
    "__ notl(r19);",
    "__ notl(r20);",
    "__ notl(r21);",
    "__ notl(r22);",
    "__ notl(r23);",
    "__ notl(r24);",
    "__ notl(r25);",
    "__ notl(r26);",
    "__ notl(r27);",
    "__ notl(r28);",
    "__ notl(r29);",
    "__ notl(r30);",
    "__ notl(r31);",
#endif // _LP64
    "__ roll(rcx);",
    "__ roll(rdx);",
    "__ roll(rbx);",
#ifdef _LP64
    "__ roll(r8);",
    "__ roll(r9);",
    "__ roll(r10);",
    "__ roll(r11);",
    "__ roll(r12);",
    "__ roll(r13);",
    "__ roll(r14);",
    "__ roll(r15);",
    "__ roll(r16);",
    "__ roll(r17);",
    "__ roll(r18);",
    "__ roll(r19);",
    "__ roll(r20);",
    "__ roll(r21);",
    "__ roll(r22);",
    "__ roll(r23);",
    "__ roll(r24);",
    "__ roll(r25);",
    "__ roll(r26);",
    "__ roll(r27);",
    "__ roll(r28);",
    "__ roll(r29);",
    "__ roll(r30);",
    "__ roll(r31);",
#endif // _LP64
    "__ rorl(rcx);",
    "__ rorl(rdx);",
    "__ rorl(rbx);",
#ifdef _LP64
    "__ rorl(r8);",
    "__ rorl(r9);",
    "__ rorl(r10);",
    "__ rorl(r11);",
    "__ rorl(r12);",
    "__ rorl(r13);",
    "__ rorl(r14);",
    "__ rorl(r15);",
    "__ rorl(r16);",
    "__ rorl(r17);",
    "__ rorl(r18);",
    "__ rorl(r19);",
    "__ rorl(r20);",
    "__ rorl(r21);",
    "__ rorl(r22);",
    "__ rorl(r23);",
    "__ rorl(r24);",
    "__ rorl(r25);",
    "__ rorl(r26);",
    "__ rorl(r27);",
    "__ rorl(r28);",
    "__ rorl(r29);",
    "__ rorl(r30);",
    "__ rorl(r31);",
#endif // _LP64
    "__ sarl(rcx);",
    "__ sarl(rdx);",
    "__ sarl(rbx);",
#ifdef _LP64
    "__ sarl(r8);",
    "__ sarl(r9);",
    "__ sarl(r10);",
    "__ sarl(r11);",
    "__ sarl(r12);",
    "__ sarl(r13);",
    "__ sarl(r14);",
    "__ sarl(r15);",
    "__ sarl(r16);",
    "__ sarl(r17);",
    "__ sarl(r18);",
    "__ sarl(r19);",
    "__ sarl(r20);",
    "__ sarl(r21);",
    "__ sarl(r22);",
    "__ sarl(r23);",
    "__ sarl(r24);",
    "__ sarl(r25);",
    "__ sarl(r26);",
    "__ sarl(r27);",
    "__ sarl(r28);",
    "__ sarl(r29);",
    "__ sarl(r30);",
    "__ sarl(r31);",
#endif // _LP64
    "__ shll(rcx);",
    "__ shll(rdx);",
    "__ shll(rbx);",
#ifdef _LP64
    "__ shll(r8);",
    "__ shll(r9);",
    "__ shll(r10);",
    "__ shll(r11);",
    "__ shll(r12);",
    "__ shll(r13);",
    "__ shll(r14);",
    "__ shll(r15);",
    "__ shll(r16);",
    "__ shll(r17);",
    "__ shll(r18);",
    "__ shll(r19);",
    "__ shll(r20);",
    "__ shll(r21);",
    "__ shll(r22);",
    "__ shll(r23);",
    "__ shll(r24);",
    "__ shll(r25);",
    "__ shll(r26);",
    "__ shll(r27);",
    "__ shll(r28);",
    "__ shll(r29);",
    "__ shll(r30);",
    "__ shll(r31);",
#endif // _LP64
    "__ shrl(rcx);",
    "__ shrl(rdx);",
    "__ shrl(rbx);",
#ifdef _LP64
    "__ shrl(r8);",
    "__ shrl(r9);",
    "__ shrl(r10);",
    "__ shrl(r11);",
    "__ shrl(r12);",
    "__ shrl(r13);",
    "__ shrl(r14);",
    "__ shrl(r15);",
    "__ shrl(r16);",
    "__ shrl(r17);",
    "__ shrl(r18);",
    "__ shrl(r19);",
    "__ shrl(r20);",
    "__ shrl(r21);",
    "__ shrl(r22);",
    "__ shrl(r23);",
    "__ shrl(r24);",
    "__ shrl(r25);",
    "__ shrl(r26);",
    "__ shrl(r27);",
    "__ shrl(r28);",
    "__ shrl(r29);",
    "__ shrl(r30);",
    "__ shrl(r31);",
#endif // _LP64
    "__ incrementl(rcx);",
    "__ incrementl(rdx);",
    "__ incrementl(rbx);",
#ifdef _LP64
    "__ incrementl(r8);",
    "__ incrementl(r9);",
    "__ incrementl(r10);",
    "__ incrementl(r11);",
    "__ incrementl(r12);",
    "__ incrementl(r13);",
    "__ incrementl(r14);",
    "__ incrementl(r15);",
    "__ incrementl(r16);",
    "__ incrementl(r17);",
    "__ incrementl(r18);",
    "__ incrementl(r19);",
    "__ incrementl(r20);",
    "__ incrementl(r21);",
    "__ incrementl(r22);",
    "__ incrementl(r23);",
    "__ incrementl(r24);",
    "__ incrementl(r25);",
    "__ incrementl(r26);",
    "__ incrementl(r27);",
    "__ incrementl(r28);",
    "__ incrementl(r29);",
    "__ incrementl(r30);",
    "__ incrementl(r31);",
#endif // _LP64
    "__ decrementl(rcx);",
    "__ decrementl(rdx);",
    "__ decrementl(rbx);",
#ifdef _LP64
    "__ decrementl(r8);",
    "__ decrementl(r9);",
    "__ decrementl(r10);",
    "__ decrementl(r11);",
    "__ decrementl(r12);",
    "__ decrementl(r13);",
    "__ decrementl(r14);",
    "__ decrementl(r15);",
    "__ decrementl(r16);",
    "__ decrementl(r17);",
    "__ decrementl(r18);",
    "__ decrementl(r19);",
    "__ decrementl(r20);",
    "__ decrementl(r21);",
    "__ decrementl(r22);",
    "__ decrementl(r23);",
    "__ decrementl(r24);",
    "__ decrementl(r25);",
    "__ decrementl(r26);",
    "__ decrementl(r27);",
    "__ decrementl(r28);",
    "__ decrementl(r29);",
    "__ decrementl(r30);",
    "__ decrementl(r31);",
#endif // _LP64
    "__ mull(Address(rcx, rdx));",
    "__ mull(Address(rdx, rbx));",
#ifdef _LP64
    "__ mull(Address(rbx, r8));",
    "__ mull(Address(r8, r9));",
    "__ mull(Address(r9, r10));",
    "__ mull(Address(r10, r11));",
    "__ mull(Address(r11, r12));",
    "__ mull(Address(r12, r13));",
    "__ mull(Address(r13, r14));",
    "__ mull(Address(r14, r15));",
    "__ mull(Address(r15, r16));",
    "__ mull(Address(r16, r17));",
    "__ mull(Address(r17, r18));",
    "__ mull(Address(r18, r19));",
    "__ mull(Address(r19, r20));",
    "__ mull(Address(r20, r21));",
    "__ mull(Address(r21, r22));",
    "__ mull(Address(r22, r23));",
    "__ mull(Address(r23, r24));",
    "__ mull(Address(r24, r25));",
    "__ mull(Address(r25, r26));",
    "__ mull(Address(r26, r27));",
    "__ mull(Address(r27, r28));",
    "__ mull(Address(r28, r29));",
    "__ mull(Address(r29, r30));",
    "__ mull(Address(r30, r31));",
    "__ mull(Address(r31, rcx));",
#endif // _LP64
    "__ negl(Address(rcx, rdx));",
    "__ negl(Address(rdx, rbx));",
#ifdef _LP64
    "__ negl(Address(rbx, r8));",
    "__ negl(Address(r8, r9));",
    "__ negl(Address(r9, r10));",
    "__ negl(Address(r10, r11));",
    "__ negl(Address(r11, r12));",
    "__ negl(Address(r12, r13));",
    "__ negl(Address(r13, r14));",
    "__ negl(Address(r14, r15));",
    "__ negl(Address(r15, r16));",
    "__ negl(Address(r16, r17));",
    "__ negl(Address(r17, r18));",
    "__ negl(Address(r18, r19));",
    "__ negl(Address(r19, r20));",
    "__ negl(Address(r20, r21));",
    "__ negl(Address(r21, r22));",
    "__ negl(Address(r22, r23));",
    "__ negl(Address(r23, r24));",
    "__ negl(Address(r24, r25));",
    "__ negl(Address(r25, r26));",
    "__ negl(Address(r26, r27));",
    "__ negl(Address(r27, r28));",
    "__ negl(Address(r28, r29));",
    "__ negl(Address(r29, r30));",
    "__ negl(Address(r30, r31));",
    "__ negl(Address(r31, rcx));",
#endif // _LP64
    "__ sarl(Address(rcx, rdx));",
    "__ sarl(Address(rdx, rbx));",
#ifdef _LP64
    "__ sarl(Address(rbx, r8));",
    "__ sarl(Address(r8, r9));",
    "__ sarl(Address(r9, r10));",
    "__ sarl(Address(r10, r11));",
    "__ sarl(Address(r11, r12));",
    "__ sarl(Address(r12, r13));",
    "__ sarl(Address(r13, r14));",
    "__ sarl(Address(r14, r15));",
    "__ sarl(Address(r15, r16));",
    "__ sarl(Address(r16, r17));",
    "__ sarl(Address(r17, r18));",
    "__ sarl(Address(r18, r19));",
    "__ sarl(Address(r19, r20));",
    "__ sarl(Address(r20, r21));",
    "__ sarl(Address(r21, r22));",
    "__ sarl(Address(r22, r23));",
    "__ sarl(Address(r23, r24));",
    "__ sarl(Address(r24, r25));",
    "__ sarl(Address(r25, r26));",
    "__ sarl(Address(r26, r27));",
    "__ sarl(Address(r27, r28));",
    "__ sarl(Address(r28, r29));",
    "__ sarl(Address(r29, r30));",
    "__ sarl(Address(r30, r31));",
    "__ sarl(Address(r31, rcx));",
#endif // _LP64
    "__ shrl(Address(rcx, rdx));",
    "__ shrl(Address(rdx, rbx));",
#ifdef _LP64
    "__ shrl(Address(rbx, r8));",
    "__ shrl(Address(r8, r9));",
    "__ shrl(Address(r9, r10));",
    "__ shrl(Address(r10, r11));",
    "__ shrl(Address(r11, r12));",
    "__ shrl(Address(r12, r13));",
    "__ shrl(Address(r13, r14));",
    "__ shrl(Address(r14, r15));",
    "__ shrl(Address(r15, r16));",
    "__ shrl(Address(r16, r17));",
    "__ shrl(Address(r17, r18));",
    "__ shrl(Address(r18, r19));",
    "__ shrl(Address(r19, r20));",
    "__ shrl(Address(r20, r21));",
    "__ shrl(Address(r21, r22));",
    "__ shrl(Address(r22, r23));",
    "__ shrl(Address(r23, r24));",
    "__ shrl(Address(r24, r25));",
    "__ shrl(Address(r25, r26));",
    "__ shrl(Address(r26, r27));",
    "__ shrl(Address(r27, r28));",
    "__ shrl(Address(r28, r29));",
    "__ shrl(Address(r29, r30));",
    "__ shrl(Address(r30, r31));",
    "__ shrl(Address(r31, rcx));",
#endif // _LP64
    "__ incrementl(Address(rcx, rdx));",
    "__ incrementl(Address(rdx, rbx));",
#ifdef _LP64
    "__ incrementl(Address(rbx, r8));",
    "__ incrementl(Address(r8, r9));",
    "__ incrementl(Address(r9, r10));",
    "__ incrementl(Address(r10, r11));",
    "__ incrementl(Address(r11, r12));",
    "__ incrementl(Address(r12, r13));",
    "__ incrementl(Address(r13, r14));",
    "__ incrementl(Address(r14, r15));",
    "__ incrementl(Address(r15, r16));",
    "__ incrementl(Address(r16, r17));",
    "__ incrementl(Address(r17, r18));",
    "__ incrementl(Address(r18, r19));",
    "__ incrementl(Address(r19, r20));",
    "__ incrementl(Address(r20, r21));",
    "__ incrementl(Address(r21, r22));",
    "__ incrementl(Address(r22, r23));",
    "__ incrementl(Address(r23, r24));",
    "__ incrementl(Address(r24, r25));",
    "__ incrementl(Address(r25, r26));",
    "__ incrementl(Address(r26, r27));",
    "__ incrementl(Address(r27, r28));",
    "__ incrementl(Address(r28, r29));",
    "__ incrementl(Address(r29, r30));",
    "__ incrementl(Address(r30, r31));",
    "__ incrementl(Address(r31, rcx));",
#endif // _LP64
    "__ decrementl(Address(rcx, rdx));",
    "__ decrementl(Address(rdx, rbx));",
#ifdef _LP64
    "__ decrementl(Address(rbx, r8));",
    "__ decrementl(Address(r8, r9));",
    "__ decrementl(Address(r9, r10));",
    "__ decrementl(Address(r10, r11));",
    "__ decrementl(Address(r11, r12));",
    "__ decrementl(Address(r12, r13));",
    "__ decrementl(Address(r13, r14));",
    "__ decrementl(Address(r14, r15));",
    "__ decrementl(Address(r15, r16));",
    "__ decrementl(Address(r16, r17));",
    "__ decrementl(Address(r17, r18));",
    "__ decrementl(Address(r18, r19));",
    "__ decrementl(Address(r19, r20));",
    "__ decrementl(Address(r20, r21));",
    "__ decrementl(Address(r21, r22));",
    "__ decrementl(Address(r22, r23));",
    "__ decrementl(Address(r23, r24));",
    "__ decrementl(Address(r24, r25));",
    "__ decrementl(Address(r25, r26));",
    "__ decrementl(Address(r26, r27));",
    "__ decrementl(Address(r27, r28));",
    "__ decrementl(Address(r28, r29));",
    "__ decrementl(Address(r29, r30));",
    "__ decrementl(Address(r30, r31));",
    "__ decrementl(Address(r31, rcx));",
#endif // _LP64
    "__ imull(rcx, Address(rdx, rbx), 1);",
    "__ imull(rcx, Address(rdx, rbx), 16);",
    "__ imull(rcx, Address(rdx, rbx), 256);",
    "__ imull(rcx, Address(rdx, rbx), 4096);",
    "__ imull(rcx, Address(rdx, rbx), 65536);",
    "__ imull(rcx, Address(rdx, rbx), 1048576);",
    "__ imull(rcx, Address(rdx, rbx), 16777216);",
    "__ imull(rcx, Address(rdx, rbx), 268435456);",
#ifdef _LP64
    "__ imull(rdx, Address(rbx, r8), 1);",
    "__ imull(rdx, Address(rbx, r8), 16);",
    "__ imull(rdx, Address(rbx, r8), 256);",
    "__ imull(rdx, Address(rbx, r8), 4096);",
    "__ imull(rdx, Address(rbx, r8), 65536);",
    "__ imull(rdx, Address(rbx, r8), 1048576);",
    "__ imull(rdx, Address(rbx, r8), 16777216);",
    "__ imull(rdx, Address(rbx, r8), 268435456);",
    "__ imull(rbx, Address(r8, r9), 1);",
    "__ imull(rbx, Address(r8, r9), 16);",
    "__ imull(rbx, Address(r8, r9), 256);",
    "__ imull(rbx, Address(r8, r9), 4096);",
    "__ imull(rbx, Address(r8, r9), 65536);",
    "__ imull(rbx, Address(r8, r9), 1048576);",
    "__ imull(rbx, Address(r8, r9), 16777216);",
    "__ imull(rbx, Address(r8, r9), 268435456);",
    "__ imull(r8, Address(r9, r10), 1);",
    "__ imull(r8, Address(r9, r10), 16);",
    "__ imull(r8, Address(r9, r10), 256);",
    "__ imull(r8, Address(r9, r10), 4096);",
    "__ imull(r8, Address(r9, r10), 65536);",
    "__ imull(r8, Address(r9, r10), 1048576);",
    "__ imull(r8, Address(r9, r10), 16777216);",
    "__ imull(r8, Address(r9, r10), 268435456);",
    "__ imull(r9, Address(r10, r11), 1);",
    "__ imull(r9, Address(r10, r11), 16);",
    "__ imull(r9, Address(r10, r11), 256);",
    "__ imull(r9, Address(r10, r11), 4096);",
    "__ imull(r9, Address(r10, r11), 65536);",
    "__ imull(r9, Address(r10, r11), 1048576);",
    "__ imull(r9, Address(r10, r11), 16777216);",
    "__ imull(r9, Address(r10, r11), 268435456);",
    "__ imull(r10, Address(r11, r12), 1);",
    "__ imull(r10, Address(r11, r12), 16);",
    "__ imull(r10, Address(r11, r12), 256);",
    "__ imull(r10, Address(r11, r12), 4096);",
    "__ imull(r10, Address(r11, r12), 65536);",
    "__ imull(r10, Address(r11, r12), 1048576);",
    "__ imull(r10, Address(r11, r12), 16777216);",
    "__ imull(r10, Address(r11, r12), 268435456);",
    "__ imull(r11, Address(r12, r13), 1);",
    "__ imull(r11, Address(r12, r13), 16);",
    "__ imull(r11, Address(r12, r13), 256);",
    "__ imull(r11, Address(r12, r13), 4096);",
    "__ imull(r11, Address(r12, r13), 65536);",
    "__ imull(r11, Address(r12, r13), 1048576);",
    "__ imull(r11, Address(r12, r13), 16777216);",
    "__ imull(r11, Address(r12, r13), 268435456);",
    "__ imull(r12, Address(r13, r14), 1);",
    "__ imull(r12, Address(r13, r14), 16);",
    "__ imull(r12, Address(r13, r14), 256);",
    "__ imull(r12, Address(r13, r14), 4096);",
    "__ imull(r12, Address(r13, r14), 65536);",
    "__ imull(r12, Address(r13, r14), 1048576);",
    "__ imull(r12, Address(r13, r14), 16777216);",
    "__ imull(r12, Address(r13, r14), 268435456);",
    "__ imull(r13, Address(r14, r15), 1);",
    "__ imull(r13, Address(r14, r15), 16);",
    "__ imull(r13, Address(r14, r15), 256);",
    "__ imull(r13, Address(r14, r15), 4096);",
    "__ imull(r13, Address(r14, r15), 65536);",
    "__ imull(r13, Address(r14, r15), 1048576);",
    "__ imull(r13, Address(r14, r15), 16777216);",
    "__ imull(r13, Address(r14, r15), 268435456);",
    "__ imull(r14, Address(r15, r16), 1);",
    "__ imull(r14, Address(r15, r16), 16);",
    "__ imull(r14, Address(r15, r16), 256);",
    "__ imull(r14, Address(r15, r16), 4096);",
    "__ imull(r14, Address(r15, r16), 65536);",
    "__ imull(r14, Address(r15, r16), 1048576);",
    "__ imull(r14, Address(r15, r16), 16777216);",
    "__ imull(r14, Address(r15, r16), 268435456);",
    "__ imull(r15, Address(r16, r17), 1);",
    "__ imull(r15, Address(r16, r17), 16);",
    "__ imull(r15, Address(r16, r17), 256);",
    "__ imull(r15, Address(r16, r17), 4096);",
    "__ imull(r15, Address(r16, r17), 65536);",
    "__ imull(r15, Address(r16, r17), 1048576);",
    "__ imull(r15, Address(r16, r17), 16777216);",
    "__ imull(r15, Address(r16, r17), 268435456);",
    "__ imull(r16, Address(r17, r18), 1);",
    "__ imull(r16, Address(r17, r18), 16);",
    "__ imull(r16, Address(r17, r18), 256);",
    "__ imull(r16, Address(r17, r18), 4096);",
    "__ imull(r16, Address(r17, r18), 65536);",
    "__ imull(r16, Address(r17, r18), 1048576);",
    "__ imull(r16, Address(r17, r18), 16777216);",
    "__ imull(r16, Address(r17, r18), 268435456);",
    "__ imull(r17, Address(r18, r19), 1);",
    "__ imull(r17, Address(r18, r19), 16);",
    "__ imull(r17, Address(r18, r19), 256);",
    "__ imull(r17, Address(r18, r19), 4096);",
    "__ imull(r17, Address(r18, r19), 65536);",
    "__ imull(r17, Address(r18, r19), 1048576);",
    "__ imull(r17, Address(r18, r19), 16777216);",
    "__ imull(r17, Address(r18, r19), 268435456);",
    "__ imull(r18, Address(r19, r20), 1);",
    "__ imull(r18, Address(r19, r20), 16);",
    "__ imull(r18, Address(r19, r20), 256);",
    "__ imull(r18, Address(r19, r20), 4096);",
    "__ imull(r18, Address(r19, r20), 65536);",
    "__ imull(r18, Address(r19, r20), 1048576);",
    "__ imull(r18, Address(r19, r20), 16777216);",
    "__ imull(r18, Address(r19, r20), 268435456);",
    "__ imull(r19, Address(r20, r21), 1);",
    "__ imull(r19, Address(r20, r21), 16);",
    "__ imull(r19, Address(r20, r21), 256);",
    "__ imull(r19, Address(r20, r21), 4096);",
    "__ imull(r19, Address(r20, r21), 65536);",
    "__ imull(r19, Address(r20, r21), 1048576);",
    "__ imull(r19, Address(r20, r21), 16777216);",
    "__ imull(r19, Address(r20, r21), 268435456);",
    "__ imull(r20, Address(r21, r22), 1);",
    "__ imull(r20, Address(r21, r22), 16);",
    "__ imull(r20, Address(r21, r22), 256);",
    "__ imull(r20, Address(r21, r22), 4096);",
    "__ imull(r20, Address(r21, r22), 65536);",
    "__ imull(r20, Address(r21, r22), 1048576);",
    "__ imull(r20, Address(r21, r22), 16777216);",
    "__ imull(r20, Address(r21, r22), 268435456);",
    "__ imull(r21, Address(r22, r23), 1);",
    "__ imull(r21, Address(r22, r23), 16);",
    "__ imull(r21, Address(r22, r23), 256);",
    "__ imull(r21, Address(r22, r23), 4096);",
    "__ imull(r21, Address(r22, r23), 65536);",
    "__ imull(r21, Address(r22, r23), 1048576);",
    "__ imull(r21, Address(r22, r23), 16777216);",
    "__ imull(r21, Address(r22, r23), 268435456);",
    "__ imull(r22, Address(r23, r24), 1);",
    "__ imull(r22, Address(r23, r24), 16);",
    "__ imull(r22, Address(r23, r24), 256);",
    "__ imull(r22, Address(r23, r24), 4096);",
    "__ imull(r22, Address(r23, r24), 65536);",
    "__ imull(r22, Address(r23, r24), 1048576);",
    "__ imull(r22, Address(r23, r24), 16777216);",
    "__ imull(r22, Address(r23, r24), 268435456);",
    "__ imull(r23, Address(r24, r25), 1);",
    "__ imull(r23, Address(r24, r25), 16);",
    "__ imull(r23, Address(r24, r25), 256);",
    "__ imull(r23, Address(r24, r25), 4096);",
    "__ imull(r23, Address(r24, r25), 65536);",
    "__ imull(r23, Address(r24, r25), 1048576);",
    "__ imull(r23, Address(r24, r25), 16777216);",
    "__ imull(r23, Address(r24, r25), 268435456);",
    "__ imull(r24, Address(r25, r26), 1);",
    "__ imull(r24, Address(r25, r26), 16);",
    "__ imull(r24, Address(r25, r26), 256);",
    "__ imull(r24, Address(r25, r26), 4096);",
    "__ imull(r24, Address(r25, r26), 65536);",
    "__ imull(r24, Address(r25, r26), 1048576);",
    "__ imull(r24, Address(r25, r26), 16777216);",
    "__ imull(r24, Address(r25, r26), 268435456);",
    "__ imull(r25, Address(r26, r27), 1);",
    "__ imull(r25, Address(r26, r27), 16);",
    "__ imull(r25, Address(r26, r27), 256);",
    "__ imull(r25, Address(r26, r27), 4096);",
    "__ imull(r25, Address(r26, r27), 65536);",
    "__ imull(r25, Address(r26, r27), 1048576);",
    "__ imull(r25, Address(r26, r27), 16777216);",
    "__ imull(r25, Address(r26, r27), 268435456);",
    "__ imull(r26, Address(r27, r28), 1);",
    "__ imull(r26, Address(r27, r28), 16);",
    "__ imull(r26, Address(r27, r28), 256);",
    "__ imull(r26, Address(r27, r28), 4096);",
    "__ imull(r26, Address(r27, r28), 65536);",
    "__ imull(r26, Address(r27, r28), 1048576);",
    "__ imull(r26, Address(r27, r28), 16777216);",
    "__ imull(r26, Address(r27, r28), 268435456);",
    "__ imull(r27, Address(r28, r29), 1);",
    "__ imull(r27, Address(r28, r29), 16);",
    "__ imull(r27, Address(r28, r29), 256);",
    "__ imull(r27, Address(r28, r29), 4096);",
    "__ imull(r27, Address(r28, r29), 65536);",
    "__ imull(r27, Address(r28, r29), 1048576);",
    "__ imull(r27, Address(r28, r29), 16777216);",
    "__ imull(r27, Address(r28, r29), 268435456);",
    "__ imull(r28, Address(r29, r30), 1);",
    "__ imull(r28, Address(r29, r30), 16);",
    "__ imull(r28, Address(r29, r30), 256);",
    "__ imull(r28, Address(r29, r30), 4096);",
    "__ imull(r28, Address(r29, r30), 65536);",
    "__ imull(r28, Address(r29, r30), 1048576);",
    "__ imull(r28, Address(r29, r30), 16777216);",
    "__ imull(r28, Address(r29, r30), 268435456);",
    "__ imull(r29, Address(r30, r31), 1);",
    "__ imull(r29, Address(r30, r31), 16);",
    "__ imull(r29, Address(r30, r31), 256);",
    "__ imull(r29, Address(r30, r31), 4096);",
    "__ imull(r29, Address(r30, r31), 65536);",
    "__ imull(r29, Address(r30, r31), 1048576);",
    "__ imull(r29, Address(r30, r31), 16777216);",
    "__ imull(r29, Address(r30, r31), 268435456);",
    "__ imull(r30, Address(r31, rcx), 1);",
    "__ imull(r30, Address(r31, rcx), 16);",
    "__ imull(r30, Address(r31, rcx), 256);",
    "__ imull(r30, Address(r31, rcx), 4096);",
    "__ imull(r30, Address(r31, rcx), 65536);",
    "__ imull(r30, Address(r31, rcx), 1048576);",
    "__ imull(r30, Address(r31, rcx), 16777216);",
    "__ imull(r30, Address(r31, rcx), 268435456);",
    "__ imull(r31, Address(rcx, rdx), 1);",
    "__ imull(r31, Address(rcx, rdx), 16);",
    "__ imull(r31, Address(rcx, rdx), 256);",
    "__ imull(r31, Address(rcx, rdx), 4096);",
    "__ imull(r31, Address(rcx, rdx), 65536);",
    "__ imull(r31, Address(rcx, rdx), 1048576);",
    "__ imull(r31, Address(rcx, rdx), 16777216);",
    "__ imull(r31, Address(rcx, rdx), 268435456);",
#endif // _LP64
    "__ imull(rcx, rdx, 1);",
    "__ imull(rcx, rdx, 16);",
    "__ imull(rcx, rdx, 256);",
    "__ imull(rcx, rdx, 4096);",
    "__ imull(rcx, rdx, 65536);",
    "__ imull(rcx, rdx, 1048576);",
    "__ imull(rcx, rdx, 16777216);",
    "__ imull(rcx, rdx, 268435456);",
    "__ imull(rdx, rbx, 1);",
    "__ imull(rdx, rbx, 16);",
    "__ imull(rdx, rbx, 256);",
    "__ imull(rdx, rbx, 4096);",
    "__ imull(rdx, rbx, 65536);",
    "__ imull(rdx, rbx, 1048576);",
    "__ imull(rdx, rbx, 16777216);",
    "__ imull(rdx, rbx, 268435456);",
#ifdef _LP64
    "__ imull(rbx, r8, 1);",
    "__ imull(rbx, r8, 16);",
    "__ imull(rbx, r8, 256);",
    "__ imull(rbx, r8, 4096);",
    "__ imull(rbx, r8, 65536);",
    "__ imull(rbx, r8, 1048576);",
    "__ imull(rbx, r8, 16777216);",
    "__ imull(rbx, r8, 268435456);",
    "__ imull(r8, r9, 1);",
    "__ imull(r8, r9, 16);",
    "__ imull(r8, r9, 256);",
    "__ imull(r8, r9, 4096);",
    "__ imull(r8, r9, 65536);",
    "__ imull(r8, r9, 1048576);",
    "__ imull(r8, r9, 16777216);",
    "__ imull(r8, r9, 268435456);",
    "__ imull(r9, r10, 1);",
    "__ imull(r9, r10, 16);",
    "__ imull(r9, r10, 256);",
    "__ imull(r9, r10, 4096);",
    "__ imull(r9, r10, 65536);",
    "__ imull(r9, r10, 1048576);",
    "__ imull(r9, r10, 16777216);",
    "__ imull(r9, r10, 268435456);",
    "__ imull(r10, r11, 1);",
    "__ imull(r10, r11, 16);",
    "__ imull(r10, r11, 256);",
    "__ imull(r10, r11, 4096);",
    "__ imull(r10, r11, 65536);",
    "__ imull(r10, r11, 1048576);",
    "__ imull(r10, r11, 16777216);",
    "__ imull(r10, r11, 268435456);",
    "__ imull(r11, r12, 1);",
    "__ imull(r11, r12, 16);",
    "__ imull(r11, r12, 256);",
    "__ imull(r11, r12, 4096);",
    "__ imull(r11, r12, 65536);",
    "__ imull(r11, r12, 1048576);",
    "__ imull(r11, r12, 16777216);",
    "__ imull(r11, r12, 268435456);",
    "__ imull(r12, r13, 1);",
    "__ imull(r12, r13, 16);",
    "__ imull(r12, r13, 256);",
    "__ imull(r12, r13, 4096);",
    "__ imull(r12, r13, 65536);",
    "__ imull(r12, r13, 1048576);",
    "__ imull(r12, r13, 16777216);",
    "__ imull(r12, r13, 268435456);",
    "__ imull(r13, r14, 1);",
    "__ imull(r13, r14, 16);",
    "__ imull(r13, r14, 256);",
    "__ imull(r13, r14, 4096);",
    "__ imull(r13, r14, 65536);",
    "__ imull(r13, r14, 1048576);",
    "__ imull(r13, r14, 16777216);",
    "__ imull(r13, r14, 268435456);",
    "__ imull(r14, r15, 1);",
    "__ imull(r14, r15, 16);",
    "__ imull(r14, r15, 256);",
    "__ imull(r14, r15, 4096);",
    "__ imull(r14, r15, 65536);",
    "__ imull(r14, r15, 1048576);",
    "__ imull(r14, r15, 16777216);",
    "__ imull(r14, r15, 268435456);",
    "__ imull(r15, r16, 1);",
    "__ imull(r15, r16, 16);",
    "__ imull(r15, r16, 256);",
    "__ imull(r15, r16, 4096);",
    "__ imull(r15, r16, 65536);",
    "__ imull(r15, r16, 1048576);",
    "__ imull(r15, r16, 16777216);",
    "__ imull(r15, r16, 268435456);",
    "__ imull(r16, r17, 1);",
    "__ imull(r16, r17, 16);",
    "__ imull(r16, r17, 256);",
    "__ imull(r16, r17, 4096);",
    "__ imull(r16, r17, 65536);",
    "__ imull(r16, r17, 1048576);",
    "__ imull(r16, r17, 16777216);",
    "__ imull(r16, r17, 268435456);",
    "__ imull(r17, r18, 1);",
    "__ imull(r17, r18, 16);",
    "__ imull(r17, r18, 256);",
    "__ imull(r17, r18, 4096);",
    "__ imull(r17, r18, 65536);",
    "__ imull(r17, r18, 1048576);",
    "__ imull(r17, r18, 16777216);",
    "__ imull(r17, r18, 268435456);",
    "__ imull(r18, r19, 1);",
    "__ imull(r18, r19, 16);",
    "__ imull(r18, r19, 256);",
    "__ imull(r18, r19, 4096);",
    "__ imull(r18, r19, 65536);",
    "__ imull(r18, r19, 1048576);",
    "__ imull(r18, r19, 16777216);",
    "__ imull(r18, r19, 268435456);",
    "__ imull(r19, r20, 1);",
    "__ imull(r19, r20, 16);",
    "__ imull(r19, r20, 256);",
    "__ imull(r19, r20, 4096);",
    "__ imull(r19, r20, 65536);",
    "__ imull(r19, r20, 1048576);",
    "__ imull(r19, r20, 16777216);",
    "__ imull(r19, r20, 268435456);",
    "__ imull(r20, r21, 1);",
    "__ imull(r20, r21, 16);",
    "__ imull(r20, r21, 256);",
    "__ imull(r20, r21, 4096);",
    "__ imull(r20, r21, 65536);",
    "__ imull(r20, r21, 1048576);",
    "__ imull(r20, r21, 16777216);",
    "__ imull(r20, r21, 268435456);",
    "__ imull(r21, r22, 1);",
    "__ imull(r21, r22, 16);",
    "__ imull(r21, r22, 256);",
    "__ imull(r21, r22, 4096);",
    "__ imull(r21, r22, 65536);",
    "__ imull(r21, r22, 1048576);",
    "__ imull(r21, r22, 16777216);",
    "__ imull(r21, r22, 268435456);",
    "__ imull(r22, r23, 1);",
    "__ imull(r22, r23, 16);",
    "__ imull(r22, r23, 256);",
    "__ imull(r22, r23, 4096);",
    "__ imull(r22, r23, 65536);",
    "__ imull(r22, r23, 1048576);",
    "__ imull(r22, r23, 16777216);",
    "__ imull(r22, r23, 268435456);",
    "__ imull(r23, r24, 1);",
    "__ imull(r23, r24, 16);",
    "__ imull(r23, r24, 256);",
    "__ imull(r23, r24, 4096);",
    "__ imull(r23, r24, 65536);",
    "__ imull(r23, r24, 1048576);",
    "__ imull(r23, r24, 16777216);",
    "__ imull(r23, r24, 268435456);",
    "__ imull(r24, r25, 1);",
    "__ imull(r24, r25, 16);",
    "__ imull(r24, r25, 256);",
    "__ imull(r24, r25, 4096);",
    "__ imull(r24, r25, 65536);",
    "__ imull(r24, r25, 1048576);",
    "__ imull(r24, r25, 16777216);",
    "__ imull(r24, r25, 268435456);",
    "__ imull(r25, r26, 1);",
    "__ imull(r25, r26, 16);",
    "__ imull(r25, r26, 256);",
    "__ imull(r25, r26, 4096);",
    "__ imull(r25, r26, 65536);",
    "__ imull(r25, r26, 1048576);",
    "__ imull(r25, r26, 16777216);",
    "__ imull(r25, r26, 268435456);",
    "__ imull(r26, r27, 1);",
    "__ imull(r26, r27, 16);",
    "__ imull(r26, r27, 256);",
    "__ imull(r26, r27, 4096);",
    "__ imull(r26, r27, 65536);",
    "__ imull(r26, r27, 1048576);",
    "__ imull(r26, r27, 16777216);",
    "__ imull(r26, r27, 268435456);",
    "__ imull(r27, r28, 1);",
    "__ imull(r27, r28, 16);",
    "__ imull(r27, r28, 256);",
    "__ imull(r27, r28, 4096);",
    "__ imull(r27, r28, 65536);",
    "__ imull(r27, r28, 1048576);",
    "__ imull(r27, r28, 16777216);",
    "__ imull(r27, r28, 268435456);",
    "__ imull(r28, r29, 1);",
    "__ imull(r28, r29, 16);",
    "__ imull(r28, r29, 256);",
    "__ imull(r28, r29, 4096);",
    "__ imull(r28, r29, 65536);",
    "__ imull(r28, r29, 1048576);",
    "__ imull(r28, r29, 16777216);",
    "__ imull(r28, r29, 268435456);",
    "__ imull(r29, r30, 1);",
    "__ imull(r29, r30, 16);",
    "__ imull(r29, r30, 256);",
    "__ imull(r29, r30, 4096);",
    "__ imull(r29, r30, 65536);",
    "__ imull(r29, r30, 1048576);",
    "__ imull(r29, r30, 16777216);",
    "__ imull(r29, r30, 268435456);",
    "__ imull(r30, r31, 1);",
    "__ imull(r30, r31, 16);",
    "__ imull(r30, r31, 256);",
    "__ imull(r30, r31, 4096);",
    "__ imull(r30, r31, 65536);",
    "__ imull(r30, r31, 1048576);",
    "__ imull(r30, r31, 16777216);",
    "__ imull(r30, r31, 268435456);",
    "__ imull(r31, rcx, 1);",
    "__ imull(r31, rcx, 16);",
    "__ imull(r31, rcx, 256);",
    "__ imull(r31, rcx, 4096);",
    "__ imull(r31, rcx, 65536);",
    "__ imull(r31, rcx, 1048576);",
    "__ imull(r31, rcx, 16777216);",
    "__ imull(r31, rcx, 268435456);",
#endif // _LP64
    "__ shldl(rcx, rdx, 1);",
    "__ shldl(rcx, rdx, 2);",
    "__ shldl(rcx, rdx, 4);",
    "__ shldl(rcx, rdx, 8);",
    "__ shldl(rcx, rdx, 16);",
    "__ shldl(rdx, rbx, 1);",
    "__ shldl(rdx, rbx, 2);",
    "__ shldl(rdx, rbx, 4);",
    "__ shldl(rdx, rbx, 8);",
    "__ shldl(rdx, rbx, 16);",
#ifdef _LP64
    "__ shldl(rbx, r8, 1);",
    "__ shldl(rbx, r8, 2);",
    "__ shldl(rbx, r8, 4);",
    "__ shldl(rbx, r8, 8);",
    "__ shldl(rbx, r8, 16);",
    "__ shldl(r8, r9, 1);",
    "__ shldl(r8, r9, 2);",
    "__ shldl(r8, r9, 4);",
    "__ shldl(r8, r9, 8);",
    "__ shldl(r8, r9, 16);",
    "__ shldl(r9, r10, 1);",
    "__ shldl(r9, r10, 2);",
    "__ shldl(r9, r10, 4);",
    "__ shldl(r9, r10, 8);",
    "__ shldl(r9, r10, 16);",
    "__ shldl(r10, r11, 1);",
    "__ shldl(r10, r11, 2);",
    "__ shldl(r10, r11, 4);",
    "__ shldl(r10, r11, 8);",
    "__ shldl(r10, r11, 16);",
    "__ shldl(r11, r12, 1);",
    "__ shldl(r11, r12, 2);",
    "__ shldl(r11, r12, 4);",
    "__ shldl(r11, r12, 8);",
    "__ shldl(r11, r12, 16);",
    "__ shldl(r12, r13, 1);",
    "__ shldl(r12, r13, 2);",
    "__ shldl(r12, r13, 4);",
    "__ shldl(r12, r13, 8);",
    "__ shldl(r12, r13, 16);",
    "__ shldl(r13, r14, 1);",
    "__ shldl(r13, r14, 2);",
    "__ shldl(r13, r14, 4);",
    "__ shldl(r13, r14, 8);",
    "__ shldl(r13, r14, 16);",
    "__ shldl(r14, r15, 1);",
    "__ shldl(r14, r15, 2);",
    "__ shldl(r14, r15, 4);",
    "__ shldl(r14, r15, 8);",
    "__ shldl(r14, r15, 16);",
    "__ shldl(r15, r16, 1);",
    "__ shldl(r15, r16, 2);",
    "__ shldl(r15, r16, 4);",
    "__ shldl(r15, r16, 8);",
    "__ shldl(r15, r16, 16);",
    "__ shldl(r16, r17, 1);",
    "__ shldl(r16, r17, 2);",
    "__ shldl(r16, r17, 4);",
    "__ shldl(r16, r17, 8);",
    "__ shldl(r16, r17, 16);",
    "__ shldl(r17, r18, 1);",
    "__ shldl(r17, r18, 2);",
    "__ shldl(r17, r18, 4);",
    "__ shldl(r17, r18, 8);",
    "__ shldl(r17, r18, 16);",
    "__ shldl(r18, r19, 1);",
    "__ shldl(r18, r19, 2);",
    "__ shldl(r18, r19, 4);",
    "__ shldl(r18, r19, 8);",
    "__ shldl(r18, r19, 16);",
    "__ shldl(r19, r20, 1);",
    "__ shldl(r19, r20, 2);",
    "__ shldl(r19, r20, 4);",
    "__ shldl(r19, r20, 8);",
    "__ shldl(r19, r20, 16);",
    "__ shldl(r20, r21, 1);",
    "__ shldl(r20, r21, 2);",
    "__ shldl(r20, r21, 4);",
    "__ shldl(r20, r21, 8);",
    "__ shldl(r20, r21, 16);",
    "__ shldl(r21, r22, 1);",
    "__ shldl(r21, r22, 2);",
    "__ shldl(r21, r22, 4);",
    "__ shldl(r21, r22, 8);",
    "__ shldl(r21, r22, 16);",
    "__ shldl(r22, r23, 1);",
    "__ shldl(r22, r23, 2);",
    "__ shldl(r22, r23, 4);",
    "__ shldl(r22, r23, 8);",
    "__ shldl(r22, r23, 16);",
    "__ shldl(r23, r24, 1);",
    "__ shldl(r23, r24, 2);",
    "__ shldl(r23, r24, 4);",
    "__ shldl(r23, r24, 8);",
    "__ shldl(r23, r24, 16);",
    "__ shldl(r24, r25, 1);",
    "__ shldl(r24, r25, 2);",
    "__ shldl(r24, r25, 4);",
    "__ shldl(r24, r25, 8);",
    "__ shldl(r24, r25, 16);",
    "__ shldl(r25, r26, 1);",
    "__ shldl(r25, r26, 2);",
    "__ shldl(r25, r26, 4);",
    "__ shldl(r25, r26, 8);",
    "__ shldl(r25, r26, 16);",
    "__ shldl(r26, r27, 1);",
    "__ shldl(r26, r27, 2);",
    "__ shldl(r26, r27, 4);",
    "__ shldl(r26, r27, 8);",
    "__ shldl(r26, r27, 16);",
    "__ shldl(r27, r28, 1);",
    "__ shldl(r27, r28, 2);",
    "__ shldl(r27, r28, 4);",
    "__ shldl(r27, r28, 8);",
    "__ shldl(r27, r28, 16);",
    "__ shldl(r28, r29, 1);",
    "__ shldl(r28, r29, 2);",
    "__ shldl(r28, r29, 4);",
    "__ shldl(r28, r29, 8);",
    "__ shldl(r28, r29, 16);",
    "__ shldl(r29, r30, 1);",
    "__ shldl(r29, r30, 2);",
    "__ shldl(r29, r30, 4);",
    "__ shldl(r29, r30, 8);",
    "__ shldl(r29, r30, 16);",
    "__ shldl(r30, r31, 1);",
    "__ shldl(r30, r31, 2);",
    "__ shldl(r30, r31, 4);",
    "__ shldl(r30, r31, 8);",
    "__ shldl(r30, r31, 16);",
    "__ shldl(r31, rcx, 1);",
    "__ shldl(r31, rcx, 2);",
    "__ shldl(r31, rcx, 4);",
    "__ shldl(r31, rcx, 8);",
    "__ shldl(r31, rcx, 16);",
#endif // _LP64
    "__ shrdl(rcx, rdx, 1);",
    "__ shrdl(rcx, rdx, 2);",
    "__ shrdl(rcx, rdx, 4);",
    "__ shrdl(rcx, rdx, 8);",
    "__ shrdl(rcx, rdx, 16);",
    "__ shrdl(rdx, rbx, 1);",
    "__ shrdl(rdx, rbx, 2);",
    "__ shrdl(rdx, rbx, 4);",
    "__ shrdl(rdx, rbx, 8);",
    "__ shrdl(rdx, rbx, 16);",
#ifdef _LP64
    "__ shrdl(rbx, r8, 1);",
    "__ shrdl(rbx, r8, 2);",
    "__ shrdl(rbx, r8, 4);",
    "__ shrdl(rbx, r8, 8);",
    "__ shrdl(rbx, r8, 16);",
    "__ shrdl(r8, r9, 1);",
    "__ shrdl(r8, r9, 2);",
    "__ shrdl(r8, r9, 4);",
    "__ shrdl(r8, r9, 8);",
    "__ shrdl(r8, r9, 16);",
    "__ shrdl(r9, r10, 1);",
    "__ shrdl(r9, r10, 2);",
    "__ shrdl(r9, r10, 4);",
    "__ shrdl(r9, r10, 8);",
    "__ shrdl(r9, r10, 16);",
    "__ shrdl(r10, r11, 1);",
    "__ shrdl(r10, r11, 2);",
    "__ shrdl(r10, r11, 4);",
    "__ shrdl(r10, r11, 8);",
    "__ shrdl(r10, r11, 16);",
    "__ shrdl(r11, r12, 1);",
    "__ shrdl(r11, r12, 2);",
    "__ shrdl(r11, r12, 4);",
    "__ shrdl(r11, r12, 8);",
    "__ shrdl(r11, r12, 16);",
    "__ shrdl(r12, r13, 1);",
    "__ shrdl(r12, r13, 2);",
    "__ shrdl(r12, r13, 4);",
    "__ shrdl(r12, r13, 8);",
    "__ shrdl(r12, r13, 16);",
    "__ shrdl(r13, r14, 1);",
    "__ shrdl(r13, r14, 2);",
    "__ shrdl(r13, r14, 4);",
    "__ shrdl(r13, r14, 8);",
    "__ shrdl(r13, r14, 16);",
    "__ shrdl(r14, r15, 1);",
    "__ shrdl(r14, r15, 2);",
    "__ shrdl(r14, r15, 4);",
    "__ shrdl(r14, r15, 8);",
    "__ shrdl(r14, r15, 16);",
    "__ shrdl(r15, r16, 1);",
    "__ shrdl(r15, r16, 2);",
    "__ shrdl(r15, r16, 4);",
    "__ shrdl(r15, r16, 8);",
    "__ shrdl(r15, r16, 16);",
    "__ shrdl(r16, r17, 1);",
    "__ shrdl(r16, r17, 2);",
    "__ shrdl(r16, r17, 4);",
    "__ shrdl(r16, r17, 8);",
    "__ shrdl(r16, r17, 16);",
    "__ shrdl(r17, r18, 1);",
    "__ shrdl(r17, r18, 2);",
    "__ shrdl(r17, r18, 4);",
    "__ shrdl(r17, r18, 8);",
    "__ shrdl(r17, r18, 16);",
    "__ shrdl(r18, r19, 1);",
    "__ shrdl(r18, r19, 2);",
    "__ shrdl(r18, r19, 4);",
    "__ shrdl(r18, r19, 8);",
    "__ shrdl(r18, r19, 16);",
    "__ shrdl(r19, r20, 1);",
    "__ shrdl(r19, r20, 2);",
    "__ shrdl(r19, r20, 4);",
    "__ shrdl(r19, r20, 8);",
    "__ shrdl(r19, r20, 16);",
    "__ shrdl(r20, r21, 1);",
    "__ shrdl(r20, r21, 2);",
    "__ shrdl(r20, r21, 4);",
    "__ shrdl(r20, r21, 8);",
    "__ shrdl(r20, r21, 16);",
    "__ shrdl(r21, r22, 1);",
    "__ shrdl(r21, r22, 2);",
    "__ shrdl(r21, r22, 4);",
    "__ shrdl(r21, r22, 8);",
    "__ shrdl(r21, r22, 16);",
    "__ shrdl(r22, r23, 1);",
    "__ shrdl(r22, r23, 2);",
    "__ shrdl(r22, r23, 4);",
    "__ shrdl(r22, r23, 8);",
    "__ shrdl(r22, r23, 16);",
    "__ shrdl(r23, r24, 1);",
    "__ shrdl(r23, r24, 2);",
    "__ shrdl(r23, r24, 4);",
    "__ shrdl(r23, r24, 8);",
    "__ shrdl(r23, r24, 16);",
    "__ shrdl(r24, r25, 1);",
    "__ shrdl(r24, r25, 2);",
    "__ shrdl(r24, r25, 4);",
    "__ shrdl(r24, r25, 8);",
    "__ shrdl(r24, r25, 16);",
    "__ shrdl(r25, r26, 1);",
    "__ shrdl(r25, r26, 2);",
    "__ shrdl(r25, r26, 4);",
    "__ shrdl(r25, r26, 8);",
    "__ shrdl(r25, r26, 16);",
    "__ shrdl(r26, r27, 1);",
    "__ shrdl(r26, r27, 2);",
    "__ shrdl(r26, r27, 4);",
    "__ shrdl(r26, r27, 8);",
    "__ shrdl(r26, r27, 16);",
    "__ shrdl(r27, r28, 1);",
    "__ shrdl(r27, r28, 2);",
    "__ shrdl(r27, r28, 4);",
    "__ shrdl(r27, r28, 8);",
    "__ shrdl(r27, r28, 16);",
    "__ shrdl(r28, r29, 1);",
    "__ shrdl(r28, r29, 2);",
    "__ shrdl(r28, r29, 4);",
    "__ shrdl(r28, r29, 8);",
    "__ shrdl(r28, r29, 16);",
    "__ shrdl(r29, r30, 1);",
    "__ shrdl(r29, r30, 2);",
    "__ shrdl(r29, r30, 4);",
    "__ shrdl(r29, r30, 8);",
    "__ shrdl(r29, r30, 16);",
    "__ shrdl(r30, r31, 1);",
    "__ shrdl(r30, r31, 2);",
    "__ shrdl(r30, r31, 4);",
    "__ shrdl(r30, r31, 8);",
    "__ shrdl(r30, r31, 16);",
    "__ shrdl(r31, rcx, 1);",
    "__ shrdl(r31, rcx, 2);",
    "__ shrdl(r31, rcx, 4);",
    "__ shrdl(r31, rcx, 8);",
    "__ shrdl(r31, rcx, 16);",
#endif // _LP64
    "__ subl_imm32 (rcx, 65536);",
    "__ subl_imm32 (rcx, 262144);",
    "__ subl_imm32 (rcx, 1048576);",
    "__ subl_imm32 (rcx, 4194304);",
    "__ subl_imm32 (rcx, 16777216);",
    "__ subl_imm32 (rcx, 67108864);",
    "__ subl_imm32 (rcx, 268435456);",
    "__ subl_imm32 (rcx, 1073741824);",
    "__ subl_imm32 (rdx, 65536);",
    "__ subl_imm32 (rdx, 262144);",
    "__ subl_imm32 (rdx, 1048576);",
    "__ subl_imm32 (rdx, 4194304);",
    "__ subl_imm32 (rdx, 16777216);",
    "__ subl_imm32 (rdx, 67108864);",
    "__ subl_imm32 (rdx, 268435456);",
    "__ subl_imm32 (rdx, 1073741824);",
    "__ subl_imm32 (rbx, 65536);",
    "__ subl_imm32 (rbx, 262144);",
    "__ subl_imm32 (rbx, 1048576);",
    "__ subl_imm32 (rbx, 4194304);",
    "__ subl_imm32 (rbx, 16777216);",
    "__ subl_imm32 (rbx, 67108864);",
    "__ subl_imm32 (rbx, 268435456);",
    "__ subl_imm32 (rbx, 1073741824);",
#ifdef _LP64
    "__ subl_imm32 (r8, 65536);",
    "__ subl_imm32 (r8, 262144);",
    "__ subl_imm32 (r8, 1048576);",
    "__ subl_imm32 (r8, 4194304);",
    "__ subl_imm32 (r8, 16777216);",
    "__ subl_imm32 (r8, 67108864);",
    "__ subl_imm32 (r8, 268435456);",
    "__ subl_imm32 (r8, 1073741824);",
    "__ subl_imm32 (r9, 65536);",
    "__ subl_imm32 (r9, 262144);",
    "__ subl_imm32 (r9, 1048576);",
    "__ subl_imm32 (r9, 4194304);",
    "__ subl_imm32 (r9, 16777216);",
    "__ subl_imm32 (r9, 67108864);",
    "__ subl_imm32 (r9, 268435456);",
    "__ subl_imm32 (r9, 1073741824);",
    "__ subl_imm32 (r10, 65536);",
    "__ subl_imm32 (r10, 262144);",
    "__ subl_imm32 (r10, 1048576);",
    "__ subl_imm32 (r10, 4194304);",
    "__ subl_imm32 (r10, 16777216);",
    "__ subl_imm32 (r10, 67108864);",
    "__ subl_imm32 (r10, 268435456);",
    "__ subl_imm32 (r10, 1073741824);",
    "__ subl_imm32 (r11, 65536);",
    "__ subl_imm32 (r11, 262144);",
    "__ subl_imm32 (r11, 1048576);",
    "__ subl_imm32 (r11, 4194304);",
    "__ subl_imm32 (r11, 16777216);",
    "__ subl_imm32 (r11, 67108864);",
    "__ subl_imm32 (r11, 268435456);",
    "__ subl_imm32 (r11, 1073741824);",
    "__ subl_imm32 (r12, 65536);",
    "__ subl_imm32 (r12, 262144);",
    "__ subl_imm32 (r12, 1048576);",
    "__ subl_imm32 (r12, 4194304);",
    "__ subl_imm32 (r12, 16777216);",
    "__ subl_imm32 (r12, 67108864);",
    "__ subl_imm32 (r12, 268435456);",
    "__ subl_imm32 (r12, 1073741824);",
    "__ subl_imm32 (r13, 65536);",
    "__ subl_imm32 (r13, 262144);",
    "__ subl_imm32 (r13, 1048576);",
    "__ subl_imm32 (r13, 4194304);",
    "__ subl_imm32 (r13, 16777216);",
    "__ subl_imm32 (r13, 67108864);",
    "__ subl_imm32 (r13, 268435456);",
    "__ subl_imm32 (r13, 1073741824);",
    "__ subl_imm32 (r14, 65536);",
    "__ subl_imm32 (r14, 262144);",
    "__ subl_imm32 (r14, 1048576);",
    "__ subl_imm32 (r14, 4194304);",
    "__ subl_imm32 (r14, 16777216);",
    "__ subl_imm32 (r14, 67108864);",
    "__ subl_imm32 (r14, 268435456);",
    "__ subl_imm32 (r14, 1073741824);",
    "__ subl_imm32 (r15, 65536);",
    "__ subl_imm32 (r15, 262144);",
    "__ subl_imm32 (r15, 1048576);",
    "__ subl_imm32 (r15, 4194304);",
    "__ subl_imm32 (r15, 16777216);",
    "__ subl_imm32 (r15, 67108864);",
    "__ subl_imm32 (r15, 268435456);",
    "__ subl_imm32 (r15, 1073741824);",
    "__ subl_imm32 (r16, 65536);",
    "__ subl_imm32 (r16, 262144);",
    "__ subl_imm32 (r16, 1048576);",
    "__ subl_imm32 (r16, 4194304);",
    "__ subl_imm32 (r16, 16777216);",
    "__ subl_imm32 (r16, 67108864);",
    "__ subl_imm32 (r16, 268435456);",
    "__ subl_imm32 (r16, 1073741824);",
    "__ subl_imm32 (r17, 65536);",
    "__ subl_imm32 (r17, 262144);",
    "__ subl_imm32 (r17, 1048576);",
    "__ subl_imm32 (r17, 4194304);",
    "__ subl_imm32 (r17, 16777216);",
    "__ subl_imm32 (r17, 67108864);",
    "__ subl_imm32 (r17, 268435456);",
    "__ subl_imm32 (r17, 1073741824);",
    "__ subl_imm32 (r18, 65536);",
    "__ subl_imm32 (r18, 262144);",
    "__ subl_imm32 (r18, 1048576);",
    "__ subl_imm32 (r18, 4194304);",
    "__ subl_imm32 (r18, 16777216);",
    "__ subl_imm32 (r18, 67108864);",
    "__ subl_imm32 (r18, 268435456);",
    "__ subl_imm32 (r18, 1073741824);",
    "__ subl_imm32 (r19, 65536);",
    "__ subl_imm32 (r19, 262144);",
    "__ subl_imm32 (r19, 1048576);",
    "__ subl_imm32 (r19, 4194304);",
    "__ subl_imm32 (r19, 16777216);",
    "__ subl_imm32 (r19, 67108864);",
    "__ subl_imm32 (r19, 268435456);",
    "__ subl_imm32 (r19, 1073741824);",
    "__ subl_imm32 (r20, 65536);",
    "__ subl_imm32 (r20, 262144);",
    "__ subl_imm32 (r20, 1048576);",
    "__ subl_imm32 (r20, 4194304);",
    "__ subl_imm32 (r20, 16777216);",
    "__ subl_imm32 (r20, 67108864);",
    "__ subl_imm32 (r20, 268435456);",
    "__ subl_imm32 (r20, 1073741824);",
    "__ subl_imm32 (r21, 65536);",
    "__ subl_imm32 (r21, 262144);",
    "__ subl_imm32 (r21, 1048576);",
    "__ subl_imm32 (r21, 4194304);",
    "__ subl_imm32 (r21, 16777216);",
    "__ subl_imm32 (r21, 67108864);",
    "__ subl_imm32 (r21, 268435456);",
    "__ subl_imm32 (r21, 1073741824);",
    "__ subl_imm32 (r22, 65536);",
    "__ subl_imm32 (r22, 262144);",
    "__ subl_imm32 (r22, 1048576);",
    "__ subl_imm32 (r22, 4194304);",
    "__ subl_imm32 (r22, 16777216);",
    "__ subl_imm32 (r22, 67108864);",
    "__ subl_imm32 (r22, 268435456);",
    "__ subl_imm32 (r22, 1073741824);",
    "__ subl_imm32 (r23, 65536);",
    "__ subl_imm32 (r23, 262144);",
    "__ subl_imm32 (r23, 1048576);",
    "__ subl_imm32 (r23, 4194304);",
    "__ subl_imm32 (r23, 16777216);",
    "__ subl_imm32 (r23, 67108864);",
    "__ subl_imm32 (r23, 268435456);",
    "__ subl_imm32 (r23, 1073741824);",
    "__ subl_imm32 (r24, 65536);",
    "__ subl_imm32 (r24, 262144);",
    "__ subl_imm32 (r24, 1048576);",
    "__ subl_imm32 (r24, 4194304);",
    "__ subl_imm32 (r24, 16777216);",
    "__ subl_imm32 (r24, 67108864);",
    "__ subl_imm32 (r24, 268435456);",
    "__ subl_imm32 (r24, 1073741824);",
    "__ subl_imm32 (r25, 65536);",
    "__ subl_imm32 (r25, 262144);",
    "__ subl_imm32 (r25, 1048576);",
    "__ subl_imm32 (r25, 4194304);",
    "__ subl_imm32 (r25, 16777216);",
    "__ subl_imm32 (r25, 67108864);",
    "__ subl_imm32 (r25, 268435456);",
    "__ subl_imm32 (r25, 1073741824);",
    "__ subl_imm32 (r26, 65536);",
    "__ subl_imm32 (r26, 262144);",
    "__ subl_imm32 (r26, 1048576);",
    "__ subl_imm32 (r26, 4194304);",
    "__ subl_imm32 (r26, 16777216);",
    "__ subl_imm32 (r26, 67108864);",
    "__ subl_imm32 (r26, 268435456);",
    "__ subl_imm32 (r26, 1073741824);",
    "__ subl_imm32 (r27, 65536);",
    "__ subl_imm32 (r27, 262144);",
    "__ subl_imm32 (r27, 1048576);",
    "__ subl_imm32 (r27, 4194304);",
    "__ subl_imm32 (r27, 16777216);",
    "__ subl_imm32 (r27, 67108864);",
    "__ subl_imm32 (r27, 268435456);",
    "__ subl_imm32 (r27, 1073741824);",
    "__ subl_imm32 (r28, 65536);",
    "__ subl_imm32 (r28, 262144);",
    "__ subl_imm32 (r28, 1048576);",
    "__ subl_imm32 (r28, 4194304);",
    "__ subl_imm32 (r28, 16777216);",
    "__ subl_imm32 (r28, 67108864);",
    "__ subl_imm32 (r28, 268435456);",
    "__ subl_imm32 (r28, 1073741824);",
    "__ subl_imm32 (r29, 65536);",
    "__ subl_imm32 (r29, 262144);",
    "__ subl_imm32 (r29, 1048576);",
    "__ subl_imm32 (r29, 4194304);",
    "__ subl_imm32 (r29, 16777216);",
    "__ subl_imm32 (r29, 67108864);",
    "__ subl_imm32 (r29, 268435456);",
    "__ subl_imm32 (r29, 1073741824);",
    "__ subl_imm32 (r30, 65536);",
    "__ subl_imm32 (r30, 262144);",
    "__ subl_imm32 (r30, 1048576);",
    "__ subl_imm32 (r30, 4194304);",
    "__ subl_imm32 (r30, 16777216);",
    "__ subl_imm32 (r30, 67108864);",
    "__ subl_imm32 (r30, 268435456);",
    "__ subl_imm32 (r30, 1073741824);",
    "__ subl_imm32 (r31, 65536);",
    "__ subl_imm32 (r31, 262144);",
    "__ subl_imm32 (r31, 1048576);",
    "__ subl_imm32 (r31, 4194304);",
    "__ subl_imm32 (r31, 16777216);",
    "__ subl_imm32 (r31, 67108864);",
    "__ subl_imm32 (r31, 268435456);",
    "__ subl_imm32 (r31, 1073741824);",
    "__ adcq(rcx, rdx);",
    "__ adcq(rdx, rbx);",
    "__ adcq(rbx, r8);",
    "__ adcq(r8, r9);",
    "__ adcq(r9, r10);",
    "__ adcq(r10, r11);",
    "__ adcq(r11, r12);",
    "__ adcq(r12, r13);",
    "__ adcq(r13, r14);",
    "__ adcq(r14, r15);",
    "__ adcq(r15, r16);",
    "__ adcq(r16, r17);",
    "__ adcq(r17, r18);",
    "__ adcq(r18, r19);",
    "__ adcq(r19, r20);",
    "__ adcq(r20, r21);",
    "__ adcq(r21, r22);",
    "__ adcq(r22, r23);",
    "__ adcq(r23, r24);",
    "__ adcq(r24, r25);",
    "__ adcq(r25, r26);",
    "__ adcq(r26, r27);",
    "__ adcq(r27, r28);",
    "__ adcq(r28, r29);",
    "__ adcq(r29, r30);",
    "__ adcq(r30, r31);",
    "__ adcq(r31, rcx);",
    "__ imulq(rcx, rdx);",
    "__ imulq(rdx, rbx);",
    "__ imulq(rbx, r8);",
    "__ imulq(r8, r9);",
    "__ imulq(r9, r10);",
    "__ imulq(r10, r11);",
    "__ imulq(r11, r12);",
    "__ imulq(r12, r13);",
    "__ imulq(r13, r14);",
    "__ imulq(r14, r15);",
    "__ imulq(r15, r16);",
    "__ imulq(r16, r17);",
    "__ imulq(r17, r18);",
    "__ imulq(r18, r19);",
    "__ imulq(r19, r20);",
    "__ imulq(r20, r21);",
    "__ imulq(r21, r22);",
    "__ imulq(r22, r23);",
    "__ imulq(r23, r24);",
    "__ imulq(r24, r25);",
    "__ imulq(r25, r26);",
    "__ imulq(r26, r27);",
    "__ imulq(r27, r28);",
    "__ imulq(r28, r29);",
    "__ imulq(r29, r30);",
    "__ imulq(r30, r31);",
    "__ imulq(r31, rcx);",
    "__ popcntq(rcx, rdx);",
    "__ popcntq(rdx, rbx);",
    "__ popcntq(rbx, r8);",
    "__ popcntq(r8, r9);",
    "__ popcntq(r9, r10);",
    "__ popcntq(r10, r11);",
    "__ popcntq(r11, r12);",
    "__ popcntq(r12, r13);",
    "__ popcntq(r13, r14);",
    "__ popcntq(r14, r15);",
    "__ popcntq(r15, r16);",
    "__ popcntq(r16, r17);",
    "__ popcntq(r17, r18);",
    "__ popcntq(r18, r19);",
    "__ popcntq(r19, r20);",
    "__ popcntq(r20, r21);",
    "__ popcntq(r21, r22);",
    "__ popcntq(r22, r23);",
    "__ popcntq(r23, r24);",
    "__ popcntq(r24, r25);",
    "__ popcntq(r25, r26);",
    "__ popcntq(r26, r27);",
    "__ popcntq(r27, r28);",
    "__ popcntq(r28, r29);",
    "__ popcntq(r29, r30);",
    "__ popcntq(r30, r31);",
    "__ popcntq(r31, rcx);",
    "__ sbbq(rcx, rdx);",
    "__ sbbq(rdx, rbx);",
    "__ sbbq(rbx, r8);",
    "__ sbbq(r8, r9);",
    "__ sbbq(r9, r10);",
    "__ sbbq(r10, r11);",
    "__ sbbq(r11, r12);",
    "__ sbbq(r12, r13);",
    "__ sbbq(r13, r14);",
    "__ sbbq(r14, r15);",
    "__ sbbq(r15, r16);",
    "__ sbbq(r16, r17);",
    "__ sbbq(r17, r18);",
    "__ sbbq(r18, r19);",
    "__ sbbq(r19, r20);",
    "__ sbbq(r20, r21);",
    "__ sbbq(r21, r22);",
    "__ sbbq(r22, r23);",
    "__ sbbq(r23, r24);",
    "__ sbbq(r24, r25);",
    "__ sbbq(r25, r26);",
    "__ sbbq(r26, r27);",
    "__ sbbq(r27, r28);",
    "__ sbbq(r28, r29);",
    "__ sbbq(r29, r30);",
    "__ sbbq(r30, r31);",
    "__ sbbq(r31, rcx);",
    "__ subq(rcx, rdx);",
    "__ subq(rdx, rbx);",
    "__ subq(rbx, r8);",
    "__ subq(r8, r9);",
    "__ subq(r9, r10);",
    "__ subq(r10, r11);",
    "__ subq(r11, r12);",
    "__ subq(r12, r13);",
    "__ subq(r13, r14);",
    "__ subq(r14, r15);",
    "__ subq(r15, r16);",
    "__ subq(r16, r17);",
    "__ subq(r17, r18);",
    "__ subq(r18, r19);",
    "__ subq(r19, r20);",
    "__ subq(r20, r21);",
    "__ subq(r21, r22);",
    "__ subq(r22, r23);",
    "__ subq(r23, r24);",
    "__ subq(r24, r25);",
    "__ subq(r25, r26);",
    "__ subq(r26, r27);",
    "__ subq(r27, r28);",
    "__ subq(r28, r29);",
    "__ subq(r29, r30);",
    "__ subq(r30, r31);",
    "__ subq(r31, rcx);",
    "__ tzcntq(rcx, rdx);",
    "__ tzcntq(rdx, rbx);",
    "__ tzcntq(rbx, r8);",
    "__ tzcntq(r8, r9);",
    "__ tzcntq(r9, r10);",
    "__ tzcntq(r10, r11);",
    "__ tzcntq(r11, r12);",
    "__ tzcntq(r12, r13);",
    "__ tzcntq(r13, r14);",
    "__ tzcntq(r14, r15);",
    "__ tzcntq(r15, r16);",
    "__ tzcntq(r16, r17);",
    "__ tzcntq(r17, r18);",
    "__ tzcntq(r18, r19);",
    "__ tzcntq(r19, r20);",
    "__ tzcntq(r20, r21);",
    "__ tzcntq(r21, r22);",
    "__ tzcntq(r22, r23);",
    "__ tzcntq(r23, r24);",
    "__ tzcntq(r24, r25);",
    "__ tzcntq(r25, r26);",
    "__ tzcntq(r26, r27);",
    "__ tzcntq(r27, r28);",
    "__ tzcntq(r28, r29);",
    "__ tzcntq(r29, r30);",
    "__ tzcntq(r30, r31);",
    "__ tzcntq(r31, rcx);",
    "__ lzcntq(rcx, rdx);",
    "__ lzcntq(rdx, rbx);",
    "__ lzcntq(rbx, r8);",
    "__ lzcntq(r8, r9);",
    "__ lzcntq(r9, r10);",
    "__ lzcntq(r10, r11);",
    "__ lzcntq(r11, r12);",
    "__ lzcntq(r12, r13);",
    "__ lzcntq(r13, r14);",
    "__ lzcntq(r14, r15);",
    "__ lzcntq(r15, r16);",
    "__ lzcntq(r16, r17);",
    "__ lzcntq(r17, r18);",
    "__ lzcntq(r18, r19);",
    "__ lzcntq(r19, r20);",
    "__ lzcntq(r20, r21);",
    "__ lzcntq(r21, r22);",
    "__ lzcntq(r22, r23);",
    "__ lzcntq(r23, r24);",
    "__ lzcntq(r24, r25);",
    "__ lzcntq(r25, r26);",
    "__ lzcntq(r26, r27);",
    "__ lzcntq(r27, r28);",
    "__ lzcntq(r28, r29);",
    "__ lzcntq(r29, r30);",
    "__ lzcntq(r30, r31);",
    "__ lzcntq(r31, rcx);",
    "__ addq(rcx, rdx);",
    "__ addq(rdx, rbx);",
    "__ addq(rbx, r8);",
    "__ addq(r8, r9);",
    "__ addq(r9, r10);",
    "__ addq(r10, r11);",
    "__ addq(r11, r12);",
    "__ addq(r12, r13);",
    "__ addq(r13, r14);",
    "__ addq(r14, r15);",
    "__ addq(r15, r16);",
    "__ addq(r16, r17);",
    "__ addq(r17, r18);",
    "__ addq(r18, r19);",
    "__ addq(r19, r20);",
    "__ addq(r20, r21);",
    "__ addq(r21, r22);",
    "__ addq(r22, r23);",
    "__ addq(r23, r24);",
    "__ addq(r24, r25);",
    "__ addq(r25, r26);",
    "__ addq(r26, r27);",
    "__ addq(r27, r28);",
    "__ addq(r28, r29);",
    "__ addq(r29, r30);",
    "__ addq(r30, r31);",
    "__ addq(r31, rcx);",
    "__ andq(rcx, rdx);",
    "__ andq(rdx, rbx);",
    "__ andq(rbx, r8);",
    "__ andq(r8, r9);",
    "__ andq(r9, r10);",
    "__ andq(r10, r11);",
    "__ andq(r11, r12);",
    "__ andq(r12, r13);",
    "__ andq(r13, r14);",
    "__ andq(r14, r15);",
    "__ andq(r15, r16);",
    "__ andq(r16, r17);",
    "__ andq(r17, r18);",
    "__ andq(r18, r19);",
    "__ andq(r19, r20);",
    "__ andq(r20, r21);",
    "__ andq(r21, r22);",
    "__ andq(r22, r23);",
    "__ andq(r23, r24);",
    "__ andq(r24, r25);",
    "__ andq(r25, r26);",
    "__ andq(r26, r27);",
    "__ andq(r27, r28);",
    "__ andq(r28, r29);",
    "__ andq(r29, r30);",
    "__ andq(r30, r31);",
    "__ andq(r31, rcx);",
    "__ orq(rcx, rdx);",
    "__ orq(rdx, rbx);",
    "__ orq(rbx, r8);",
    "__ orq(r8, r9);",
    "__ orq(r9, r10);",
    "__ orq(r10, r11);",
    "__ orq(r11, r12);",
    "__ orq(r12, r13);",
    "__ orq(r13, r14);",
    "__ orq(r14, r15);",
    "__ orq(r15, r16);",
    "__ orq(r16, r17);",
    "__ orq(r17, r18);",
    "__ orq(r18, r19);",
    "__ orq(r19, r20);",
    "__ orq(r20, r21);",
    "__ orq(r21, r22);",
    "__ orq(r22, r23);",
    "__ orq(r23, r24);",
    "__ orq(r24, r25);",
    "__ orq(r25, r26);",
    "__ orq(r26, r27);",
    "__ orq(r27, r28);",
    "__ orq(r28, r29);",
    "__ orq(r29, r30);",
    "__ orq(r30, r31);",
    "__ orq(r31, rcx);",
    "__ xorq(rcx, rdx);",
    "__ xorq(rdx, rbx);",
    "__ xorq(rbx, r8);",
    "__ xorq(r8, r9);",
    "__ xorq(r9, r10);",
    "__ xorq(r10, r11);",
    "__ xorq(r11, r12);",
    "__ xorq(r12, r13);",
    "__ xorq(r13, r14);",
    "__ xorq(r14, r15);",
    "__ xorq(r15, r16);",
    "__ xorq(r16, r17);",
    "__ xorq(r17, r18);",
    "__ xorq(r18, r19);",
    "__ xorq(r19, r20);",
    "__ xorq(r20, r21);",
    "__ xorq(r21, r22);",
    "__ xorq(r22, r23);",
    "__ xorq(r23, r24);",
    "__ xorq(r24, r25);",
    "__ xorq(r25, r26);",
    "__ xorq(r26, r27);",
    "__ xorq(r27, r28);",
    "__ xorq(r28, r29);",
    "__ xorq(r29, r30);",
    "__ xorq(r30, r31);",
    "__ xorq(r31, rcx);",
    "__ addq(Address(rdx, rbx), rcx);",
    "__ addq(Address(rbx, r8), rdx);",
    "__ addq(Address(r8, r9), rbx);",
    "__ addq(Address(r9, r10), r8);",
    "__ addq(Address(r10, r11), r9);",
    "__ addq(Address(r11, r12), r10);",
    "__ addq(Address(r12, r13), r11);",
    "__ addq(Address(r13, r14), r12);",
    "__ addq(Address(r14, r15), r13);",
    "__ addq(Address(r15, r16), r14);",
    "__ addq(Address(r16, r17), r15);",
    "__ addq(Address(r17, r18), r16);",
    "__ addq(Address(r18, r19), r17);",
    "__ addq(Address(r19, r20), r18);",
    "__ addq(Address(r20, r21), r19);",
    "__ addq(Address(r21, r22), r20);",
    "__ addq(Address(r22, r23), r21);",
    "__ addq(Address(r23, r24), r22);",
    "__ addq(Address(r24, r25), r23);",
    "__ addq(Address(r25, r26), r24);",
    "__ addq(Address(r26, r27), r25);",
    "__ addq(Address(r27, r28), r26);",
    "__ addq(Address(r28, r29), r27);",
    "__ addq(Address(r29, r30), r28);",
    "__ addq(Address(r30, r31), r29);",
    "__ addq(Address(r31, rcx), r30);",
    "__ addq(Address(rcx, rdx), r31);",
    "__ andq(Address(rdx, rbx), rcx);",
    "__ andq(Address(rbx, r8), rdx);",
    "__ andq(Address(r8, r9), rbx);",
    "__ andq(Address(r9, r10), r8);",
    "__ andq(Address(r10, r11), r9);",
    "__ andq(Address(r11, r12), r10);",
    "__ andq(Address(r12, r13), r11);",
    "__ andq(Address(r13, r14), r12);",
    "__ andq(Address(r14, r15), r13);",
    "__ andq(Address(r15, r16), r14);",
    "__ andq(Address(r16, r17), r15);",
    "__ andq(Address(r17, r18), r16);",
    "__ andq(Address(r18, r19), r17);",
    "__ andq(Address(r19, r20), r18);",
    "__ andq(Address(r20, r21), r19);",
    "__ andq(Address(r21, r22), r20);",
    "__ andq(Address(r22, r23), r21);",
    "__ andq(Address(r23, r24), r22);",
    "__ andq(Address(r24, r25), r23);",
    "__ andq(Address(r25, r26), r24);",
    "__ andq(Address(r26, r27), r25);",
    "__ andq(Address(r27, r28), r26);",
    "__ andq(Address(r28, r29), r27);",
    "__ andq(Address(r29, r30), r28);",
    "__ andq(Address(r30, r31), r29);",
    "__ andq(Address(r31, rcx), r30);",
    "__ andq(Address(rcx, rdx), r31);",
    "__ orq(Address(rdx, rbx), rcx);",
    "__ orq(Address(rbx, r8), rdx);",
    "__ orq(Address(r8, r9), rbx);",
    "__ orq(Address(r9, r10), r8);",
    "__ orq(Address(r10, r11), r9);",
    "__ orq(Address(r11, r12), r10);",
    "__ orq(Address(r12, r13), r11);",
    "__ orq(Address(r13, r14), r12);",
    "__ orq(Address(r14, r15), r13);",
    "__ orq(Address(r15, r16), r14);",
    "__ orq(Address(r16, r17), r15);",
    "__ orq(Address(r17, r18), r16);",
    "__ orq(Address(r18, r19), r17);",
    "__ orq(Address(r19, r20), r18);",
    "__ orq(Address(r20, r21), r19);",
    "__ orq(Address(r21, r22), r20);",
    "__ orq(Address(r22, r23), r21);",
    "__ orq(Address(r23, r24), r22);",
    "__ orq(Address(r24, r25), r23);",
    "__ orq(Address(r25, r26), r24);",
    "__ orq(Address(r26, r27), r25);",
    "__ orq(Address(r27, r28), r26);",
    "__ orq(Address(r28, r29), r27);",
    "__ orq(Address(r29, r30), r28);",
    "__ orq(Address(r30, r31), r29);",
    "__ orq(Address(r31, rcx), r30);",
    "__ orq(Address(rcx, rdx), r31);",
    "__ xorq(Address(rdx, rbx), rcx);",
    "__ xorq(Address(rbx, r8), rdx);",
    "__ xorq(Address(r8, r9), rbx);",
    "__ xorq(Address(r9, r10), r8);",
    "__ xorq(Address(r10, r11), r9);",
    "__ xorq(Address(r11, r12), r10);",
    "__ xorq(Address(r12, r13), r11);",
    "__ xorq(Address(r13, r14), r12);",
    "__ xorq(Address(r14, r15), r13);",
    "__ xorq(Address(r15, r16), r14);",
    "__ xorq(Address(r16, r17), r15);",
    "__ xorq(Address(r17, r18), r16);",
    "__ xorq(Address(r18, r19), r17);",
    "__ xorq(Address(r19, r20), r18);",
    "__ xorq(Address(r20, r21), r19);",
    "__ xorq(Address(r21, r22), r20);",
    "__ xorq(Address(r22, r23), r21);",
    "__ xorq(Address(r23, r24), r22);",
    "__ xorq(Address(r24, r25), r23);",
    "__ xorq(Address(r25, r26), r24);",
    "__ xorq(Address(r26, r27), r25);",
    "__ xorq(Address(r27, r28), r26);",
    "__ xorq(Address(r28, r29), r27);",
    "__ xorq(Address(r29, r30), r28);",
    "__ xorq(Address(r30, r31), r29);",
    "__ xorq(Address(r31, rcx), r30);",
    "__ xorq(Address(rcx, rdx), r31);",
    "__ subq(Address(rdx, rbx), rcx);",
    "__ subq(Address(rbx, r8), rdx);",
    "__ subq(Address(r8, r9), rbx);",
    "__ subq(Address(r9, r10), r8);",
    "__ subq(Address(r10, r11), r9);",
    "__ subq(Address(r11, r12), r10);",
    "__ subq(Address(r12, r13), r11);",
    "__ subq(Address(r13, r14), r12);",
    "__ subq(Address(r14, r15), r13);",
    "__ subq(Address(r15, r16), r14);",
    "__ subq(Address(r16, r17), r15);",
    "__ subq(Address(r17, r18), r16);",
    "__ subq(Address(r18, r19), r17);",
    "__ subq(Address(r19, r20), r18);",
    "__ subq(Address(r20, r21), r19);",
    "__ subq(Address(r21, r22), r20);",
    "__ subq(Address(r22, r23), r21);",
    "__ subq(Address(r23, r24), r22);",
    "__ subq(Address(r24, r25), r23);",
    "__ subq(Address(r25, r26), r24);",
    "__ subq(Address(r26, r27), r25);",
    "__ subq(Address(r27, r28), r26);",
    "__ subq(Address(r28, r29), r27);",
    "__ subq(Address(r29, r30), r28);",
    "__ subq(Address(r30, r31), r29);",
    "__ subq(Address(r31, rcx), r30);",
    "__ subq(Address(rcx, rdx), r31);",
    "__ andq(Address(rcx, rdx), 1);",
    "__ andq(Address(rdx, rbx), 1);",
    "__ andq(Address(rbx, r8), 1);",
    "__ andq(Address(r8, r9), 1);",
    "__ andq(Address(r9, r10), 1);",
    "__ andq(Address(r10, r11), 1);",
    "__ andq(Address(r11, r12), 1);",
    "__ andq(Address(r12, r13), 1);",
    "__ andq(Address(r13, r14), 1);",
    "__ andq(Address(r14, r15), 1);",
    "__ andq(Address(r15, r16), 1);",
    "__ andq(Address(r16, r17), 1);",
    "__ andq(Address(r17, r18), 1);",
    "__ andq(Address(r18, r19), 1);",
    "__ andq(Address(r19, r20), 1);",
    "__ andq(Address(r20, r21), 1);",
    "__ andq(Address(r21, r22), 1);",
    "__ andq(Address(r22, r23), 1);",
    "__ andq(Address(r23, r24), 1);",
    "__ andq(Address(r24, r25), 1);",
    "__ andq(Address(r25, r26), 1);",
    "__ andq(Address(r26, r27), 1);",
    "__ andq(Address(r27, r28), 1);",
    "__ andq(Address(r28, r29), 1);",
    "__ andq(Address(r29, r30), 1);",
    "__ andq(Address(r30, r31), 1);",
    "__ andq(Address(r31, rcx), 1);",
    "__ andq(Address(rcx, rdx), 16);",
    "__ andq(Address(rdx, rbx), 16);",
    "__ andq(Address(rbx, r8), 16);",
    "__ andq(Address(r8, r9), 16);",
    "__ andq(Address(r9, r10), 16);",
    "__ andq(Address(r10, r11), 16);",
    "__ andq(Address(r11, r12), 16);",
    "__ andq(Address(r12, r13), 16);",
    "__ andq(Address(r13, r14), 16);",
    "__ andq(Address(r14, r15), 16);",
    "__ andq(Address(r15, r16), 16);",
    "__ andq(Address(r16, r17), 16);",
    "__ andq(Address(r17, r18), 16);",
    "__ andq(Address(r18, r19), 16);",
    "__ andq(Address(r19, r20), 16);",
    "__ andq(Address(r20, r21), 16);",
    "__ andq(Address(r21, r22), 16);",
    "__ andq(Address(r22, r23), 16);",
    "__ andq(Address(r23, r24), 16);",
    "__ andq(Address(r24, r25), 16);",
    "__ andq(Address(r25, r26), 16);",
    "__ andq(Address(r26, r27), 16);",
    "__ andq(Address(r27, r28), 16);",
    "__ andq(Address(r28, r29), 16);",
    "__ andq(Address(r29, r30), 16);",
    "__ andq(Address(r30, r31), 16);",
    "__ andq(Address(r31, rcx), 16);",
    "__ andq(Address(rcx, rdx), 256);",
    "__ andq(Address(rdx, rbx), 256);",
    "__ andq(Address(rbx, r8), 256);",
    "__ andq(Address(r8, r9), 256);",
    "__ andq(Address(r9, r10), 256);",
    "__ andq(Address(r10, r11), 256);",
    "__ andq(Address(r11, r12), 256);",
    "__ andq(Address(r12, r13), 256);",
    "__ andq(Address(r13, r14), 256);",
    "__ andq(Address(r14, r15), 256);",
    "__ andq(Address(r15, r16), 256);",
    "__ andq(Address(r16, r17), 256);",
    "__ andq(Address(r17, r18), 256);",
    "__ andq(Address(r18, r19), 256);",
    "__ andq(Address(r19, r20), 256);",
    "__ andq(Address(r20, r21), 256);",
    "__ andq(Address(r21, r22), 256);",
    "__ andq(Address(r22, r23), 256);",
    "__ andq(Address(r23, r24), 256);",
    "__ andq(Address(r24, r25), 256);",
    "__ andq(Address(r25, r26), 256);",
    "__ andq(Address(r26, r27), 256);",
    "__ andq(Address(r27, r28), 256);",
    "__ andq(Address(r28, r29), 256);",
    "__ andq(Address(r29, r30), 256);",
    "__ andq(Address(r30, r31), 256);",
    "__ andq(Address(r31, rcx), 256);",
    "__ andq(Address(rcx, rdx), 4096);",
    "__ andq(Address(rdx, rbx), 4096);",
    "__ andq(Address(rbx, r8), 4096);",
    "__ andq(Address(r8, r9), 4096);",
    "__ andq(Address(r9, r10), 4096);",
    "__ andq(Address(r10, r11), 4096);",
    "__ andq(Address(r11, r12), 4096);",
    "__ andq(Address(r12, r13), 4096);",
    "__ andq(Address(r13, r14), 4096);",
    "__ andq(Address(r14, r15), 4096);",
    "__ andq(Address(r15, r16), 4096);",
    "__ andq(Address(r16, r17), 4096);",
    "__ andq(Address(r17, r18), 4096);",
    "__ andq(Address(r18, r19), 4096);",
    "__ andq(Address(r19, r20), 4096);",
    "__ andq(Address(r20, r21), 4096);",
    "__ andq(Address(r21, r22), 4096);",
    "__ andq(Address(r22, r23), 4096);",
    "__ andq(Address(r23, r24), 4096);",
    "__ andq(Address(r24, r25), 4096);",
    "__ andq(Address(r25, r26), 4096);",
    "__ andq(Address(r26, r27), 4096);",
    "__ andq(Address(r27, r28), 4096);",
    "__ andq(Address(r28, r29), 4096);",
    "__ andq(Address(r29, r30), 4096);",
    "__ andq(Address(r30, r31), 4096);",
    "__ andq(Address(r31, rcx), 4096);",
    "__ andq(Address(rcx, rdx), 65536);",
    "__ andq(Address(rdx, rbx), 65536);",
    "__ andq(Address(rbx, r8), 65536);",
    "__ andq(Address(r8, r9), 65536);",
    "__ andq(Address(r9, r10), 65536);",
    "__ andq(Address(r10, r11), 65536);",
    "__ andq(Address(r11, r12), 65536);",
    "__ andq(Address(r12, r13), 65536);",
    "__ andq(Address(r13, r14), 65536);",
    "__ andq(Address(r14, r15), 65536);",
    "__ andq(Address(r15, r16), 65536);",
    "__ andq(Address(r16, r17), 65536);",
    "__ andq(Address(r17, r18), 65536);",
    "__ andq(Address(r18, r19), 65536);",
    "__ andq(Address(r19, r20), 65536);",
    "__ andq(Address(r20, r21), 65536);",
    "__ andq(Address(r21, r22), 65536);",
    "__ andq(Address(r22, r23), 65536);",
    "__ andq(Address(r23, r24), 65536);",
    "__ andq(Address(r24, r25), 65536);",
    "__ andq(Address(r25, r26), 65536);",
    "__ andq(Address(r26, r27), 65536);",
    "__ andq(Address(r27, r28), 65536);",
    "__ andq(Address(r28, r29), 65536);",
    "__ andq(Address(r29, r30), 65536);",
    "__ andq(Address(r30, r31), 65536);",
    "__ andq(Address(r31, rcx), 65536);",
    "__ andq(Address(rcx, rdx), 1048576);",
    "__ andq(Address(rdx, rbx), 1048576);",
    "__ andq(Address(rbx, r8), 1048576);",
    "__ andq(Address(r8, r9), 1048576);",
    "__ andq(Address(r9, r10), 1048576);",
    "__ andq(Address(r10, r11), 1048576);",
    "__ andq(Address(r11, r12), 1048576);",
    "__ andq(Address(r12, r13), 1048576);",
    "__ andq(Address(r13, r14), 1048576);",
    "__ andq(Address(r14, r15), 1048576);",
    "__ andq(Address(r15, r16), 1048576);",
    "__ andq(Address(r16, r17), 1048576);",
    "__ andq(Address(r17, r18), 1048576);",
    "__ andq(Address(r18, r19), 1048576);",
    "__ andq(Address(r19, r20), 1048576);",
    "__ andq(Address(r20, r21), 1048576);",
    "__ andq(Address(r21, r22), 1048576);",
    "__ andq(Address(r22, r23), 1048576);",
    "__ andq(Address(r23, r24), 1048576);",
    "__ andq(Address(r24, r25), 1048576);",
    "__ andq(Address(r25, r26), 1048576);",
    "__ andq(Address(r26, r27), 1048576);",
    "__ andq(Address(r27, r28), 1048576);",
    "__ andq(Address(r28, r29), 1048576);",
    "__ andq(Address(r29, r30), 1048576);",
    "__ andq(Address(r30, r31), 1048576);",
    "__ andq(Address(r31, rcx), 1048576);",
    "__ andq(Address(rcx, rdx), 16777216);",
    "__ andq(Address(rdx, rbx), 16777216);",
    "__ andq(Address(rbx, r8), 16777216);",
    "__ andq(Address(r8, r9), 16777216);",
    "__ andq(Address(r9, r10), 16777216);",
    "__ andq(Address(r10, r11), 16777216);",
    "__ andq(Address(r11, r12), 16777216);",
    "__ andq(Address(r12, r13), 16777216);",
    "__ andq(Address(r13, r14), 16777216);",
    "__ andq(Address(r14, r15), 16777216);",
    "__ andq(Address(r15, r16), 16777216);",
    "__ andq(Address(r16, r17), 16777216);",
    "__ andq(Address(r17, r18), 16777216);",
    "__ andq(Address(r18, r19), 16777216);",
    "__ andq(Address(r19, r20), 16777216);",
    "__ andq(Address(r20, r21), 16777216);",
    "__ andq(Address(r21, r22), 16777216);",
    "__ andq(Address(r22, r23), 16777216);",
    "__ andq(Address(r23, r24), 16777216);",
    "__ andq(Address(r24, r25), 16777216);",
    "__ andq(Address(r25, r26), 16777216);",
    "__ andq(Address(r26, r27), 16777216);",
    "__ andq(Address(r27, r28), 16777216);",
    "__ andq(Address(r28, r29), 16777216);",
    "__ andq(Address(r29, r30), 16777216);",
    "__ andq(Address(r30, r31), 16777216);",
    "__ andq(Address(r31, rcx), 16777216);",
    "__ andq(Address(rcx, rdx), 268435456);",
    "__ andq(Address(rdx, rbx), 268435456);",
    "__ andq(Address(rbx, r8), 268435456);",
    "__ andq(Address(r8, r9), 268435456);",
    "__ andq(Address(r9, r10), 268435456);",
    "__ andq(Address(r10, r11), 268435456);",
    "__ andq(Address(r11, r12), 268435456);",
    "__ andq(Address(r12, r13), 268435456);",
    "__ andq(Address(r13, r14), 268435456);",
    "__ andq(Address(r14, r15), 268435456);",
    "__ andq(Address(r15, r16), 268435456);",
    "__ andq(Address(r16, r17), 268435456);",
    "__ andq(Address(r17, r18), 268435456);",
    "__ andq(Address(r18, r19), 268435456);",
    "__ andq(Address(r19, r20), 268435456);",
    "__ andq(Address(r20, r21), 268435456);",
    "__ andq(Address(r21, r22), 268435456);",
    "__ andq(Address(r22, r23), 268435456);",
    "__ andq(Address(r23, r24), 268435456);",
    "__ andq(Address(r24, r25), 268435456);",
    "__ andq(Address(r25, r26), 268435456);",
    "__ andq(Address(r26, r27), 268435456);",
    "__ andq(Address(r27, r28), 268435456);",
    "__ andq(Address(r28, r29), 268435456);",
    "__ andq(Address(r29, r30), 268435456);",
    "__ andq(Address(r30, r31), 268435456);",
    "__ andq(Address(r31, rcx), 268435456);",
    "__ addq(Address(rcx, rdx), 1);",
    "__ addq(Address(rdx, rbx), 1);",
    "__ addq(Address(rbx, r8), 1);",
    "__ addq(Address(r8, r9), 1);",
    "__ addq(Address(r9, r10), 1);",
    "__ addq(Address(r10, r11), 1);",
    "__ addq(Address(r11, r12), 1);",
    "__ addq(Address(r12, r13), 1);",
    "__ addq(Address(r13, r14), 1);",
    "__ addq(Address(r14, r15), 1);",
    "__ addq(Address(r15, r16), 1);",
    "__ addq(Address(r16, r17), 1);",
    "__ addq(Address(r17, r18), 1);",
    "__ addq(Address(r18, r19), 1);",
    "__ addq(Address(r19, r20), 1);",
    "__ addq(Address(r20, r21), 1);",
    "__ addq(Address(r21, r22), 1);",
    "__ addq(Address(r22, r23), 1);",
    "__ addq(Address(r23, r24), 1);",
    "__ addq(Address(r24, r25), 1);",
    "__ addq(Address(r25, r26), 1);",
    "__ addq(Address(r26, r27), 1);",
    "__ addq(Address(r27, r28), 1);",
    "__ addq(Address(r28, r29), 1);",
    "__ addq(Address(r29, r30), 1);",
    "__ addq(Address(r30, r31), 1);",
    "__ addq(Address(r31, rcx), 1);",
    "__ addq(Address(rcx, rdx), 16);",
    "__ addq(Address(rdx, rbx), 16);",
    "__ addq(Address(rbx, r8), 16);",
    "__ addq(Address(r8, r9), 16);",
    "__ addq(Address(r9, r10), 16);",
    "__ addq(Address(r10, r11), 16);",
    "__ addq(Address(r11, r12), 16);",
    "__ addq(Address(r12, r13), 16);",
    "__ addq(Address(r13, r14), 16);",
    "__ addq(Address(r14, r15), 16);",
    "__ addq(Address(r15, r16), 16);",
    "__ addq(Address(r16, r17), 16);",
    "__ addq(Address(r17, r18), 16);",
    "__ addq(Address(r18, r19), 16);",
    "__ addq(Address(r19, r20), 16);",
    "__ addq(Address(r20, r21), 16);",
    "__ addq(Address(r21, r22), 16);",
    "__ addq(Address(r22, r23), 16);",
    "__ addq(Address(r23, r24), 16);",
    "__ addq(Address(r24, r25), 16);",
    "__ addq(Address(r25, r26), 16);",
    "__ addq(Address(r26, r27), 16);",
    "__ addq(Address(r27, r28), 16);",
    "__ addq(Address(r28, r29), 16);",
    "__ addq(Address(r29, r30), 16);",
    "__ addq(Address(r30, r31), 16);",
    "__ addq(Address(r31, rcx), 16);",
    "__ addq(Address(rcx, rdx), 256);",
    "__ addq(Address(rdx, rbx), 256);",
    "__ addq(Address(rbx, r8), 256);",
    "__ addq(Address(r8, r9), 256);",
    "__ addq(Address(r9, r10), 256);",
    "__ addq(Address(r10, r11), 256);",
    "__ addq(Address(r11, r12), 256);",
    "__ addq(Address(r12, r13), 256);",
    "__ addq(Address(r13, r14), 256);",
    "__ addq(Address(r14, r15), 256);",
    "__ addq(Address(r15, r16), 256);",
    "__ addq(Address(r16, r17), 256);",
    "__ addq(Address(r17, r18), 256);",
    "__ addq(Address(r18, r19), 256);",
    "__ addq(Address(r19, r20), 256);",
    "__ addq(Address(r20, r21), 256);",
    "__ addq(Address(r21, r22), 256);",
    "__ addq(Address(r22, r23), 256);",
    "__ addq(Address(r23, r24), 256);",
    "__ addq(Address(r24, r25), 256);",
    "__ addq(Address(r25, r26), 256);",
    "__ addq(Address(r26, r27), 256);",
    "__ addq(Address(r27, r28), 256);",
    "__ addq(Address(r28, r29), 256);",
    "__ addq(Address(r29, r30), 256);",
    "__ addq(Address(r30, r31), 256);",
    "__ addq(Address(r31, rcx), 256);",
    "__ addq(Address(rcx, rdx), 4096);",
    "__ addq(Address(rdx, rbx), 4096);",
    "__ addq(Address(rbx, r8), 4096);",
    "__ addq(Address(r8, r9), 4096);",
    "__ addq(Address(r9, r10), 4096);",
    "__ addq(Address(r10, r11), 4096);",
    "__ addq(Address(r11, r12), 4096);",
    "__ addq(Address(r12, r13), 4096);",
    "__ addq(Address(r13, r14), 4096);",
    "__ addq(Address(r14, r15), 4096);",
    "__ addq(Address(r15, r16), 4096);",
    "__ addq(Address(r16, r17), 4096);",
    "__ addq(Address(r17, r18), 4096);",
    "__ addq(Address(r18, r19), 4096);",
    "__ addq(Address(r19, r20), 4096);",
    "__ addq(Address(r20, r21), 4096);",
    "__ addq(Address(r21, r22), 4096);",
    "__ addq(Address(r22, r23), 4096);",
    "__ addq(Address(r23, r24), 4096);",
    "__ addq(Address(r24, r25), 4096);",
    "__ addq(Address(r25, r26), 4096);",
    "__ addq(Address(r26, r27), 4096);",
    "__ addq(Address(r27, r28), 4096);",
    "__ addq(Address(r28, r29), 4096);",
    "__ addq(Address(r29, r30), 4096);",
    "__ addq(Address(r30, r31), 4096);",
    "__ addq(Address(r31, rcx), 4096);",
    "__ addq(Address(rcx, rdx), 65536);",
    "__ addq(Address(rdx, rbx), 65536);",
    "__ addq(Address(rbx, r8), 65536);",
    "__ addq(Address(r8, r9), 65536);",
    "__ addq(Address(r9, r10), 65536);",
    "__ addq(Address(r10, r11), 65536);",
    "__ addq(Address(r11, r12), 65536);",
    "__ addq(Address(r12, r13), 65536);",
    "__ addq(Address(r13, r14), 65536);",
    "__ addq(Address(r14, r15), 65536);",
    "__ addq(Address(r15, r16), 65536);",
    "__ addq(Address(r16, r17), 65536);",
    "__ addq(Address(r17, r18), 65536);",
    "__ addq(Address(r18, r19), 65536);",
    "__ addq(Address(r19, r20), 65536);",
    "__ addq(Address(r20, r21), 65536);",
    "__ addq(Address(r21, r22), 65536);",
    "__ addq(Address(r22, r23), 65536);",
    "__ addq(Address(r23, r24), 65536);",
    "__ addq(Address(r24, r25), 65536);",
    "__ addq(Address(r25, r26), 65536);",
    "__ addq(Address(r26, r27), 65536);",
    "__ addq(Address(r27, r28), 65536);",
    "__ addq(Address(r28, r29), 65536);",
    "__ addq(Address(r29, r30), 65536);",
    "__ addq(Address(r30, r31), 65536);",
    "__ addq(Address(r31, rcx), 65536);",
    "__ addq(Address(rcx, rdx), 1048576);",
    "__ addq(Address(rdx, rbx), 1048576);",
    "__ addq(Address(rbx, r8), 1048576);",
    "__ addq(Address(r8, r9), 1048576);",
    "__ addq(Address(r9, r10), 1048576);",
    "__ addq(Address(r10, r11), 1048576);",
    "__ addq(Address(r11, r12), 1048576);",
    "__ addq(Address(r12, r13), 1048576);",
    "__ addq(Address(r13, r14), 1048576);",
    "__ addq(Address(r14, r15), 1048576);",
    "__ addq(Address(r15, r16), 1048576);",
    "__ addq(Address(r16, r17), 1048576);",
    "__ addq(Address(r17, r18), 1048576);",
    "__ addq(Address(r18, r19), 1048576);",
    "__ addq(Address(r19, r20), 1048576);",
    "__ addq(Address(r20, r21), 1048576);",
    "__ addq(Address(r21, r22), 1048576);",
    "__ addq(Address(r22, r23), 1048576);",
    "__ addq(Address(r23, r24), 1048576);",
    "__ addq(Address(r24, r25), 1048576);",
    "__ addq(Address(r25, r26), 1048576);",
    "__ addq(Address(r26, r27), 1048576);",
    "__ addq(Address(r27, r28), 1048576);",
    "__ addq(Address(r28, r29), 1048576);",
    "__ addq(Address(r29, r30), 1048576);",
    "__ addq(Address(r30, r31), 1048576);",
    "__ addq(Address(r31, rcx), 1048576);",
    "__ addq(Address(rcx, rdx), 16777216);",
    "__ addq(Address(rdx, rbx), 16777216);",
    "__ addq(Address(rbx, r8), 16777216);",
    "__ addq(Address(r8, r9), 16777216);",
    "__ addq(Address(r9, r10), 16777216);",
    "__ addq(Address(r10, r11), 16777216);",
    "__ addq(Address(r11, r12), 16777216);",
    "__ addq(Address(r12, r13), 16777216);",
    "__ addq(Address(r13, r14), 16777216);",
    "__ addq(Address(r14, r15), 16777216);",
    "__ addq(Address(r15, r16), 16777216);",
    "__ addq(Address(r16, r17), 16777216);",
    "__ addq(Address(r17, r18), 16777216);",
    "__ addq(Address(r18, r19), 16777216);",
    "__ addq(Address(r19, r20), 16777216);",
    "__ addq(Address(r20, r21), 16777216);",
    "__ addq(Address(r21, r22), 16777216);",
    "__ addq(Address(r22, r23), 16777216);",
    "__ addq(Address(r23, r24), 16777216);",
    "__ addq(Address(r24, r25), 16777216);",
    "__ addq(Address(r25, r26), 16777216);",
    "__ addq(Address(r26, r27), 16777216);",
    "__ addq(Address(r27, r28), 16777216);",
    "__ addq(Address(r28, r29), 16777216);",
    "__ addq(Address(r29, r30), 16777216);",
    "__ addq(Address(r30, r31), 16777216);",
    "__ addq(Address(r31, rcx), 16777216);",
    "__ addq(Address(rcx, rdx), 268435456);",
    "__ addq(Address(rdx, rbx), 268435456);",
    "__ addq(Address(rbx, r8), 268435456);",
    "__ addq(Address(r8, r9), 268435456);",
    "__ addq(Address(r9, r10), 268435456);",
    "__ addq(Address(r10, r11), 268435456);",
    "__ addq(Address(r11, r12), 268435456);",
    "__ addq(Address(r12, r13), 268435456);",
    "__ addq(Address(r13, r14), 268435456);",
    "__ addq(Address(r14, r15), 268435456);",
    "__ addq(Address(r15, r16), 268435456);",
    "__ addq(Address(r16, r17), 268435456);",
    "__ addq(Address(r17, r18), 268435456);",
    "__ addq(Address(r18, r19), 268435456);",
    "__ addq(Address(r19, r20), 268435456);",
    "__ addq(Address(r20, r21), 268435456);",
    "__ addq(Address(r21, r22), 268435456);",
    "__ addq(Address(r22, r23), 268435456);",
    "__ addq(Address(r23, r24), 268435456);",
    "__ addq(Address(r24, r25), 268435456);",
    "__ addq(Address(r25, r26), 268435456);",
    "__ addq(Address(r26, r27), 268435456);",
    "__ addq(Address(r27, r28), 268435456);",
    "__ addq(Address(r28, r29), 268435456);",
    "__ addq(Address(r29, r30), 268435456);",
    "__ addq(Address(r30, r31), 268435456);",
    "__ addq(Address(r31, rcx), 268435456);",
    "__ sarq(Address(rcx, rdx), 1);",
    "__ sarq(Address(rdx, rbx), 1);",
    "__ sarq(Address(rbx, r8), 1);",
    "__ sarq(Address(r8, r9), 1);",
    "__ sarq(Address(r9, r10), 1);",
    "__ sarq(Address(r10, r11), 1);",
    "__ sarq(Address(r11, r12), 1);",
    "__ sarq(Address(r12, r13), 1);",
    "__ sarq(Address(r13, r14), 1);",
    "__ sarq(Address(r14, r15), 1);",
    "__ sarq(Address(r15, r16), 1);",
    "__ sarq(Address(r16, r17), 1);",
    "__ sarq(Address(r17, r18), 1);",
    "__ sarq(Address(r18, r19), 1);",
    "__ sarq(Address(r19, r20), 1);",
    "__ sarq(Address(r20, r21), 1);",
    "__ sarq(Address(r21, r22), 1);",
    "__ sarq(Address(r22, r23), 1);",
    "__ sarq(Address(r23, r24), 1);",
    "__ sarq(Address(r24, r25), 1);",
    "__ sarq(Address(r25, r26), 1);",
    "__ sarq(Address(r26, r27), 1);",
    "__ sarq(Address(r27, r28), 1);",
    "__ sarq(Address(r28, r29), 1);",
    "__ sarq(Address(r29, r30), 1);",
    "__ sarq(Address(r30, r31), 1);",
    "__ sarq(Address(r31, rcx), 1);",
    "__ sarq(Address(rcx, rdx), 2);",
    "__ sarq(Address(rdx, rbx), 2);",
    "__ sarq(Address(rbx, r8), 2);",
    "__ sarq(Address(r8, r9), 2);",
    "__ sarq(Address(r9, r10), 2);",
    "__ sarq(Address(r10, r11), 2);",
    "__ sarq(Address(r11, r12), 2);",
    "__ sarq(Address(r12, r13), 2);",
    "__ sarq(Address(r13, r14), 2);",
    "__ sarq(Address(r14, r15), 2);",
    "__ sarq(Address(r15, r16), 2);",
    "__ sarq(Address(r16, r17), 2);",
    "__ sarq(Address(r17, r18), 2);",
    "__ sarq(Address(r18, r19), 2);",
    "__ sarq(Address(r19, r20), 2);",
    "__ sarq(Address(r20, r21), 2);",
    "__ sarq(Address(r21, r22), 2);",
    "__ sarq(Address(r22, r23), 2);",
    "__ sarq(Address(r23, r24), 2);",
    "__ sarq(Address(r24, r25), 2);",
    "__ sarq(Address(r25, r26), 2);",
    "__ sarq(Address(r26, r27), 2);",
    "__ sarq(Address(r27, r28), 2);",
    "__ sarq(Address(r28, r29), 2);",
    "__ sarq(Address(r29, r30), 2);",
    "__ sarq(Address(r30, r31), 2);",
    "__ sarq(Address(r31, rcx), 2);",
    "__ sarq(Address(rcx, rdx), 4);",
    "__ sarq(Address(rdx, rbx), 4);",
    "__ sarq(Address(rbx, r8), 4);",
    "__ sarq(Address(r8, r9), 4);",
    "__ sarq(Address(r9, r10), 4);",
    "__ sarq(Address(r10, r11), 4);",
    "__ sarq(Address(r11, r12), 4);",
    "__ sarq(Address(r12, r13), 4);",
    "__ sarq(Address(r13, r14), 4);",
    "__ sarq(Address(r14, r15), 4);",
    "__ sarq(Address(r15, r16), 4);",
    "__ sarq(Address(r16, r17), 4);",
    "__ sarq(Address(r17, r18), 4);",
    "__ sarq(Address(r18, r19), 4);",
    "__ sarq(Address(r19, r20), 4);",
    "__ sarq(Address(r20, r21), 4);",
    "__ sarq(Address(r21, r22), 4);",
    "__ sarq(Address(r22, r23), 4);",
    "__ sarq(Address(r23, r24), 4);",
    "__ sarq(Address(r24, r25), 4);",
    "__ sarq(Address(r25, r26), 4);",
    "__ sarq(Address(r26, r27), 4);",
    "__ sarq(Address(r27, r28), 4);",
    "__ sarq(Address(r28, r29), 4);",
    "__ sarq(Address(r29, r30), 4);",
    "__ sarq(Address(r30, r31), 4);",
    "__ sarq(Address(r31, rcx), 4);",
    "__ sarq(Address(rcx, rdx), 8);",
    "__ sarq(Address(rdx, rbx), 8);",
    "__ sarq(Address(rbx, r8), 8);",
    "__ sarq(Address(r8, r9), 8);",
    "__ sarq(Address(r9, r10), 8);",
    "__ sarq(Address(r10, r11), 8);",
    "__ sarq(Address(r11, r12), 8);",
    "__ sarq(Address(r12, r13), 8);",
    "__ sarq(Address(r13, r14), 8);",
    "__ sarq(Address(r14, r15), 8);",
    "__ sarq(Address(r15, r16), 8);",
    "__ sarq(Address(r16, r17), 8);",
    "__ sarq(Address(r17, r18), 8);",
    "__ sarq(Address(r18, r19), 8);",
    "__ sarq(Address(r19, r20), 8);",
    "__ sarq(Address(r20, r21), 8);",
    "__ sarq(Address(r21, r22), 8);",
    "__ sarq(Address(r22, r23), 8);",
    "__ sarq(Address(r23, r24), 8);",
    "__ sarq(Address(r24, r25), 8);",
    "__ sarq(Address(r25, r26), 8);",
    "__ sarq(Address(r26, r27), 8);",
    "__ sarq(Address(r27, r28), 8);",
    "__ sarq(Address(r28, r29), 8);",
    "__ sarq(Address(r29, r30), 8);",
    "__ sarq(Address(r30, r31), 8);",
    "__ sarq(Address(r31, rcx), 8);",
    "__ sarq(Address(rcx, rdx), 16);",
    "__ sarq(Address(rdx, rbx), 16);",
    "__ sarq(Address(rbx, r8), 16);",
    "__ sarq(Address(r8, r9), 16);",
    "__ sarq(Address(r9, r10), 16);",
    "__ sarq(Address(r10, r11), 16);",
    "__ sarq(Address(r11, r12), 16);",
    "__ sarq(Address(r12, r13), 16);",
    "__ sarq(Address(r13, r14), 16);",
    "__ sarq(Address(r14, r15), 16);",
    "__ sarq(Address(r15, r16), 16);",
    "__ sarq(Address(r16, r17), 16);",
    "__ sarq(Address(r17, r18), 16);",
    "__ sarq(Address(r18, r19), 16);",
    "__ sarq(Address(r19, r20), 16);",
    "__ sarq(Address(r20, r21), 16);",
    "__ sarq(Address(r21, r22), 16);",
    "__ sarq(Address(r22, r23), 16);",
    "__ sarq(Address(r23, r24), 16);",
    "__ sarq(Address(r24, r25), 16);",
    "__ sarq(Address(r25, r26), 16);",
    "__ sarq(Address(r26, r27), 16);",
    "__ sarq(Address(r27, r28), 16);",
    "__ sarq(Address(r28, r29), 16);",
    "__ sarq(Address(r29, r30), 16);",
    "__ sarq(Address(r30, r31), 16);",
    "__ sarq(Address(r31, rcx), 16);",
    "__ sbbq(Address(rcx, rdx), 1);",
    "__ sbbq(Address(rdx, rbx), 1);",
    "__ sbbq(Address(rbx, r8), 1);",
    "__ sbbq(Address(r8, r9), 1);",
    "__ sbbq(Address(r9, r10), 1);",
    "__ sbbq(Address(r10, r11), 1);",
    "__ sbbq(Address(r11, r12), 1);",
    "__ sbbq(Address(r12, r13), 1);",
    "__ sbbq(Address(r13, r14), 1);",
    "__ sbbq(Address(r14, r15), 1);",
    "__ sbbq(Address(r15, r16), 1);",
    "__ sbbq(Address(r16, r17), 1);",
    "__ sbbq(Address(r17, r18), 1);",
    "__ sbbq(Address(r18, r19), 1);",
    "__ sbbq(Address(r19, r20), 1);",
    "__ sbbq(Address(r20, r21), 1);",
    "__ sbbq(Address(r21, r22), 1);",
    "__ sbbq(Address(r22, r23), 1);",
    "__ sbbq(Address(r23, r24), 1);",
    "__ sbbq(Address(r24, r25), 1);",
    "__ sbbq(Address(r25, r26), 1);",
    "__ sbbq(Address(r26, r27), 1);",
    "__ sbbq(Address(r27, r28), 1);",
    "__ sbbq(Address(r28, r29), 1);",
    "__ sbbq(Address(r29, r30), 1);",
    "__ sbbq(Address(r30, r31), 1);",
    "__ sbbq(Address(r31, rcx), 1);",
    "__ sbbq(Address(rcx, rdx), 16);",
    "__ sbbq(Address(rdx, rbx), 16);",
    "__ sbbq(Address(rbx, r8), 16);",
    "__ sbbq(Address(r8, r9), 16);",
    "__ sbbq(Address(r9, r10), 16);",
    "__ sbbq(Address(r10, r11), 16);",
    "__ sbbq(Address(r11, r12), 16);",
    "__ sbbq(Address(r12, r13), 16);",
    "__ sbbq(Address(r13, r14), 16);",
    "__ sbbq(Address(r14, r15), 16);",
    "__ sbbq(Address(r15, r16), 16);",
    "__ sbbq(Address(r16, r17), 16);",
    "__ sbbq(Address(r17, r18), 16);",
    "__ sbbq(Address(r18, r19), 16);",
    "__ sbbq(Address(r19, r20), 16);",
    "__ sbbq(Address(r20, r21), 16);",
    "__ sbbq(Address(r21, r22), 16);",
    "__ sbbq(Address(r22, r23), 16);",
    "__ sbbq(Address(r23, r24), 16);",
    "__ sbbq(Address(r24, r25), 16);",
    "__ sbbq(Address(r25, r26), 16);",
    "__ sbbq(Address(r26, r27), 16);",
    "__ sbbq(Address(r27, r28), 16);",
    "__ sbbq(Address(r28, r29), 16);",
    "__ sbbq(Address(r29, r30), 16);",
    "__ sbbq(Address(r30, r31), 16);",
    "__ sbbq(Address(r31, rcx), 16);",
    "__ sbbq(Address(rcx, rdx), 256);",
    "__ sbbq(Address(rdx, rbx), 256);",
    "__ sbbq(Address(rbx, r8), 256);",
    "__ sbbq(Address(r8, r9), 256);",
    "__ sbbq(Address(r9, r10), 256);",
    "__ sbbq(Address(r10, r11), 256);",
    "__ sbbq(Address(r11, r12), 256);",
    "__ sbbq(Address(r12, r13), 256);",
    "__ sbbq(Address(r13, r14), 256);",
    "__ sbbq(Address(r14, r15), 256);",
    "__ sbbq(Address(r15, r16), 256);",
    "__ sbbq(Address(r16, r17), 256);",
    "__ sbbq(Address(r17, r18), 256);",
    "__ sbbq(Address(r18, r19), 256);",
    "__ sbbq(Address(r19, r20), 256);",
    "__ sbbq(Address(r20, r21), 256);",
    "__ sbbq(Address(r21, r22), 256);",
    "__ sbbq(Address(r22, r23), 256);",
    "__ sbbq(Address(r23, r24), 256);",
    "__ sbbq(Address(r24, r25), 256);",
    "__ sbbq(Address(r25, r26), 256);",
    "__ sbbq(Address(r26, r27), 256);",
    "__ sbbq(Address(r27, r28), 256);",
    "__ sbbq(Address(r28, r29), 256);",
    "__ sbbq(Address(r29, r30), 256);",
    "__ sbbq(Address(r30, r31), 256);",
    "__ sbbq(Address(r31, rcx), 256);",
    "__ sbbq(Address(rcx, rdx), 4096);",
    "__ sbbq(Address(rdx, rbx), 4096);",
    "__ sbbq(Address(rbx, r8), 4096);",
    "__ sbbq(Address(r8, r9), 4096);",
    "__ sbbq(Address(r9, r10), 4096);",
    "__ sbbq(Address(r10, r11), 4096);",
    "__ sbbq(Address(r11, r12), 4096);",
    "__ sbbq(Address(r12, r13), 4096);",
    "__ sbbq(Address(r13, r14), 4096);",
    "__ sbbq(Address(r14, r15), 4096);",
    "__ sbbq(Address(r15, r16), 4096);",
    "__ sbbq(Address(r16, r17), 4096);",
    "__ sbbq(Address(r17, r18), 4096);",
    "__ sbbq(Address(r18, r19), 4096);",
    "__ sbbq(Address(r19, r20), 4096);",
    "__ sbbq(Address(r20, r21), 4096);",
    "__ sbbq(Address(r21, r22), 4096);",
    "__ sbbq(Address(r22, r23), 4096);",
    "__ sbbq(Address(r23, r24), 4096);",
    "__ sbbq(Address(r24, r25), 4096);",
    "__ sbbq(Address(r25, r26), 4096);",
    "__ sbbq(Address(r26, r27), 4096);",
    "__ sbbq(Address(r27, r28), 4096);",
    "__ sbbq(Address(r28, r29), 4096);",
    "__ sbbq(Address(r29, r30), 4096);",
    "__ sbbq(Address(r30, r31), 4096);",
    "__ sbbq(Address(r31, rcx), 4096);",
    "__ sbbq(Address(rcx, rdx), 65536);",
    "__ sbbq(Address(rdx, rbx), 65536);",
    "__ sbbq(Address(rbx, r8), 65536);",
    "__ sbbq(Address(r8, r9), 65536);",
    "__ sbbq(Address(r9, r10), 65536);",
    "__ sbbq(Address(r10, r11), 65536);",
    "__ sbbq(Address(r11, r12), 65536);",
    "__ sbbq(Address(r12, r13), 65536);",
    "__ sbbq(Address(r13, r14), 65536);",
    "__ sbbq(Address(r14, r15), 65536);",
    "__ sbbq(Address(r15, r16), 65536);",
    "__ sbbq(Address(r16, r17), 65536);",
    "__ sbbq(Address(r17, r18), 65536);",
    "__ sbbq(Address(r18, r19), 65536);",
    "__ sbbq(Address(r19, r20), 65536);",
    "__ sbbq(Address(r20, r21), 65536);",
    "__ sbbq(Address(r21, r22), 65536);",
    "__ sbbq(Address(r22, r23), 65536);",
    "__ sbbq(Address(r23, r24), 65536);",
    "__ sbbq(Address(r24, r25), 65536);",
    "__ sbbq(Address(r25, r26), 65536);",
    "__ sbbq(Address(r26, r27), 65536);",
    "__ sbbq(Address(r27, r28), 65536);",
    "__ sbbq(Address(r28, r29), 65536);",
    "__ sbbq(Address(r29, r30), 65536);",
    "__ sbbq(Address(r30, r31), 65536);",
    "__ sbbq(Address(r31, rcx), 65536);",
    "__ sbbq(Address(rcx, rdx), 1048576);",
    "__ sbbq(Address(rdx, rbx), 1048576);",
    "__ sbbq(Address(rbx, r8), 1048576);",
    "__ sbbq(Address(r8, r9), 1048576);",
    "__ sbbq(Address(r9, r10), 1048576);",
    "__ sbbq(Address(r10, r11), 1048576);",
    "__ sbbq(Address(r11, r12), 1048576);",
    "__ sbbq(Address(r12, r13), 1048576);",
    "__ sbbq(Address(r13, r14), 1048576);",
    "__ sbbq(Address(r14, r15), 1048576);",
    "__ sbbq(Address(r15, r16), 1048576);",
    "__ sbbq(Address(r16, r17), 1048576);",
    "__ sbbq(Address(r17, r18), 1048576);",
    "__ sbbq(Address(r18, r19), 1048576);",
    "__ sbbq(Address(r19, r20), 1048576);",
    "__ sbbq(Address(r20, r21), 1048576);",
    "__ sbbq(Address(r21, r22), 1048576);",
    "__ sbbq(Address(r22, r23), 1048576);",
    "__ sbbq(Address(r23, r24), 1048576);",
    "__ sbbq(Address(r24, r25), 1048576);",
    "__ sbbq(Address(r25, r26), 1048576);",
    "__ sbbq(Address(r26, r27), 1048576);",
    "__ sbbq(Address(r27, r28), 1048576);",
    "__ sbbq(Address(r28, r29), 1048576);",
    "__ sbbq(Address(r29, r30), 1048576);",
    "__ sbbq(Address(r30, r31), 1048576);",
    "__ sbbq(Address(r31, rcx), 1048576);",
    "__ sbbq(Address(rcx, rdx), 16777216);",
    "__ sbbq(Address(rdx, rbx), 16777216);",
    "__ sbbq(Address(rbx, r8), 16777216);",
    "__ sbbq(Address(r8, r9), 16777216);",
    "__ sbbq(Address(r9, r10), 16777216);",
    "__ sbbq(Address(r10, r11), 16777216);",
    "__ sbbq(Address(r11, r12), 16777216);",
    "__ sbbq(Address(r12, r13), 16777216);",
    "__ sbbq(Address(r13, r14), 16777216);",
    "__ sbbq(Address(r14, r15), 16777216);",
    "__ sbbq(Address(r15, r16), 16777216);",
    "__ sbbq(Address(r16, r17), 16777216);",
    "__ sbbq(Address(r17, r18), 16777216);",
    "__ sbbq(Address(r18, r19), 16777216);",
    "__ sbbq(Address(r19, r20), 16777216);",
    "__ sbbq(Address(r20, r21), 16777216);",
    "__ sbbq(Address(r21, r22), 16777216);",
    "__ sbbq(Address(r22, r23), 16777216);",
    "__ sbbq(Address(r23, r24), 16777216);",
    "__ sbbq(Address(r24, r25), 16777216);",
    "__ sbbq(Address(r25, r26), 16777216);",
    "__ sbbq(Address(r26, r27), 16777216);",
    "__ sbbq(Address(r27, r28), 16777216);",
    "__ sbbq(Address(r28, r29), 16777216);",
    "__ sbbq(Address(r29, r30), 16777216);",
    "__ sbbq(Address(r30, r31), 16777216);",
    "__ sbbq(Address(r31, rcx), 16777216);",
    "__ sbbq(Address(rcx, rdx), 268435456);",
    "__ sbbq(Address(rdx, rbx), 268435456);",
    "__ sbbq(Address(rbx, r8), 268435456);",
    "__ sbbq(Address(r8, r9), 268435456);",
    "__ sbbq(Address(r9, r10), 268435456);",
    "__ sbbq(Address(r10, r11), 268435456);",
    "__ sbbq(Address(r11, r12), 268435456);",
    "__ sbbq(Address(r12, r13), 268435456);",
    "__ sbbq(Address(r13, r14), 268435456);",
    "__ sbbq(Address(r14, r15), 268435456);",
    "__ sbbq(Address(r15, r16), 268435456);",
    "__ sbbq(Address(r16, r17), 268435456);",
    "__ sbbq(Address(r17, r18), 268435456);",
    "__ sbbq(Address(r18, r19), 268435456);",
    "__ sbbq(Address(r19, r20), 268435456);",
    "__ sbbq(Address(r20, r21), 268435456);",
    "__ sbbq(Address(r21, r22), 268435456);",
    "__ sbbq(Address(r22, r23), 268435456);",
    "__ sbbq(Address(r23, r24), 268435456);",
    "__ sbbq(Address(r24, r25), 268435456);",
    "__ sbbq(Address(r25, r26), 268435456);",
    "__ sbbq(Address(r26, r27), 268435456);",
    "__ sbbq(Address(r27, r28), 268435456);",
    "__ sbbq(Address(r28, r29), 268435456);",
    "__ sbbq(Address(r29, r30), 268435456);",
    "__ sbbq(Address(r30, r31), 268435456);",
    "__ sbbq(Address(r31, rcx), 268435456);",
    "__ shrq(Address(rcx, rdx), 1);",
    "__ shrq(Address(rdx, rbx), 1);",
    "__ shrq(Address(rbx, r8), 1);",
    "__ shrq(Address(r8, r9), 1);",
    "__ shrq(Address(r9, r10), 1);",
    "__ shrq(Address(r10, r11), 1);",
    "__ shrq(Address(r11, r12), 1);",
    "__ shrq(Address(r12, r13), 1);",
    "__ shrq(Address(r13, r14), 1);",
    "__ shrq(Address(r14, r15), 1);",
    "__ shrq(Address(r15, r16), 1);",
    "__ shrq(Address(r16, r17), 1);",
    "__ shrq(Address(r17, r18), 1);",
    "__ shrq(Address(r18, r19), 1);",
    "__ shrq(Address(r19, r20), 1);",
    "__ shrq(Address(r20, r21), 1);",
    "__ shrq(Address(r21, r22), 1);",
    "__ shrq(Address(r22, r23), 1);",
    "__ shrq(Address(r23, r24), 1);",
    "__ shrq(Address(r24, r25), 1);",
    "__ shrq(Address(r25, r26), 1);",
    "__ shrq(Address(r26, r27), 1);",
    "__ shrq(Address(r27, r28), 1);",
    "__ shrq(Address(r28, r29), 1);",
    "__ shrq(Address(r29, r30), 1);",
    "__ shrq(Address(r30, r31), 1);",
    "__ shrq(Address(r31, rcx), 1);",
    "__ shrq(Address(rcx, rdx), 2);",
    "__ shrq(Address(rdx, rbx), 2);",
    "__ shrq(Address(rbx, r8), 2);",
    "__ shrq(Address(r8, r9), 2);",
    "__ shrq(Address(r9, r10), 2);",
    "__ shrq(Address(r10, r11), 2);",
    "__ shrq(Address(r11, r12), 2);",
    "__ shrq(Address(r12, r13), 2);",
    "__ shrq(Address(r13, r14), 2);",
    "__ shrq(Address(r14, r15), 2);",
    "__ shrq(Address(r15, r16), 2);",
    "__ shrq(Address(r16, r17), 2);",
    "__ shrq(Address(r17, r18), 2);",
    "__ shrq(Address(r18, r19), 2);",
    "__ shrq(Address(r19, r20), 2);",
    "__ shrq(Address(r20, r21), 2);",
    "__ shrq(Address(r21, r22), 2);",
    "__ shrq(Address(r22, r23), 2);",
    "__ shrq(Address(r23, r24), 2);",
    "__ shrq(Address(r24, r25), 2);",
    "__ shrq(Address(r25, r26), 2);",
    "__ shrq(Address(r26, r27), 2);",
    "__ shrq(Address(r27, r28), 2);",
    "__ shrq(Address(r28, r29), 2);",
    "__ shrq(Address(r29, r30), 2);",
    "__ shrq(Address(r30, r31), 2);",
    "__ shrq(Address(r31, rcx), 2);",
    "__ shrq(Address(rcx, rdx), 4);",
    "__ shrq(Address(rdx, rbx), 4);",
    "__ shrq(Address(rbx, r8), 4);",
    "__ shrq(Address(r8, r9), 4);",
    "__ shrq(Address(r9, r10), 4);",
    "__ shrq(Address(r10, r11), 4);",
    "__ shrq(Address(r11, r12), 4);",
    "__ shrq(Address(r12, r13), 4);",
    "__ shrq(Address(r13, r14), 4);",
    "__ shrq(Address(r14, r15), 4);",
    "__ shrq(Address(r15, r16), 4);",
    "__ shrq(Address(r16, r17), 4);",
    "__ shrq(Address(r17, r18), 4);",
    "__ shrq(Address(r18, r19), 4);",
    "__ shrq(Address(r19, r20), 4);",
    "__ shrq(Address(r20, r21), 4);",
    "__ shrq(Address(r21, r22), 4);",
    "__ shrq(Address(r22, r23), 4);",
    "__ shrq(Address(r23, r24), 4);",
    "__ shrq(Address(r24, r25), 4);",
    "__ shrq(Address(r25, r26), 4);",
    "__ shrq(Address(r26, r27), 4);",
    "__ shrq(Address(r27, r28), 4);",
    "__ shrq(Address(r28, r29), 4);",
    "__ shrq(Address(r29, r30), 4);",
    "__ shrq(Address(r30, r31), 4);",
    "__ shrq(Address(r31, rcx), 4);",
    "__ shrq(Address(rcx, rdx), 8);",
    "__ shrq(Address(rdx, rbx), 8);",
    "__ shrq(Address(rbx, r8), 8);",
    "__ shrq(Address(r8, r9), 8);",
    "__ shrq(Address(r9, r10), 8);",
    "__ shrq(Address(r10, r11), 8);",
    "__ shrq(Address(r11, r12), 8);",
    "__ shrq(Address(r12, r13), 8);",
    "__ shrq(Address(r13, r14), 8);",
    "__ shrq(Address(r14, r15), 8);",
    "__ shrq(Address(r15, r16), 8);",
    "__ shrq(Address(r16, r17), 8);",
    "__ shrq(Address(r17, r18), 8);",
    "__ shrq(Address(r18, r19), 8);",
    "__ shrq(Address(r19, r20), 8);",
    "__ shrq(Address(r20, r21), 8);",
    "__ shrq(Address(r21, r22), 8);",
    "__ shrq(Address(r22, r23), 8);",
    "__ shrq(Address(r23, r24), 8);",
    "__ shrq(Address(r24, r25), 8);",
    "__ shrq(Address(r25, r26), 8);",
    "__ shrq(Address(r26, r27), 8);",
    "__ shrq(Address(r27, r28), 8);",
    "__ shrq(Address(r28, r29), 8);",
    "__ shrq(Address(r29, r30), 8);",
    "__ shrq(Address(r30, r31), 8);",
    "__ shrq(Address(r31, rcx), 8);",
    "__ shrq(Address(rcx, rdx), 16);",
    "__ shrq(Address(rdx, rbx), 16);",
    "__ shrq(Address(rbx, r8), 16);",
    "__ shrq(Address(r8, r9), 16);",
    "__ shrq(Address(r9, r10), 16);",
    "__ shrq(Address(r10, r11), 16);",
    "__ shrq(Address(r11, r12), 16);",
    "__ shrq(Address(r12, r13), 16);",
    "__ shrq(Address(r13, r14), 16);",
    "__ shrq(Address(r14, r15), 16);",
    "__ shrq(Address(r15, r16), 16);",
    "__ shrq(Address(r16, r17), 16);",
    "__ shrq(Address(r17, r18), 16);",
    "__ shrq(Address(r18, r19), 16);",
    "__ shrq(Address(r19, r20), 16);",
    "__ shrq(Address(r20, r21), 16);",
    "__ shrq(Address(r21, r22), 16);",
    "__ shrq(Address(r22, r23), 16);",
    "__ shrq(Address(r23, r24), 16);",
    "__ shrq(Address(r24, r25), 16);",
    "__ shrq(Address(r25, r26), 16);",
    "__ shrq(Address(r26, r27), 16);",
    "__ shrq(Address(r27, r28), 16);",
    "__ shrq(Address(r28, r29), 16);",
    "__ shrq(Address(r29, r30), 16);",
    "__ shrq(Address(r30, r31), 16);",
    "__ shrq(Address(r31, rcx), 16);",
    "__ subq(Address(rcx, rdx), 1);",
    "__ subq(Address(rdx, rbx), 1);",
    "__ subq(Address(rbx, r8), 1);",
    "__ subq(Address(r8, r9), 1);",
    "__ subq(Address(r9, r10), 1);",
    "__ subq(Address(r10, r11), 1);",
    "__ subq(Address(r11, r12), 1);",
    "__ subq(Address(r12, r13), 1);",
    "__ subq(Address(r13, r14), 1);",
    "__ subq(Address(r14, r15), 1);",
    "__ subq(Address(r15, r16), 1);",
    "__ subq(Address(r16, r17), 1);",
    "__ subq(Address(r17, r18), 1);",
    "__ subq(Address(r18, r19), 1);",
    "__ subq(Address(r19, r20), 1);",
    "__ subq(Address(r20, r21), 1);",
    "__ subq(Address(r21, r22), 1);",
    "__ subq(Address(r22, r23), 1);",
    "__ subq(Address(r23, r24), 1);",
    "__ subq(Address(r24, r25), 1);",
    "__ subq(Address(r25, r26), 1);",
    "__ subq(Address(r26, r27), 1);",
    "__ subq(Address(r27, r28), 1);",
    "__ subq(Address(r28, r29), 1);",
    "__ subq(Address(r29, r30), 1);",
    "__ subq(Address(r30, r31), 1);",
    "__ subq(Address(r31, rcx), 1);",
    "__ subq(Address(rcx, rdx), 16);",
    "__ subq(Address(rdx, rbx), 16);",
    "__ subq(Address(rbx, r8), 16);",
    "__ subq(Address(r8, r9), 16);",
    "__ subq(Address(r9, r10), 16);",
    "__ subq(Address(r10, r11), 16);",
    "__ subq(Address(r11, r12), 16);",
    "__ subq(Address(r12, r13), 16);",
    "__ subq(Address(r13, r14), 16);",
    "__ subq(Address(r14, r15), 16);",
    "__ subq(Address(r15, r16), 16);",
    "__ subq(Address(r16, r17), 16);",
    "__ subq(Address(r17, r18), 16);",
    "__ subq(Address(r18, r19), 16);",
    "__ subq(Address(r19, r20), 16);",
    "__ subq(Address(r20, r21), 16);",
    "__ subq(Address(r21, r22), 16);",
    "__ subq(Address(r22, r23), 16);",
    "__ subq(Address(r23, r24), 16);",
    "__ subq(Address(r24, r25), 16);",
    "__ subq(Address(r25, r26), 16);",
    "__ subq(Address(r26, r27), 16);",
    "__ subq(Address(r27, r28), 16);",
    "__ subq(Address(r28, r29), 16);",
    "__ subq(Address(r29, r30), 16);",
    "__ subq(Address(r30, r31), 16);",
    "__ subq(Address(r31, rcx), 16);",
    "__ subq(Address(rcx, rdx), 256);",
    "__ subq(Address(rdx, rbx), 256);",
    "__ subq(Address(rbx, r8), 256);",
    "__ subq(Address(r8, r9), 256);",
    "__ subq(Address(r9, r10), 256);",
    "__ subq(Address(r10, r11), 256);",
    "__ subq(Address(r11, r12), 256);",
    "__ subq(Address(r12, r13), 256);",
    "__ subq(Address(r13, r14), 256);",
    "__ subq(Address(r14, r15), 256);",
    "__ subq(Address(r15, r16), 256);",
    "__ subq(Address(r16, r17), 256);",
    "__ subq(Address(r17, r18), 256);",
    "__ subq(Address(r18, r19), 256);",
    "__ subq(Address(r19, r20), 256);",
    "__ subq(Address(r20, r21), 256);",
    "__ subq(Address(r21, r22), 256);",
    "__ subq(Address(r22, r23), 256);",
    "__ subq(Address(r23, r24), 256);",
    "__ subq(Address(r24, r25), 256);",
    "__ subq(Address(r25, r26), 256);",
    "__ subq(Address(r26, r27), 256);",
    "__ subq(Address(r27, r28), 256);",
    "__ subq(Address(r28, r29), 256);",
    "__ subq(Address(r29, r30), 256);",
    "__ subq(Address(r30, r31), 256);",
    "__ subq(Address(r31, rcx), 256);",
    "__ subq(Address(rcx, rdx), 4096);",
    "__ subq(Address(rdx, rbx), 4096);",
    "__ subq(Address(rbx, r8), 4096);",
    "__ subq(Address(r8, r9), 4096);",
    "__ subq(Address(r9, r10), 4096);",
    "__ subq(Address(r10, r11), 4096);",
    "__ subq(Address(r11, r12), 4096);",
    "__ subq(Address(r12, r13), 4096);",
    "__ subq(Address(r13, r14), 4096);",
    "__ subq(Address(r14, r15), 4096);",
    "__ subq(Address(r15, r16), 4096);",
    "__ subq(Address(r16, r17), 4096);",
    "__ subq(Address(r17, r18), 4096);",
    "__ subq(Address(r18, r19), 4096);",
    "__ subq(Address(r19, r20), 4096);",
    "__ subq(Address(r20, r21), 4096);",
    "__ subq(Address(r21, r22), 4096);",
    "__ subq(Address(r22, r23), 4096);",
    "__ subq(Address(r23, r24), 4096);",
    "__ subq(Address(r24, r25), 4096);",
    "__ subq(Address(r25, r26), 4096);",
    "__ subq(Address(r26, r27), 4096);",
    "__ subq(Address(r27, r28), 4096);",
    "__ subq(Address(r28, r29), 4096);",
    "__ subq(Address(r29, r30), 4096);",
    "__ subq(Address(r30, r31), 4096);",
    "__ subq(Address(r31, rcx), 4096);",
    "__ subq(Address(rcx, rdx), 65536);",
    "__ subq(Address(rdx, rbx), 65536);",
    "__ subq(Address(rbx, r8), 65536);",
    "__ subq(Address(r8, r9), 65536);",
    "__ subq(Address(r9, r10), 65536);",
    "__ subq(Address(r10, r11), 65536);",
    "__ subq(Address(r11, r12), 65536);",
    "__ subq(Address(r12, r13), 65536);",
    "__ subq(Address(r13, r14), 65536);",
    "__ subq(Address(r14, r15), 65536);",
    "__ subq(Address(r15, r16), 65536);",
    "__ subq(Address(r16, r17), 65536);",
    "__ subq(Address(r17, r18), 65536);",
    "__ subq(Address(r18, r19), 65536);",
    "__ subq(Address(r19, r20), 65536);",
    "__ subq(Address(r20, r21), 65536);",
    "__ subq(Address(r21, r22), 65536);",
    "__ subq(Address(r22, r23), 65536);",
    "__ subq(Address(r23, r24), 65536);",
    "__ subq(Address(r24, r25), 65536);",
    "__ subq(Address(r25, r26), 65536);",
    "__ subq(Address(r26, r27), 65536);",
    "__ subq(Address(r27, r28), 65536);",
    "__ subq(Address(r28, r29), 65536);",
    "__ subq(Address(r29, r30), 65536);",
    "__ subq(Address(r30, r31), 65536);",
    "__ subq(Address(r31, rcx), 65536);",
    "__ subq(Address(rcx, rdx), 1048576);",
    "__ subq(Address(rdx, rbx), 1048576);",
    "__ subq(Address(rbx, r8), 1048576);",
    "__ subq(Address(r8, r9), 1048576);",
    "__ subq(Address(r9, r10), 1048576);",
    "__ subq(Address(r10, r11), 1048576);",
    "__ subq(Address(r11, r12), 1048576);",
    "__ subq(Address(r12, r13), 1048576);",
    "__ subq(Address(r13, r14), 1048576);",
    "__ subq(Address(r14, r15), 1048576);",
    "__ subq(Address(r15, r16), 1048576);",
    "__ subq(Address(r16, r17), 1048576);",
    "__ subq(Address(r17, r18), 1048576);",
    "__ subq(Address(r18, r19), 1048576);",
    "__ subq(Address(r19, r20), 1048576);",
    "__ subq(Address(r20, r21), 1048576);",
    "__ subq(Address(r21, r22), 1048576);",
    "__ subq(Address(r22, r23), 1048576);",
    "__ subq(Address(r23, r24), 1048576);",
    "__ subq(Address(r24, r25), 1048576);",
    "__ subq(Address(r25, r26), 1048576);",
    "__ subq(Address(r26, r27), 1048576);",
    "__ subq(Address(r27, r28), 1048576);",
    "__ subq(Address(r28, r29), 1048576);",
    "__ subq(Address(r29, r30), 1048576);",
    "__ subq(Address(r30, r31), 1048576);",
    "__ subq(Address(r31, rcx), 1048576);",
    "__ subq(Address(rcx, rdx), 16777216);",
    "__ subq(Address(rdx, rbx), 16777216);",
    "__ subq(Address(rbx, r8), 16777216);",
    "__ subq(Address(r8, r9), 16777216);",
    "__ subq(Address(r9, r10), 16777216);",
    "__ subq(Address(r10, r11), 16777216);",
    "__ subq(Address(r11, r12), 16777216);",
    "__ subq(Address(r12, r13), 16777216);",
    "__ subq(Address(r13, r14), 16777216);",
    "__ subq(Address(r14, r15), 16777216);",
    "__ subq(Address(r15, r16), 16777216);",
    "__ subq(Address(r16, r17), 16777216);",
    "__ subq(Address(r17, r18), 16777216);",
    "__ subq(Address(r18, r19), 16777216);",
    "__ subq(Address(r19, r20), 16777216);",
    "__ subq(Address(r20, r21), 16777216);",
    "__ subq(Address(r21, r22), 16777216);",
    "__ subq(Address(r22, r23), 16777216);",
    "__ subq(Address(r23, r24), 16777216);",
    "__ subq(Address(r24, r25), 16777216);",
    "__ subq(Address(r25, r26), 16777216);",
    "__ subq(Address(r26, r27), 16777216);",
    "__ subq(Address(r27, r28), 16777216);",
    "__ subq(Address(r28, r29), 16777216);",
    "__ subq(Address(r29, r30), 16777216);",
    "__ subq(Address(r30, r31), 16777216);",
    "__ subq(Address(r31, rcx), 16777216);",
    "__ subq(Address(rcx, rdx), 268435456);",
    "__ subq(Address(rdx, rbx), 268435456);",
    "__ subq(Address(rbx, r8), 268435456);",
    "__ subq(Address(r8, r9), 268435456);",
    "__ subq(Address(r9, r10), 268435456);",
    "__ subq(Address(r10, r11), 268435456);",
    "__ subq(Address(r11, r12), 268435456);",
    "__ subq(Address(r12, r13), 268435456);",
    "__ subq(Address(r13, r14), 268435456);",
    "__ subq(Address(r14, r15), 268435456);",
    "__ subq(Address(r15, r16), 268435456);",
    "__ subq(Address(r16, r17), 268435456);",
    "__ subq(Address(r17, r18), 268435456);",
    "__ subq(Address(r18, r19), 268435456);",
    "__ subq(Address(r19, r20), 268435456);",
    "__ subq(Address(r20, r21), 268435456);",
    "__ subq(Address(r21, r22), 268435456);",
    "__ subq(Address(r22, r23), 268435456);",
    "__ subq(Address(r23, r24), 268435456);",
    "__ subq(Address(r24, r25), 268435456);",
    "__ subq(Address(r25, r26), 268435456);",
    "__ subq(Address(r26, r27), 268435456);",
    "__ subq(Address(r27, r28), 268435456);",
    "__ subq(Address(r28, r29), 268435456);",
    "__ subq(Address(r29, r30), 268435456);",
    "__ subq(Address(r30, r31), 268435456);",
    "__ subq(Address(r31, rcx), 268435456);",
    "__ xorq(Address(rcx, rdx), 1);",
    "__ xorq(Address(rdx, rbx), 1);",
    "__ xorq(Address(rbx, r8), 1);",
    "__ xorq(Address(r8, r9), 1);",
    "__ xorq(Address(r9, r10), 1);",
    "__ xorq(Address(r10, r11), 1);",
    "__ xorq(Address(r11, r12), 1);",
    "__ xorq(Address(r12, r13), 1);",
    "__ xorq(Address(r13, r14), 1);",
    "__ xorq(Address(r14, r15), 1);",
    "__ xorq(Address(r15, r16), 1);",
    "__ xorq(Address(r16, r17), 1);",
    "__ xorq(Address(r17, r18), 1);",
    "__ xorq(Address(r18, r19), 1);",
    "__ xorq(Address(r19, r20), 1);",
    "__ xorq(Address(r20, r21), 1);",
    "__ xorq(Address(r21, r22), 1);",
    "__ xorq(Address(r22, r23), 1);",
    "__ xorq(Address(r23, r24), 1);",
    "__ xorq(Address(r24, r25), 1);",
    "__ xorq(Address(r25, r26), 1);",
    "__ xorq(Address(r26, r27), 1);",
    "__ xorq(Address(r27, r28), 1);",
    "__ xorq(Address(r28, r29), 1);",
    "__ xorq(Address(r29, r30), 1);",
    "__ xorq(Address(r30, r31), 1);",
    "__ xorq(Address(r31, rcx), 1);",
    "__ xorq(Address(rcx, rdx), 16);",
    "__ xorq(Address(rdx, rbx), 16);",
    "__ xorq(Address(rbx, r8), 16);",
    "__ xorq(Address(r8, r9), 16);",
    "__ xorq(Address(r9, r10), 16);",
    "__ xorq(Address(r10, r11), 16);",
    "__ xorq(Address(r11, r12), 16);",
    "__ xorq(Address(r12, r13), 16);",
    "__ xorq(Address(r13, r14), 16);",
    "__ xorq(Address(r14, r15), 16);",
    "__ xorq(Address(r15, r16), 16);",
    "__ xorq(Address(r16, r17), 16);",
    "__ xorq(Address(r17, r18), 16);",
    "__ xorq(Address(r18, r19), 16);",
    "__ xorq(Address(r19, r20), 16);",
    "__ xorq(Address(r20, r21), 16);",
    "__ xorq(Address(r21, r22), 16);",
    "__ xorq(Address(r22, r23), 16);",
    "__ xorq(Address(r23, r24), 16);",
    "__ xorq(Address(r24, r25), 16);",
    "__ xorq(Address(r25, r26), 16);",
    "__ xorq(Address(r26, r27), 16);",
    "__ xorq(Address(r27, r28), 16);",
    "__ xorq(Address(r28, r29), 16);",
    "__ xorq(Address(r29, r30), 16);",
    "__ xorq(Address(r30, r31), 16);",
    "__ xorq(Address(r31, rcx), 16);",
    "__ xorq(Address(rcx, rdx), 256);",
    "__ xorq(Address(rdx, rbx), 256);",
    "__ xorq(Address(rbx, r8), 256);",
    "__ xorq(Address(r8, r9), 256);",
    "__ xorq(Address(r9, r10), 256);",
    "__ xorq(Address(r10, r11), 256);",
    "__ xorq(Address(r11, r12), 256);",
    "__ xorq(Address(r12, r13), 256);",
    "__ xorq(Address(r13, r14), 256);",
    "__ xorq(Address(r14, r15), 256);",
    "__ xorq(Address(r15, r16), 256);",
    "__ xorq(Address(r16, r17), 256);",
    "__ xorq(Address(r17, r18), 256);",
    "__ xorq(Address(r18, r19), 256);",
    "__ xorq(Address(r19, r20), 256);",
    "__ xorq(Address(r20, r21), 256);",
    "__ xorq(Address(r21, r22), 256);",
    "__ xorq(Address(r22, r23), 256);",
    "__ xorq(Address(r23, r24), 256);",
    "__ xorq(Address(r24, r25), 256);",
    "__ xorq(Address(r25, r26), 256);",
    "__ xorq(Address(r26, r27), 256);",
    "__ xorq(Address(r27, r28), 256);",
    "__ xorq(Address(r28, r29), 256);",
    "__ xorq(Address(r29, r30), 256);",
    "__ xorq(Address(r30, r31), 256);",
    "__ xorq(Address(r31, rcx), 256);",
    "__ xorq(Address(rcx, rdx), 4096);",
    "__ xorq(Address(rdx, rbx), 4096);",
    "__ xorq(Address(rbx, r8), 4096);",
    "__ xorq(Address(r8, r9), 4096);",
    "__ xorq(Address(r9, r10), 4096);",
    "__ xorq(Address(r10, r11), 4096);",
    "__ xorq(Address(r11, r12), 4096);",
    "__ xorq(Address(r12, r13), 4096);",
    "__ xorq(Address(r13, r14), 4096);",
    "__ xorq(Address(r14, r15), 4096);",
    "__ xorq(Address(r15, r16), 4096);",
    "__ xorq(Address(r16, r17), 4096);",
    "__ xorq(Address(r17, r18), 4096);",
    "__ xorq(Address(r18, r19), 4096);",
    "__ xorq(Address(r19, r20), 4096);",
    "__ xorq(Address(r20, r21), 4096);",
    "__ xorq(Address(r21, r22), 4096);",
    "__ xorq(Address(r22, r23), 4096);",
    "__ xorq(Address(r23, r24), 4096);",
    "__ xorq(Address(r24, r25), 4096);",
    "__ xorq(Address(r25, r26), 4096);",
    "__ xorq(Address(r26, r27), 4096);",
    "__ xorq(Address(r27, r28), 4096);",
    "__ xorq(Address(r28, r29), 4096);",
    "__ xorq(Address(r29, r30), 4096);",
    "__ xorq(Address(r30, r31), 4096);",
    "__ xorq(Address(r31, rcx), 4096);",
    "__ xorq(Address(rcx, rdx), 65536);",
    "__ xorq(Address(rdx, rbx), 65536);",
    "__ xorq(Address(rbx, r8), 65536);",
    "__ xorq(Address(r8, r9), 65536);",
    "__ xorq(Address(r9, r10), 65536);",
    "__ xorq(Address(r10, r11), 65536);",
    "__ xorq(Address(r11, r12), 65536);",
    "__ xorq(Address(r12, r13), 65536);",
    "__ xorq(Address(r13, r14), 65536);",
    "__ xorq(Address(r14, r15), 65536);",
    "__ xorq(Address(r15, r16), 65536);",
    "__ xorq(Address(r16, r17), 65536);",
    "__ xorq(Address(r17, r18), 65536);",
    "__ xorq(Address(r18, r19), 65536);",
    "__ xorq(Address(r19, r20), 65536);",
    "__ xorq(Address(r20, r21), 65536);",
    "__ xorq(Address(r21, r22), 65536);",
    "__ xorq(Address(r22, r23), 65536);",
    "__ xorq(Address(r23, r24), 65536);",
    "__ xorq(Address(r24, r25), 65536);",
    "__ xorq(Address(r25, r26), 65536);",
    "__ xorq(Address(r26, r27), 65536);",
    "__ xorq(Address(r27, r28), 65536);",
    "__ xorq(Address(r28, r29), 65536);",
    "__ xorq(Address(r29, r30), 65536);",
    "__ xorq(Address(r30, r31), 65536);",
    "__ xorq(Address(r31, rcx), 65536);",
    "__ xorq(Address(rcx, rdx), 1048576);",
    "__ xorq(Address(rdx, rbx), 1048576);",
    "__ xorq(Address(rbx, r8), 1048576);",
    "__ xorq(Address(r8, r9), 1048576);",
    "__ xorq(Address(r9, r10), 1048576);",
    "__ xorq(Address(r10, r11), 1048576);",
    "__ xorq(Address(r11, r12), 1048576);",
    "__ xorq(Address(r12, r13), 1048576);",
    "__ xorq(Address(r13, r14), 1048576);",
    "__ xorq(Address(r14, r15), 1048576);",
    "__ xorq(Address(r15, r16), 1048576);",
    "__ xorq(Address(r16, r17), 1048576);",
    "__ xorq(Address(r17, r18), 1048576);",
    "__ xorq(Address(r18, r19), 1048576);",
    "__ xorq(Address(r19, r20), 1048576);",
    "__ xorq(Address(r20, r21), 1048576);",
    "__ xorq(Address(r21, r22), 1048576);",
    "__ xorq(Address(r22, r23), 1048576);",
    "__ xorq(Address(r23, r24), 1048576);",
    "__ xorq(Address(r24, r25), 1048576);",
    "__ xorq(Address(r25, r26), 1048576);",
    "__ xorq(Address(r26, r27), 1048576);",
    "__ xorq(Address(r27, r28), 1048576);",
    "__ xorq(Address(r28, r29), 1048576);",
    "__ xorq(Address(r29, r30), 1048576);",
    "__ xorq(Address(r30, r31), 1048576);",
    "__ xorq(Address(r31, rcx), 1048576);",
    "__ xorq(Address(rcx, rdx), 16777216);",
    "__ xorq(Address(rdx, rbx), 16777216);",
    "__ xorq(Address(rbx, r8), 16777216);",
    "__ xorq(Address(r8, r9), 16777216);",
    "__ xorq(Address(r9, r10), 16777216);",
    "__ xorq(Address(r10, r11), 16777216);",
    "__ xorq(Address(r11, r12), 16777216);",
    "__ xorq(Address(r12, r13), 16777216);",
    "__ xorq(Address(r13, r14), 16777216);",
    "__ xorq(Address(r14, r15), 16777216);",
    "__ xorq(Address(r15, r16), 16777216);",
    "__ xorq(Address(r16, r17), 16777216);",
    "__ xorq(Address(r17, r18), 16777216);",
    "__ xorq(Address(r18, r19), 16777216);",
    "__ xorq(Address(r19, r20), 16777216);",
    "__ xorq(Address(r20, r21), 16777216);",
    "__ xorq(Address(r21, r22), 16777216);",
    "__ xorq(Address(r22, r23), 16777216);",
    "__ xorq(Address(r23, r24), 16777216);",
    "__ xorq(Address(r24, r25), 16777216);",
    "__ xorq(Address(r25, r26), 16777216);",
    "__ xorq(Address(r26, r27), 16777216);",
    "__ xorq(Address(r27, r28), 16777216);",
    "__ xorq(Address(r28, r29), 16777216);",
    "__ xorq(Address(r29, r30), 16777216);",
    "__ xorq(Address(r30, r31), 16777216);",
    "__ xorq(Address(r31, rcx), 16777216);",
    "__ xorq(Address(rcx, rdx), 268435456);",
    "__ xorq(Address(rdx, rbx), 268435456);",
    "__ xorq(Address(rbx, r8), 268435456);",
    "__ xorq(Address(r8, r9), 268435456);",
    "__ xorq(Address(r9, r10), 268435456);",
    "__ xorq(Address(r10, r11), 268435456);",
    "__ xorq(Address(r11, r12), 268435456);",
    "__ xorq(Address(r12, r13), 268435456);",
    "__ xorq(Address(r13, r14), 268435456);",
    "__ xorq(Address(r14, r15), 268435456);",
    "__ xorq(Address(r15, r16), 268435456);",
    "__ xorq(Address(r16, r17), 268435456);",
    "__ xorq(Address(r17, r18), 268435456);",
    "__ xorq(Address(r18, r19), 268435456);",
    "__ xorq(Address(r19, r20), 268435456);",
    "__ xorq(Address(r20, r21), 268435456);",
    "__ xorq(Address(r21, r22), 268435456);",
    "__ xorq(Address(r22, r23), 268435456);",
    "__ xorq(Address(r23, r24), 268435456);",
    "__ xorq(Address(r24, r25), 268435456);",
    "__ xorq(Address(r25, r26), 268435456);",
    "__ xorq(Address(r26, r27), 268435456);",
    "__ xorq(Address(r27, r28), 268435456);",
    "__ xorq(Address(r28, r29), 268435456);",
    "__ xorq(Address(r29, r30), 268435456);",
    "__ xorq(Address(r30, r31), 268435456);",
    "__ xorq(Address(r31, rcx), 268435456);",
    "__ orq(Address(rcx, rdx), 1);",
    "__ orq(Address(rdx, rbx), 1);",
    "__ orq(Address(rbx, r8), 1);",
    "__ orq(Address(r8, r9), 1);",
    "__ orq(Address(r9, r10), 1);",
    "__ orq(Address(r10, r11), 1);",
    "__ orq(Address(r11, r12), 1);",
    "__ orq(Address(r12, r13), 1);",
    "__ orq(Address(r13, r14), 1);",
    "__ orq(Address(r14, r15), 1);",
    "__ orq(Address(r15, r16), 1);",
    "__ orq(Address(r16, r17), 1);",
    "__ orq(Address(r17, r18), 1);",
    "__ orq(Address(r18, r19), 1);",
    "__ orq(Address(r19, r20), 1);",
    "__ orq(Address(r20, r21), 1);",
    "__ orq(Address(r21, r22), 1);",
    "__ orq(Address(r22, r23), 1);",
    "__ orq(Address(r23, r24), 1);",
    "__ orq(Address(r24, r25), 1);",
    "__ orq(Address(r25, r26), 1);",
    "__ orq(Address(r26, r27), 1);",
    "__ orq(Address(r27, r28), 1);",
    "__ orq(Address(r28, r29), 1);",
    "__ orq(Address(r29, r30), 1);",
    "__ orq(Address(r30, r31), 1);",
    "__ orq(Address(r31, rcx), 1);",
    "__ orq(Address(rcx, rdx), 16);",
    "__ orq(Address(rdx, rbx), 16);",
    "__ orq(Address(rbx, r8), 16);",
    "__ orq(Address(r8, r9), 16);",
    "__ orq(Address(r9, r10), 16);",
    "__ orq(Address(r10, r11), 16);",
    "__ orq(Address(r11, r12), 16);",
    "__ orq(Address(r12, r13), 16);",
    "__ orq(Address(r13, r14), 16);",
    "__ orq(Address(r14, r15), 16);",
    "__ orq(Address(r15, r16), 16);",
    "__ orq(Address(r16, r17), 16);",
    "__ orq(Address(r17, r18), 16);",
    "__ orq(Address(r18, r19), 16);",
    "__ orq(Address(r19, r20), 16);",
    "__ orq(Address(r20, r21), 16);",
    "__ orq(Address(r21, r22), 16);",
    "__ orq(Address(r22, r23), 16);",
    "__ orq(Address(r23, r24), 16);",
    "__ orq(Address(r24, r25), 16);",
    "__ orq(Address(r25, r26), 16);",
    "__ orq(Address(r26, r27), 16);",
    "__ orq(Address(r27, r28), 16);",
    "__ orq(Address(r28, r29), 16);",
    "__ orq(Address(r29, r30), 16);",
    "__ orq(Address(r30, r31), 16);",
    "__ orq(Address(r31, rcx), 16);",
    "__ orq(Address(rcx, rdx), 256);",
    "__ orq(Address(rdx, rbx), 256);",
    "__ orq(Address(rbx, r8), 256);",
    "__ orq(Address(r8, r9), 256);",
    "__ orq(Address(r9, r10), 256);",
    "__ orq(Address(r10, r11), 256);",
    "__ orq(Address(r11, r12), 256);",
    "__ orq(Address(r12, r13), 256);",
    "__ orq(Address(r13, r14), 256);",
    "__ orq(Address(r14, r15), 256);",
    "__ orq(Address(r15, r16), 256);",
    "__ orq(Address(r16, r17), 256);",
    "__ orq(Address(r17, r18), 256);",
    "__ orq(Address(r18, r19), 256);",
    "__ orq(Address(r19, r20), 256);",
    "__ orq(Address(r20, r21), 256);",
    "__ orq(Address(r21, r22), 256);",
    "__ orq(Address(r22, r23), 256);",
    "__ orq(Address(r23, r24), 256);",
    "__ orq(Address(r24, r25), 256);",
    "__ orq(Address(r25, r26), 256);",
    "__ orq(Address(r26, r27), 256);",
    "__ orq(Address(r27, r28), 256);",
    "__ orq(Address(r28, r29), 256);",
    "__ orq(Address(r29, r30), 256);",
    "__ orq(Address(r30, r31), 256);",
    "__ orq(Address(r31, rcx), 256);",
    "__ orq(Address(rcx, rdx), 4096);",
    "__ orq(Address(rdx, rbx), 4096);",
    "__ orq(Address(rbx, r8), 4096);",
    "__ orq(Address(r8, r9), 4096);",
    "__ orq(Address(r9, r10), 4096);",
    "__ orq(Address(r10, r11), 4096);",
    "__ orq(Address(r11, r12), 4096);",
    "__ orq(Address(r12, r13), 4096);",
    "__ orq(Address(r13, r14), 4096);",
    "__ orq(Address(r14, r15), 4096);",
    "__ orq(Address(r15, r16), 4096);",
    "__ orq(Address(r16, r17), 4096);",
    "__ orq(Address(r17, r18), 4096);",
    "__ orq(Address(r18, r19), 4096);",
    "__ orq(Address(r19, r20), 4096);",
    "__ orq(Address(r20, r21), 4096);",
    "__ orq(Address(r21, r22), 4096);",
    "__ orq(Address(r22, r23), 4096);",
    "__ orq(Address(r23, r24), 4096);",
    "__ orq(Address(r24, r25), 4096);",
    "__ orq(Address(r25, r26), 4096);",
    "__ orq(Address(r26, r27), 4096);",
    "__ orq(Address(r27, r28), 4096);",
    "__ orq(Address(r28, r29), 4096);",
    "__ orq(Address(r29, r30), 4096);",
    "__ orq(Address(r30, r31), 4096);",
    "__ orq(Address(r31, rcx), 4096);",
    "__ orq(Address(rcx, rdx), 65536);",
    "__ orq(Address(rdx, rbx), 65536);",
    "__ orq(Address(rbx, r8), 65536);",
    "__ orq(Address(r8, r9), 65536);",
    "__ orq(Address(r9, r10), 65536);",
    "__ orq(Address(r10, r11), 65536);",
    "__ orq(Address(r11, r12), 65536);",
    "__ orq(Address(r12, r13), 65536);",
    "__ orq(Address(r13, r14), 65536);",
    "__ orq(Address(r14, r15), 65536);",
    "__ orq(Address(r15, r16), 65536);",
    "__ orq(Address(r16, r17), 65536);",
    "__ orq(Address(r17, r18), 65536);",
    "__ orq(Address(r18, r19), 65536);",
    "__ orq(Address(r19, r20), 65536);",
    "__ orq(Address(r20, r21), 65536);",
    "__ orq(Address(r21, r22), 65536);",
    "__ orq(Address(r22, r23), 65536);",
    "__ orq(Address(r23, r24), 65536);",
    "__ orq(Address(r24, r25), 65536);",
    "__ orq(Address(r25, r26), 65536);",
    "__ orq(Address(r26, r27), 65536);",
    "__ orq(Address(r27, r28), 65536);",
    "__ orq(Address(r28, r29), 65536);",
    "__ orq(Address(r29, r30), 65536);",
    "__ orq(Address(r30, r31), 65536);",
    "__ orq(Address(r31, rcx), 65536);",
    "__ orq(Address(rcx, rdx), 1048576);",
    "__ orq(Address(rdx, rbx), 1048576);",
    "__ orq(Address(rbx, r8), 1048576);",
    "__ orq(Address(r8, r9), 1048576);",
    "__ orq(Address(r9, r10), 1048576);",
    "__ orq(Address(r10, r11), 1048576);",
    "__ orq(Address(r11, r12), 1048576);",
    "__ orq(Address(r12, r13), 1048576);",
    "__ orq(Address(r13, r14), 1048576);",
    "__ orq(Address(r14, r15), 1048576);",
    "__ orq(Address(r15, r16), 1048576);",
    "__ orq(Address(r16, r17), 1048576);",
    "__ orq(Address(r17, r18), 1048576);",
    "__ orq(Address(r18, r19), 1048576);",
    "__ orq(Address(r19, r20), 1048576);",
    "__ orq(Address(r20, r21), 1048576);",
    "__ orq(Address(r21, r22), 1048576);",
    "__ orq(Address(r22, r23), 1048576);",
    "__ orq(Address(r23, r24), 1048576);",
    "__ orq(Address(r24, r25), 1048576);",
    "__ orq(Address(r25, r26), 1048576);",
    "__ orq(Address(r26, r27), 1048576);",
    "__ orq(Address(r27, r28), 1048576);",
    "__ orq(Address(r28, r29), 1048576);",
    "__ orq(Address(r29, r30), 1048576);",
    "__ orq(Address(r30, r31), 1048576);",
    "__ orq(Address(r31, rcx), 1048576);",
    "__ orq(Address(rcx, rdx), 16777216);",
    "__ orq(Address(rdx, rbx), 16777216);",
    "__ orq(Address(rbx, r8), 16777216);",
    "__ orq(Address(r8, r9), 16777216);",
    "__ orq(Address(r9, r10), 16777216);",
    "__ orq(Address(r10, r11), 16777216);",
    "__ orq(Address(r11, r12), 16777216);",
    "__ orq(Address(r12, r13), 16777216);",
    "__ orq(Address(r13, r14), 16777216);",
    "__ orq(Address(r14, r15), 16777216);",
    "__ orq(Address(r15, r16), 16777216);",
    "__ orq(Address(r16, r17), 16777216);",
    "__ orq(Address(r17, r18), 16777216);",
    "__ orq(Address(r18, r19), 16777216);",
    "__ orq(Address(r19, r20), 16777216);",
    "__ orq(Address(r20, r21), 16777216);",
    "__ orq(Address(r21, r22), 16777216);",
    "__ orq(Address(r22, r23), 16777216);",
    "__ orq(Address(r23, r24), 16777216);",
    "__ orq(Address(r24, r25), 16777216);",
    "__ orq(Address(r25, r26), 16777216);",
    "__ orq(Address(r26, r27), 16777216);",
    "__ orq(Address(r27, r28), 16777216);",
    "__ orq(Address(r28, r29), 16777216);",
    "__ orq(Address(r29, r30), 16777216);",
    "__ orq(Address(r30, r31), 16777216);",
    "__ orq(Address(r31, rcx), 16777216);",
    "__ orq(Address(rcx, rdx), 268435456);",
    "__ orq(Address(rdx, rbx), 268435456);",
    "__ orq(Address(rbx, r8), 268435456);",
    "__ orq(Address(r8, r9), 268435456);",
    "__ orq(Address(r9, r10), 268435456);",
    "__ orq(Address(r10, r11), 268435456);",
    "__ orq(Address(r11, r12), 268435456);",
    "__ orq(Address(r12, r13), 268435456);",
    "__ orq(Address(r13, r14), 268435456);",
    "__ orq(Address(r14, r15), 268435456);",
    "__ orq(Address(r15, r16), 268435456);",
    "__ orq(Address(r16, r17), 268435456);",
    "__ orq(Address(r17, r18), 268435456);",
    "__ orq(Address(r18, r19), 268435456);",
    "__ orq(Address(r19, r20), 268435456);",
    "__ orq(Address(r20, r21), 268435456);",
    "__ orq(Address(r21, r22), 268435456);",
    "__ orq(Address(r22, r23), 268435456);",
    "__ orq(Address(r23, r24), 268435456);",
    "__ orq(Address(r24, r25), 268435456);",
    "__ orq(Address(r25, r26), 268435456);",
    "__ orq(Address(r26, r27), 268435456);",
    "__ orq(Address(r27, r28), 268435456);",
    "__ orq(Address(r28, r29), 268435456);",
    "__ orq(Address(r29, r30), 268435456);",
    "__ orq(Address(r30, r31), 268435456);",
    "__ orq(Address(r31, rcx), 268435456);",
    "__ addq(rcx, Address(rdx, rbx));",
    "__ addq(rdx, Address(rbx, r8));",
    "__ addq(rbx, Address(r8, r9));",
    "__ addq(r8, Address(r9, r10));",
    "__ addq(r9, Address(r10, r11));",
    "__ addq(r10, Address(r11, r12));",
    "__ addq(r11, Address(r12, r13));",
    "__ addq(r12, Address(r13, r14));",
    "__ addq(r13, Address(r14, r15));",
    "__ addq(r14, Address(r15, r16));",
    "__ addq(r15, Address(r16, r17));",
    "__ addq(r16, Address(r17, r18));",
    "__ addq(r17, Address(r18, r19));",
    "__ addq(r18, Address(r19, r20));",
    "__ addq(r19, Address(r20, r21));",
    "__ addq(r20, Address(r21, r22));",
    "__ addq(r21, Address(r22, r23));",
    "__ addq(r22, Address(r23, r24));",
    "__ addq(r23, Address(r24, r25));",
    "__ addq(r24, Address(r25, r26));",
    "__ addq(r25, Address(r26, r27));",
    "__ addq(r26, Address(r27, r28));",
    "__ addq(r27, Address(r28, r29));",
    "__ addq(r28, Address(r29, r30));",
    "__ addq(r29, Address(r30, r31));",
    "__ addq(r30, Address(r31, rcx));",
    "__ addq(r31, Address(rcx, rdx));",
    "__ andq(rcx, Address(rdx, rbx));",
    "__ andq(rdx, Address(rbx, r8));",
    "__ andq(rbx, Address(r8, r9));",
    "__ andq(r8, Address(r9, r10));",
    "__ andq(r9, Address(r10, r11));",
    "__ andq(r10, Address(r11, r12));",
    "__ andq(r11, Address(r12, r13));",
    "__ andq(r12, Address(r13, r14));",
    "__ andq(r13, Address(r14, r15));",
    "__ andq(r14, Address(r15, r16));",
    "__ andq(r15, Address(r16, r17));",
    "__ andq(r16, Address(r17, r18));",
    "__ andq(r17, Address(r18, r19));",
    "__ andq(r18, Address(r19, r20));",
    "__ andq(r19, Address(r20, r21));",
    "__ andq(r20, Address(r21, r22));",
    "__ andq(r21, Address(r22, r23));",
    "__ andq(r22, Address(r23, r24));",
    "__ andq(r23, Address(r24, r25));",
    "__ andq(r24, Address(r25, r26));",
    "__ andq(r25, Address(r26, r27));",
    "__ andq(r26, Address(r27, r28));",
    "__ andq(r27, Address(r28, r29));",
    "__ andq(r28, Address(r29, r30));",
    "__ andq(r29, Address(r30, r31));",
    "__ andq(r30, Address(r31, rcx));",
    "__ andq(r31, Address(rcx, rdx));",
    "__ lzcntq(rcx, Address(rdx, rbx));",
    "__ lzcntq(rdx, Address(rbx, r8));",
    "__ lzcntq(rbx, Address(r8, r9));",
    "__ lzcntq(r8, Address(r9, r10));",
    "__ lzcntq(r9, Address(r10, r11));",
    "__ lzcntq(r10, Address(r11, r12));",
    "__ lzcntq(r11, Address(r12, r13));",
    "__ lzcntq(r12, Address(r13, r14));",
    "__ lzcntq(r13, Address(r14, r15));",
    "__ lzcntq(r14, Address(r15, r16));",
    "__ lzcntq(r15, Address(r16, r17));",
    "__ lzcntq(r16, Address(r17, r18));",
    "__ lzcntq(r17, Address(r18, r19));",
    "__ lzcntq(r18, Address(r19, r20));",
    "__ lzcntq(r19, Address(r20, r21));",
    "__ lzcntq(r20, Address(r21, r22));",
    "__ lzcntq(r21, Address(r22, r23));",
    "__ lzcntq(r22, Address(r23, r24));",
    "__ lzcntq(r23, Address(r24, r25));",
    "__ lzcntq(r24, Address(r25, r26));",
    "__ lzcntq(r25, Address(r26, r27));",
    "__ lzcntq(r26, Address(r27, r28));",
    "__ lzcntq(r27, Address(r28, r29));",
    "__ lzcntq(r28, Address(r29, r30));",
    "__ lzcntq(r29, Address(r30, r31));",
    "__ lzcntq(r30, Address(r31, rcx));",
    "__ lzcntq(r31, Address(rcx, rdx));",
    "__ orq(rcx, Address(rdx, rbx));",
    "__ orq(rdx, Address(rbx, r8));",
    "__ orq(rbx, Address(r8, r9));",
    "__ orq(r8, Address(r9, r10));",
    "__ orq(r9, Address(r10, r11));",
    "__ orq(r10, Address(r11, r12));",
    "__ orq(r11, Address(r12, r13));",
    "__ orq(r12, Address(r13, r14));",
    "__ orq(r13, Address(r14, r15));",
    "__ orq(r14, Address(r15, r16));",
    "__ orq(r15, Address(r16, r17));",
    "__ orq(r16, Address(r17, r18));",
    "__ orq(r17, Address(r18, r19));",
    "__ orq(r18, Address(r19, r20));",
    "__ orq(r19, Address(r20, r21));",
    "__ orq(r20, Address(r21, r22));",
    "__ orq(r21, Address(r22, r23));",
    "__ orq(r22, Address(r23, r24));",
    "__ orq(r23, Address(r24, r25));",
    "__ orq(r24, Address(r25, r26));",
    "__ orq(r25, Address(r26, r27));",
    "__ orq(r26, Address(r27, r28));",
    "__ orq(r27, Address(r28, r29));",
    "__ orq(r28, Address(r29, r30));",
    "__ orq(r29, Address(r30, r31));",
    "__ orq(r30, Address(r31, rcx));",
    "__ orq(r31, Address(rcx, rdx));",
    "__ adcq(rcx, Address(rdx, rbx));",
    "__ adcq(rdx, Address(rbx, r8));",
    "__ adcq(rbx, Address(r8, r9));",
    "__ adcq(r8, Address(r9, r10));",
    "__ adcq(r9, Address(r10, r11));",
    "__ adcq(r10, Address(r11, r12));",
    "__ adcq(r11, Address(r12, r13));",
    "__ adcq(r12, Address(r13, r14));",
    "__ adcq(r13, Address(r14, r15));",
    "__ adcq(r14, Address(r15, r16));",
    "__ adcq(r15, Address(r16, r17));",
    "__ adcq(r16, Address(r17, r18));",
    "__ adcq(r17, Address(r18, r19));",
    "__ adcq(r18, Address(r19, r20));",
    "__ adcq(r19, Address(r20, r21));",
    "__ adcq(r20, Address(r21, r22));",
    "__ adcq(r21, Address(r22, r23));",
    "__ adcq(r22, Address(r23, r24));",
    "__ adcq(r23, Address(r24, r25));",
    "__ adcq(r24, Address(r25, r26));",
    "__ adcq(r25, Address(r26, r27));",
    "__ adcq(r26, Address(r27, r28));",
    "__ adcq(r27, Address(r28, r29));",
    "__ adcq(r28, Address(r29, r30));",
    "__ adcq(r29, Address(r30, r31));",
    "__ adcq(r30, Address(r31, rcx));",
    "__ adcq(r31, Address(rcx, rdx));",
    "__ imulq(rcx, Address(rdx, rbx));",
    "__ imulq(rdx, Address(rbx, r8));",
    "__ imulq(rbx, Address(r8, r9));",
    "__ imulq(r8, Address(r9, r10));",
    "__ imulq(r9, Address(r10, r11));",
    "__ imulq(r10, Address(r11, r12));",
    "__ imulq(r11, Address(r12, r13));",
    "__ imulq(r12, Address(r13, r14));",
    "__ imulq(r13, Address(r14, r15));",
    "__ imulq(r14, Address(r15, r16));",
    "__ imulq(r15, Address(r16, r17));",
    "__ imulq(r16, Address(r17, r18));",
    "__ imulq(r17, Address(r18, r19));",
    "__ imulq(r18, Address(r19, r20));",
    "__ imulq(r19, Address(r20, r21));",
    "__ imulq(r20, Address(r21, r22));",
    "__ imulq(r21, Address(r22, r23));",
    "__ imulq(r22, Address(r23, r24));",
    "__ imulq(r23, Address(r24, r25));",
    "__ imulq(r24, Address(r25, r26));",
    "__ imulq(r25, Address(r26, r27));",
    "__ imulq(r26, Address(r27, r28));",
    "__ imulq(r27, Address(r28, r29));",
    "__ imulq(r28, Address(r29, r30));",
    "__ imulq(r29, Address(r30, r31));",
    "__ imulq(r30, Address(r31, rcx));",
    "__ imulq(r31, Address(rcx, rdx));",
    "__ popcntq(rcx, Address(rdx, rbx));",
    "__ popcntq(rdx, Address(rbx, r8));",
    "__ popcntq(rbx, Address(r8, r9));",
    "__ popcntq(r8, Address(r9, r10));",
    "__ popcntq(r9, Address(r10, r11));",
    "__ popcntq(r10, Address(r11, r12));",
    "__ popcntq(r11, Address(r12, r13));",
    "__ popcntq(r12, Address(r13, r14));",
    "__ popcntq(r13, Address(r14, r15));",
    "__ popcntq(r14, Address(r15, r16));",
    "__ popcntq(r15, Address(r16, r17));",
    "__ popcntq(r16, Address(r17, r18));",
    "__ popcntq(r17, Address(r18, r19));",
    "__ popcntq(r18, Address(r19, r20));",
    "__ popcntq(r19, Address(r20, r21));",
    "__ popcntq(r20, Address(r21, r22));",
    "__ popcntq(r21, Address(r22, r23));",
    "__ popcntq(r22, Address(r23, r24));",
    "__ popcntq(r23, Address(r24, r25));",
    "__ popcntq(r24, Address(r25, r26));",
    "__ popcntq(r25, Address(r26, r27));",
    "__ popcntq(r26, Address(r27, r28));",
    "__ popcntq(r27, Address(r28, r29));",
    "__ popcntq(r28, Address(r29, r30));",
    "__ popcntq(r29, Address(r30, r31));",
    "__ popcntq(r30, Address(r31, rcx));",
    "__ popcntq(r31, Address(rcx, rdx));",
    "__ sbbq(rcx, Address(rdx, rbx));",
    "__ sbbq(rdx, Address(rbx, r8));",
    "__ sbbq(rbx, Address(r8, r9));",
    "__ sbbq(r8, Address(r9, r10));",
    "__ sbbq(r9, Address(r10, r11));",
    "__ sbbq(r10, Address(r11, r12));",
    "__ sbbq(r11, Address(r12, r13));",
    "__ sbbq(r12, Address(r13, r14));",
    "__ sbbq(r13, Address(r14, r15));",
    "__ sbbq(r14, Address(r15, r16));",
    "__ sbbq(r15, Address(r16, r17));",
    "__ sbbq(r16, Address(r17, r18));",
    "__ sbbq(r17, Address(r18, r19));",
    "__ sbbq(r18, Address(r19, r20));",
    "__ sbbq(r19, Address(r20, r21));",
    "__ sbbq(r20, Address(r21, r22));",
    "__ sbbq(r21, Address(r22, r23));",
    "__ sbbq(r22, Address(r23, r24));",
    "__ sbbq(r23, Address(r24, r25));",
    "__ sbbq(r24, Address(r25, r26));",
    "__ sbbq(r25, Address(r26, r27));",
    "__ sbbq(r26, Address(r27, r28));",
    "__ sbbq(r27, Address(r28, r29));",
    "__ sbbq(r28, Address(r29, r30));",
    "__ sbbq(r29, Address(r30, r31));",
    "__ sbbq(r30, Address(r31, rcx));",
    "__ sbbq(r31, Address(rcx, rdx));",
    "__ subq(rcx, Address(rdx, rbx));",
    "__ subq(rdx, Address(rbx, r8));",
    "__ subq(rbx, Address(r8, r9));",
    "__ subq(r8, Address(r9, r10));",
    "__ subq(r9, Address(r10, r11));",
    "__ subq(r10, Address(r11, r12));",
    "__ subq(r11, Address(r12, r13));",
    "__ subq(r12, Address(r13, r14));",
    "__ subq(r13, Address(r14, r15));",
    "__ subq(r14, Address(r15, r16));",
    "__ subq(r15, Address(r16, r17));",
    "__ subq(r16, Address(r17, r18));",
    "__ subq(r17, Address(r18, r19));",
    "__ subq(r18, Address(r19, r20));",
    "__ subq(r19, Address(r20, r21));",
    "__ subq(r20, Address(r21, r22));",
    "__ subq(r21, Address(r22, r23));",
    "__ subq(r22, Address(r23, r24));",
    "__ subq(r23, Address(r24, r25));",
    "__ subq(r24, Address(r25, r26));",
    "__ subq(r25, Address(r26, r27));",
    "__ subq(r26, Address(r27, r28));",
    "__ subq(r27, Address(r28, r29));",
    "__ subq(r28, Address(r29, r30));",
    "__ subq(r29, Address(r30, r31));",
    "__ subq(r30, Address(r31, rcx));",
    "__ subq(r31, Address(rcx, rdx));",
    "__ tzcntq(rcx, Address(rdx, rbx));",
    "__ tzcntq(rdx, Address(rbx, r8));",
    "__ tzcntq(rbx, Address(r8, r9));",
    "__ tzcntq(r8, Address(r9, r10));",
    "__ tzcntq(r9, Address(r10, r11));",
    "__ tzcntq(r10, Address(r11, r12));",
    "__ tzcntq(r11, Address(r12, r13));",
    "__ tzcntq(r12, Address(r13, r14));",
    "__ tzcntq(r13, Address(r14, r15));",
    "__ tzcntq(r14, Address(r15, r16));",
    "__ tzcntq(r15, Address(r16, r17));",
    "__ tzcntq(r16, Address(r17, r18));",
    "__ tzcntq(r17, Address(r18, r19));",
    "__ tzcntq(r18, Address(r19, r20));",
    "__ tzcntq(r19, Address(r20, r21));",
    "__ tzcntq(r20, Address(r21, r22));",
    "__ tzcntq(r21, Address(r22, r23));",
    "__ tzcntq(r22, Address(r23, r24));",
    "__ tzcntq(r23, Address(r24, r25));",
    "__ tzcntq(r24, Address(r25, r26));",
    "__ tzcntq(r25, Address(r26, r27));",
    "__ tzcntq(r26, Address(r27, r28));",
    "__ tzcntq(r27, Address(r28, r29));",
    "__ tzcntq(r28, Address(r29, r30));",
    "__ tzcntq(r29, Address(r30, r31));",
    "__ tzcntq(r30, Address(r31, rcx));",
    "__ tzcntq(r31, Address(rcx, rdx));",
    "__ xorq(rcx, Address(rdx, rbx));",
    "__ xorq(rdx, Address(rbx, r8));",
    "__ xorq(rbx, Address(r8, r9));",
    "__ xorq(r8, Address(r9, r10));",
    "__ xorq(r9, Address(r10, r11));",
    "__ xorq(r10, Address(r11, r12));",
    "__ xorq(r11, Address(r12, r13));",
    "__ xorq(r12, Address(r13, r14));",
    "__ xorq(r13, Address(r14, r15));",
    "__ xorq(r14, Address(r15, r16));",
    "__ xorq(r15, Address(r16, r17));",
    "__ xorq(r16, Address(r17, r18));",
    "__ xorq(r17, Address(r18, r19));",
    "__ xorq(r18, Address(r19, r20));",
    "__ xorq(r19, Address(r20, r21));",
    "__ xorq(r20, Address(r21, r22));",
    "__ xorq(r21, Address(r22, r23));",
    "__ xorq(r22, Address(r23, r24));",
    "__ xorq(r23, Address(r24, r25));",
    "__ xorq(r24, Address(r25, r26));",
    "__ xorq(r25, Address(r26, r27));",
    "__ xorq(r26, Address(r27, r28));",
    "__ xorq(r27, Address(r28, r29));",
    "__ xorq(r28, Address(r29, r30));",
    "__ xorq(r29, Address(r30, r31));",
    "__ xorq(r30, Address(r31, rcx));",
    "__ xorq(r31, Address(rcx, rdx));",
    "__ addq(rcx, 1);",
    "__ addq(rcx, 16);",
    "__ addq(rcx, 256);",
    "__ addq(rcx, 4096);",
    "__ addq(rcx, 65536);",
    "__ addq(rcx, 1048576);",
    "__ addq(rcx, 16777216);",
    "__ addq(rcx, 268435456);",
    "__ addq(rdx, 1);",
    "__ addq(rdx, 16);",
    "__ addq(rdx, 256);",
    "__ addq(rdx, 4096);",
    "__ addq(rdx, 65536);",
    "__ addq(rdx, 1048576);",
    "__ addq(rdx, 16777216);",
    "__ addq(rdx, 268435456);",
    "__ addq(rbx, 1);",
    "__ addq(rbx, 16);",
    "__ addq(rbx, 256);",
    "__ addq(rbx, 4096);",
    "__ addq(rbx, 65536);",
    "__ addq(rbx, 1048576);",
    "__ addq(rbx, 16777216);",
    "__ addq(rbx, 268435456);",
    "__ addq(r8, 1);",
    "__ addq(r8, 16);",
    "__ addq(r8, 256);",
    "__ addq(r8, 4096);",
    "__ addq(r8, 65536);",
    "__ addq(r8, 1048576);",
    "__ addq(r8, 16777216);",
    "__ addq(r8, 268435456);",
    "__ addq(r9, 1);",
    "__ addq(r9, 16);",
    "__ addq(r9, 256);",
    "__ addq(r9, 4096);",
    "__ addq(r9, 65536);",
    "__ addq(r9, 1048576);",
    "__ addq(r9, 16777216);",
    "__ addq(r9, 268435456);",
    "__ addq(r10, 1);",
    "__ addq(r10, 16);",
    "__ addq(r10, 256);",
    "__ addq(r10, 4096);",
    "__ addq(r10, 65536);",
    "__ addq(r10, 1048576);",
    "__ addq(r10, 16777216);",
    "__ addq(r10, 268435456);",
    "__ addq(r11, 1);",
    "__ addq(r11, 16);",
    "__ addq(r11, 256);",
    "__ addq(r11, 4096);",
    "__ addq(r11, 65536);",
    "__ addq(r11, 1048576);",
    "__ addq(r11, 16777216);",
    "__ addq(r11, 268435456);",
    "__ addq(r12, 1);",
    "__ addq(r12, 16);",
    "__ addq(r12, 256);",
    "__ addq(r12, 4096);",
    "__ addq(r12, 65536);",
    "__ addq(r12, 1048576);",
    "__ addq(r12, 16777216);",
    "__ addq(r12, 268435456);",
    "__ addq(r13, 1);",
    "__ addq(r13, 16);",
    "__ addq(r13, 256);",
    "__ addq(r13, 4096);",
    "__ addq(r13, 65536);",
    "__ addq(r13, 1048576);",
    "__ addq(r13, 16777216);",
    "__ addq(r13, 268435456);",
    "__ addq(r14, 1);",
    "__ addq(r14, 16);",
    "__ addq(r14, 256);",
    "__ addq(r14, 4096);",
    "__ addq(r14, 65536);",
    "__ addq(r14, 1048576);",
    "__ addq(r14, 16777216);",
    "__ addq(r14, 268435456);",
    "__ addq(r15, 1);",
    "__ addq(r15, 16);",
    "__ addq(r15, 256);",
    "__ addq(r15, 4096);",
    "__ addq(r15, 65536);",
    "__ addq(r15, 1048576);",
    "__ addq(r15, 16777216);",
    "__ addq(r15, 268435456);",
    "__ addq(r16, 1);",
    "__ addq(r16, 16);",
    "__ addq(r16, 256);",
    "__ addq(r16, 4096);",
    "__ addq(r16, 65536);",
    "__ addq(r16, 1048576);",
    "__ addq(r16, 16777216);",
    "__ addq(r16, 268435456);",
    "__ addq(r17, 1);",
    "__ addq(r17, 16);",
    "__ addq(r17, 256);",
    "__ addq(r17, 4096);",
    "__ addq(r17, 65536);",
    "__ addq(r17, 1048576);",
    "__ addq(r17, 16777216);",
    "__ addq(r17, 268435456);",
    "__ addq(r18, 1);",
    "__ addq(r18, 16);",
    "__ addq(r18, 256);",
    "__ addq(r18, 4096);",
    "__ addq(r18, 65536);",
    "__ addq(r18, 1048576);",
    "__ addq(r18, 16777216);",
    "__ addq(r18, 268435456);",
    "__ addq(r19, 1);",
    "__ addq(r19, 16);",
    "__ addq(r19, 256);",
    "__ addq(r19, 4096);",
    "__ addq(r19, 65536);",
    "__ addq(r19, 1048576);",
    "__ addq(r19, 16777216);",
    "__ addq(r19, 268435456);",
    "__ addq(r20, 1);",
    "__ addq(r20, 16);",
    "__ addq(r20, 256);",
    "__ addq(r20, 4096);",
    "__ addq(r20, 65536);",
    "__ addq(r20, 1048576);",
    "__ addq(r20, 16777216);",
    "__ addq(r20, 268435456);",
    "__ addq(r21, 1);",
    "__ addq(r21, 16);",
    "__ addq(r21, 256);",
    "__ addq(r21, 4096);",
    "__ addq(r21, 65536);",
    "__ addq(r21, 1048576);",
    "__ addq(r21, 16777216);",
    "__ addq(r21, 268435456);",
    "__ addq(r22, 1);",
    "__ addq(r22, 16);",
    "__ addq(r22, 256);",
    "__ addq(r22, 4096);",
    "__ addq(r22, 65536);",
    "__ addq(r22, 1048576);",
    "__ addq(r22, 16777216);",
    "__ addq(r22, 268435456);",
    "__ addq(r23, 1);",
    "__ addq(r23, 16);",
    "__ addq(r23, 256);",
    "__ addq(r23, 4096);",
    "__ addq(r23, 65536);",
    "__ addq(r23, 1048576);",
    "__ addq(r23, 16777216);",
    "__ addq(r23, 268435456);",
    "__ addq(r24, 1);",
    "__ addq(r24, 16);",
    "__ addq(r24, 256);",
    "__ addq(r24, 4096);",
    "__ addq(r24, 65536);",
    "__ addq(r24, 1048576);",
    "__ addq(r24, 16777216);",
    "__ addq(r24, 268435456);",
    "__ addq(r25, 1);",
    "__ addq(r25, 16);",
    "__ addq(r25, 256);",
    "__ addq(r25, 4096);",
    "__ addq(r25, 65536);",
    "__ addq(r25, 1048576);",
    "__ addq(r25, 16777216);",
    "__ addq(r25, 268435456);",
    "__ addq(r26, 1);",
    "__ addq(r26, 16);",
    "__ addq(r26, 256);",
    "__ addq(r26, 4096);",
    "__ addq(r26, 65536);",
    "__ addq(r26, 1048576);",
    "__ addq(r26, 16777216);",
    "__ addq(r26, 268435456);",
    "__ addq(r27, 1);",
    "__ addq(r27, 16);",
    "__ addq(r27, 256);",
    "__ addq(r27, 4096);",
    "__ addq(r27, 65536);",
    "__ addq(r27, 1048576);",
    "__ addq(r27, 16777216);",
    "__ addq(r27, 268435456);",
    "__ addq(r28, 1);",
    "__ addq(r28, 16);",
    "__ addq(r28, 256);",
    "__ addq(r28, 4096);",
    "__ addq(r28, 65536);",
    "__ addq(r28, 1048576);",
    "__ addq(r28, 16777216);",
    "__ addq(r28, 268435456);",
    "__ addq(r29, 1);",
    "__ addq(r29, 16);",
    "__ addq(r29, 256);",
    "__ addq(r29, 4096);",
    "__ addq(r29, 65536);",
    "__ addq(r29, 1048576);",
    "__ addq(r29, 16777216);",
    "__ addq(r29, 268435456);",
    "__ addq(r30, 1);",
    "__ addq(r30, 16);",
    "__ addq(r30, 256);",
    "__ addq(r30, 4096);",
    "__ addq(r30, 65536);",
    "__ addq(r30, 1048576);",
    "__ addq(r30, 16777216);",
    "__ addq(r30, 268435456);",
    "__ addq(r31, 1);",
    "__ addq(r31, 16);",
    "__ addq(r31, 256);",
    "__ addq(r31, 4096);",
    "__ addq(r31, 65536);",
    "__ addq(r31, 1048576);",
    "__ addq(r31, 16777216);",
    "__ addq(r31, 268435456);",
    "__ andq(rcx, 1);",
    "__ andq(rcx, 16);",
    "__ andq(rcx, 256);",
    "__ andq(rcx, 4096);",
    "__ andq(rcx, 65536);",
    "__ andq(rcx, 1048576);",
    "__ andq(rcx, 16777216);",
    "__ andq(rcx, 268435456);",
    "__ andq(rdx, 1);",
    "__ andq(rdx, 16);",
    "__ andq(rdx, 256);",
    "__ andq(rdx, 4096);",
    "__ andq(rdx, 65536);",
    "__ andq(rdx, 1048576);",
    "__ andq(rdx, 16777216);",
    "__ andq(rdx, 268435456);",
    "__ andq(rbx, 1);",
    "__ andq(rbx, 16);",
    "__ andq(rbx, 256);",
    "__ andq(rbx, 4096);",
    "__ andq(rbx, 65536);",
    "__ andq(rbx, 1048576);",
    "__ andq(rbx, 16777216);",
    "__ andq(rbx, 268435456);",
    "__ andq(r8, 1);",
    "__ andq(r8, 16);",
    "__ andq(r8, 256);",
    "__ andq(r8, 4096);",
    "__ andq(r8, 65536);",
    "__ andq(r8, 1048576);",
    "__ andq(r8, 16777216);",
    "__ andq(r8, 268435456);",
    "__ andq(r9, 1);",
    "__ andq(r9, 16);",
    "__ andq(r9, 256);",
    "__ andq(r9, 4096);",
    "__ andq(r9, 65536);",
    "__ andq(r9, 1048576);",
    "__ andq(r9, 16777216);",
    "__ andq(r9, 268435456);",
    "__ andq(r10, 1);",
    "__ andq(r10, 16);",
    "__ andq(r10, 256);",
    "__ andq(r10, 4096);",
    "__ andq(r10, 65536);",
    "__ andq(r10, 1048576);",
    "__ andq(r10, 16777216);",
    "__ andq(r10, 268435456);",
    "__ andq(r11, 1);",
    "__ andq(r11, 16);",
    "__ andq(r11, 256);",
    "__ andq(r11, 4096);",
    "__ andq(r11, 65536);",
    "__ andq(r11, 1048576);",
    "__ andq(r11, 16777216);",
    "__ andq(r11, 268435456);",
    "__ andq(r12, 1);",
    "__ andq(r12, 16);",
    "__ andq(r12, 256);",
    "__ andq(r12, 4096);",
    "__ andq(r12, 65536);",
    "__ andq(r12, 1048576);",
    "__ andq(r12, 16777216);",
    "__ andq(r12, 268435456);",
    "__ andq(r13, 1);",
    "__ andq(r13, 16);",
    "__ andq(r13, 256);",
    "__ andq(r13, 4096);",
    "__ andq(r13, 65536);",
    "__ andq(r13, 1048576);",
    "__ andq(r13, 16777216);",
    "__ andq(r13, 268435456);",
    "__ andq(r14, 1);",
    "__ andq(r14, 16);",
    "__ andq(r14, 256);",
    "__ andq(r14, 4096);",
    "__ andq(r14, 65536);",
    "__ andq(r14, 1048576);",
    "__ andq(r14, 16777216);",
    "__ andq(r14, 268435456);",
    "__ andq(r15, 1);",
    "__ andq(r15, 16);",
    "__ andq(r15, 256);",
    "__ andq(r15, 4096);",
    "__ andq(r15, 65536);",
    "__ andq(r15, 1048576);",
    "__ andq(r15, 16777216);",
    "__ andq(r15, 268435456);",
    "__ andq(r16, 1);",
    "__ andq(r16, 16);",
    "__ andq(r16, 256);",
    "__ andq(r16, 4096);",
    "__ andq(r16, 65536);",
    "__ andq(r16, 1048576);",
    "__ andq(r16, 16777216);",
    "__ andq(r16, 268435456);",
    "__ andq(r17, 1);",
    "__ andq(r17, 16);",
    "__ andq(r17, 256);",
    "__ andq(r17, 4096);",
    "__ andq(r17, 65536);",
    "__ andq(r17, 1048576);",
    "__ andq(r17, 16777216);",
    "__ andq(r17, 268435456);",
    "__ andq(r18, 1);",
    "__ andq(r18, 16);",
    "__ andq(r18, 256);",
    "__ andq(r18, 4096);",
    "__ andq(r18, 65536);",
    "__ andq(r18, 1048576);",
    "__ andq(r18, 16777216);",
    "__ andq(r18, 268435456);",
    "__ andq(r19, 1);",
    "__ andq(r19, 16);",
    "__ andq(r19, 256);",
    "__ andq(r19, 4096);",
    "__ andq(r19, 65536);",
    "__ andq(r19, 1048576);",
    "__ andq(r19, 16777216);",
    "__ andq(r19, 268435456);",
    "__ andq(r20, 1);",
    "__ andq(r20, 16);",
    "__ andq(r20, 256);",
    "__ andq(r20, 4096);",
    "__ andq(r20, 65536);",
    "__ andq(r20, 1048576);",
    "__ andq(r20, 16777216);",
    "__ andq(r20, 268435456);",
    "__ andq(r21, 1);",
    "__ andq(r21, 16);",
    "__ andq(r21, 256);",
    "__ andq(r21, 4096);",
    "__ andq(r21, 65536);",
    "__ andq(r21, 1048576);",
    "__ andq(r21, 16777216);",
    "__ andq(r21, 268435456);",
    "__ andq(r22, 1);",
    "__ andq(r22, 16);",
    "__ andq(r22, 256);",
    "__ andq(r22, 4096);",
    "__ andq(r22, 65536);",
    "__ andq(r22, 1048576);",
    "__ andq(r22, 16777216);",
    "__ andq(r22, 268435456);",
    "__ andq(r23, 1);",
    "__ andq(r23, 16);",
    "__ andq(r23, 256);",
    "__ andq(r23, 4096);",
    "__ andq(r23, 65536);",
    "__ andq(r23, 1048576);",
    "__ andq(r23, 16777216);",
    "__ andq(r23, 268435456);",
    "__ andq(r24, 1);",
    "__ andq(r24, 16);",
    "__ andq(r24, 256);",
    "__ andq(r24, 4096);",
    "__ andq(r24, 65536);",
    "__ andq(r24, 1048576);",
    "__ andq(r24, 16777216);",
    "__ andq(r24, 268435456);",
    "__ andq(r25, 1);",
    "__ andq(r25, 16);",
    "__ andq(r25, 256);",
    "__ andq(r25, 4096);",
    "__ andq(r25, 65536);",
    "__ andq(r25, 1048576);",
    "__ andq(r25, 16777216);",
    "__ andq(r25, 268435456);",
    "__ andq(r26, 1);",
    "__ andq(r26, 16);",
    "__ andq(r26, 256);",
    "__ andq(r26, 4096);",
    "__ andq(r26, 65536);",
    "__ andq(r26, 1048576);",
    "__ andq(r26, 16777216);",
    "__ andq(r26, 268435456);",
    "__ andq(r27, 1);",
    "__ andq(r27, 16);",
    "__ andq(r27, 256);",
    "__ andq(r27, 4096);",
    "__ andq(r27, 65536);",
    "__ andq(r27, 1048576);",
    "__ andq(r27, 16777216);",
    "__ andq(r27, 268435456);",
    "__ andq(r28, 1);",
    "__ andq(r28, 16);",
    "__ andq(r28, 256);",
    "__ andq(r28, 4096);",
    "__ andq(r28, 65536);",
    "__ andq(r28, 1048576);",
    "__ andq(r28, 16777216);",
    "__ andq(r28, 268435456);",
    "__ andq(r29, 1);",
    "__ andq(r29, 16);",
    "__ andq(r29, 256);",
    "__ andq(r29, 4096);",
    "__ andq(r29, 65536);",
    "__ andq(r29, 1048576);",
    "__ andq(r29, 16777216);",
    "__ andq(r29, 268435456);",
    "__ andq(r30, 1);",
    "__ andq(r30, 16);",
    "__ andq(r30, 256);",
    "__ andq(r30, 4096);",
    "__ andq(r30, 65536);",
    "__ andq(r30, 1048576);",
    "__ andq(r30, 16777216);",
    "__ andq(r30, 268435456);",
    "__ andq(r31, 1);",
    "__ andq(r31, 16);",
    "__ andq(r31, 256);",
    "__ andq(r31, 4096);",
    "__ andq(r31, 65536);",
    "__ andq(r31, 1048576);",
    "__ andq(r31, 16777216);",
    "__ andq(r31, 268435456);",
    "__ adcq(rcx, 1);",
    "__ adcq(rcx, 16);",
    "__ adcq(rcx, 256);",
    "__ adcq(rcx, 4096);",
    "__ adcq(rcx, 65536);",
    "__ adcq(rcx, 1048576);",
    "__ adcq(rcx, 16777216);",
    "__ adcq(rcx, 268435456);",
    "__ adcq(rdx, 1);",
    "__ adcq(rdx, 16);",
    "__ adcq(rdx, 256);",
    "__ adcq(rdx, 4096);",
    "__ adcq(rdx, 65536);",
    "__ adcq(rdx, 1048576);",
    "__ adcq(rdx, 16777216);",
    "__ adcq(rdx, 268435456);",
    "__ adcq(rbx, 1);",
    "__ adcq(rbx, 16);",
    "__ adcq(rbx, 256);",
    "__ adcq(rbx, 4096);",
    "__ adcq(rbx, 65536);",
    "__ adcq(rbx, 1048576);",
    "__ adcq(rbx, 16777216);",
    "__ adcq(rbx, 268435456);",
    "__ adcq(r8, 1);",
    "__ adcq(r8, 16);",
    "__ adcq(r8, 256);",
    "__ adcq(r8, 4096);",
    "__ adcq(r8, 65536);",
    "__ adcq(r8, 1048576);",
    "__ adcq(r8, 16777216);",
    "__ adcq(r8, 268435456);",
    "__ adcq(r9, 1);",
    "__ adcq(r9, 16);",
    "__ adcq(r9, 256);",
    "__ adcq(r9, 4096);",
    "__ adcq(r9, 65536);",
    "__ adcq(r9, 1048576);",
    "__ adcq(r9, 16777216);",
    "__ adcq(r9, 268435456);",
    "__ adcq(r10, 1);",
    "__ adcq(r10, 16);",
    "__ adcq(r10, 256);",
    "__ adcq(r10, 4096);",
    "__ adcq(r10, 65536);",
    "__ adcq(r10, 1048576);",
    "__ adcq(r10, 16777216);",
    "__ adcq(r10, 268435456);",
    "__ adcq(r11, 1);",
    "__ adcq(r11, 16);",
    "__ adcq(r11, 256);",
    "__ adcq(r11, 4096);",
    "__ adcq(r11, 65536);",
    "__ adcq(r11, 1048576);",
    "__ adcq(r11, 16777216);",
    "__ adcq(r11, 268435456);",
    "__ adcq(r12, 1);",
    "__ adcq(r12, 16);",
    "__ adcq(r12, 256);",
    "__ adcq(r12, 4096);",
    "__ adcq(r12, 65536);",
    "__ adcq(r12, 1048576);",
    "__ adcq(r12, 16777216);",
    "__ adcq(r12, 268435456);",
    "__ adcq(r13, 1);",
    "__ adcq(r13, 16);",
    "__ adcq(r13, 256);",
    "__ adcq(r13, 4096);",
    "__ adcq(r13, 65536);",
    "__ adcq(r13, 1048576);",
    "__ adcq(r13, 16777216);",
    "__ adcq(r13, 268435456);",
    "__ adcq(r14, 1);",
    "__ adcq(r14, 16);",
    "__ adcq(r14, 256);",
    "__ adcq(r14, 4096);",
    "__ adcq(r14, 65536);",
    "__ adcq(r14, 1048576);",
    "__ adcq(r14, 16777216);",
    "__ adcq(r14, 268435456);",
    "__ adcq(r15, 1);",
    "__ adcq(r15, 16);",
    "__ adcq(r15, 256);",
    "__ adcq(r15, 4096);",
    "__ adcq(r15, 65536);",
    "__ adcq(r15, 1048576);",
    "__ adcq(r15, 16777216);",
    "__ adcq(r15, 268435456);",
    "__ adcq(r16, 1);",
    "__ adcq(r16, 16);",
    "__ adcq(r16, 256);",
    "__ adcq(r16, 4096);",
    "__ adcq(r16, 65536);",
    "__ adcq(r16, 1048576);",
    "__ adcq(r16, 16777216);",
    "__ adcq(r16, 268435456);",
    "__ adcq(r17, 1);",
    "__ adcq(r17, 16);",
    "__ adcq(r17, 256);",
    "__ adcq(r17, 4096);",
    "__ adcq(r17, 65536);",
    "__ adcq(r17, 1048576);",
    "__ adcq(r17, 16777216);",
    "__ adcq(r17, 268435456);",
    "__ adcq(r18, 1);",
    "__ adcq(r18, 16);",
    "__ adcq(r18, 256);",
    "__ adcq(r18, 4096);",
    "__ adcq(r18, 65536);",
    "__ adcq(r18, 1048576);",
    "__ adcq(r18, 16777216);",
    "__ adcq(r18, 268435456);",
    "__ adcq(r19, 1);",
    "__ adcq(r19, 16);",
    "__ adcq(r19, 256);",
    "__ adcq(r19, 4096);",
    "__ adcq(r19, 65536);",
    "__ adcq(r19, 1048576);",
    "__ adcq(r19, 16777216);",
    "__ adcq(r19, 268435456);",
    "__ adcq(r20, 1);",
    "__ adcq(r20, 16);",
    "__ adcq(r20, 256);",
    "__ adcq(r20, 4096);",
    "__ adcq(r20, 65536);",
    "__ adcq(r20, 1048576);",
    "__ adcq(r20, 16777216);",
    "__ adcq(r20, 268435456);",
    "__ adcq(r21, 1);",
    "__ adcq(r21, 16);",
    "__ adcq(r21, 256);",
    "__ adcq(r21, 4096);",
    "__ adcq(r21, 65536);",
    "__ adcq(r21, 1048576);",
    "__ adcq(r21, 16777216);",
    "__ adcq(r21, 268435456);",
    "__ adcq(r22, 1);",
    "__ adcq(r22, 16);",
    "__ adcq(r22, 256);",
    "__ adcq(r22, 4096);",
    "__ adcq(r22, 65536);",
    "__ adcq(r22, 1048576);",
    "__ adcq(r22, 16777216);",
    "__ adcq(r22, 268435456);",
    "__ adcq(r23, 1);",
    "__ adcq(r23, 16);",
    "__ adcq(r23, 256);",
    "__ adcq(r23, 4096);",
    "__ adcq(r23, 65536);",
    "__ adcq(r23, 1048576);",
    "__ adcq(r23, 16777216);",
    "__ adcq(r23, 268435456);",
    "__ adcq(r24, 1);",
    "__ adcq(r24, 16);",
    "__ adcq(r24, 256);",
    "__ adcq(r24, 4096);",
    "__ adcq(r24, 65536);",
    "__ adcq(r24, 1048576);",
    "__ adcq(r24, 16777216);",
    "__ adcq(r24, 268435456);",
    "__ adcq(r25, 1);",
    "__ adcq(r25, 16);",
    "__ adcq(r25, 256);",
    "__ adcq(r25, 4096);",
    "__ adcq(r25, 65536);",
    "__ adcq(r25, 1048576);",
    "__ adcq(r25, 16777216);",
    "__ adcq(r25, 268435456);",
    "__ adcq(r26, 1);",
    "__ adcq(r26, 16);",
    "__ adcq(r26, 256);",
    "__ adcq(r26, 4096);",
    "__ adcq(r26, 65536);",
    "__ adcq(r26, 1048576);",
    "__ adcq(r26, 16777216);",
    "__ adcq(r26, 268435456);",
    "__ adcq(r27, 1);",
    "__ adcq(r27, 16);",
    "__ adcq(r27, 256);",
    "__ adcq(r27, 4096);",
    "__ adcq(r27, 65536);",
    "__ adcq(r27, 1048576);",
    "__ adcq(r27, 16777216);",
    "__ adcq(r27, 268435456);",
    "__ adcq(r28, 1);",
    "__ adcq(r28, 16);",
    "__ adcq(r28, 256);",
    "__ adcq(r28, 4096);",
    "__ adcq(r28, 65536);",
    "__ adcq(r28, 1048576);",
    "__ adcq(r28, 16777216);",
    "__ adcq(r28, 268435456);",
    "__ adcq(r29, 1);",
    "__ adcq(r29, 16);",
    "__ adcq(r29, 256);",
    "__ adcq(r29, 4096);",
    "__ adcq(r29, 65536);",
    "__ adcq(r29, 1048576);",
    "__ adcq(r29, 16777216);",
    "__ adcq(r29, 268435456);",
    "__ adcq(r30, 1);",
    "__ adcq(r30, 16);",
    "__ adcq(r30, 256);",
    "__ adcq(r30, 4096);",
    "__ adcq(r30, 65536);",
    "__ adcq(r30, 1048576);",
    "__ adcq(r30, 16777216);",
    "__ adcq(r30, 268435456);",
    "__ adcq(r31, 1);",
    "__ adcq(r31, 16);",
    "__ adcq(r31, 256);",
    "__ adcq(r31, 4096);",
    "__ adcq(r31, 65536);",
    "__ adcq(r31, 1048576);",
    "__ adcq(r31, 16777216);",
    "__ adcq(r31, 268435456);",
    "__ rclq(rcx, 1);",
    "__ rclq(rcx, 2);",
    "__ rclq(rcx, 4);",
    "__ rclq(rcx, 8);",
    "__ rclq(rcx, 16);",
    "__ rclq(rdx, 1);",
    "__ rclq(rdx, 2);",
    "__ rclq(rdx, 4);",
    "__ rclq(rdx, 8);",
    "__ rclq(rdx, 16);",
    "__ rclq(rbx, 1);",
    "__ rclq(rbx, 2);",
    "__ rclq(rbx, 4);",
    "__ rclq(rbx, 8);",
    "__ rclq(rbx, 16);",
    "__ rclq(r8, 1);",
    "__ rclq(r8, 2);",
    "__ rclq(r8, 4);",
    "__ rclq(r8, 8);",
    "__ rclq(r8, 16);",
    "__ rclq(r9, 1);",
    "__ rclq(r9, 2);",
    "__ rclq(r9, 4);",
    "__ rclq(r9, 8);",
    "__ rclq(r9, 16);",
    "__ rclq(r10, 1);",
    "__ rclq(r10, 2);",
    "__ rclq(r10, 4);",
    "__ rclq(r10, 8);",
    "__ rclq(r10, 16);",
    "__ rclq(r11, 1);",
    "__ rclq(r11, 2);",
    "__ rclq(r11, 4);",
    "__ rclq(r11, 8);",
    "__ rclq(r11, 16);",
    "__ rclq(r12, 1);",
    "__ rclq(r12, 2);",
    "__ rclq(r12, 4);",
    "__ rclq(r12, 8);",
    "__ rclq(r12, 16);",
    "__ rclq(r13, 1);",
    "__ rclq(r13, 2);",
    "__ rclq(r13, 4);",
    "__ rclq(r13, 8);",
    "__ rclq(r13, 16);",
    "__ rclq(r14, 1);",
    "__ rclq(r14, 2);",
    "__ rclq(r14, 4);",
    "__ rclq(r14, 8);",
    "__ rclq(r14, 16);",
    "__ rclq(r15, 1);",
    "__ rclq(r15, 2);",
    "__ rclq(r15, 4);",
    "__ rclq(r15, 8);",
    "__ rclq(r15, 16);",
    "__ rclq(r16, 1);",
    "__ rclq(r16, 2);",
    "__ rclq(r16, 4);",
    "__ rclq(r16, 8);",
    "__ rclq(r16, 16);",
    "__ rclq(r17, 1);",
    "__ rclq(r17, 2);",
    "__ rclq(r17, 4);",
    "__ rclq(r17, 8);",
    "__ rclq(r17, 16);",
    "__ rclq(r18, 1);",
    "__ rclq(r18, 2);",
    "__ rclq(r18, 4);",
    "__ rclq(r18, 8);",
    "__ rclq(r18, 16);",
    "__ rclq(r19, 1);",
    "__ rclq(r19, 2);",
    "__ rclq(r19, 4);",
    "__ rclq(r19, 8);",
    "__ rclq(r19, 16);",
    "__ rclq(r20, 1);",
    "__ rclq(r20, 2);",
    "__ rclq(r20, 4);",
    "__ rclq(r20, 8);",
    "__ rclq(r20, 16);",
    "__ rclq(r21, 1);",
    "__ rclq(r21, 2);",
    "__ rclq(r21, 4);",
    "__ rclq(r21, 8);",
    "__ rclq(r21, 16);",
    "__ rclq(r22, 1);",
    "__ rclq(r22, 2);",
    "__ rclq(r22, 4);",
    "__ rclq(r22, 8);",
    "__ rclq(r22, 16);",
    "__ rclq(r23, 1);",
    "__ rclq(r23, 2);",
    "__ rclq(r23, 4);",
    "__ rclq(r23, 8);",
    "__ rclq(r23, 16);",
    "__ rclq(r24, 1);",
    "__ rclq(r24, 2);",
    "__ rclq(r24, 4);",
    "__ rclq(r24, 8);",
    "__ rclq(r24, 16);",
    "__ rclq(r25, 1);",
    "__ rclq(r25, 2);",
    "__ rclq(r25, 4);",
    "__ rclq(r25, 8);",
    "__ rclq(r25, 16);",
    "__ rclq(r26, 1);",
    "__ rclq(r26, 2);",
    "__ rclq(r26, 4);",
    "__ rclq(r26, 8);",
    "__ rclq(r26, 16);",
    "__ rclq(r27, 1);",
    "__ rclq(r27, 2);",
    "__ rclq(r27, 4);",
    "__ rclq(r27, 8);",
    "__ rclq(r27, 16);",
    "__ rclq(r28, 1);",
    "__ rclq(r28, 2);",
    "__ rclq(r28, 4);",
    "__ rclq(r28, 8);",
    "__ rclq(r28, 16);",
    "__ rclq(r29, 1);",
    "__ rclq(r29, 2);",
    "__ rclq(r29, 4);",
    "__ rclq(r29, 8);",
    "__ rclq(r29, 16);",
    "__ rclq(r30, 1);",
    "__ rclq(r30, 2);",
    "__ rclq(r30, 4);",
    "__ rclq(r30, 8);",
    "__ rclq(r30, 16);",
    "__ rclq(r31, 1);",
    "__ rclq(r31, 2);",
    "__ rclq(r31, 4);",
    "__ rclq(r31, 8);",
    "__ rclq(r31, 16);",
    "__ rcrq(rcx, 1);",
    "__ rcrq(rcx, 2);",
    "__ rcrq(rcx, 4);",
    "__ rcrq(rcx, 8);",
    "__ rcrq(rcx, 16);",
    "__ rcrq(rdx, 1);",
    "__ rcrq(rdx, 2);",
    "__ rcrq(rdx, 4);",
    "__ rcrq(rdx, 8);",
    "__ rcrq(rdx, 16);",
    "__ rcrq(rbx, 1);",
    "__ rcrq(rbx, 2);",
    "__ rcrq(rbx, 4);",
    "__ rcrq(rbx, 8);",
    "__ rcrq(rbx, 16);",
    "__ rcrq(r8, 1);",
    "__ rcrq(r8, 2);",
    "__ rcrq(r8, 4);",
    "__ rcrq(r8, 8);",
    "__ rcrq(r8, 16);",
    "__ rcrq(r9, 1);",
    "__ rcrq(r9, 2);",
    "__ rcrq(r9, 4);",
    "__ rcrq(r9, 8);",
    "__ rcrq(r9, 16);",
    "__ rcrq(r10, 1);",
    "__ rcrq(r10, 2);",
    "__ rcrq(r10, 4);",
    "__ rcrq(r10, 8);",
    "__ rcrq(r10, 16);",
    "__ rcrq(r11, 1);",
    "__ rcrq(r11, 2);",
    "__ rcrq(r11, 4);",
    "__ rcrq(r11, 8);",
    "__ rcrq(r11, 16);",
    "__ rcrq(r12, 1);",
    "__ rcrq(r12, 2);",
    "__ rcrq(r12, 4);",
    "__ rcrq(r12, 8);",
    "__ rcrq(r12, 16);",
    "__ rcrq(r13, 1);",
    "__ rcrq(r13, 2);",
    "__ rcrq(r13, 4);",
    "__ rcrq(r13, 8);",
    "__ rcrq(r13, 16);",
    "__ rcrq(r14, 1);",
    "__ rcrq(r14, 2);",
    "__ rcrq(r14, 4);",
    "__ rcrq(r14, 8);",
    "__ rcrq(r14, 16);",
    "__ rcrq(r15, 1);",
    "__ rcrq(r15, 2);",
    "__ rcrq(r15, 4);",
    "__ rcrq(r15, 8);",
    "__ rcrq(r15, 16);",
    "__ rcrq(r16, 1);",
    "__ rcrq(r16, 2);",
    "__ rcrq(r16, 4);",
    "__ rcrq(r16, 8);",
    "__ rcrq(r16, 16);",
    "__ rcrq(r17, 1);",
    "__ rcrq(r17, 2);",
    "__ rcrq(r17, 4);",
    "__ rcrq(r17, 8);",
    "__ rcrq(r17, 16);",
    "__ rcrq(r18, 1);",
    "__ rcrq(r18, 2);",
    "__ rcrq(r18, 4);",
    "__ rcrq(r18, 8);",
    "__ rcrq(r18, 16);",
    "__ rcrq(r19, 1);",
    "__ rcrq(r19, 2);",
    "__ rcrq(r19, 4);",
    "__ rcrq(r19, 8);",
    "__ rcrq(r19, 16);",
    "__ rcrq(r20, 1);",
    "__ rcrq(r20, 2);",
    "__ rcrq(r20, 4);",
    "__ rcrq(r20, 8);",
    "__ rcrq(r20, 16);",
    "__ rcrq(r21, 1);",
    "__ rcrq(r21, 2);",
    "__ rcrq(r21, 4);",
    "__ rcrq(r21, 8);",
    "__ rcrq(r21, 16);",
    "__ rcrq(r22, 1);",
    "__ rcrq(r22, 2);",
    "__ rcrq(r22, 4);",
    "__ rcrq(r22, 8);",
    "__ rcrq(r22, 16);",
    "__ rcrq(r23, 1);",
    "__ rcrq(r23, 2);",
    "__ rcrq(r23, 4);",
    "__ rcrq(r23, 8);",
    "__ rcrq(r23, 16);",
    "__ rcrq(r24, 1);",
    "__ rcrq(r24, 2);",
    "__ rcrq(r24, 4);",
    "__ rcrq(r24, 8);",
    "__ rcrq(r24, 16);",
    "__ rcrq(r25, 1);",
    "__ rcrq(r25, 2);",
    "__ rcrq(r25, 4);",
    "__ rcrq(r25, 8);",
    "__ rcrq(r25, 16);",
    "__ rcrq(r26, 1);",
    "__ rcrq(r26, 2);",
    "__ rcrq(r26, 4);",
    "__ rcrq(r26, 8);",
    "__ rcrq(r26, 16);",
    "__ rcrq(r27, 1);",
    "__ rcrq(r27, 2);",
    "__ rcrq(r27, 4);",
    "__ rcrq(r27, 8);",
    "__ rcrq(r27, 16);",
    "__ rcrq(r28, 1);",
    "__ rcrq(r28, 2);",
    "__ rcrq(r28, 4);",
    "__ rcrq(r28, 8);",
    "__ rcrq(r28, 16);",
    "__ rcrq(r29, 1);",
    "__ rcrq(r29, 2);",
    "__ rcrq(r29, 4);",
    "__ rcrq(r29, 8);",
    "__ rcrq(r29, 16);",
    "__ rcrq(r30, 1);",
    "__ rcrq(r30, 2);",
    "__ rcrq(r30, 4);",
    "__ rcrq(r30, 8);",
    "__ rcrq(r30, 16);",
    "__ rcrq(r31, 1);",
    "__ rcrq(r31, 2);",
    "__ rcrq(r31, 4);",
    "__ rcrq(r31, 8);",
    "__ rcrq(r31, 16);",
    "__ rolq(rcx, 1);",
    "__ rolq(rcx, 2);",
    "__ rolq(rcx, 4);",
    "__ rolq(rcx, 8);",
    "__ rolq(rcx, 16);",
    "__ rolq(rdx, 1);",
    "__ rolq(rdx, 2);",
    "__ rolq(rdx, 4);",
    "__ rolq(rdx, 8);",
    "__ rolq(rdx, 16);",
    "__ rolq(rbx, 1);",
    "__ rolq(rbx, 2);",
    "__ rolq(rbx, 4);",
    "__ rolq(rbx, 8);",
    "__ rolq(rbx, 16);",
    "__ rolq(r8, 1);",
    "__ rolq(r8, 2);",
    "__ rolq(r8, 4);",
    "__ rolq(r8, 8);",
    "__ rolq(r8, 16);",
    "__ rolq(r9, 1);",
    "__ rolq(r9, 2);",
    "__ rolq(r9, 4);",
    "__ rolq(r9, 8);",
    "__ rolq(r9, 16);",
    "__ rolq(r10, 1);",
    "__ rolq(r10, 2);",
    "__ rolq(r10, 4);",
    "__ rolq(r10, 8);",
    "__ rolq(r10, 16);",
    "__ rolq(r11, 1);",
    "__ rolq(r11, 2);",
    "__ rolq(r11, 4);",
    "__ rolq(r11, 8);",
    "__ rolq(r11, 16);",
    "__ rolq(r12, 1);",
    "__ rolq(r12, 2);",
    "__ rolq(r12, 4);",
    "__ rolq(r12, 8);",
    "__ rolq(r12, 16);",
    "__ rolq(r13, 1);",
    "__ rolq(r13, 2);",
    "__ rolq(r13, 4);",
    "__ rolq(r13, 8);",
    "__ rolq(r13, 16);",
    "__ rolq(r14, 1);",
    "__ rolq(r14, 2);",
    "__ rolq(r14, 4);",
    "__ rolq(r14, 8);",
    "__ rolq(r14, 16);",
    "__ rolq(r15, 1);",
    "__ rolq(r15, 2);",
    "__ rolq(r15, 4);",
    "__ rolq(r15, 8);",
    "__ rolq(r15, 16);",
    "__ rolq(r16, 1);",
    "__ rolq(r16, 2);",
    "__ rolq(r16, 4);",
    "__ rolq(r16, 8);",
    "__ rolq(r16, 16);",
    "__ rolq(r17, 1);",
    "__ rolq(r17, 2);",
    "__ rolq(r17, 4);",
    "__ rolq(r17, 8);",
    "__ rolq(r17, 16);",
    "__ rolq(r18, 1);",
    "__ rolq(r18, 2);",
    "__ rolq(r18, 4);",
    "__ rolq(r18, 8);",
    "__ rolq(r18, 16);",
    "__ rolq(r19, 1);",
    "__ rolq(r19, 2);",
    "__ rolq(r19, 4);",
    "__ rolq(r19, 8);",
    "__ rolq(r19, 16);",
    "__ rolq(r20, 1);",
    "__ rolq(r20, 2);",
    "__ rolq(r20, 4);",
    "__ rolq(r20, 8);",
    "__ rolq(r20, 16);",
    "__ rolq(r21, 1);",
    "__ rolq(r21, 2);",
    "__ rolq(r21, 4);",
    "__ rolq(r21, 8);",
    "__ rolq(r21, 16);",
    "__ rolq(r22, 1);",
    "__ rolq(r22, 2);",
    "__ rolq(r22, 4);",
    "__ rolq(r22, 8);",
    "__ rolq(r22, 16);",
    "__ rolq(r23, 1);",
    "__ rolq(r23, 2);",
    "__ rolq(r23, 4);",
    "__ rolq(r23, 8);",
    "__ rolq(r23, 16);",
    "__ rolq(r24, 1);",
    "__ rolq(r24, 2);",
    "__ rolq(r24, 4);",
    "__ rolq(r24, 8);",
    "__ rolq(r24, 16);",
    "__ rolq(r25, 1);",
    "__ rolq(r25, 2);",
    "__ rolq(r25, 4);",
    "__ rolq(r25, 8);",
    "__ rolq(r25, 16);",
    "__ rolq(r26, 1);",
    "__ rolq(r26, 2);",
    "__ rolq(r26, 4);",
    "__ rolq(r26, 8);",
    "__ rolq(r26, 16);",
    "__ rolq(r27, 1);",
    "__ rolq(r27, 2);",
    "__ rolq(r27, 4);",
    "__ rolq(r27, 8);",
    "__ rolq(r27, 16);",
    "__ rolq(r28, 1);",
    "__ rolq(r28, 2);",
    "__ rolq(r28, 4);",
    "__ rolq(r28, 8);",
    "__ rolq(r28, 16);",
    "__ rolq(r29, 1);",
    "__ rolq(r29, 2);",
    "__ rolq(r29, 4);",
    "__ rolq(r29, 8);",
    "__ rolq(r29, 16);",
    "__ rolq(r30, 1);",
    "__ rolq(r30, 2);",
    "__ rolq(r30, 4);",
    "__ rolq(r30, 8);",
    "__ rolq(r30, 16);",
    "__ rolq(r31, 1);",
    "__ rolq(r31, 2);",
    "__ rolq(r31, 4);",
    "__ rolq(r31, 8);",
    "__ rolq(r31, 16);",
    "__ rorq(rcx, 1);",
    "__ rorq(rcx, 2);",
    "__ rorq(rcx, 4);",
    "__ rorq(rcx, 8);",
    "__ rorq(rcx, 16);",
    "__ rorq(rdx, 1);",
    "__ rorq(rdx, 2);",
    "__ rorq(rdx, 4);",
    "__ rorq(rdx, 8);",
    "__ rorq(rdx, 16);",
    "__ rorq(rbx, 1);",
    "__ rorq(rbx, 2);",
    "__ rorq(rbx, 4);",
    "__ rorq(rbx, 8);",
    "__ rorq(rbx, 16);",
    "__ rorq(r8, 1);",
    "__ rorq(r8, 2);",
    "__ rorq(r8, 4);",
    "__ rorq(r8, 8);",
    "__ rorq(r8, 16);",
    "__ rorq(r9, 1);",
    "__ rorq(r9, 2);",
    "__ rorq(r9, 4);",
    "__ rorq(r9, 8);",
    "__ rorq(r9, 16);",
    "__ rorq(r10, 1);",
    "__ rorq(r10, 2);",
    "__ rorq(r10, 4);",
    "__ rorq(r10, 8);",
    "__ rorq(r10, 16);",
    "__ rorq(r11, 1);",
    "__ rorq(r11, 2);",
    "__ rorq(r11, 4);",
    "__ rorq(r11, 8);",
    "__ rorq(r11, 16);",
    "__ rorq(r12, 1);",
    "__ rorq(r12, 2);",
    "__ rorq(r12, 4);",
    "__ rorq(r12, 8);",
    "__ rorq(r12, 16);",
    "__ rorq(r13, 1);",
    "__ rorq(r13, 2);",
    "__ rorq(r13, 4);",
    "__ rorq(r13, 8);",
    "__ rorq(r13, 16);",
    "__ rorq(r14, 1);",
    "__ rorq(r14, 2);",
    "__ rorq(r14, 4);",
    "__ rorq(r14, 8);",
    "__ rorq(r14, 16);",
    "__ rorq(r15, 1);",
    "__ rorq(r15, 2);",
    "__ rorq(r15, 4);",
    "__ rorq(r15, 8);",
    "__ rorq(r15, 16);",
    "__ rorq(r16, 1);",
    "__ rorq(r16, 2);",
    "__ rorq(r16, 4);",
    "__ rorq(r16, 8);",
    "__ rorq(r16, 16);",
    "__ rorq(r17, 1);",
    "__ rorq(r17, 2);",
    "__ rorq(r17, 4);",
    "__ rorq(r17, 8);",
    "__ rorq(r17, 16);",
    "__ rorq(r18, 1);",
    "__ rorq(r18, 2);",
    "__ rorq(r18, 4);",
    "__ rorq(r18, 8);",
    "__ rorq(r18, 16);",
    "__ rorq(r19, 1);",
    "__ rorq(r19, 2);",
    "__ rorq(r19, 4);",
    "__ rorq(r19, 8);",
    "__ rorq(r19, 16);",
    "__ rorq(r20, 1);",
    "__ rorq(r20, 2);",
    "__ rorq(r20, 4);",
    "__ rorq(r20, 8);",
    "__ rorq(r20, 16);",
    "__ rorq(r21, 1);",
    "__ rorq(r21, 2);",
    "__ rorq(r21, 4);",
    "__ rorq(r21, 8);",
    "__ rorq(r21, 16);",
    "__ rorq(r22, 1);",
    "__ rorq(r22, 2);",
    "__ rorq(r22, 4);",
    "__ rorq(r22, 8);",
    "__ rorq(r22, 16);",
    "__ rorq(r23, 1);",
    "__ rorq(r23, 2);",
    "__ rorq(r23, 4);",
    "__ rorq(r23, 8);",
    "__ rorq(r23, 16);",
    "__ rorq(r24, 1);",
    "__ rorq(r24, 2);",
    "__ rorq(r24, 4);",
    "__ rorq(r24, 8);",
    "__ rorq(r24, 16);",
    "__ rorq(r25, 1);",
    "__ rorq(r25, 2);",
    "__ rorq(r25, 4);",
    "__ rorq(r25, 8);",
    "__ rorq(r25, 16);",
    "__ rorq(r26, 1);",
    "__ rorq(r26, 2);",
    "__ rorq(r26, 4);",
    "__ rorq(r26, 8);",
    "__ rorq(r26, 16);",
    "__ rorq(r27, 1);",
    "__ rorq(r27, 2);",
    "__ rorq(r27, 4);",
    "__ rorq(r27, 8);",
    "__ rorq(r27, 16);",
    "__ rorq(r28, 1);",
    "__ rorq(r28, 2);",
    "__ rorq(r28, 4);",
    "__ rorq(r28, 8);",
    "__ rorq(r28, 16);",
    "__ rorq(r29, 1);",
    "__ rorq(r29, 2);",
    "__ rorq(r29, 4);",
    "__ rorq(r29, 8);",
    "__ rorq(r29, 16);",
    "__ rorq(r30, 1);",
    "__ rorq(r30, 2);",
    "__ rorq(r30, 4);",
    "__ rorq(r30, 8);",
    "__ rorq(r30, 16);",
    "__ rorq(r31, 1);",
    "__ rorq(r31, 2);",
    "__ rorq(r31, 4);",
    "__ rorq(r31, 8);",
    "__ rorq(r31, 16);",
    "__ sarq(rcx, 1);",
    "__ sarq(rcx, 2);",
    "__ sarq(rcx, 4);",
    "__ sarq(rcx, 8);",
    "__ sarq(rcx, 16);",
    "__ sarq(rdx, 1);",
    "__ sarq(rdx, 2);",
    "__ sarq(rdx, 4);",
    "__ sarq(rdx, 8);",
    "__ sarq(rdx, 16);",
    "__ sarq(rbx, 1);",
    "__ sarq(rbx, 2);",
    "__ sarq(rbx, 4);",
    "__ sarq(rbx, 8);",
    "__ sarq(rbx, 16);",
    "__ sarq(r8, 1);",
    "__ sarq(r8, 2);",
    "__ sarq(r8, 4);",
    "__ sarq(r8, 8);",
    "__ sarq(r8, 16);",
    "__ sarq(r9, 1);",
    "__ sarq(r9, 2);",
    "__ sarq(r9, 4);",
    "__ sarq(r9, 8);",
    "__ sarq(r9, 16);",
    "__ sarq(r10, 1);",
    "__ sarq(r10, 2);",
    "__ sarq(r10, 4);",
    "__ sarq(r10, 8);",
    "__ sarq(r10, 16);",
    "__ sarq(r11, 1);",
    "__ sarq(r11, 2);",
    "__ sarq(r11, 4);",
    "__ sarq(r11, 8);",
    "__ sarq(r11, 16);",
    "__ sarq(r12, 1);",
    "__ sarq(r12, 2);",
    "__ sarq(r12, 4);",
    "__ sarq(r12, 8);",
    "__ sarq(r12, 16);",
    "__ sarq(r13, 1);",
    "__ sarq(r13, 2);",
    "__ sarq(r13, 4);",
    "__ sarq(r13, 8);",
    "__ sarq(r13, 16);",
    "__ sarq(r14, 1);",
    "__ sarq(r14, 2);",
    "__ sarq(r14, 4);",
    "__ sarq(r14, 8);",
    "__ sarq(r14, 16);",
    "__ sarq(r15, 1);",
    "__ sarq(r15, 2);",
    "__ sarq(r15, 4);",
    "__ sarq(r15, 8);",
    "__ sarq(r15, 16);",
    "__ sarq(r16, 1);",
    "__ sarq(r16, 2);",
    "__ sarq(r16, 4);",
    "__ sarq(r16, 8);",
    "__ sarq(r16, 16);",
    "__ sarq(r17, 1);",
    "__ sarq(r17, 2);",
    "__ sarq(r17, 4);",
    "__ sarq(r17, 8);",
    "__ sarq(r17, 16);",
    "__ sarq(r18, 1);",
    "__ sarq(r18, 2);",
    "__ sarq(r18, 4);",
    "__ sarq(r18, 8);",
    "__ sarq(r18, 16);",
    "__ sarq(r19, 1);",
    "__ sarq(r19, 2);",
    "__ sarq(r19, 4);",
    "__ sarq(r19, 8);",
    "__ sarq(r19, 16);",
    "__ sarq(r20, 1);",
    "__ sarq(r20, 2);",
    "__ sarq(r20, 4);",
    "__ sarq(r20, 8);",
    "__ sarq(r20, 16);",
    "__ sarq(r21, 1);",
    "__ sarq(r21, 2);",
    "__ sarq(r21, 4);",
    "__ sarq(r21, 8);",
    "__ sarq(r21, 16);",
    "__ sarq(r22, 1);",
    "__ sarq(r22, 2);",
    "__ sarq(r22, 4);",
    "__ sarq(r22, 8);",
    "__ sarq(r22, 16);",
    "__ sarq(r23, 1);",
    "__ sarq(r23, 2);",
    "__ sarq(r23, 4);",
    "__ sarq(r23, 8);",
    "__ sarq(r23, 16);",
    "__ sarq(r24, 1);",
    "__ sarq(r24, 2);",
    "__ sarq(r24, 4);",
    "__ sarq(r24, 8);",
    "__ sarq(r24, 16);",
    "__ sarq(r25, 1);",
    "__ sarq(r25, 2);",
    "__ sarq(r25, 4);",
    "__ sarq(r25, 8);",
    "__ sarq(r25, 16);",
    "__ sarq(r26, 1);",
    "__ sarq(r26, 2);",
    "__ sarq(r26, 4);",
    "__ sarq(r26, 8);",
    "__ sarq(r26, 16);",
    "__ sarq(r27, 1);",
    "__ sarq(r27, 2);",
    "__ sarq(r27, 4);",
    "__ sarq(r27, 8);",
    "__ sarq(r27, 16);",
    "__ sarq(r28, 1);",
    "__ sarq(r28, 2);",
    "__ sarq(r28, 4);",
    "__ sarq(r28, 8);",
    "__ sarq(r28, 16);",
    "__ sarq(r29, 1);",
    "__ sarq(r29, 2);",
    "__ sarq(r29, 4);",
    "__ sarq(r29, 8);",
    "__ sarq(r29, 16);",
    "__ sarq(r30, 1);",
    "__ sarq(r30, 2);",
    "__ sarq(r30, 4);",
    "__ sarq(r30, 8);",
    "__ sarq(r30, 16);",
    "__ sarq(r31, 1);",
    "__ sarq(r31, 2);",
    "__ sarq(r31, 4);",
    "__ sarq(r31, 8);",
    "__ sarq(r31, 16);",
    "__ sbbq(rcx, 1);",
    "__ sbbq(rcx, 16);",
    "__ sbbq(rcx, 256);",
    "__ sbbq(rcx, 4096);",
    "__ sbbq(rcx, 65536);",
    "__ sbbq(rcx, 1048576);",
    "__ sbbq(rcx, 16777216);",
    "__ sbbq(rcx, 268435456);",
    "__ sbbq(rdx, 1);",
    "__ sbbq(rdx, 16);",
    "__ sbbq(rdx, 256);",
    "__ sbbq(rdx, 4096);",
    "__ sbbq(rdx, 65536);",
    "__ sbbq(rdx, 1048576);",
    "__ sbbq(rdx, 16777216);",
    "__ sbbq(rdx, 268435456);",
    "__ sbbq(rbx, 1);",
    "__ sbbq(rbx, 16);",
    "__ sbbq(rbx, 256);",
    "__ sbbq(rbx, 4096);",
    "__ sbbq(rbx, 65536);",
    "__ sbbq(rbx, 1048576);",
    "__ sbbq(rbx, 16777216);",
    "__ sbbq(rbx, 268435456);",
    "__ sbbq(r8, 1);",
    "__ sbbq(r8, 16);",
    "__ sbbq(r8, 256);",
    "__ sbbq(r8, 4096);",
    "__ sbbq(r8, 65536);",
    "__ sbbq(r8, 1048576);",
    "__ sbbq(r8, 16777216);",
    "__ sbbq(r8, 268435456);",
    "__ sbbq(r9, 1);",
    "__ sbbq(r9, 16);",
    "__ sbbq(r9, 256);",
    "__ sbbq(r9, 4096);",
    "__ sbbq(r9, 65536);",
    "__ sbbq(r9, 1048576);",
    "__ sbbq(r9, 16777216);",
    "__ sbbq(r9, 268435456);",
    "__ sbbq(r10, 1);",
    "__ sbbq(r10, 16);",
    "__ sbbq(r10, 256);",
    "__ sbbq(r10, 4096);",
    "__ sbbq(r10, 65536);",
    "__ sbbq(r10, 1048576);",
    "__ sbbq(r10, 16777216);",
    "__ sbbq(r10, 268435456);",
    "__ sbbq(r11, 1);",
    "__ sbbq(r11, 16);",
    "__ sbbq(r11, 256);",
    "__ sbbq(r11, 4096);",
    "__ sbbq(r11, 65536);",
    "__ sbbq(r11, 1048576);",
    "__ sbbq(r11, 16777216);",
    "__ sbbq(r11, 268435456);",
    "__ sbbq(r12, 1);",
    "__ sbbq(r12, 16);",
    "__ sbbq(r12, 256);",
    "__ sbbq(r12, 4096);",
    "__ sbbq(r12, 65536);",
    "__ sbbq(r12, 1048576);",
    "__ sbbq(r12, 16777216);",
    "__ sbbq(r12, 268435456);",
    "__ sbbq(r13, 1);",
    "__ sbbq(r13, 16);",
    "__ sbbq(r13, 256);",
    "__ sbbq(r13, 4096);",
    "__ sbbq(r13, 65536);",
    "__ sbbq(r13, 1048576);",
    "__ sbbq(r13, 16777216);",
    "__ sbbq(r13, 268435456);",
    "__ sbbq(r14, 1);",
    "__ sbbq(r14, 16);",
    "__ sbbq(r14, 256);",
    "__ sbbq(r14, 4096);",
    "__ sbbq(r14, 65536);",
    "__ sbbq(r14, 1048576);",
    "__ sbbq(r14, 16777216);",
    "__ sbbq(r14, 268435456);",
    "__ sbbq(r15, 1);",
    "__ sbbq(r15, 16);",
    "__ sbbq(r15, 256);",
    "__ sbbq(r15, 4096);",
    "__ sbbq(r15, 65536);",
    "__ sbbq(r15, 1048576);",
    "__ sbbq(r15, 16777216);",
    "__ sbbq(r15, 268435456);",
    "__ sbbq(r16, 1);",
    "__ sbbq(r16, 16);",
    "__ sbbq(r16, 256);",
    "__ sbbq(r16, 4096);",
    "__ sbbq(r16, 65536);",
    "__ sbbq(r16, 1048576);",
    "__ sbbq(r16, 16777216);",
    "__ sbbq(r16, 268435456);",
    "__ sbbq(r17, 1);",
    "__ sbbq(r17, 16);",
    "__ sbbq(r17, 256);",
    "__ sbbq(r17, 4096);",
    "__ sbbq(r17, 65536);",
    "__ sbbq(r17, 1048576);",
    "__ sbbq(r17, 16777216);",
    "__ sbbq(r17, 268435456);",
    "__ sbbq(r18, 1);",
    "__ sbbq(r18, 16);",
    "__ sbbq(r18, 256);",
    "__ sbbq(r18, 4096);",
    "__ sbbq(r18, 65536);",
    "__ sbbq(r18, 1048576);",
    "__ sbbq(r18, 16777216);",
    "__ sbbq(r18, 268435456);",
    "__ sbbq(r19, 1);",
    "__ sbbq(r19, 16);",
    "__ sbbq(r19, 256);",
    "__ sbbq(r19, 4096);",
    "__ sbbq(r19, 65536);",
    "__ sbbq(r19, 1048576);",
    "__ sbbq(r19, 16777216);",
    "__ sbbq(r19, 268435456);",
    "__ sbbq(r20, 1);",
    "__ sbbq(r20, 16);",
    "__ sbbq(r20, 256);",
    "__ sbbq(r20, 4096);",
    "__ sbbq(r20, 65536);",
    "__ sbbq(r20, 1048576);",
    "__ sbbq(r20, 16777216);",
    "__ sbbq(r20, 268435456);",
    "__ sbbq(r21, 1);",
    "__ sbbq(r21, 16);",
    "__ sbbq(r21, 256);",
    "__ sbbq(r21, 4096);",
    "__ sbbq(r21, 65536);",
    "__ sbbq(r21, 1048576);",
    "__ sbbq(r21, 16777216);",
    "__ sbbq(r21, 268435456);",
    "__ sbbq(r22, 1);",
    "__ sbbq(r22, 16);",
    "__ sbbq(r22, 256);",
    "__ sbbq(r22, 4096);",
    "__ sbbq(r22, 65536);",
    "__ sbbq(r22, 1048576);",
    "__ sbbq(r22, 16777216);",
    "__ sbbq(r22, 268435456);",
    "__ sbbq(r23, 1);",
    "__ sbbq(r23, 16);",
    "__ sbbq(r23, 256);",
    "__ sbbq(r23, 4096);",
    "__ sbbq(r23, 65536);",
    "__ sbbq(r23, 1048576);",
    "__ sbbq(r23, 16777216);",
    "__ sbbq(r23, 268435456);",
    "__ sbbq(r24, 1);",
    "__ sbbq(r24, 16);",
    "__ sbbq(r24, 256);",
    "__ sbbq(r24, 4096);",
    "__ sbbq(r24, 65536);",
    "__ sbbq(r24, 1048576);",
    "__ sbbq(r24, 16777216);",
    "__ sbbq(r24, 268435456);",
    "__ sbbq(r25, 1);",
    "__ sbbq(r25, 16);",
    "__ sbbq(r25, 256);",
    "__ sbbq(r25, 4096);",
    "__ sbbq(r25, 65536);",
    "__ sbbq(r25, 1048576);",
    "__ sbbq(r25, 16777216);",
    "__ sbbq(r25, 268435456);",
    "__ sbbq(r26, 1);",
    "__ sbbq(r26, 16);",
    "__ sbbq(r26, 256);",
    "__ sbbq(r26, 4096);",
    "__ sbbq(r26, 65536);",
    "__ sbbq(r26, 1048576);",
    "__ sbbq(r26, 16777216);",
    "__ sbbq(r26, 268435456);",
    "__ sbbq(r27, 1);",
    "__ sbbq(r27, 16);",
    "__ sbbq(r27, 256);",
    "__ sbbq(r27, 4096);",
    "__ sbbq(r27, 65536);",
    "__ sbbq(r27, 1048576);",
    "__ sbbq(r27, 16777216);",
    "__ sbbq(r27, 268435456);",
    "__ sbbq(r28, 1);",
    "__ sbbq(r28, 16);",
    "__ sbbq(r28, 256);",
    "__ sbbq(r28, 4096);",
    "__ sbbq(r28, 65536);",
    "__ sbbq(r28, 1048576);",
    "__ sbbq(r28, 16777216);",
    "__ sbbq(r28, 268435456);",
    "__ sbbq(r29, 1);",
    "__ sbbq(r29, 16);",
    "__ sbbq(r29, 256);",
    "__ sbbq(r29, 4096);",
    "__ sbbq(r29, 65536);",
    "__ sbbq(r29, 1048576);",
    "__ sbbq(r29, 16777216);",
    "__ sbbq(r29, 268435456);",
    "__ sbbq(r30, 1);",
    "__ sbbq(r30, 16);",
    "__ sbbq(r30, 256);",
    "__ sbbq(r30, 4096);",
    "__ sbbq(r30, 65536);",
    "__ sbbq(r30, 1048576);",
    "__ sbbq(r30, 16777216);",
    "__ sbbq(r30, 268435456);",
    "__ sbbq(r31, 1);",
    "__ sbbq(r31, 16);",
    "__ sbbq(r31, 256);",
    "__ sbbq(r31, 4096);",
    "__ sbbq(r31, 65536);",
    "__ sbbq(r31, 1048576);",
    "__ sbbq(r31, 16777216);",
    "__ sbbq(r31, 268435456);",
    "__ shlq(rcx, 1);",
    "__ shlq(rcx, 2);",
    "__ shlq(rcx, 4);",
    "__ shlq(rcx, 8);",
    "__ shlq(rcx, 16);",
    "__ shlq(rdx, 1);",
    "__ shlq(rdx, 2);",
    "__ shlq(rdx, 4);",
    "__ shlq(rdx, 8);",
    "__ shlq(rdx, 16);",
    "__ shlq(rbx, 1);",
    "__ shlq(rbx, 2);",
    "__ shlq(rbx, 4);",
    "__ shlq(rbx, 8);",
    "__ shlq(rbx, 16);",
    "__ shlq(r8, 1);",
    "__ shlq(r8, 2);",
    "__ shlq(r8, 4);",
    "__ shlq(r8, 8);",
    "__ shlq(r8, 16);",
    "__ shlq(r9, 1);",
    "__ shlq(r9, 2);",
    "__ shlq(r9, 4);",
    "__ shlq(r9, 8);",
    "__ shlq(r9, 16);",
    "__ shlq(r10, 1);",
    "__ shlq(r10, 2);",
    "__ shlq(r10, 4);",
    "__ shlq(r10, 8);",
    "__ shlq(r10, 16);",
    "__ shlq(r11, 1);",
    "__ shlq(r11, 2);",
    "__ shlq(r11, 4);",
    "__ shlq(r11, 8);",
    "__ shlq(r11, 16);",
    "__ shlq(r12, 1);",
    "__ shlq(r12, 2);",
    "__ shlq(r12, 4);",
    "__ shlq(r12, 8);",
    "__ shlq(r12, 16);",
    "__ shlq(r13, 1);",
    "__ shlq(r13, 2);",
    "__ shlq(r13, 4);",
    "__ shlq(r13, 8);",
    "__ shlq(r13, 16);",
    "__ shlq(r14, 1);",
    "__ shlq(r14, 2);",
    "__ shlq(r14, 4);",
    "__ shlq(r14, 8);",
    "__ shlq(r14, 16);",
    "__ shlq(r15, 1);",
    "__ shlq(r15, 2);",
    "__ shlq(r15, 4);",
    "__ shlq(r15, 8);",
    "__ shlq(r15, 16);",
    "__ shlq(r16, 1);",
    "__ shlq(r16, 2);",
    "__ shlq(r16, 4);",
    "__ shlq(r16, 8);",
    "__ shlq(r16, 16);",
    "__ shlq(r17, 1);",
    "__ shlq(r17, 2);",
    "__ shlq(r17, 4);",
    "__ shlq(r17, 8);",
    "__ shlq(r17, 16);",
    "__ shlq(r18, 1);",
    "__ shlq(r18, 2);",
    "__ shlq(r18, 4);",
    "__ shlq(r18, 8);",
    "__ shlq(r18, 16);",
    "__ shlq(r19, 1);",
    "__ shlq(r19, 2);",
    "__ shlq(r19, 4);",
    "__ shlq(r19, 8);",
    "__ shlq(r19, 16);",
    "__ shlq(r20, 1);",
    "__ shlq(r20, 2);",
    "__ shlq(r20, 4);",
    "__ shlq(r20, 8);",
    "__ shlq(r20, 16);",
    "__ shlq(r21, 1);",
    "__ shlq(r21, 2);",
    "__ shlq(r21, 4);",
    "__ shlq(r21, 8);",
    "__ shlq(r21, 16);",
    "__ shlq(r22, 1);",
    "__ shlq(r22, 2);",
    "__ shlq(r22, 4);",
    "__ shlq(r22, 8);",
    "__ shlq(r22, 16);",
    "__ shlq(r23, 1);",
    "__ shlq(r23, 2);",
    "__ shlq(r23, 4);",
    "__ shlq(r23, 8);",
    "__ shlq(r23, 16);",
    "__ shlq(r24, 1);",
    "__ shlq(r24, 2);",
    "__ shlq(r24, 4);",
    "__ shlq(r24, 8);",
    "__ shlq(r24, 16);",
    "__ shlq(r25, 1);",
    "__ shlq(r25, 2);",
    "__ shlq(r25, 4);",
    "__ shlq(r25, 8);",
    "__ shlq(r25, 16);",
    "__ shlq(r26, 1);",
    "__ shlq(r26, 2);",
    "__ shlq(r26, 4);",
    "__ shlq(r26, 8);",
    "__ shlq(r26, 16);",
    "__ shlq(r27, 1);",
    "__ shlq(r27, 2);",
    "__ shlq(r27, 4);",
    "__ shlq(r27, 8);",
    "__ shlq(r27, 16);",
    "__ shlq(r28, 1);",
    "__ shlq(r28, 2);",
    "__ shlq(r28, 4);",
    "__ shlq(r28, 8);",
    "__ shlq(r28, 16);",
    "__ shlq(r29, 1);",
    "__ shlq(r29, 2);",
    "__ shlq(r29, 4);",
    "__ shlq(r29, 8);",
    "__ shlq(r29, 16);",
    "__ shlq(r30, 1);",
    "__ shlq(r30, 2);",
    "__ shlq(r30, 4);",
    "__ shlq(r30, 8);",
    "__ shlq(r30, 16);",
    "__ shlq(r31, 1);",
    "__ shlq(r31, 2);",
    "__ shlq(r31, 4);",
    "__ shlq(r31, 8);",
    "__ shlq(r31, 16);",
    "__ shrq(rcx, 1);",
    "__ shrq(rcx, 2);",
    "__ shrq(rcx, 4);",
    "__ shrq(rcx, 8);",
    "__ shrq(rcx, 16);",
    "__ shrq(rdx, 1);",
    "__ shrq(rdx, 2);",
    "__ shrq(rdx, 4);",
    "__ shrq(rdx, 8);",
    "__ shrq(rdx, 16);",
    "__ shrq(rbx, 1);",
    "__ shrq(rbx, 2);",
    "__ shrq(rbx, 4);",
    "__ shrq(rbx, 8);",
    "__ shrq(rbx, 16);",
    "__ shrq(r8, 1);",
    "__ shrq(r8, 2);",
    "__ shrq(r8, 4);",
    "__ shrq(r8, 8);",
    "__ shrq(r8, 16);",
    "__ shrq(r9, 1);",
    "__ shrq(r9, 2);",
    "__ shrq(r9, 4);",
    "__ shrq(r9, 8);",
    "__ shrq(r9, 16);",
    "__ shrq(r10, 1);",
    "__ shrq(r10, 2);",
    "__ shrq(r10, 4);",
    "__ shrq(r10, 8);",
    "__ shrq(r10, 16);",
    "__ shrq(r11, 1);",
    "__ shrq(r11, 2);",
    "__ shrq(r11, 4);",
    "__ shrq(r11, 8);",
    "__ shrq(r11, 16);",
    "__ shrq(r12, 1);",
    "__ shrq(r12, 2);",
    "__ shrq(r12, 4);",
    "__ shrq(r12, 8);",
    "__ shrq(r12, 16);",
    "__ shrq(r13, 1);",
    "__ shrq(r13, 2);",
    "__ shrq(r13, 4);",
    "__ shrq(r13, 8);",
    "__ shrq(r13, 16);",
    "__ shrq(r14, 1);",
    "__ shrq(r14, 2);",
    "__ shrq(r14, 4);",
    "__ shrq(r14, 8);",
    "__ shrq(r14, 16);",
    "__ shrq(r15, 1);",
    "__ shrq(r15, 2);",
    "__ shrq(r15, 4);",
    "__ shrq(r15, 8);",
    "__ shrq(r15, 16);",
    "__ shrq(r16, 1);",
    "__ shrq(r16, 2);",
    "__ shrq(r16, 4);",
    "__ shrq(r16, 8);",
    "__ shrq(r16, 16);",
    "__ shrq(r17, 1);",
    "__ shrq(r17, 2);",
    "__ shrq(r17, 4);",
    "__ shrq(r17, 8);",
    "__ shrq(r17, 16);",
    "__ shrq(r18, 1);",
    "__ shrq(r18, 2);",
    "__ shrq(r18, 4);",
    "__ shrq(r18, 8);",
    "__ shrq(r18, 16);",
    "__ shrq(r19, 1);",
    "__ shrq(r19, 2);",
    "__ shrq(r19, 4);",
    "__ shrq(r19, 8);",
    "__ shrq(r19, 16);",
    "__ shrq(r20, 1);",
    "__ shrq(r20, 2);",
    "__ shrq(r20, 4);",
    "__ shrq(r20, 8);",
    "__ shrq(r20, 16);",
    "__ shrq(r21, 1);",
    "__ shrq(r21, 2);",
    "__ shrq(r21, 4);",
    "__ shrq(r21, 8);",
    "__ shrq(r21, 16);",
    "__ shrq(r22, 1);",
    "__ shrq(r22, 2);",
    "__ shrq(r22, 4);",
    "__ shrq(r22, 8);",
    "__ shrq(r22, 16);",
    "__ shrq(r23, 1);",
    "__ shrq(r23, 2);",
    "__ shrq(r23, 4);",
    "__ shrq(r23, 8);",
    "__ shrq(r23, 16);",
    "__ shrq(r24, 1);",
    "__ shrq(r24, 2);",
    "__ shrq(r24, 4);",
    "__ shrq(r24, 8);",
    "__ shrq(r24, 16);",
    "__ shrq(r25, 1);",
    "__ shrq(r25, 2);",
    "__ shrq(r25, 4);",
    "__ shrq(r25, 8);",
    "__ shrq(r25, 16);",
    "__ shrq(r26, 1);",
    "__ shrq(r26, 2);",
    "__ shrq(r26, 4);",
    "__ shrq(r26, 8);",
    "__ shrq(r26, 16);",
    "__ shrq(r27, 1);",
    "__ shrq(r27, 2);",
    "__ shrq(r27, 4);",
    "__ shrq(r27, 8);",
    "__ shrq(r27, 16);",
    "__ shrq(r28, 1);",
    "__ shrq(r28, 2);",
    "__ shrq(r28, 4);",
    "__ shrq(r28, 8);",
    "__ shrq(r28, 16);",
    "__ shrq(r29, 1);",
    "__ shrq(r29, 2);",
    "__ shrq(r29, 4);",
    "__ shrq(r29, 8);",
    "__ shrq(r29, 16);",
    "__ shrq(r30, 1);",
    "__ shrq(r30, 2);",
    "__ shrq(r30, 4);",
    "__ shrq(r30, 8);",
    "__ shrq(r30, 16);",
    "__ shrq(r31, 1);",
    "__ shrq(r31, 2);",
    "__ shrq(r31, 4);",
    "__ shrq(r31, 8);",
    "__ shrq(r31, 16);",
    "__ subq(rcx, 1);",
    "__ subq(rcx, 16);",
    "__ subq(rcx, 256);",
    "__ subq(rcx, 4096);",
    "__ subq(rcx, 65536);",
    "__ subq(rcx, 1048576);",
    "__ subq(rcx, 16777216);",
    "__ subq(rcx, 268435456);",
    "__ subq(rdx, 1);",
    "__ subq(rdx, 16);",
    "__ subq(rdx, 256);",
    "__ subq(rdx, 4096);",
    "__ subq(rdx, 65536);",
    "__ subq(rdx, 1048576);",
    "__ subq(rdx, 16777216);",
    "__ subq(rdx, 268435456);",
    "__ subq(rbx, 1);",
    "__ subq(rbx, 16);",
    "__ subq(rbx, 256);",
    "__ subq(rbx, 4096);",
    "__ subq(rbx, 65536);",
    "__ subq(rbx, 1048576);",
    "__ subq(rbx, 16777216);",
    "__ subq(rbx, 268435456);",
    "__ subq(r8, 1);",
    "__ subq(r8, 16);",
    "__ subq(r8, 256);",
    "__ subq(r8, 4096);",
    "__ subq(r8, 65536);",
    "__ subq(r8, 1048576);",
    "__ subq(r8, 16777216);",
    "__ subq(r8, 268435456);",
    "__ subq(r9, 1);",
    "__ subq(r9, 16);",
    "__ subq(r9, 256);",
    "__ subq(r9, 4096);",
    "__ subq(r9, 65536);",
    "__ subq(r9, 1048576);",
    "__ subq(r9, 16777216);",
    "__ subq(r9, 268435456);",
    "__ subq(r10, 1);",
    "__ subq(r10, 16);",
    "__ subq(r10, 256);",
    "__ subq(r10, 4096);",
    "__ subq(r10, 65536);",
    "__ subq(r10, 1048576);",
    "__ subq(r10, 16777216);",
    "__ subq(r10, 268435456);",
    "__ subq(r11, 1);",
    "__ subq(r11, 16);",
    "__ subq(r11, 256);",
    "__ subq(r11, 4096);",
    "__ subq(r11, 65536);",
    "__ subq(r11, 1048576);",
    "__ subq(r11, 16777216);",
    "__ subq(r11, 268435456);",
    "__ subq(r12, 1);",
    "__ subq(r12, 16);",
    "__ subq(r12, 256);",
    "__ subq(r12, 4096);",
    "__ subq(r12, 65536);",
    "__ subq(r12, 1048576);",
    "__ subq(r12, 16777216);",
    "__ subq(r12, 268435456);",
    "__ subq(r13, 1);",
    "__ subq(r13, 16);",
    "__ subq(r13, 256);",
    "__ subq(r13, 4096);",
    "__ subq(r13, 65536);",
    "__ subq(r13, 1048576);",
    "__ subq(r13, 16777216);",
    "__ subq(r13, 268435456);",
    "__ subq(r14, 1);",
    "__ subq(r14, 16);",
    "__ subq(r14, 256);",
    "__ subq(r14, 4096);",
    "__ subq(r14, 65536);",
    "__ subq(r14, 1048576);",
    "__ subq(r14, 16777216);",
    "__ subq(r14, 268435456);",
    "__ subq(r15, 1);",
    "__ subq(r15, 16);",
    "__ subq(r15, 256);",
    "__ subq(r15, 4096);",
    "__ subq(r15, 65536);",
    "__ subq(r15, 1048576);",
    "__ subq(r15, 16777216);",
    "__ subq(r15, 268435456);",
    "__ subq(r16, 1);",
    "__ subq(r16, 16);",
    "__ subq(r16, 256);",
    "__ subq(r16, 4096);",
    "__ subq(r16, 65536);",
    "__ subq(r16, 1048576);",
    "__ subq(r16, 16777216);",
    "__ subq(r16, 268435456);",
    "__ subq(r17, 1);",
    "__ subq(r17, 16);",
    "__ subq(r17, 256);",
    "__ subq(r17, 4096);",
    "__ subq(r17, 65536);",
    "__ subq(r17, 1048576);",
    "__ subq(r17, 16777216);",
    "__ subq(r17, 268435456);",
    "__ subq(r18, 1);",
    "__ subq(r18, 16);",
    "__ subq(r18, 256);",
    "__ subq(r18, 4096);",
    "__ subq(r18, 65536);",
    "__ subq(r18, 1048576);",
    "__ subq(r18, 16777216);",
    "__ subq(r18, 268435456);",
    "__ subq(r19, 1);",
    "__ subq(r19, 16);",
    "__ subq(r19, 256);",
    "__ subq(r19, 4096);",
    "__ subq(r19, 65536);",
    "__ subq(r19, 1048576);",
    "__ subq(r19, 16777216);",
    "__ subq(r19, 268435456);",
    "__ subq(r20, 1);",
    "__ subq(r20, 16);",
    "__ subq(r20, 256);",
    "__ subq(r20, 4096);",
    "__ subq(r20, 65536);",
    "__ subq(r20, 1048576);",
    "__ subq(r20, 16777216);",
    "__ subq(r20, 268435456);",
    "__ subq(r21, 1);",
    "__ subq(r21, 16);",
    "__ subq(r21, 256);",
    "__ subq(r21, 4096);",
    "__ subq(r21, 65536);",
    "__ subq(r21, 1048576);",
    "__ subq(r21, 16777216);",
    "__ subq(r21, 268435456);",
    "__ subq(r22, 1);",
    "__ subq(r22, 16);",
    "__ subq(r22, 256);",
    "__ subq(r22, 4096);",
    "__ subq(r22, 65536);",
    "__ subq(r22, 1048576);",
    "__ subq(r22, 16777216);",
    "__ subq(r22, 268435456);",
    "__ subq(r23, 1);",
    "__ subq(r23, 16);",
    "__ subq(r23, 256);",
    "__ subq(r23, 4096);",
    "__ subq(r23, 65536);",
    "__ subq(r23, 1048576);",
    "__ subq(r23, 16777216);",
    "__ subq(r23, 268435456);",
    "__ subq(r24, 1);",
    "__ subq(r24, 16);",
    "__ subq(r24, 256);",
    "__ subq(r24, 4096);",
    "__ subq(r24, 65536);",
    "__ subq(r24, 1048576);",
    "__ subq(r24, 16777216);",
    "__ subq(r24, 268435456);",
    "__ subq(r25, 1);",
    "__ subq(r25, 16);",
    "__ subq(r25, 256);",
    "__ subq(r25, 4096);",
    "__ subq(r25, 65536);",
    "__ subq(r25, 1048576);",
    "__ subq(r25, 16777216);",
    "__ subq(r25, 268435456);",
    "__ subq(r26, 1);",
    "__ subq(r26, 16);",
    "__ subq(r26, 256);",
    "__ subq(r26, 4096);",
    "__ subq(r26, 65536);",
    "__ subq(r26, 1048576);",
    "__ subq(r26, 16777216);",
    "__ subq(r26, 268435456);",
    "__ subq(r27, 1);",
    "__ subq(r27, 16);",
    "__ subq(r27, 256);",
    "__ subq(r27, 4096);",
    "__ subq(r27, 65536);",
    "__ subq(r27, 1048576);",
    "__ subq(r27, 16777216);",
    "__ subq(r27, 268435456);",
    "__ subq(r28, 1);",
    "__ subq(r28, 16);",
    "__ subq(r28, 256);",
    "__ subq(r28, 4096);",
    "__ subq(r28, 65536);",
    "__ subq(r28, 1048576);",
    "__ subq(r28, 16777216);",
    "__ subq(r28, 268435456);",
    "__ subq(r29, 1);",
    "__ subq(r29, 16);",
    "__ subq(r29, 256);",
    "__ subq(r29, 4096);",
    "__ subq(r29, 65536);",
    "__ subq(r29, 1048576);",
    "__ subq(r29, 16777216);",
    "__ subq(r29, 268435456);",
    "__ subq(r30, 1);",
    "__ subq(r30, 16);",
    "__ subq(r30, 256);",
    "__ subq(r30, 4096);",
    "__ subq(r30, 65536);",
    "__ subq(r30, 1048576);",
    "__ subq(r30, 16777216);",
    "__ subq(r30, 268435456);",
    "__ subq(r31, 1);",
    "__ subq(r31, 16);",
    "__ subq(r31, 256);",
    "__ subq(r31, 4096);",
    "__ subq(r31, 65536);",
    "__ subq(r31, 1048576);",
    "__ subq(r31, 16777216);",
    "__ subq(r31, 268435456);",
    "__ xorq(rcx, 1);",
    "__ xorq(rcx, 16);",
    "__ xorq(rcx, 256);",
    "__ xorq(rcx, 4096);",
    "__ xorq(rcx, 65536);",
    "__ xorq(rcx, 1048576);",
    "__ xorq(rcx, 16777216);",
    "__ xorq(rcx, 268435456);",
    "__ xorq(rdx, 1);",
    "__ xorq(rdx, 16);",
    "__ xorq(rdx, 256);",
    "__ xorq(rdx, 4096);",
    "__ xorq(rdx, 65536);",
    "__ xorq(rdx, 1048576);",
    "__ xorq(rdx, 16777216);",
    "__ xorq(rdx, 268435456);",
    "__ xorq(rbx, 1);",
    "__ xorq(rbx, 16);",
    "__ xorq(rbx, 256);",
    "__ xorq(rbx, 4096);",
    "__ xorq(rbx, 65536);",
    "__ xorq(rbx, 1048576);",
    "__ xorq(rbx, 16777216);",
    "__ xorq(rbx, 268435456);",
    "__ xorq(r8, 1);",
    "__ xorq(r8, 16);",
    "__ xorq(r8, 256);",
    "__ xorq(r8, 4096);",
    "__ xorq(r8, 65536);",
    "__ xorq(r8, 1048576);",
    "__ xorq(r8, 16777216);",
    "__ xorq(r8, 268435456);",
    "__ xorq(r9, 1);",
    "__ xorq(r9, 16);",
    "__ xorq(r9, 256);",
    "__ xorq(r9, 4096);",
    "__ xorq(r9, 65536);",
    "__ xorq(r9, 1048576);",
    "__ xorq(r9, 16777216);",
    "__ xorq(r9, 268435456);",
    "__ xorq(r10, 1);",
    "__ xorq(r10, 16);",
    "__ xorq(r10, 256);",
    "__ xorq(r10, 4096);",
    "__ xorq(r10, 65536);",
    "__ xorq(r10, 1048576);",
    "__ xorq(r10, 16777216);",
    "__ xorq(r10, 268435456);",
    "__ xorq(r11, 1);",
    "__ xorq(r11, 16);",
    "__ xorq(r11, 256);",
    "__ xorq(r11, 4096);",
    "__ xorq(r11, 65536);",
    "__ xorq(r11, 1048576);",
    "__ xorq(r11, 16777216);",
    "__ xorq(r11, 268435456);",
    "__ xorq(r12, 1);",
    "__ xorq(r12, 16);",
    "__ xorq(r12, 256);",
    "__ xorq(r12, 4096);",
    "__ xorq(r12, 65536);",
    "__ xorq(r12, 1048576);",
    "__ xorq(r12, 16777216);",
    "__ xorq(r12, 268435456);",
    "__ xorq(r13, 1);",
    "__ xorq(r13, 16);",
    "__ xorq(r13, 256);",
    "__ xorq(r13, 4096);",
    "__ xorq(r13, 65536);",
    "__ xorq(r13, 1048576);",
    "__ xorq(r13, 16777216);",
    "__ xorq(r13, 268435456);",
    "__ xorq(r14, 1);",
    "__ xorq(r14, 16);",
    "__ xorq(r14, 256);",
    "__ xorq(r14, 4096);",
    "__ xorq(r14, 65536);",
    "__ xorq(r14, 1048576);",
    "__ xorq(r14, 16777216);",
    "__ xorq(r14, 268435456);",
    "__ xorq(r15, 1);",
    "__ xorq(r15, 16);",
    "__ xorq(r15, 256);",
    "__ xorq(r15, 4096);",
    "__ xorq(r15, 65536);",
    "__ xorq(r15, 1048576);",
    "__ xorq(r15, 16777216);",
    "__ xorq(r15, 268435456);",
    "__ xorq(r16, 1);",
    "__ xorq(r16, 16);",
    "__ xorq(r16, 256);",
    "__ xorq(r16, 4096);",
    "__ xorq(r16, 65536);",
    "__ xorq(r16, 1048576);",
    "__ xorq(r16, 16777216);",
    "__ xorq(r16, 268435456);",
    "__ xorq(r17, 1);",
    "__ xorq(r17, 16);",
    "__ xorq(r17, 256);",
    "__ xorq(r17, 4096);",
    "__ xorq(r17, 65536);",
    "__ xorq(r17, 1048576);",
    "__ xorq(r17, 16777216);",
    "__ xorq(r17, 268435456);",
    "__ xorq(r18, 1);",
    "__ xorq(r18, 16);",
    "__ xorq(r18, 256);",
    "__ xorq(r18, 4096);",
    "__ xorq(r18, 65536);",
    "__ xorq(r18, 1048576);",
    "__ xorq(r18, 16777216);",
    "__ xorq(r18, 268435456);",
    "__ xorq(r19, 1);",
    "__ xorq(r19, 16);",
    "__ xorq(r19, 256);",
    "__ xorq(r19, 4096);",
    "__ xorq(r19, 65536);",
    "__ xorq(r19, 1048576);",
    "__ xorq(r19, 16777216);",
    "__ xorq(r19, 268435456);",
    "__ xorq(r20, 1);",
    "__ xorq(r20, 16);",
    "__ xorq(r20, 256);",
    "__ xorq(r20, 4096);",
    "__ xorq(r20, 65536);",
    "__ xorq(r20, 1048576);",
    "__ xorq(r20, 16777216);",
    "__ xorq(r20, 268435456);",
    "__ xorq(r21, 1);",
    "__ xorq(r21, 16);",
    "__ xorq(r21, 256);",
    "__ xorq(r21, 4096);",
    "__ xorq(r21, 65536);",
    "__ xorq(r21, 1048576);",
    "__ xorq(r21, 16777216);",
    "__ xorq(r21, 268435456);",
    "__ xorq(r22, 1);",
    "__ xorq(r22, 16);",
    "__ xorq(r22, 256);",
    "__ xorq(r22, 4096);",
    "__ xorq(r22, 65536);",
    "__ xorq(r22, 1048576);",
    "__ xorq(r22, 16777216);",
    "__ xorq(r22, 268435456);",
    "__ xorq(r23, 1);",
    "__ xorq(r23, 16);",
    "__ xorq(r23, 256);",
    "__ xorq(r23, 4096);",
    "__ xorq(r23, 65536);",
    "__ xorq(r23, 1048576);",
    "__ xorq(r23, 16777216);",
    "__ xorq(r23, 268435456);",
    "__ xorq(r24, 1);",
    "__ xorq(r24, 16);",
    "__ xorq(r24, 256);",
    "__ xorq(r24, 4096);",
    "__ xorq(r24, 65536);",
    "__ xorq(r24, 1048576);",
    "__ xorq(r24, 16777216);",
    "__ xorq(r24, 268435456);",
    "__ xorq(r25, 1);",
    "__ xorq(r25, 16);",
    "__ xorq(r25, 256);",
    "__ xorq(r25, 4096);",
    "__ xorq(r25, 65536);",
    "__ xorq(r25, 1048576);",
    "__ xorq(r25, 16777216);",
    "__ xorq(r25, 268435456);",
    "__ xorq(r26, 1);",
    "__ xorq(r26, 16);",
    "__ xorq(r26, 256);",
    "__ xorq(r26, 4096);",
    "__ xorq(r26, 65536);",
    "__ xorq(r26, 1048576);",
    "__ xorq(r26, 16777216);",
    "__ xorq(r26, 268435456);",
    "__ xorq(r27, 1);",
    "__ xorq(r27, 16);",
    "__ xorq(r27, 256);",
    "__ xorq(r27, 4096);",
    "__ xorq(r27, 65536);",
    "__ xorq(r27, 1048576);",
    "__ xorq(r27, 16777216);",
    "__ xorq(r27, 268435456);",
    "__ xorq(r28, 1);",
    "__ xorq(r28, 16);",
    "__ xorq(r28, 256);",
    "__ xorq(r28, 4096);",
    "__ xorq(r28, 65536);",
    "__ xorq(r28, 1048576);",
    "__ xorq(r28, 16777216);",
    "__ xorq(r28, 268435456);",
    "__ xorq(r29, 1);",
    "__ xorq(r29, 16);",
    "__ xorq(r29, 256);",
    "__ xorq(r29, 4096);",
    "__ xorq(r29, 65536);",
    "__ xorq(r29, 1048576);",
    "__ xorq(r29, 16777216);",
    "__ xorq(r29, 268435456);",
    "__ xorq(r30, 1);",
    "__ xorq(r30, 16);",
    "__ xorq(r30, 256);",
    "__ xorq(r30, 4096);",
    "__ xorq(r30, 65536);",
    "__ xorq(r30, 1048576);",
    "__ xorq(r30, 16777216);",
    "__ xorq(r30, 268435456);",
    "__ xorq(r31, 1);",
    "__ xorq(r31, 16);",
    "__ xorq(r31, 256);",
    "__ xorq(r31, 4096);",
    "__ xorq(r31, 65536);",
    "__ xorq(r31, 1048576);",
    "__ xorq(r31, 16777216);",
    "__ xorq(r31, 268435456);",
    "__ cmovq (Assembler::Condition::overflow, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::overflow, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::overflow, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::overflow, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::overflow, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::overflow, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::overflow, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::overflow, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::overflow, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::overflow, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::overflow, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::overflow, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::overflow, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::overflow, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::overflow, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::overflow, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::overflow, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::overflow, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::overflow, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::overflow, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::overflow, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::overflow, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::overflow, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::overflow, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::overflow, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::overflow, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::overflow, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::noOverflow, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::noOverflow, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::noOverflow, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::noOverflow, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::noOverflow, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::noOverflow, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::noOverflow, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::noOverflow, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::noOverflow, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::noOverflow, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::noOverflow, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::noOverflow, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::noOverflow, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::noOverflow, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::noOverflow, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::noOverflow, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::noOverflow, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::noOverflow, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::noOverflow, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::noOverflow, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::noOverflow, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::noOverflow, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::noOverflow, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::noOverflow, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::noOverflow, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::noOverflow, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::noOverflow, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::below, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::below, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::below, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::below, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::below, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::below, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::below, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::below, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::below, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::below, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::below, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::below, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::below, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::below, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::below, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::below, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::below, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::below, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::below, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::below, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::below, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::below, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::below, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::below, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::below, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::below, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::below, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::aboveEqual, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::aboveEqual, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::aboveEqual, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::aboveEqual, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::aboveEqual, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::aboveEqual, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::aboveEqual, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::aboveEqual, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::aboveEqual, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::aboveEqual, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::aboveEqual, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::aboveEqual, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::aboveEqual, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::aboveEqual, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::aboveEqual, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::aboveEqual, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::aboveEqual, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::aboveEqual, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::aboveEqual, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::aboveEqual, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::aboveEqual, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::aboveEqual, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::aboveEqual, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::aboveEqual, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::aboveEqual, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::aboveEqual, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::aboveEqual, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::zero, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::zero, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::zero, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::zero, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::zero, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::zero, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::zero, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::zero, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::zero, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::zero, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::zero, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::zero, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::zero, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::zero, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::zero, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::zero, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::zero, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::zero, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::zero, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::zero, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::zero, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::zero, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::zero, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::zero, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::zero, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::zero, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::zero, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::notZero, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::notZero, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::notZero, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::notZero, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::notZero, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::notZero, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::notZero, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::notZero, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::notZero, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::notZero, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::notZero, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::notZero, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::notZero, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::notZero, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::notZero, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::notZero, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::notZero, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::notZero, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::notZero, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::notZero, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::notZero, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::notZero, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::notZero, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::notZero, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::notZero, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::notZero, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::notZero, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::belowEqual, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::belowEqual, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::belowEqual, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::belowEqual, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::belowEqual, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::belowEqual, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::belowEqual, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::belowEqual, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::belowEqual, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::belowEqual, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::belowEqual, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::belowEqual, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::belowEqual, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::belowEqual, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::belowEqual, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::belowEqual, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::belowEqual, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::belowEqual, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::belowEqual, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::belowEqual, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::belowEqual, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::belowEqual, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::belowEqual, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::belowEqual, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::belowEqual, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::belowEqual, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::belowEqual, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::above, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::above, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::above, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::above, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::above, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::above, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::above, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::above, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::above, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::above, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::above, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::above, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::above, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::above, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::above, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::above, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::above, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::above, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::above, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::above, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::above, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::above, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::above, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::above, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::above, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::above, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::above, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::negative, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::negative, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::negative, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::negative, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::negative, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::negative, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::negative, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::negative, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::negative, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::negative, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::negative, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::negative, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::negative, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::negative, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::negative, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::negative, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::negative, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::negative, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::negative, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::negative, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::negative, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::negative, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::negative, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::negative, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::negative, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::negative, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::negative, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::positive, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::positive, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::positive, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::positive, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::positive, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::positive, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::positive, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::positive, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::positive, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::positive, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::positive, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::positive, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::positive, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::positive, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::positive, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::positive, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::positive, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::positive, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::positive, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::positive, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::positive, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::positive, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::positive, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::positive, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::positive, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::positive, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::positive, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::parity, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::parity, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::parity, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::parity, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::parity, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::parity, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::parity, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::parity, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::parity, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::parity, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::parity, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::parity, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::parity, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::parity, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::parity, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::parity, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::parity, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::parity, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::parity, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::parity, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::parity, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::parity, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::parity, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::parity, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::parity, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::parity, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::parity, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::noParity, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::noParity, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::noParity, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::noParity, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::noParity, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::noParity, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::noParity, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::noParity, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::noParity, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::noParity, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::noParity, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::noParity, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::noParity, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::noParity, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::noParity, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::noParity, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::noParity, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::noParity, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::noParity, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::noParity, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::noParity, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::noParity, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::noParity, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::noParity, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::noParity, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::noParity, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::noParity, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::less, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::less, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::less, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::less, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::less, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::less, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::less, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::less, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::less, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::less, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::less, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::less, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::less, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::less, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::less, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::less, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::less, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::less, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::less, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::less, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::less, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::less, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::less, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::less, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::less, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::less, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::less, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::greaterEqual, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::greaterEqual, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::greaterEqual, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::greaterEqual, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::greaterEqual, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::greaterEqual, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::greaterEqual, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::greaterEqual, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::greaterEqual, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::greaterEqual, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::greaterEqual, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::greaterEqual, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::greaterEqual, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::greaterEqual, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::greaterEqual, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::greaterEqual, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::greaterEqual, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::greaterEqual, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::greaterEqual, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::greaterEqual, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::greaterEqual, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::greaterEqual, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::greaterEqual, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::greaterEqual, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::greaterEqual, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::greaterEqual, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::greaterEqual, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::lessEqual, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::lessEqual, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::lessEqual, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::lessEqual, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::lessEqual, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::lessEqual, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::lessEqual, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::lessEqual, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::lessEqual, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::lessEqual, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::lessEqual, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::lessEqual, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::lessEqual, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::lessEqual, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::lessEqual, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::lessEqual, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::lessEqual, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::lessEqual, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::lessEqual, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::lessEqual, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::lessEqual, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::lessEqual, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::lessEqual, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::lessEqual, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::lessEqual, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::lessEqual, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::lessEqual, r31, Address(rcx, rdx));",
    "__ cmovq (Assembler::Condition::greater, rcx, Address(rdx, rbx));",
    "__ cmovq (Assembler::Condition::greater, rdx, Address(rbx, r8));",
    "__ cmovq (Assembler::Condition::greater, rbx, Address(r8, r9));",
    "__ cmovq (Assembler::Condition::greater, r8, Address(r9, r10));",
    "__ cmovq (Assembler::Condition::greater, r9, Address(r10, r11));",
    "__ cmovq (Assembler::Condition::greater, r10, Address(r11, r12));",
    "__ cmovq (Assembler::Condition::greater, r11, Address(r12, r13));",
    "__ cmovq (Assembler::Condition::greater, r12, Address(r13, r14));",
    "__ cmovq (Assembler::Condition::greater, r13, Address(r14, r15));",
    "__ cmovq (Assembler::Condition::greater, r14, Address(r15, r16));",
    "__ cmovq (Assembler::Condition::greater, r15, Address(r16, r17));",
    "__ cmovq (Assembler::Condition::greater, r16, Address(r17, r18));",
    "__ cmovq (Assembler::Condition::greater, r17, Address(r18, r19));",
    "__ cmovq (Assembler::Condition::greater, r18, Address(r19, r20));",
    "__ cmovq (Assembler::Condition::greater, r19, Address(r20, r21));",
    "__ cmovq (Assembler::Condition::greater, r20, Address(r21, r22));",
    "__ cmovq (Assembler::Condition::greater, r21, Address(r22, r23));",
    "__ cmovq (Assembler::Condition::greater, r22, Address(r23, r24));",
    "__ cmovq (Assembler::Condition::greater, r23, Address(r24, r25));",
    "__ cmovq (Assembler::Condition::greater, r24, Address(r25, r26));",
    "__ cmovq (Assembler::Condition::greater, r25, Address(r26, r27));",
    "__ cmovq (Assembler::Condition::greater, r26, Address(r27, r28));",
    "__ cmovq (Assembler::Condition::greater, r27, Address(r28, r29));",
    "__ cmovq (Assembler::Condition::greater, r28, Address(r29, r30));",
    "__ cmovq (Assembler::Condition::greater, r29, Address(r30, r31));",
    "__ cmovq (Assembler::Condition::greater, r30, Address(r31, rcx));",
    "__ cmovq (Assembler::Condition::greater, r31, Address(rcx, rdx));",
    "__ divq(rcx);",
    "__ divq(rdx);",
    "__ divq(rbx);",
    "__ divq(r8);",
    "__ divq(r9);",
    "__ divq(r10);",
    "__ divq(r11);",
    "__ divq(r12);",
    "__ divq(r13);",
    "__ divq(r14);",
    "__ divq(r15);",
    "__ divq(r16);",
    "__ divq(r17);",
    "__ divq(r18);",
    "__ divq(r19);",
    "__ divq(r20);",
    "__ divq(r21);",
    "__ divq(r22);",
    "__ divq(r23);",
    "__ divq(r24);",
    "__ divq(r25);",
    "__ divq(r26);",
    "__ divq(r27);",
    "__ divq(r28);",
    "__ divq(r29);",
    "__ divq(r30);",
    "__ divq(r31);",
    "__ idivq(rcx);",
    "__ idivq(rdx);",
    "__ idivq(rbx);",
    "__ idivq(r8);",
    "__ idivq(r9);",
    "__ idivq(r10);",
    "__ idivq(r11);",
    "__ idivq(r12);",
    "__ idivq(r13);",
    "__ idivq(r14);",
    "__ idivq(r15);",
    "__ idivq(r16);",
    "__ idivq(r17);",
    "__ idivq(r18);",
    "__ idivq(r19);",
    "__ idivq(r20);",
    "__ idivq(r21);",
    "__ idivq(r22);",
    "__ idivq(r23);",
    "__ idivq(r24);",
    "__ idivq(r25);",
    "__ idivq(r26);",
    "__ idivq(r27);",
    "__ idivq(r28);",
    "__ idivq(r29);",
    "__ idivq(r30);",
    "__ idivq(r31);",
    "__ imulq(rcx);",
    "__ imulq(rdx);",
    "__ imulq(rbx);",
    "__ imulq(r8);",
    "__ imulq(r9);",
    "__ imulq(r10);",
    "__ imulq(r11);",
    "__ imulq(r12);",
    "__ imulq(r13);",
    "__ imulq(r14);",
    "__ imulq(r15);",
    "__ imulq(r16);",
    "__ imulq(r17);",
    "__ imulq(r18);",
    "__ imulq(r19);",
    "__ imulq(r20);",
    "__ imulq(r21);",
    "__ imulq(r22);",
    "__ imulq(r23);",
    "__ imulq(r24);",
    "__ imulq(r25);",
    "__ imulq(r26);",
    "__ imulq(r27);",
    "__ imulq(r28);",
    "__ imulq(r29);",
    "__ imulq(r30);",
    "__ imulq(r31);",
    "__ mulq(rcx);",
    "__ mulq(rdx);",
    "__ mulq(rbx);",
    "__ mulq(r8);",
    "__ mulq(r9);",
    "__ mulq(r10);",
    "__ mulq(r11);",
    "__ mulq(r12);",
    "__ mulq(r13);",
    "__ mulq(r14);",
    "__ mulq(r15);",
    "__ mulq(r16);",
    "__ mulq(r17);",
    "__ mulq(r18);",
    "__ mulq(r19);",
    "__ mulq(r20);",
    "__ mulq(r21);",
    "__ mulq(r22);",
    "__ mulq(r23);",
    "__ mulq(r24);",
    "__ mulq(r25);",
    "__ mulq(r26);",
    "__ mulq(r27);",
    "__ mulq(r28);",
    "__ mulq(r29);",
    "__ mulq(r30);",
    "__ mulq(r31);",
    "__ negq(rcx);",
    "__ negq(rdx);",
    "__ negq(rbx);",
    "__ negq(r8);",
    "__ negq(r9);",
    "__ negq(r10);",
    "__ negq(r11);",
    "__ negq(r12);",
    "__ negq(r13);",
    "__ negq(r14);",
    "__ negq(r15);",
    "__ negq(r16);",
    "__ negq(r17);",
    "__ negq(r18);",
    "__ negq(r19);",
    "__ negq(r20);",
    "__ negq(r21);",
    "__ negq(r22);",
    "__ negq(r23);",
    "__ negq(r24);",
    "__ negq(r25);",
    "__ negq(r26);",
    "__ negq(r27);",
    "__ negq(r28);",
    "__ negq(r29);",
    "__ negq(r30);",
    "__ negq(r31);",
    "__ notq(rcx);",
    "__ notq(rdx);",
    "__ notq(rbx);",
    "__ notq(r8);",
    "__ notq(r9);",
    "__ notq(r10);",
    "__ notq(r11);",
    "__ notq(r12);",
    "__ notq(r13);",
    "__ notq(r14);",
    "__ notq(r15);",
    "__ notq(r16);",
    "__ notq(r17);",
    "__ notq(r18);",
    "__ notq(r19);",
    "__ notq(r20);",
    "__ notq(r21);",
    "__ notq(r22);",
    "__ notq(r23);",
    "__ notq(r24);",
    "__ notq(r25);",
    "__ notq(r26);",
    "__ notq(r27);",
    "__ notq(r28);",
    "__ notq(r29);",
    "__ notq(r30);",
    "__ notq(r31);",
    "__ rolq(rcx);",
    "__ rolq(rdx);",
    "__ rolq(rbx);",
    "__ rolq(r8);",
    "__ rolq(r9);",
    "__ rolq(r10);",
    "__ rolq(r11);",
    "__ rolq(r12);",
    "__ rolq(r13);",
    "__ rolq(r14);",
    "__ rolq(r15);",
    "__ rolq(r16);",
    "__ rolq(r17);",
    "__ rolq(r18);",
    "__ rolq(r19);",
    "__ rolq(r20);",
    "__ rolq(r21);",
    "__ rolq(r22);",
    "__ rolq(r23);",
    "__ rolq(r24);",
    "__ rolq(r25);",
    "__ rolq(r26);",
    "__ rolq(r27);",
    "__ rolq(r28);",
    "__ rolq(r29);",
    "__ rolq(r30);",
    "__ rolq(r31);",
    "__ rorq(rcx);",
    "__ rorq(rdx);",
    "__ rorq(rbx);",
    "__ rorq(r8);",
    "__ rorq(r9);",
    "__ rorq(r10);",
    "__ rorq(r11);",
    "__ rorq(r12);",
    "__ rorq(r13);",
    "__ rorq(r14);",
    "__ rorq(r15);",
    "__ rorq(r16);",
    "__ rorq(r17);",
    "__ rorq(r18);",
    "__ rorq(r19);",
    "__ rorq(r20);",
    "__ rorq(r21);",
    "__ rorq(r22);",
    "__ rorq(r23);",
    "__ rorq(r24);",
    "__ rorq(r25);",
    "__ rorq(r26);",
    "__ rorq(r27);",
    "__ rorq(r28);",
    "__ rorq(r29);",
    "__ rorq(r30);",
    "__ rorq(r31);",
    "__ sarq(rcx);",
    "__ sarq(rdx);",
    "__ sarq(rbx);",
    "__ sarq(r8);",
    "__ sarq(r9);",
    "__ sarq(r10);",
    "__ sarq(r11);",
    "__ sarq(r12);",
    "__ sarq(r13);",
    "__ sarq(r14);",
    "__ sarq(r15);",
    "__ sarq(r16);",
    "__ sarq(r17);",
    "__ sarq(r18);",
    "__ sarq(r19);",
    "__ sarq(r20);",
    "__ sarq(r21);",
    "__ sarq(r22);",
    "__ sarq(r23);",
    "__ sarq(r24);",
    "__ sarq(r25);",
    "__ sarq(r26);",
    "__ sarq(r27);",
    "__ sarq(r28);",
    "__ sarq(r29);",
    "__ sarq(r30);",
    "__ sarq(r31);",
    "__ shlq(rcx);",
    "__ shlq(rdx);",
    "__ shlq(rbx);",
    "__ shlq(r8);",
    "__ shlq(r9);",
    "__ shlq(r10);",
    "__ shlq(r11);",
    "__ shlq(r12);",
    "__ shlq(r13);",
    "__ shlq(r14);",
    "__ shlq(r15);",
    "__ shlq(r16);",
    "__ shlq(r17);",
    "__ shlq(r18);",
    "__ shlq(r19);",
    "__ shlq(r20);",
    "__ shlq(r21);",
    "__ shlq(r22);",
    "__ shlq(r23);",
    "__ shlq(r24);",
    "__ shlq(r25);",
    "__ shlq(r26);",
    "__ shlq(r27);",
    "__ shlq(r28);",
    "__ shlq(r29);",
    "__ shlq(r30);",
    "__ shlq(r31);",
    "__ shrq(rcx);",
    "__ shrq(rdx);",
    "__ shrq(rbx);",
    "__ shrq(r8);",
    "__ shrq(r9);",
    "__ shrq(r10);",
    "__ shrq(r11);",
    "__ shrq(r12);",
    "__ shrq(r13);",
    "__ shrq(r14);",
    "__ shrq(r15);",
    "__ shrq(r16);",
    "__ shrq(r17);",
    "__ shrq(r18);",
    "__ shrq(r19);",
    "__ shrq(r20);",
    "__ shrq(r21);",
    "__ shrq(r22);",
    "__ shrq(r23);",
    "__ shrq(r24);",
    "__ shrq(r25);",
    "__ shrq(r26);",
    "__ shrq(r27);",
    "__ shrq(r28);",
    "__ shrq(r29);",
    "__ shrq(r30);",
    "__ shrq(r31);",
    "__ incrementq(rcx);",
    "__ incrementq(rdx);",
    "__ incrementq(rbx);",
    "__ incrementq(r8);",
    "__ incrementq(r9);",
    "__ incrementq(r10);",
    "__ incrementq(r11);",
    "__ incrementq(r12);",
    "__ incrementq(r13);",
    "__ incrementq(r14);",
    "__ incrementq(r15);",
    "__ incrementq(r16);",
    "__ incrementq(r17);",
    "__ incrementq(r18);",
    "__ incrementq(r19);",
    "__ incrementq(r20);",
    "__ incrementq(r21);",
    "__ incrementq(r22);",
    "__ incrementq(r23);",
    "__ incrementq(r24);",
    "__ incrementq(r25);",
    "__ incrementq(r26);",
    "__ incrementq(r27);",
    "__ incrementq(r28);",
    "__ incrementq(r29);",
    "__ incrementq(r30);",
    "__ incrementq(r31);",
    "__ decrementq(rcx);",
    "__ decrementq(rdx);",
    "__ decrementq(rbx);",
    "__ decrementq(r8);",
    "__ decrementq(r9);",
    "__ decrementq(r10);",
    "__ decrementq(r11);",
    "__ decrementq(r12);",
    "__ decrementq(r13);",
    "__ decrementq(r14);",
    "__ decrementq(r15);",
    "__ decrementq(r16);",
    "__ decrementq(r17);",
    "__ decrementq(r18);",
    "__ decrementq(r19);",
    "__ decrementq(r20);",
    "__ decrementq(r21);",
    "__ decrementq(r22);",
    "__ decrementq(r23);",
    "__ decrementq(r24);",
    "__ decrementq(r25);",
    "__ decrementq(r26);",
    "__ decrementq(r27);",
    "__ decrementq(r28);",
    "__ decrementq(r29);",
    "__ decrementq(r30);",
    "__ decrementq(r31);",
    "__ mulq(Address(rcx, rdx));",
    "__ mulq(Address(rdx, rbx));",
    "__ mulq(Address(rbx, r8));",
    "__ mulq(Address(r8, r9));",
    "__ mulq(Address(r9, r10));",
    "__ mulq(Address(r10, r11));",
    "__ mulq(Address(r11, r12));",
    "__ mulq(Address(r12, r13));",
    "__ mulq(Address(r13, r14));",
    "__ mulq(Address(r14, r15));",
    "__ mulq(Address(r15, r16));",
    "__ mulq(Address(r16, r17));",
    "__ mulq(Address(r17, r18));",
    "__ mulq(Address(r18, r19));",
    "__ mulq(Address(r19, r20));",
    "__ mulq(Address(r20, r21));",
    "__ mulq(Address(r21, r22));",
    "__ mulq(Address(r22, r23));",
    "__ mulq(Address(r23, r24));",
    "__ mulq(Address(r24, r25));",
    "__ mulq(Address(r25, r26));",
    "__ mulq(Address(r26, r27));",
    "__ mulq(Address(r27, r28));",
    "__ mulq(Address(r28, r29));",
    "__ mulq(Address(r29, r30));",
    "__ mulq(Address(r30, r31));",
    "__ mulq(Address(r31, rcx));",
    "__ negq(Address(rcx, rdx));",
    "__ negq(Address(rdx, rbx));",
    "__ negq(Address(rbx, r8));",
    "__ negq(Address(r8, r9));",
    "__ negq(Address(r9, r10));",
    "__ negq(Address(r10, r11));",
    "__ negq(Address(r11, r12));",
    "__ negq(Address(r12, r13));",
    "__ negq(Address(r13, r14));",
    "__ negq(Address(r14, r15));",
    "__ negq(Address(r15, r16));",
    "__ negq(Address(r16, r17));",
    "__ negq(Address(r17, r18));",
    "__ negq(Address(r18, r19));",
    "__ negq(Address(r19, r20));",
    "__ negq(Address(r20, r21));",
    "__ negq(Address(r21, r22));",
    "__ negq(Address(r22, r23));",
    "__ negq(Address(r23, r24));",
    "__ negq(Address(r24, r25));",
    "__ negq(Address(r25, r26));",
    "__ negq(Address(r26, r27));",
    "__ negq(Address(r27, r28));",
    "__ negq(Address(r28, r29));",
    "__ negq(Address(r29, r30));",
    "__ negq(Address(r30, r31));",
    "__ negq(Address(r31, rcx));",
    "__ sarq(Address(rcx, rdx));",
    "__ sarq(Address(rdx, rbx));",
    "__ sarq(Address(rbx, r8));",
    "__ sarq(Address(r8, r9));",
    "__ sarq(Address(r9, r10));",
    "__ sarq(Address(r10, r11));",
    "__ sarq(Address(r11, r12));",
    "__ sarq(Address(r12, r13));",
    "__ sarq(Address(r13, r14));",
    "__ sarq(Address(r14, r15));",
    "__ sarq(Address(r15, r16));",
    "__ sarq(Address(r16, r17));",
    "__ sarq(Address(r17, r18));",
    "__ sarq(Address(r18, r19));",
    "__ sarq(Address(r19, r20));",
    "__ sarq(Address(r20, r21));",
    "__ sarq(Address(r21, r22));",
    "__ sarq(Address(r22, r23));",
    "__ sarq(Address(r23, r24));",
    "__ sarq(Address(r24, r25));",
    "__ sarq(Address(r25, r26));",
    "__ sarq(Address(r26, r27));",
    "__ sarq(Address(r27, r28));",
    "__ sarq(Address(r28, r29));",
    "__ sarq(Address(r29, r30));",
    "__ sarq(Address(r30, r31));",
    "__ sarq(Address(r31, rcx));",
    "__ shrq(Address(rcx, rdx));",
    "__ shrq(Address(rdx, rbx));",
    "__ shrq(Address(rbx, r8));",
    "__ shrq(Address(r8, r9));",
    "__ shrq(Address(r9, r10));",
    "__ shrq(Address(r10, r11));",
    "__ shrq(Address(r11, r12));",
    "__ shrq(Address(r12, r13));",
    "__ shrq(Address(r13, r14));",
    "__ shrq(Address(r14, r15));",
    "__ shrq(Address(r15, r16));",
    "__ shrq(Address(r16, r17));",
    "__ shrq(Address(r17, r18));",
    "__ shrq(Address(r18, r19));",
    "__ shrq(Address(r19, r20));",
    "__ shrq(Address(r20, r21));",
    "__ shrq(Address(r21, r22));",
    "__ shrq(Address(r22, r23));",
    "__ shrq(Address(r23, r24));",
    "__ shrq(Address(r24, r25));",
    "__ shrq(Address(r25, r26));",
    "__ shrq(Address(r26, r27));",
    "__ shrq(Address(r27, r28));",
    "__ shrq(Address(r28, r29));",
    "__ shrq(Address(r29, r30));",
    "__ shrq(Address(r30, r31));",
    "__ shrq(Address(r31, rcx));",
    "__ incrementq(Address(rcx, rdx));",
    "__ incrementq(Address(rdx, rbx));",
    "__ incrementq(Address(rbx, r8));",
    "__ incrementq(Address(r8, r9));",
    "__ incrementq(Address(r9, r10));",
    "__ incrementq(Address(r10, r11));",
    "__ incrementq(Address(r11, r12));",
    "__ incrementq(Address(r12, r13));",
    "__ incrementq(Address(r13, r14));",
    "__ incrementq(Address(r14, r15));",
    "__ incrementq(Address(r15, r16));",
    "__ incrementq(Address(r16, r17));",
    "__ incrementq(Address(r17, r18));",
    "__ incrementq(Address(r18, r19));",
    "__ incrementq(Address(r19, r20));",
    "__ incrementq(Address(r20, r21));",
    "__ incrementq(Address(r21, r22));",
    "__ incrementq(Address(r22, r23));",
    "__ incrementq(Address(r23, r24));",
    "__ incrementq(Address(r24, r25));",
    "__ incrementq(Address(r25, r26));",
    "__ incrementq(Address(r26, r27));",
    "__ incrementq(Address(r27, r28));",
    "__ incrementq(Address(r28, r29));",
    "__ incrementq(Address(r29, r30));",
    "__ incrementq(Address(r30, r31));",
    "__ incrementq(Address(r31, rcx));",
    "__ decrementq(Address(rcx, rdx));",
    "__ decrementq(Address(rdx, rbx));",
    "__ decrementq(Address(rbx, r8));",
    "__ decrementq(Address(r8, r9));",
    "__ decrementq(Address(r9, r10));",
    "__ decrementq(Address(r10, r11));",
    "__ decrementq(Address(r11, r12));",
    "__ decrementq(Address(r12, r13));",
    "__ decrementq(Address(r13, r14));",
    "__ decrementq(Address(r14, r15));",
    "__ decrementq(Address(r15, r16));",
    "__ decrementq(Address(r16, r17));",
    "__ decrementq(Address(r17, r18));",
    "__ decrementq(Address(r18, r19));",
    "__ decrementq(Address(r19, r20));",
    "__ decrementq(Address(r20, r21));",
    "__ decrementq(Address(r21, r22));",
    "__ decrementq(Address(r22, r23));",
    "__ decrementq(Address(r23, r24));",
    "__ decrementq(Address(r24, r25));",
    "__ decrementq(Address(r25, r26));",
    "__ decrementq(Address(r26, r27));",
    "__ decrementq(Address(r27, r28));",
    "__ decrementq(Address(r28, r29));",
    "__ decrementq(Address(r29, r30));",
    "__ decrementq(Address(r30, r31));",
    "__ decrementq(Address(r31, rcx));",
    "__ imulq(rcx, Address(rdx, rbx), 1);",
    "__ imulq(rcx, Address(rdx, rbx), 16);",
    "__ imulq(rcx, Address(rdx, rbx), 256);",
    "__ imulq(rcx, Address(rdx, rbx), 4096);",
    "__ imulq(rcx, Address(rdx, rbx), 65536);",
    "__ imulq(rcx, Address(rdx, rbx), 1048576);",
    "__ imulq(rcx, Address(rdx, rbx), 16777216);",
    "__ imulq(rcx, Address(rdx, rbx), 268435456);",
    "__ imulq(rdx, Address(rbx, r8), 1);",
    "__ imulq(rdx, Address(rbx, r8), 16);",
    "__ imulq(rdx, Address(rbx, r8), 256);",
    "__ imulq(rdx, Address(rbx, r8), 4096);",
    "__ imulq(rdx, Address(rbx, r8), 65536);",
    "__ imulq(rdx, Address(rbx, r8), 1048576);",
    "__ imulq(rdx, Address(rbx, r8), 16777216);",
    "__ imulq(rdx, Address(rbx, r8), 268435456);",
    "__ imulq(rbx, Address(r8, r9), 1);",
    "__ imulq(rbx, Address(r8, r9), 16);",
    "__ imulq(rbx, Address(r8, r9), 256);",
    "__ imulq(rbx, Address(r8, r9), 4096);",
    "__ imulq(rbx, Address(r8, r9), 65536);",
    "__ imulq(rbx, Address(r8, r9), 1048576);",
    "__ imulq(rbx, Address(r8, r9), 16777216);",
    "__ imulq(rbx, Address(r8, r9), 268435456);",
    "__ imulq(r8, Address(r9, r10), 1);",
    "__ imulq(r8, Address(r9, r10), 16);",
    "__ imulq(r8, Address(r9, r10), 256);",
    "__ imulq(r8, Address(r9, r10), 4096);",
    "__ imulq(r8, Address(r9, r10), 65536);",
    "__ imulq(r8, Address(r9, r10), 1048576);",
    "__ imulq(r8, Address(r9, r10), 16777216);",
    "__ imulq(r8, Address(r9, r10), 268435456);",
    "__ imulq(r9, Address(r10, r11), 1);",
    "__ imulq(r9, Address(r10, r11), 16);",
    "__ imulq(r9, Address(r10, r11), 256);",
    "__ imulq(r9, Address(r10, r11), 4096);",
    "__ imulq(r9, Address(r10, r11), 65536);",
    "__ imulq(r9, Address(r10, r11), 1048576);",
    "__ imulq(r9, Address(r10, r11), 16777216);",
    "__ imulq(r9, Address(r10, r11), 268435456);",
    "__ imulq(r10, Address(r11, r12), 1);",
    "__ imulq(r10, Address(r11, r12), 16);",
    "__ imulq(r10, Address(r11, r12), 256);",
    "__ imulq(r10, Address(r11, r12), 4096);",
    "__ imulq(r10, Address(r11, r12), 65536);",
    "__ imulq(r10, Address(r11, r12), 1048576);",
    "__ imulq(r10, Address(r11, r12), 16777216);",
    "__ imulq(r10, Address(r11, r12), 268435456);",
    "__ imulq(r11, Address(r12, r13), 1);",
    "__ imulq(r11, Address(r12, r13), 16);",
    "__ imulq(r11, Address(r12, r13), 256);",
    "__ imulq(r11, Address(r12, r13), 4096);",
    "__ imulq(r11, Address(r12, r13), 65536);",
    "__ imulq(r11, Address(r12, r13), 1048576);",
    "__ imulq(r11, Address(r12, r13), 16777216);",
    "__ imulq(r11, Address(r12, r13), 268435456);",
    "__ imulq(r12, Address(r13, r14), 1);",
    "__ imulq(r12, Address(r13, r14), 16);",
    "__ imulq(r12, Address(r13, r14), 256);",
    "__ imulq(r12, Address(r13, r14), 4096);",
    "__ imulq(r12, Address(r13, r14), 65536);",
    "__ imulq(r12, Address(r13, r14), 1048576);",
    "__ imulq(r12, Address(r13, r14), 16777216);",
    "__ imulq(r12, Address(r13, r14), 268435456);",
    "__ imulq(r13, Address(r14, r15), 1);",
    "__ imulq(r13, Address(r14, r15), 16);",
    "__ imulq(r13, Address(r14, r15), 256);",
    "__ imulq(r13, Address(r14, r15), 4096);",
    "__ imulq(r13, Address(r14, r15), 65536);",
    "__ imulq(r13, Address(r14, r15), 1048576);",
    "__ imulq(r13, Address(r14, r15), 16777216);",
    "__ imulq(r13, Address(r14, r15), 268435456);",
    "__ imulq(r14, Address(r15, r16), 1);",
    "__ imulq(r14, Address(r15, r16), 16);",
    "__ imulq(r14, Address(r15, r16), 256);",
    "__ imulq(r14, Address(r15, r16), 4096);",
    "__ imulq(r14, Address(r15, r16), 65536);",
    "__ imulq(r14, Address(r15, r16), 1048576);",
    "__ imulq(r14, Address(r15, r16), 16777216);",
    "__ imulq(r14, Address(r15, r16), 268435456);",
    "__ imulq(r15, Address(r16, r17), 1);",
    "__ imulq(r15, Address(r16, r17), 16);",
    "__ imulq(r15, Address(r16, r17), 256);",
    "__ imulq(r15, Address(r16, r17), 4096);",
    "__ imulq(r15, Address(r16, r17), 65536);",
    "__ imulq(r15, Address(r16, r17), 1048576);",
    "__ imulq(r15, Address(r16, r17), 16777216);",
    "__ imulq(r15, Address(r16, r17), 268435456);",
    "__ imulq(r16, Address(r17, r18), 1);",
    "__ imulq(r16, Address(r17, r18), 16);",
    "__ imulq(r16, Address(r17, r18), 256);",
    "__ imulq(r16, Address(r17, r18), 4096);",
    "__ imulq(r16, Address(r17, r18), 65536);",
    "__ imulq(r16, Address(r17, r18), 1048576);",
    "__ imulq(r16, Address(r17, r18), 16777216);",
    "__ imulq(r16, Address(r17, r18), 268435456);",
    "__ imulq(r17, Address(r18, r19), 1);",
    "__ imulq(r17, Address(r18, r19), 16);",
    "__ imulq(r17, Address(r18, r19), 256);",
    "__ imulq(r17, Address(r18, r19), 4096);",
    "__ imulq(r17, Address(r18, r19), 65536);",
    "__ imulq(r17, Address(r18, r19), 1048576);",
    "__ imulq(r17, Address(r18, r19), 16777216);",
    "__ imulq(r17, Address(r18, r19), 268435456);",
    "__ imulq(r18, Address(r19, r20), 1);",
    "__ imulq(r18, Address(r19, r20), 16);",
    "__ imulq(r18, Address(r19, r20), 256);",
    "__ imulq(r18, Address(r19, r20), 4096);",
    "__ imulq(r18, Address(r19, r20), 65536);",
    "__ imulq(r18, Address(r19, r20), 1048576);",
    "__ imulq(r18, Address(r19, r20), 16777216);",
    "__ imulq(r18, Address(r19, r20), 268435456);",
    "__ imulq(r19, Address(r20, r21), 1);",
    "__ imulq(r19, Address(r20, r21), 16);",
    "__ imulq(r19, Address(r20, r21), 256);",
    "__ imulq(r19, Address(r20, r21), 4096);",
    "__ imulq(r19, Address(r20, r21), 65536);",
    "__ imulq(r19, Address(r20, r21), 1048576);",
    "__ imulq(r19, Address(r20, r21), 16777216);",
    "__ imulq(r19, Address(r20, r21), 268435456);",
    "__ imulq(r20, Address(r21, r22), 1);",
    "__ imulq(r20, Address(r21, r22), 16);",
    "__ imulq(r20, Address(r21, r22), 256);",
    "__ imulq(r20, Address(r21, r22), 4096);",
    "__ imulq(r20, Address(r21, r22), 65536);",
    "__ imulq(r20, Address(r21, r22), 1048576);",
    "__ imulq(r20, Address(r21, r22), 16777216);",
    "__ imulq(r20, Address(r21, r22), 268435456);",
    "__ imulq(r21, Address(r22, r23), 1);",
    "__ imulq(r21, Address(r22, r23), 16);",
    "__ imulq(r21, Address(r22, r23), 256);",
    "__ imulq(r21, Address(r22, r23), 4096);",
    "__ imulq(r21, Address(r22, r23), 65536);",
    "__ imulq(r21, Address(r22, r23), 1048576);",
    "__ imulq(r21, Address(r22, r23), 16777216);",
    "__ imulq(r21, Address(r22, r23), 268435456);",
    "__ imulq(r22, Address(r23, r24), 1);",
    "__ imulq(r22, Address(r23, r24), 16);",
    "__ imulq(r22, Address(r23, r24), 256);",
    "__ imulq(r22, Address(r23, r24), 4096);",
    "__ imulq(r22, Address(r23, r24), 65536);",
    "__ imulq(r22, Address(r23, r24), 1048576);",
    "__ imulq(r22, Address(r23, r24), 16777216);",
    "__ imulq(r22, Address(r23, r24), 268435456);",
    "__ imulq(r23, Address(r24, r25), 1);",
    "__ imulq(r23, Address(r24, r25), 16);",
    "__ imulq(r23, Address(r24, r25), 256);",
    "__ imulq(r23, Address(r24, r25), 4096);",
    "__ imulq(r23, Address(r24, r25), 65536);",
    "__ imulq(r23, Address(r24, r25), 1048576);",
    "__ imulq(r23, Address(r24, r25), 16777216);",
    "__ imulq(r23, Address(r24, r25), 268435456);",
    "__ imulq(r24, Address(r25, r26), 1);",
    "__ imulq(r24, Address(r25, r26), 16);",
    "__ imulq(r24, Address(r25, r26), 256);",
    "__ imulq(r24, Address(r25, r26), 4096);",
    "__ imulq(r24, Address(r25, r26), 65536);",
    "__ imulq(r24, Address(r25, r26), 1048576);",
    "__ imulq(r24, Address(r25, r26), 16777216);",
    "__ imulq(r24, Address(r25, r26), 268435456);",
    "__ imulq(r25, Address(r26, r27), 1);",
    "__ imulq(r25, Address(r26, r27), 16);",
    "__ imulq(r25, Address(r26, r27), 256);",
    "__ imulq(r25, Address(r26, r27), 4096);",
    "__ imulq(r25, Address(r26, r27), 65536);",
    "__ imulq(r25, Address(r26, r27), 1048576);",
    "__ imulq(r25, Address(r26, r27), 16777216);",
    "__ imulq(r25, Address(r26, r27), 268435456);",
    "__ imulq(r26, Address(r27, r28), 1);",
    "__ imulq(r26, Address(r27, r28), 16);",
    "__ imulq(r26, Address(r27, r28), 256);",
    "__ imulq(r26, Address(r27, r28), 4096);",
    "__ imulq(r26, Address(r27, r28), 65536);",
    "__ imulq(r26, Address(r27, r28), 1048576);",
    "__ imulq(r26, Address(r27, r28), 16777216);",
    "__ imulq(r26, Address(r27, r28), 268435456);",
    "__ imulq(r27, Address(r28, r29), 1);",
    "__ imulq(r27, Address(r28, r29), 16);",
    "__ imulq(r27, Address(r28, r29), 256);",
    "__ imulq(r27, Address(r28, r29), 4096);",
    "__ imulq(r27, Address(r28, r29), 65536);",
    "__ imulq(r27, Address(r28, r29), 1048576);",
    "__ imulq(r27, Address(r28, r29), 16777216);",
    "__ imulq(r27, Address(r28, r29), 268435456);",
    "__ imulq(r28, Address(r29, r30), 1);",
    "__ imulq(r28, Address(r29, r30), 16);",
    "__ imulq(r28, Address(r29, r30), 256);",
    "__ imulq(r28, Address(r29, r30), 4096);",
    "__ imulq(r28, Address(r29, r30), 65536);",
    "__ imulq(r28, Address(r29, r30), 1048576);",
    "__ imulq(r28, Address(r29, r30), 16777216);",
    "__ imulq(r28, Address(r29, r30), 268435456);",
    "__ imulq(r29, Address(r30, r31), 1);",
    "__ imulq(r29, Address(r30, r31), 16);",
    "__ imulq(r29, Address(r30, r31), 256);",
    "__ imulq(r29, Address(r30, r31), 4096);",
    "__ imulq(r29, Address(r30, r31), 65536);",
    "__ imulq(r29, Address(r30, r31), 1048576);",
    "__ imulq(r29, Address(r30, r31), 16777216);",
    "__ imulq(r29, Address(r30, r31), 268435456);",
    "__ imulq(r30, Address(r31, rcx), 1);",
    "__ imulq(r30, Address(r31, rcx), 16);",
    "__ imulq(r30, Address(r31, rcx), 256);",
    "__ imulq(r30, Address(r31, rcx), 4096);",
    "__ imulq(r30, Address(r31, rcx), 65536);",
    "__ imulq(r30, Address(r31, rcx), 1048576);",
    "__ imulq(r30, Address(r31, rcx), 16777216);",
    "__ imulq(r30, Address(r31, rcx), 268435456);",
    "__ imulq(r31, Address(rcx, rdx), 1);",
    "__ imulq(r31, Address(rcx, rdx), 16);",
    "__ imulq(r31, Address(rcx, rdx), 256);",
    "__ imulq(r31, Address(rcx, rdx), 4096);",
    "__ imulq(r31, Address(rcx, rdx), 65536);",
    "__ imulq(r31, Address(rcx, rdx), 1048576);",
    "__ imulq(r31, Address(rcx, rdx), 16777216);",
    "__ imulq(r31, Address(rcx, rdx), 268435456);",
    "__ imulq(rcx, rdx, 1);",
    "__ imulq(rcx, rdx, 16);",
    "__ imulq(rcx, rdx, 256);",
    "__ imulq(rcx, rdx, 4096);",
    "__ imulq(rcx, rdx, 65536);",
    "__ imulq(rcx, rdx, 1048576);",
    "__ imulq(rcx, rdx, 16777216);",
    "__ imulq(rcx, rdx, 268435456);",
    "__ imulq(rdx, rbx, 1);",
    "__ imulq(rdx, rbx, 16);",
    "__ imulq(rdx, rbx, 256);",
    "__ imulq(rdx, rbx, 4096);",
    "__ imulq(rdx, rbx, 65536);",
    "__ imulq(rdx, rbx, 1048576);",
    "__ imulq(rdx, rbx, 16777216);",
    "__ imulq(rdx, rbx, 268435456);",
    "__ imulq(rbx, r8, 1);",
    "__ imulq(rbx, r8, 16);",
    "__ imulq(rbx, r8, 256);",
    "__ imulq(rbx, r8, 4096);",
    "__ imulq(rbx, r8, 65536);",
    "__ imulq(rbx, r8, 1048576);",
    "__ imulq(rbx, r8, 16777216);",
    "__ imulq(rbx, r8, 268435456);",
    "__ imulq(r8, r9, 1);",
    "__ imulq(r8, r9, 16);",
    "__ imulq(r8, r9, 256);",
    "__ imulq(r8, r9, 4096);",
    "__ imulq(r8, r9, 65536);",
    "__ imulq(r8, r9, 1048576);",
    "__ imulq(r8, r9, 16777216);",
    "__ imulq(r8, r9, 268435456);",
    "__ imulq(r9, r10, 1);",
    "__ imulq(r9, r10, 16);",
    "__ imulq(r9, r10, 256);",
    "__ imulq(r9, r10, 4096);",
    "__ imulq(r9, r10, 65536);",
    "__ imulq(r9, r10, 1048576);",
    "__ imulq(r9, r10, 16777216);",
    "__ imulq(r9, r10, 268435456);",
    "__ imulq(r10, r11, 1);",
    "__ imulq(r10, r11, 16);",
    "__ imulq(r10, r11, 256);",
    "__ imulq(r10, r11, 4096);",
    "__ imulq(r10, r11, 65536);",
    "__ imulq(r10, r11, 1048576);",
    "__ imulq(r10, r11, 16777216);",
    "__ imulq(r10, r11, 268435456);",
    "__ imulq(r11, r12, 1);",
    "__ imulq(r11, r12, 16);",
    "__ imulq(r11, r12, 256);",
    "__ imulq(r11, r12, 4096);",
    "__ imulq(r11, r12, 65536);",
    "__ imulq(r11, r12, 1048576);",
    "__ imulq(r11, r12, 16777216);",
    "__ imulq(r11, r12, 268435456);",
    "__ imulq(r12, r13, 1);",
    "__ imulq(r12, r13, 16);",
    "__ imulq(r12, r13, 256);",
    "__ imulq(r12, r13, 4096);",
    "__ imulq(r12, r13, 65536);",
    "__ imulq(r12, r13, 1048576);",
    "__ imulq(r12, r13, 16777216);",
    "__ imulq(r12, r13, 268435456);",
    "__ imulq(r13, r14, 1);",
    "__ imulq(r13, r14, 16);",
    "__ imulq(r13, r14, 256);",
    "__ imulq(r13, r14, 4096);",
    "__ imulq(r13, r14, 65536);",
    "__ imulq(r13, r14, 1048576);",
    "__ imulq(r13, r14, 16777216);",
    "__ imulq(r13, r14, 268435456);",
    "__ imulq(r14, r15, 1);",
    "__ imulq(r14, r15, 16);",
    "__ imulq(r14, r15, 256);",
    "__ imulq(r14, r15, 4096);",
    "__ imulq(r14, r15, 65536);",
    "__ imulq(r14, r15, 1048576);",
    "__ imulq(r14, r15, 16777216);",
    "__ imulq(r14, r15, 268435456);",
    "__ imulq(r15, r16, 1);",
    "__ imulq(r15, r16, 16);",
    "__ imulq(r15, r16, 256);",
    "__ imulq(r15, r16, 4096);",
    "__ imulq(r15, r16, 65536);",
    "__ imulq(r15, r16, 1048576);",
    "__ imulq(r15, r16, 16777216);",
    "__ imulq(r15, r16, 268435456);",
    "__ imulq(r16, r17, 1);",
    "__ imulq(r16, r17, 16);",
    "__ imulq(r16, r17, 256);",
    "__ imulq(r16, r17, 4096);",
    "__ imulq(r16, r17, 65536);",
    "__ imulq(r16, r17, 1048576);",
    "__ imulq(r16, r17, 16777216);",
    "__ imulq(r16, r17, 268435456);",
    "__ imulq(r17, r18, 1);",
    "__ imulq(r17, r18, 16);",
    "__ imulq(r17, r18, 256);",
    "__ imulq(r17, r18, 4096);",
    "__ imulq(r17, r18, 65536);",
    "__ imulq(r17, r18, 1048576);",
    "__ imulq(r17, r18, 16777216);",
    "__ imulq(r17, r18, 268435456);",
    "__ imulq(r18, r19, 1);",
    "__ imulq(r18, r19, 16);",
    "__ imulq(r18, r19, 256);",
    "__ imulq(r18, r19, 4096);",
    "__ imulq(r18, r19, 65536);",
    "__ imulq(r18, r19, 1048576);",
    "__ imulq(r18, r19, 16777216);",
    "__ imulq(r18, r19, 268435456);",
    "__ imulq(r19, r20, 1);",
    "__ imulq(r19, r20, 16);",
    "__ imulq(r19, r20, 256);",
    "__ imulq(r19, r20, 4096);",
    "__ imulq(r19, r20, 65536);",
    "__ imulq(r19, r20, 1048576);",
    "__ imulq(r19, r20, 16777216);",
    "__ imulq(r19, r20, 268435456);",
    "__ imulq(r20, r21, 1);",
    "__ imulq(r20, r21, 16);",
    "__ imulq(r20, r21, 256);",
    "__ imulq(r20, r21, 4096);",
    "__ imulq(r20, r21, 65536);",
    "__ imulq(r20, r21, 1048576);",
    "__ imulq(r20, r21, 16777216);",
    "__ imulq(r20, r21, 268435456);",
    "__ imulq(r21, r22, 1);",
    "__ imulq(r21, r22, 16);",
    "__ imulq(r21, r22, 256);",
    "__ imulq(r21, r22, 4096);",
    "__ imulq(r21, r22, 65536);",
    "__ imulq(r21, r22, 1048576);",
    "__ imulq(r21, r22, 16777216);",
    "__ imulq(r21, r22, 268435456);",
    "__ imulq(r22, r23, 1);",
    "__ imulq(r22, r23, 16);",
    "__ imulq(r22, r23, 256);",
    "__ imulq(r22, r23, 4096);",
    "__ imulq(r22, r23, 65536);",
    "__ imulq(r22, r23, 1048576);",
    "__ imulq(r22, r23, 16777216);",
    "__ imulq(r22, r23, 268435456);",
    "__ imulq(r23, r24, 1);",
    "__ imulq(r23, r24, 16);",
    "__ imulq(r23, r24, 256);",
    "__ imulq(r23, r24, 4096);",
    "__ imulq(r23, r24, 65536);",
    "__ imulq(r23, r24, 1048576);",
    "__ imulq(r23, r24, 16777216);",
    "__ imulq(r23, r24, 268435456);",
    "__ imulq(r24, r25, 1);",
    "__ imulq(r24, r25, 16);",
    "__ imulq(r24, r25, 256);",
    "__ imulq(r24, r25, 4096);",
    "__ imulq(r24, r25, 65536);",
    "__ imulq(r24, r25, 1048576);",
    "__ imulq(r24, r25, 16777216);",
    "__ imulq(r24, r25, 268435456);",
    "__ imulq(r25, r26, 1);",
    "__ imulq(r25, r26, 16);",
    "__ imulq(r25, r26, 256);",
    "__ imulq(r25, r26, 4096);",
    "__ imulq(r25, r26, 65536);",
    "__ imulq(r25, r26, 1048576);",
    "__ imulq(r25, r26, 16777216);",
    "__ imulq(r25, r26, 268435456);",
    "__ imulq(r26, r27, 1);",
    "__ imulq(r26, r27, 16);",
    "__ imulq(r26, r27, 256);",
    "__ imulq(r26, r27, 4096);",
    "__ imulq(r26, r27, 65536);",
    "__ imulq(r26, r27, 1048576);",
    "__ imulq(r26, r27, 16777216);",
    "__ imulq(r26, r27, 268435456);",
    "__ imulq(r27, r28, 1);",
    "__ imulq(r27, r28, 16);",
    "__ imulq(r27, r28, 256);",
    "__ imulq(r27, r28, 4096);",
    "__ imulq(r27, r28, 65536);",
    "__ imulq(r27, r28, 1048576);",
    "__ imulq(r27, r28, 16777216);",
    "__ imulq(r27, r28, 268435456);",
    "__ imulq(r28, r29, 1);",
    "__ imulq(r28, r29, 16);",
    "__ imulq(r28, r29, 256);",
    "__ imulq(r28, r29, 4096);",
    "__ imulq(r28, r29, 65536);",
    "__ imulq(r28, r29, 1048576);",
    "__ imulq(r28, r29, 16777216);",
    "__ imulq(r28, r29, 268435456);",
    "__ imulq(r29, r30, 1);",
    "__ imulq(r29, r30, 16);",
    "__ imulq(r29, r30, 256);",
    "__ imulq(r29, r30, 4096);",
    "__ imulq(r29, r30, 65536);",
    "__ imulq(r29, r30, 1048576);",
    "__ imulq(r29, r30, 16777216);",
    "__ imulq(r29, r30, 268435456);",
    "__ imulq(r30, r31, 1);",
    "__ imulq(r30, r31, 16);",
    "__ imulq(r30, r31, 256);",
    "__ imulq(r30, r31, 4096);",
    "__ imulq(r30, r31, 65536);",
    "__ imulq(r30, r31, 1048576);",
    "__ imulq(r30, r31, 16777216);",
    "__ imulq(r30, r31, 268435456);",
    "__ imulq(r31, rcx, 1);",
    "__ imulq(r31, rcx, 16);",
    "__ imulq(r31, rcx, 256);",
    "__ imulq(r31, rcx, 4096);",
    "__ imulq(r31, rcx, 65536);",
    "__ imulq(r31, rcx, 1048576);",
    "__ imulq(r31, rcx, 16777216);",
    "__ imulq(r31, rcx, 268435456);",
    "__ shldq(rcx, rdx, 1);",
    "__ shldq(rcx, rdx, 2);",
    "__ shldq(rcx, rdx, 4);",
    "__ shldq(rcx, rdx, 8);",
    "__ shldq(rcx, rdx, 16);",
    "__ shldq(rdx, rbx, 1);",
    "__ shldq(rdx, rbx, 2);",
    "__ shldq(rdx, rbx, 4);",
    "__ shldq(rdx, rbx, 8);",
    "__ shldq(rdx, rbx, 16);",
    "__ shldq(rbx, r8, 1);",
    "__ shldq(rbx, r8, 2);",
    "__ shldq(rbx, r8, 4);",
    "__ shldq(rbx, r8, 8);",
    "__ shldq(rbx, r8, 16);",
    "__ shldq(r8, r9, 1);",
    "__ shldq(r8, r9, 2);",
    "__ shldq(r8, r9, 4);",
    "__ shldq(r8, r9, 8);",
    "__ shldq(r8, r9, 16);",
    "__ shldq(r9, r10, 1);",
    "__ shldq(r9, r10, 2);",
    "__ shldq(r9, r10, 4);",
    "__ shldq(r9, r10, 8);",
    "__ shldq(r9, r10, 16);",
    "__ shldq(r10, r11, 1);",
    "__ shldq(r10, r11, 2);",
    "__ shldq(r10, r11, 4);",
    "__ shldq(r10, r11, 8);",
    "__ shldq(r10, r11, 16);",
    "__ shldq(r11, r12, 1);",
    "__ shldq(r11, r12, 2);",
    "__ shldq(r11, r12, 4);",
    "__ shldq(r11, r12, 8);",
    "__ shldq(r11, r12, 16);",
    "__ shldq(r12, r13, 1);",
    "__ shldq(r12, r13, 2);",
    "__ shldq(r12, r13, 4);",
    "__ shldq(r12, r13, 8);",
    "__ shldq(r12, r13, 16);",
    "__ shldq(r13, r14, 1);",
    "__ shldq(r13, r14, 2);",
    "__ shldq(r13, r14, 4);",
    "__ shldq(r13, r14, 8);",
    "__ shldq(r13, r14, 16);",
    "__ shldq(r14, r15, 1);",
    "__ shldq(r14, r15, 2);",
    "__ shldq(r14, r15, 4);",
    "__ shldq(r14, r15, 8);",
    "__ shldq(r14, r15, 16);",
    "__ shldq(r15, r16, 1);",
    "__ shldq(r15, r16, 2);",
    "__ shldq(r15, r16, 4);",
    "__ shldq(r15, r16, 8);",
    "__ shldq(r15, r16, 16);",
    "__ shldq(r16, r17, 1);",
    "__ shldq(r16, r17, 2);",
    "__ shldq(r16, r17, 4);",
    "__ shldq(r16, r17, 8);",
    "__ shldq(r16, r17, 16);",
    "__ shldq(r17, r18, 1);",
    "__ shldq(r17, r18, 2);",
    "__ shldq(r17, r18, 4);",
    "__ shldq(r17, r18, 8);",
    "__ shldq(r17, r18, 16);",
    "__ shldq(r18, r19, 1);",
    "__ shldq(r18, r19, 2);",
    "__ shldq(r18, r19, 4);",
    "__ shldq(r18, r19, 8);",
    "__ shldq(r18, r19, 16);",
    "__ shldq(r19, r20, 1);",
    "__ shldq(r19, r20, 2);",
    "__ shldq(r19, r20, 4);",
    "__ shldq(r19, r20, 8);",
    "__ shldq(r19, r20, 16);",
    "__ shldq(r20, r21, 1);",
    "__ shldq(r20, r21, 2);",
    "__ shldq(r20, r21, 4);",
    "__ shldq(r20, r21, 8);",
    "__ shldq(r20, r21, 16);",
    "__ shldq(r21, r22, 1);",
    "__ shldq(r21, r22, 2);",
    "__ shldq(r21, r22, 4);",
    "__ shldq(r21, r22, 8);",
    "__ shldq(r21, r22, 16);",
    "__ shldq(r22, r23, 1);",
    "__ shldq(r22, r23, 2);",
    "__ shldq(r22, r23, 4);",
    "__ shldq(r22, r23, 8);",
    "__ shldq(r22, r23, 16);",
    "__ shldq(r23, r24, 1);",
    "__ shldq(r23, r24, 2);",
    "__ shldq(r23, r24, 4);",
    "__ shldq(r23, r24, 8);",
    "__ shldq(r23, r24, 16);",
    "__ shldq(r24, r25, 1);",
    "__ shldq(r24, r25, 2);",
    "__ shldq(r24, r25, 4);",
    "__ shldq(r24, r25, 8);",
    "__ shldq(r24, r25, 16);",
    "__ shldq(r25, r26, 1);",
    "__ shldq(r25, r26, 2);",
    "__ shldq(r25, r26, 4);",
    "__ shldq(r25, r26, 8);",
    "__ shldq(r25, r26, 16);",
    "__ shldq(r26, r27, 1);",
    "__ shldq(r26, r27, 2);",
    "__ shldq(r26, r27, 4);",
    "__ shldq(r26, r27, 8);",
    "__ shldq(r26, r27, 16);",
    "__ shldq(r27, r28, 1);",
    "__ shldq(r27, r28, 2);",
    "__ shldq(r27, r28, 4);",
    "__ shldq(r27, r28, 8);",
    "__ shldq(r27, r28, 16);",
    "__ shldq(r28, r29, 1);",
    "__ shldq(r28, r29, 2);",
    "__ shldq(r28, r29, 4);",
    "__ shldq(r28, r29, 8);",
    "__ shldq(r28, r29, 16);",
    "__ shldq(r29, r30, 1);",
    "__ shldq(r29, r30, 2);",
    "__ shldq(r29, r30, 4);",
    "__ shldq(r29, r30, 8);",
    "__ shldq(r29, r30, 16);",
    "__ shldq(r30, r31, 1);",
    "__ shldq(r30, r31, 2);",
    "__ shldq(r30, r31, 4);",
    "__ shldq(r30, r31, 8);",
    "__ shldq(r30, r31, 16);",
    "__ shldq(r31, rcx, 1);",
    "__ shldq(r31, rcx, 2);",
    "__ shldq(r31, rcx, 4);",
    "__ shldq(r31, rcx, 8);",
    "__ shldq(r31, rcx, 16);",
    "__ shrdq(rcx, rdx, 1);",
    "__ shrdq(rcx, rdx, 2);",
    "__ shrdq(rcx, rdx, 4);",
    "__ shrdq(rcx, rdx, 8);",
    "__ shrdq(rcx, rdx, 16);",
    "__ shrdq(rdx, rbx, 1);",
    "__ shrdq(rdx, rbx, 2);",
    "__ shrdq(rdx, rbx, 4);",
    "__ shrdq(rdx, rbx, 8);",
    "__ shrdq(rdx, rbx, 16);",
    "__ shrdq(rbx, r8, 1);",
    "__ shrdq(rbx, r8, 2);",
    "__ shrdq(rbx, r8, 4);",
    "__ shrdq(rbx, r8, 8);",
    "__ shrdq(rbx, r8, 16);",
    "__ shrdq(r8, r9, 1);",
    "__ shrdq(r8, r9, 2);",
    "__ shrdq(r8, r9, 4);",
    "__ shrdq(r8, r9, 8);",
    "__ shrdq(r8, r9, 16);",
    "__ shrdq(r9, r10, 1);",
    "__ shrdq(r9, r10, 2);",
    "__ shrdq(r9, r10, 4);",
    "__ shrdq(r9, r10, 8);",
    "__ shrdq(r9, r10, 16);",
    "__ shrdq(r10, r11, 1);",
    "__ shrdq(r10, r11, 2);",
    "__ shrdq(r10, r11, 4);",
    "__ shrdq(r10, r11, 8);",
    "__ shrdq(r10, r11, 16);",
    "__ shrdq(r11, r12, 1);",
    "__ shrdq(r11, r12, 2);",
    "__ shrdq(r11, r12, 4);",
    "__ shrdq(r11, r12, 8);",
    "__ shrdq(r11, r12, 16);",
    "__ shrdq(r12, r13, 1);",
    "__ shrdq(r12, r13, 2);",
    "__ shrdq(r12, r13, 4);",
    "__ shrdq(r12, r13, 8);",
    "__ shrdq(r12, r13, 16);",
    "__ shrdq(r13, r14, 1);",
    "__ shrdq(r13, r14, 2);",
    "__ shrdq(r13, r14, 4);",
    "__ shrdq(r13, r14, 8);",
    "__ shrdq(r13, r14, 16);",
    "__ shrdq(r14, r15, 1);",
    "__ shrdq(r14, r15, 2);",
    "__ shrdq(r14, r15, 4);",
    "__ shrdq(r14, r15, 8);",
    "__ shrdq(r14, r15, 16);",
    "__ shrdq(r15, r16, 1);",
    "__ shrdq(r15, r16, 2);",
    "__ shrdq(r15, r16, 4);",
    "__ shrdq(r15, r16, 8);",
    "__ shrdq(r15, r16, 16);",
    "__ shrdq(r16, r17, 1);",
    "__ shrdq(r16, r17, 2);",
    "__ shrdq(r16, r17, 4);",
    "__ shrdq(r16, r17, 8);",
    "__ shrdq(r16, r17, 16);",
    "__ shrdq(r17, r18, 1);",
    "__ shrdq(r17, r18, 2);",
    "__ shrdq(r17, r18, 4);",
    "__ shrdq(r17, r18, 8);",
    "__ shrdq(r17, r18, 16);",
    "__ shrdq(r18, r19, 1);",
    "__ shrdq(r18, r19, 2);",
    "__ shrdq(r18, r19, 4);",
    "__ shrdq(r18, r19, 8);",
    "__ shrdq(r18, r19, 16);",
    "__ shrdq(r19, r20, 1);",
    "__ shrdq(r19, r20, 2);",
    "__ shrdq(r19, r20, 4);",
    "__ shrdq(r19, r20, 8);",
    "__ shrdq(r19, r20, 16);",
    "__ shrdq(r20, r21, 1);",
    "__ shrdq(r20, r21, 2);",
    "__ shrdq(r20, r21, 4);",
    "__ shrdq(r20, r21, 8);",
    "__ shrdq(r20, r21, 16);",
    "__ shrdq(r21, r22, 1);",
    "__ shrdq(r21, r22, 2);",
    "__ shrdq(r21, r22, 4);",
    "__ shrdq(r21, r22, 8);",
    "__ shrdq(r21, r22, 16);",
    "__ shrdq(r22, r23, 1);",
    "__ shrdq(r22, r23, 2);",
    "__ shrdq(r22, r23, 4);",
    "__ shrdq(r22, r23, 8);",
    "__ shrdq(r22, r23, 16);",
    "__ shrdq(r23, r24, 1);",
    "__ shrdq(r23, r24, 2);",
    "__ shrdq(r23, r24, 4);",
    "__ shrdq(r23, r24, 8);",
    "__ shrdq(r23, r24, 16);",
    "__ shrdq(r24, r25, 1);",
    "__ shrdq(r24, r25, 2);",
    "__ shrdq(r24, r25, 4);",
    "__ shrdq(r24, r25, 8);",
    "__ shrdq(r24, r25, 16);",
    "__ shrdq(r25, r26, 1);",
    "__ shrdq(r25, r26, 2);",
    "__ shrdq(r25, r26, 4);",
    "__ shrdq(r25, r26, 8);",
    "__ shrdq(r25, r26, 16);",
    "__ shrdq(r26, r27, 1);",
    "__ shrdq(r26, r27, 2);",
    "__ shrdq(r26, r27, 4);",
    "__ shrdq(r26, r27, 8);",
    "__ shrdq(r26, r27, 16);",
    "__ shrdq(r27, r28, 1);",
    "__ shrdq(r27, r28, 2);",
    "__ shrdq(r27, r28, 4);",
    "__ shrdq(r27, r28, 8);",
    "__ shrdq(r27, r28, 16);",
    "__ shrdq(r28, r29, 1);",
    "__ shrdq(r28, r29, 2);",
    "__ shrdq(r28, r29, 4);",
    "__ shrdq(r28, r29, 8);",
    "__ shrdq(r28, r29, 16);",
    "__ shrdq(r29, r30, 1);",
    "__ shrdq(r29, r30, 2);",
    "__ shrdq(r29, r30, 4);",
    "__ shrdq(r29, r30, 8);",
    "__ shrdq(r29, r30, 16);",
    "__ shrdq(r30, r31, 1);",
    "__ shrdq(r30, r31, 2);",
    "__ shrdq(r30, r31, 4);",
    "__ shrdq(r30, r31, 8);",
    "__ shrdq(r30, r31, 16);",
    "__ shrdq(r31, rcx, 1);",
    "__ shrdq(r31, rcx, 2);",
    "__ shrdq(r31, rcx, 4);",
    "__ shrdq(r31, rcx, 8);",
    "__ shrdq(r31, rcx, 16);",
    "__ orq_imm32 (rcx, 65536);",
    "__ orq_imm32 (rcx, 262144);",
    "__ orq_imm32 (rcx, 1048576);",
    "__ orq_imm32 (rcx, 4194304);",
    "__ orq_imm32 (rcx, 16777216);",
    "__ orq_imm32 (rcx, 67108864);",
    "__ orq_imm32 (rcx, 268435456);",
    "__ orq_imm32 (rcx, 1073741824);",
    "__ orq_imm32 (rdx, 65536);",
    "__ orq_imm32 (rdx, 262144);",
    "__ orq_imm32 (rdx, 1048576);",
    "__ orq_imm32 (rdx, 4194304);",
    "__ orq_imm32 (rdx, 16777216);",
    "__ orq_imm32 (rdx, 67108864);",
    "__ orq_imm32 (rdx, 268435456);",
    "__ orq_imm32 (rdx, 1073741824);",
    "__ orq_imm32 (rbx, 65536);",
    "__ orq_imm32 (rbx, 262144);",
    "__ orq_imm32 (rbx, 1048576);",
    "__ orq_imm32 (rbx, 4194304);",
    "__ orq_imm32 (rbx, 16777216);",
    "__ orq_imm32 (rbx, 67108864);",
    "__ orq_imm32 (rbx, 268435456);",
    "__ orq_imm32 (rbx, 1073741824);",
    "__ orq_imm32 (r8, 65536);",
    "__ orq_imm32 (r8, 262144);",
    "__ orq_imm32 (r8, 1048576);",
    "__ orq_imm32 (r8, 4194304);",
    "__ orq_imm32 (r8, 16777216);",
    "__ orq_imm32 (r8, 67108864);",
    "__ orq_imm32 (r8, 268435456);",
    "__ orq_imm32 (r8, 1073741824);",
    "__ orq_imm32 (r9, 65536);",
    "__ orq_imm32 (r9, 262144);",
    "__ orq_imm32 (r9, 1048576);",
    "__ orq_imm32 (r9, 4194304);",
    "__ orq_imm32 (r9, 16777216);",
    "__ orq_imm32 (r9, 67108864);",
    "__ orq_imm32 (r9, 268435456);",
    "__ orq_imm32 (r9, 1073741824);",
    "__ orq_imm32 (r10, 65536);",
    "__ orq_imm32 (r10, 262144);",
    "__ orq_imm32 (r10, 1048576);",
    "__ orq_imm32 (r10, 4194304);",
    "__ orq_imm32 (r10, 16777216);",
    "__ orq_imm32 (r10, 67108864);",
    "__ orq_imm32 (r10, 268435456);",
    "__ orq_imm32 (r10, 1073741824);",
    "__ orq_imm32 (r11, 65536);",
    "__ orq_imm32 (r11, 262144);",
    "__ orq_imm32 (r11, 1048576);",
    "__ orq_imm32 (r11, 4194304);",
    "__ orq_imm32 (r11, 16777216);",
    "__ orq_imm32 (r11, 67108864);",
    "__ orq_imm32 (r11, 268435456);",
    "__ orq_imm32 (r11, 1073741824);",
    "__ orq_imm32 (r12, 65536);",
    "__ orq_imm32 (r12, 262144);",
    "__ orq_imm32 (r12, 1048576);",
    "__ orq_imm32 (r12, 4194304);",
    "__ orq_imm32 (r12, 16777216);",
    "__ orq_imm32 (r12, 67108864);",
    "__ orq_imm32 (r12, 268435456);",
    "__ orq_imm32 (r12, 1073741824);",
    "__ orq_imm32 (r13, 65536);",
    "__ orq_imm32 (r13, 262144);",
    "__ orq_imm32 (r13, 1048576);",
    "__ orq_imm32 (r13, 4194304);",
    "__ orq_imm32 (r13, 16777216);",
    "__ orq_imm32 (r13, 67108864);",
    "__ orq_imm32 (r13, 268435456);",
    "__ orq_imm32 (r13, 1073741824);",
    "__ orq_imm32 (r14, 65536);",
    "__ orq_imm32 (r14, 262144);",
    "__ orq_imm32 (r14, 1048576);",
    "__ orq_imm32 (r14, 4194304);",
    "__ orq_imm32 (r14, 16777216);",
    "__ orq_imm32 (r14, 67108864);",
    "__ orq_imm32 (r14, 268435456);",
    "__ orq_imm32 (r14, 1073741824);",
    "__ orq_imm32 (r15, 65536);",
    "__ orq_imm32 (r15, 262144);",
    "__ orq_imm32 (r15, 1048576);",
    "__ orq_imm32 (r15, 4194304);",
    "__ orq_imm32 (r15, 16777216);",
    "__ orq_imm32 (r15, 67108864);",
    "__ orq_imm32 (r15, 268435456);",
    "__ orq_imm32 (r15, 1073741824);",
    "__ orq_imm32 (r16, 65536);",
    "__ orq_imm32 (r16, 262144);",
    "__ orq_imm32 (r16, 1048576);",
    "__ orq_imm32 (r16, 4194304);",
    "__ orq_imm32 (r16, 16777216);",
    "__ orq_imm32 (r16, 67108864);",
    "__ orq_imm32 (r16, 268435456);",
    "__ orq_imm32 (r16, 1073741824);",
    "__ orq_imm32 (r17, 65536);",
    "__ orq_imm32 (r17, 262144);",
    "__ orq_imm32 (r17, 1048576);",
    "__ orq_imm32 (r17, 4194304);",
    "__ orq_imm32 (r17, 16777216);",
    "__ orq_imm32 (r17, 67108864);",
    "__ orq_imm32 (r17, 268435456);",
    "__ orq_imm32 (r17, 1073741824);",
    "__ orq_imm32 (r18, 65536);",
    "__ orq_imm32 (r18, 262144);",
    "__ orq_imm32 (r18, 1048576);",
    "__ orq_imm32 (r18, 4194304);",
    "__ orq_imm32 (r18, 16777216);",
    "__ orq_imm32 (r18, 67108864);",
    "__ orq_imm32 (r18, 268435456);",
    "__ orq_imm32 (r18, 1073741824);",
    "__ orq_imm32 (r19, 65536);",
    "__ orq_imm32 (r19, 262144);",
    "__ orq_imm32 (r19, 1048576);",
    "__ orq_imm32 (r19, 4194304);",
    "__ orq_imm32 (r19, 16777216);",
    "__ orq_imm32 (r19, 67108864);",
    "__ orq_imm32 (r19, 268435456);",
    "__ orq_imm32 (r19, 1073741824);",
    "__ orq_imm32 (r20, 65536);",
    "__ orq_imm32 (r20, 262144);",
    "__ orq_imm32 (r20, 1048576);",
    "__ orq_imm32 (r20, 4194304);",
    "__ orq_imm32 (r20, 16777216);",
    "__ orq_imm32 (r20, 67108864);",
    "__ orq_imm32 (r20, 268435456);",
    "__ orq_imm32 (r20, 1073741824);",
    "__ orq_imm32 (r21, 65536);",
    "__ orq_imm32 (r21, 262144);",
    "__ orq_imm32 (r21, 1048576);",
    "__ orq_imm32 (r21, 4194304);",
    "__ orq_imm32 (r21, 16777216);",
    "__ orq_imm32 (r21, 67108864);",
    "__ orq_imm32 (r21, 268435456);",
    "__ orq_imm32 (r21, 1073741824);",
    "__ orq_imm32 (r22, 65536);",
    "__ orq_imm32 (r22, 262144);",
    "__ orq_imm32 (r22, 1048576);",
    "__ orq_imm32 (r22, 4194304);",
    "__ orq_imm32 (r22, 16777216);",
    "__ orq_imm32 (r22, 67108864);",
    "__ orq_imm32 (r22, 268435456);",
    "__ orq_imm32 (r22, 1073741824);",
    "__ orq_imm32 (r23, 65536);",
    "__ orq_imm32 (r23, 262144);",
    "__ orq_imm32 (r23, 1048576);",
    "__ orq_imm32 (r23, 4194304);",
    "__ orq_imm32 (r23, 16777216);",
    "__ orq_imm32 (r23, 67108864);",
    "__ orq_imm32 (r23, 268435456);",
    "__ orq_imm32 (r23, 1073741824);",
    "__ orq_imm32 (r24, 65536);",
    "__ orq_imm32 (r24, 262144);",
    "__ orq_imm32 (r24, 1048576);",
    "__ orq_imm32 (r24, 4194304);",
    "__ orq_imm32 (r24, 16777216);",
    "__ orq_imm32 (r24, 67108864);",
    "__ orq_imm32 (r24, 268435456);",
    "__ orq_imm32 (r24, 1073741824);",
    "__ orq_imm32 (r25, 65536);",
    "__ orq_imm32 (r25, 262144);",
    "__ orq_imm32 (r25, 1048576);",
    "__ orq_imm32 (r25, 4194304);",
    "__ orq_imm32 (r25, 16777216);",
    "__ orq_imm32 (r25, 67108864);",
    "__ orq_imm32 (r25, 268435456);",
    "__ orq_imm32 (r25, 1073741824);",
    "__ orq_imm32 (r26, 65536);",
    "__ orq_imm32 (r26, 262144);",
    "__ orq_imm32 (r26, 1048576);",
    "__ orq_imm32 (r26, 4194304);",
    "__ orq_imm32 (r26, 16777216);",
    "__ orq_imm32 (r26, 67108864);",
    "__ orq_imm32 (r26, 268435456);",
    "__ orq_imm32 (r26, 1073741824);",
    "__ orq_imm32 (r27, 65536);",
    "__ orq_imm32 (r27, 262144);",
    "__ orq_imm32 (r27, 1048576);",
    "__ orq_imm32 (r27, 4194304);",
    "__ orq_imm32 (r27, 16777216);",
    "__ orq_imm32 (r27, 67108864);",
    "__ orq_imm32 (r27, 268435456);",
    "__ orq_imm32 (r27, 1073741824);",
    "__ orq_imm32 (r28, 65536);",
    "__ orq_imm32 (r28, 262144);",
    "__ orq_imm32 (r28, 1048576);",
    "__ orq_imm32 (r28, 4194304);",
    "__ orq_imm32 (r28, 16777216);",
    "__ orq_imm32 (r28, 67108864);",
    "__ orq_imm32 (r28, 268435456);",
    "__ orq_imm32 (r28, 1073741824);",
    "__ orq_imm32 (r29, 65536);",
    "__ orq_imm32 (r29, 262144);",
    "__ orq_imm32 (r29, 1048576);",
    "__ orq_imm32 (r29, 4194304);",
    "__ orq_imm32 (r29, 16777216);",
    "__ orq_imm32 (r29, 67108864);",
    "__ orq_imm32 (r29, 268435456);",
    "__ orq_imm32 (r29, 1073741824);",
    "__ orq_imm32 (r30, 65536);",
    "__ orq_imm32 (r30, 262144);",
    "__ orq_imm32 (r30, 1048576);",
    "__ orq_imm32 (r30, 4194304);",
    "__ orq_imm32 (r30, 16777216);",
    "__ orq_imm32 (r30, 67108864);",
    "__ orq_imm32 (r30, 268435456);",
    "__ orq_imm32 (r30, 1073741824);",
    "__ orq_imm32 (r31, 65536);",
    "__ orq_imm32 (r31, 262144);",
    "__ orq_imm32 (r31, 1048576);",
    "__ orq_imm32 (r31, 4194304);",
    "__ orq_imm32 (r31, 16777216);",
    "__ orq_imm32 (r31, 67108864);",
    "__ orq_imm32 (r31, 268435456);",
    "__ orq_imm32 (r31, 1073741824);",
    "__ subq_imm32 (rcx, 65536);",
    "__ subq_imm32 (rcx, 262144);",
    "__ subq_imm32 (rcx, 1048576);",
    "__ subq_imm32 (rcx, 4194304);",
    "__ subq_imm32 (rcx, 16777216);",
    "__ subq_imm32 (rcx, 67108864);",
    "__ subq_imm32 (rcx, 268435456);",
    "__ subq_imm32 (rcx, 1073741824);",
    "__ subq_imm32 (rdx, 65536);",
    "__ subq_imm32 (rdx, 262144);",
    "__ subq_imm32 (rdx, 1048576);",
    "__ subq_imm32 (rdx, 4194304);",
    "__ subq_imm32 (rdx, 16777216);",
    "__ subq_imm32 (rdx, 67108864);",
    "__ subq_imm32 (rdx, 268435456);",
    "__ subq_imm32 (rdx, 1073741824);",
    "__ subq_imm32 (rbx, 65536);",
    "__ subq_imm32 (rbx, 262144);",
    "__ subq_imm32 (rbx, 1048576);",
    "__ subq_imm32 (rbx, 4194304);",
    "__ subq_imm32 (rbx, 16777216);",
    "__ subq_imm32 (rbx, 67108864);",
    "__ subq_imm32 (rbx, 268435456);",
    "__ subq_imm32 (rbx, 1073741824);",
    "__ subq_imm32 (r8, 65536);",
    "__ subq_imm32 (r8, 262144);",
    "__ subq_imm32 (r8, 1048576);",
    "__ subq_imm32 (r8, 4194304);",
    "__ subq_imm32 (r8, 16777216);",
    "__ subq_imm32 (r8, 67108864);",
    "__ subq_imm32 (r8, 268435456);",
    "__ subq_imm32 (r8, 1073741824);",
    "__ subq_imm32 (r9, 65536);",
    "__ subq_imm32 (r9, 262144);",
    "__ subq_imm32 (r9, 1048576);",
    "__ subq_imm32 (r9, 4194304);",
    "__ subq_imm32 (r9, 16777216);",
    "__ subq_imm32 (r9, 67108864);",
    "__ subq_imm32 (r9, 268435456);",
    "__ subq_imm32 (r9, 1073741824);",
    "__ subq_imm32 (r10, 65536);",
    "__ subq_imm32 (r10, 262144);",
    "__ subq_imm32 (r10, 1048576);",
    "__ subq_imm32 (r10, 4194304);",
    "__ subq_imm32 (r10, 16777216);",
    "__ subq_imm32 (r10, 67108864);",
    "__ subq_imm32 (r10, 268435456);",
    "__ subq_imm32 (r10, 1073741824);",
    "__ subq_imm32 (r11, 65536);",
    "__ subq_imm32 (r11, 262144);",
    "__ subq_imm32 (r11, 1048576);",
    "__ subq_imm32 (r11, 4194304);",
    "__ subq_imm32 (r11, 16777216);",
    "__ subq_imm32 (r11, 67108864);",
    "__ subq_imm32 (r11, 268435456);",
    "__ subq_imm32 (r11, 1073741824);",
    "__ subq_imm32 (r12, 65536);",
    "__ subq_imm32 (r12, 262144);",
    "__ subq_imm32 (r12, 1048576);",
    "__ subq_imm32 (r12, 4194304);",
    "__ subq_imm32 (r12, 16777216);",
    "__ subq_imm32 (r12, 67108864);",
    "__ subq_imm32 (r12, 268435456);",
    "__ subq_imm32 (r12, 1073741824);",
    "__ subq_imm32 (r13, 65536);",
    "__ subq_imm32 (r13, 262144);",
    "__ subq_imm32 (r13, 1048576);",
    "__ subq_imm32 (r13, 4194304);",
    "__ subq_imm32 (r13, 16777216);",
    "__ subq_imm32 (r13, 67108864);",
    "__ subq_imm32 (r13, 268435456);",
    "__ subq_imm32 (r13, 1073741824);",
    "__ subq_imm32 (r14, 65536);",
    "__ subq_imm32 (r14, 262144);",
    "__ subq_imm32 (r14, 1048576);",
    "__ subq_imm32 (r14, 4194304);",
    "__ subq_imm32 (r14, 16777216);",
    "__ subq_imm32 (r14, 67108864);",
    "__ subq_imm32 (r14, 268435456);",
    "__ subq_imm32 (r14, 1073741824);",
    "__ subq_imm32 (r15, 65536);",
    "__ subq_imm32 (r15, 262144);",
    "__ subq_imm32 (r15, 1048576);",
    "__ subq_imm32 (r15, 4194304);",
    "__ subq_imm32 (r15, 16777216);",
    "__ subq_imm32 (r15, 67108864);",
    "__ subq_imm32 (r15, 268435456);",
    "__ subq_imm32 (r15, 1073741824);",
    "__ subq_imm32 (r16, 65536);",
    "__ subq_imm32 (r16, 262144);",
    "__ subq_imm32 (r16, 1048576);",
    "__ subq_imm32 (r16, 4194304);",
    "__ subq_imm32 (r16, 16777216);",
    "__ subq_imm32 (r16, 67108864);",
    "__ subq_imm32 (r16, 268435456);",
    "__ subq_imm32 (r16, 1073741824);",
    "__ subq_imm32 (r17, 65536);",
    "__ subq_imm32 (r17, 262144);",
    "__ subq_imm32 (r17, 1048576);",
    "__ subq_imm32 (r17, 4194304);",
    "__ subq_imm32 (r17, 16777216);",
    "__ subq_imm32 (r17, 67108864);",
    "__ subq_imm32 (r17, 268435456);",
    "__ subq_imm32 (r17, 1073741824);",
    "__ subq_imm32 (r18, 65536);",
    "__ subq_imm32 (r18, 262144);",
    "__ subq_imm32 (r18, 1048576);",
    "__ subq_imm32 (r18, 4194304);",
    "__ subq_imm32 (r18, 16777216);",
    "__ subq_imm32 (r18, 67108864);",
    "__ subq_imm32 (r18, 268435456);",
    "__ subq_imm32 (r18, 1073741824);",
    "__ subq_imm32 (r19, 65536);",
    "__ subq_imm32 (r19, 262144);",
    "__ subq_imm32 (r19, 1048576);",
    "__ subq_imm32 (r19, 4194304);",
    "__ subq_imm32 (r19, 16777216);",
    "__ subq_imm32 (r19, 67108864);",
    "__ subq_imm32 (r19, 268435456);",
    "__ subq_imm32 (r19, 1073741824);",
    "__ subq_imm32 (r20, 65536);",
    "__ subq_imm32 (r20, 262144);",
    "__ subq_imm32 (r20, 1048576);",
    "__ subq_imm32 (r20, 4194304);",
    "__ subq_imm32 (r20, 16777216);",
    "__ subq_imm32 (r20, 67108864);",
    "__ subq_imm32 (r20, 268435456);",
    "__ subq_imm32 (r20, 1073741824);",
    "__ subq_imm32 (r21, 65536);",
    "__ subq_imm32 (r21, 262144);",
    "__ subq_imm32 (r21, 1048576);",
    "__ subq_imm32 (r21, 4194304);",
    "__ subq_imm32 (r21, 16777216);",
    "__ subq_imm32 (r21, 67108864);",
    "__ subq_imm32 (r21, 268435456);",
    "__ subq_imm32 (r21, 1073741824);",
    "__ subq_imm32 (r22, 65536);",
    "__ subq_imm32 (r22, 262144);",
    "__ subq_imm32 (r22, 1048576);",
    "__ subq_imm32 (r22, 4194304);",
    "__ subq_imm32 (r22, 16777216);",
    "__ subq_imm32 (r22, 67108864);",
    "__ subq_imm32 (r22, 268435456);",
    "__ subq_imm32 (r22, 1073741824);",
    "__ subq_imm32 (r23, 65536);",
    "__ subq_imm32 (r23, 262144);",
    "__ subq_imm32 (r23, 1048576);",
    "__ subq_imm32 (r23, 4194304);",
    "__ subq_imm32 (r23, 16777216);",
    "__ subq_imm32 (r23, 67108864);",
    "__ subq_imm32 (r23, 268435456);",
    "__ subq_imm32 (r23, 1073741824);",
    "__ subq_imm32 (r24, 65536);",
    "__ subq_imm32 (r24, 262144);",
    "__ subq_imm32 (r24, 1048576);",
    "__ subq_imm32 (r24, 4194304);",
    "__ subq_imm32 (r24, 16777216);",
    "__ subq_imm32 (r24, 67108864);",
    "__ subq_imm32 (r24, 268435456);",
    "__ subq_imm32 (r24, 1073741824);",
    "__ subq_imm32 (r25, 65536);",
    "__ subq_imm32 (r25, 262144);",
    "__ subq_imm32 (r25, 1048576);",
    "__ subq_imm32 (r25, 4194304);",
    "__ subq_imm32 (r25, 16777216);",
    "__ subq_imm32 (r25, 67108864);",
    "__ subq_imm32 (r25, 268435456);",
    "__ subq_imm32 (r25, 1073741824);",
    "__ subq_imm32 (r26, 65536);",
    "__ subq_imm32 (r26, 262144);",
    "__ subq_imm32 (r26, 1048576);",
    "__ subq_imm32 (r26, 4194304);",
    "__ subq_imm32 (r26, 16777216);",
    "__ subq_imm32 (r26, 67108864);",
    "__ subq_imm32 (r26, 268435456);",
    "__ subq_imm32 (r26, 1073741824);",
    "__ subq_imm32 (r27, 65536);",
    "__ subq_imm32 (r27, 262144);",
    "__ subq_imm32 (r27, 1048576);",
    "__ subq_imm32 (r27, 4194304);",
    "__ subq_imm32 (r27, 16777216);",
    "__ subq_imm32 (r27, 67108864);",
    "__ subq_imm32 (r27, 268435456);",
    "__ subq_imm32 (r27, 1073741824);",
    "__ subq_imm32 (r28, 65536);",
    "__ subq_imm32 (r28, 262144);",
    "__ subq_imm32 (r28, 1048576);",
    "__ subq_imm32 (r28, 4194304);",
    "__ subq_imm32 (r28, 16777216);",
    "__ subq_imm32 (r28, 67108864);",
    "__ subq_imm32 (r28, 268435456);",
    "__ subq_imm32 (r28, 1073741824);",
    "__ subq_imm32 (r29, 65536);",
    "__ subq_imm32 (r29, 262144);",
    "__ subq_imm32 (r29, 1048576);",
    "__ subq_imm32 (r29, 4194304);",
    "__ subq_imm32 (r29, 16777216);",
    "__ subq_imm32 (r29, 67108864);",
    "__ subq_imm32 (r29, 268435456);",
    "__ subq_imm32 (r29, 1073741824);",
    "__ subq_imm32 (r30, 65536);",
    "__ subq_imm32 (r30, 262144);",
    "__ subq_imm32 (r30, 1048576);",
    "__ subq_imm32 (r30, 4194304);",
    "__ subq_imm32 (r30, 16777216);",
    "__ subq_imm32 (r30, 67108864);",
    "__ subq_imm32 (r30, 268435456);",
    "__ subq_imm32 (r30, 1073741824);",
    "__ subq_imm32 (r31, 65536);",
    "__ subq_imm32 (r31, 262144);",
    "__ subq_imm32 (r31, 1048576);",
    "__ subq_imm32 (r31, 4194304);",
    "__ subq_imm32 (r31, 16777216);",
    "__ subq_imm32 (r31, 67108864);",
    "__ subq_imm32 (r31, 268435456);",
    "__ subq_imm32 (r31, 1073741824);",
    "__ pop2 (rdx, rcx);",
    "__ pop2 (rbx, rdx);",
    "__ pop2 (r8, rbx);",
    "__ pop2 (r9, r8);",
    "__ pop2 (r10, r9);",
    "__ pop2 (r11, r10);",
    "__ pop2 (r12, r11);",
    "__ pop2 (r13, r12);",
    "__ pop2 (r14, r13);",
    "__ pop2 (r15, r14);",
    "__ pop2 (r16, r15);",
    "__ pop2 (r17, r16);",
    "__ pop2 (r18, r17);",
    "__ pop2 (r19, r18);",
    "__ pop2 (r20, r19);",
    "__ pop2 (r21, r20);",
    "__ pop2 (r22, r21);",
    "__ pop2 (r23, r22);",
    "__ pop2 (r24, r23);",
    "__ pop2 (r25, r24);",
    "__ pop2 (r26, r25);",
    "__ pop2 (r27, r26);",
    "__ pop2 (r28, r27);",
    "__ pop2 (r29, r28);",
    "__ pop2 (r30, r29);",
    "__ pop2 (r31, r30);",
    "__ pop2 (rcx, r31);",
    "__ pop2p (rdx, rcx);",
    "__ pop2p (rbx, rdx);",
    "__ pop2p (r8, rbx);",
    "__ pop2p (r9, r8);",
    "__ pop2p (r10, r9);",
    "__ pop2p (r11, r10);",
    "__ pop2p (r12, r11);",
    "__ pop2p (r13, r12);",
    "__ pop2p (r14, r13);",
    "__ pop2p (r15, r14);",
    "__ pop2p (r16, r15);",
    "__ pop2p (r17, r16);",
    "__ pop2p (r18, r17);",
    "__ pop2p (r19, r18);",
    "__ pop2p (r20, r19);",
    "__ pop2p (r21, r20);",
    "__ pop2p (r22, r21);",
    "__ pop2p (r23, r22);",
    "__ pop2p (r24, r23);",
    "__ pop2p (r25, r24);",
    "__ pop2p (r26, r25);",
    "__ pop2p (r27, r26);",
    "__ pop2p (r28, r27);",
    "__ pop2p (r29, r28);",
    "__ pop2p (r30, r29);",
    "__ pop2p (r31, r30);",
    "__ pop2p (rcx, r31);",
    "__ push2 (rdx, rcx);",
    "__ push2 (rbx, rdx);",
    "__ push2 (r8, rbx);",
    "__ push2 (r9, r8);",
    "__ push2 (r10, r9);",
    "__ push2 (r11, r10);",
    "__ push2 (r12, r11);",
    "__ push2 (r13, r12);",
    "__ push2 (r14, r13);",
    "__ push2 (r15, r14);",
    "__ push2 (r16, r15);",
    "__ push2 (r17, r16);",
    "__ push2 (r18, r17);",
    "__ push2 (r19, r18);",
    "__ push2 (r20, r19);",
    "__ push2 (r21, r20);",
    "__ push2 (r22, r21);",
    "__ push2 (r23, r22);",
    "__ push2 (r24, r23);",
    "__ push2 (r25, r24);",
    "__ push2 (r26, r25);",
    "__ push2 (r27, r26);",
    "__ push2 (r28, r27);",
    "__ push2 (r29, r28);",
    "__ push2 (r30, r29);",
    "__ push2 (r31, r30);",
    "__ push2 (rcx, r31);",
    "__ push2p (rdx, rcx);",
    "__ push2p (rbx, rdx);",
    "__ push2p (r8, rbx);",
    "__ push2p (r9, r8);",
    "__ push2p (r10, r9);",
    "__ push2p (r11, r10);",
    "__ push2p (r12, r11);",
    "__ push2p (r13, r12);",
    "__ push2p (r14, r13);",
    "__ push2p (r15, r14);",
    "__ push2p (r16, r15);",
    "__ push2p (r17, r16);",
    "__ push2p (r18, r17);",
    "__ push2p (r19, r18);",
    "__ push2p (r20, r19);",
    "__ push2p (r21, r20);",
    "__ push2p (r22, r21);",
    "__ push2p (r23, r22);",
    "__ push2p (r24, r23);",
    "__ push2p (r25, r24);",
    "__ push2p (r26, r25);",
    "__ push2p (r27, r26);",
    "__ push2p (r28, r27);",
    "__ push2p (r29, r28);",
    "__ push2p (r30, r29);",
    "__ push2p (r31, r30);",
    "__ push2p (rcx, r31);",
#endif // _LP64
  };
// END  Generated code -- do not edit
