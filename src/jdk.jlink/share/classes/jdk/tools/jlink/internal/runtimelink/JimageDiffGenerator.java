/*
 * Copyright (c) 2024, Red Hat, Inc.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package jdk.tools.jlink.internal.runtimelink;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generates a delta between packaged modules (as an ImageResource) and an
 * optimized jimage (lib/modules) as an ImageResource. The result can be
 * serialized to a file using {@link ResourceDiff}.
 */
public class JimageDiffGenerator {

    /**
     * A resource used for linking jimages. Either packaged modules or
     * an existing JDK jimage. The canonical source, the packaged modules,
     * are being used to devise a delta to a JDK jimage which can then be
     * also used for jlink input together *with* that delta.
     */
    @SuppressWarnings("try")
    public interface ImageResource extends AutoCloseable {
        public List<String> getEntries();
        public byte[] getResourceBytes(String name);
    }

    public List<ResourceDiff> generateDiff(ImageResource baseImg, ImageResource optImage) throws Exception {
        List<String> baseResources;
        Set<String> optResSet = new HashSet<>();
        List<ResourceDiff> diffs = new ArrayList<>();
        try (baseImg;
             optImage) {
            optResSet.addAll(optImage.getEntries());
            baseResources = baseImg.getEntries();
            for (String item: baseResources) {
                byte[] baseBytes = baseImg.getResourceBytes(item);
                // First check that every item in the base image exist in
                // the optimized image as well. If it does not, it's a removed
                // item in the optimized image.
                if (!optResSet.remove(item)) {
                    // keep track of original bytes for removed item in the
                    // optimized image, since we need to restore them for the
                    // runtime image link
                    ResourceDiff.Builder builder = new ResourceDiff.Builder();
                    ResourceDiff diff = builder.setKind(ResourceDiff.Kind.REMOVED)
                           .setName(item)
                           .setResourceBytes(baseBytes)
                           .build();
                    diffs.add(diff);
                    continue;
                }
                // Verify resource bytes are equal if present in both images
                boolean contentEquals = Arrays.equals(baseBytes, optImage.getResourceBytes(item));
                if (!contentEquals) {
                    // keep track of original bytes (non-optimized)
                    ResourceDiff.Builder builder = new ResourceDiff.Builder();
                    ResourceDiff diff = builder.setKind(ResourceDiff.Kind.MODIFIED)
                        .setName(item)
                        .setResourceBytes(baseBytes)
                        .build();
                    diffs.add(diff);
                }
            }
        }
        // What's now left in optResSet are the resources only present in the
        // optimized image (generated by some plugins; not present in jmods)
        for (String e: optResSet) {
            ResourceDiff.Builder builder = new ResourceDiff.Builder();
            ResourceDiff diff = builder.setKind(ResourceDiff.Kind.ADDED)
                                    .setName(e)
                                    .build();
            diffs.add(diff);
        }
        return diffs;
    }

}
